{
  "aws": [
    {
      "PolicyName": "AdministratorAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "PowerUserAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "NotAction": [
              "iam:*",
              "organizations:*",
              "account:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "account:GetAccountInformation",
              "account:GetPrimaryEmail",
              "account:ListRegions",
              "iam:CreateServiceLinkedRole",
              "iam:DeleteServiceLinkedRole",
              "iam:ListRoles",
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadOnlyActions",
            "Effect": "Allow",
            "Action": [
              "a4b:Get*",
              "a4b:List*",
              "a4b:Search*",
              "access-analyzer:GetAccessPreview",
              "access-analyzer:GetAnalyzedResource",
              "access-analyzer:GetAnalyzer",
              "access-analyzer:GetArchiveRule",
              "access-analyzer:GetFinding",
              "access-analyzer:GetGeneratedPolicy",
              "access-analyzer:ListAccessPreviewFindings",
              "access-analyzer:ListAccessPreviews",
              "access-analyzer:ListAnalyzedResources",
              "access-analyzer:ListAnalyzers",
              "access-analyzer:ListArchiveRules",
              "access-analyzer:ListFindings",
              "access-analyzer:ListPolicyGenerations",
              "access-analyzer:ListTagsForResource",
              "access-analyzer:ValidatePolicy",
              "account:GetAccountInformation",
              "account:GetAlternateContact",
              "account:GetChallengeQuestions",
              "account:GetContactInformation",
              "account:GetPrimaryEmail",
              "account:GetRegionOptStatus",
              "account:ListRegions",
              "acm-pca:Describe*",
              "acm-pca:Get*",
              "acm-pca:List*",
              "acm:Describe*",
              "acm:Get*",
              "acm:List*",
              "airflow:ListEnvironments",
              "airflow:ListTagsForResource",
              "amplify:GetApp",
              "amplify:GetBranch",
              "amplify:GetDomainAssociation",
              "amplify:GetJob",
              "amplify:ListApps",
              "amplify:ListBranches",
              "amplify:ListDomainAssociations",
              "amplify:ListJobs",
              "aoss:BatchGetCollection",
              "aoss:BatchGetLifecyclePolicy",
              "aoss:BatchGetVpcEndpoint",
              "aoss:GetAccessPolicy",
              "aoss:GetAccountSettings",
              "aoss:GetPoliciesStats",
              "aoss:GetSecurityConfig",
              "aoss:GetSecurityPolicy",
              "aoss:ListAccessPolicies",
              "aoss:ListCollections",
              "aoss:ListLifecyclePolicies",
              "aoss:ListSecurityConfigs",
              "aoss:ListSecurityPolicies",
              "aoss:ListTagsForResource",
              "aoss:ListVpcEndpoints",
              "apigateway:GET",
              "appconfig:GetApplication",
              "appconfig:GetConfiguration",
              "appconfig:GetConfigurationProfile",
              "appconfig:GetDeployment",
              "appconfig:GetDeploymentStrategy",
              "appconfig:GetEnvironment",
              "appconfig:GetHostedConfigurationVersion",
              "appconfig:ListApplications",
              "appconfig:ListConfigurationProfiles",
              "appconfig:ListDeployments",
              "appconfig:ListDeploymentStrategies",
              "appconfig:ListEnvironments",
              "appconfig:ListHostedConfigurationVersions",
              "appconfig:ListTagsForResource",
              "appfabric:GetAppAuthorization",
              "appfabric:GetAppBundle",
              "appfabric:GetIngestion",
              "appfabric:GetIngestionDestination",
              "appfabric:ListAppAuthorizations",
              "appfabric:ListAppBundles",
              "appfabric:ListIngestionDestinations",
              "appfabric:ListIngestions",
              "appfabric:ListTagsForResource",
              "appflow:DescribeConnector",
              "appflow:DescribeConnectorEntity",
              "appflow:DescribeConnectorFields",
              "appflow:DescribeConnectorProfiles",
              "appflow:DescribeConnectors",
              "appflow:DescribeFlow",
              "appflow:DescribeFlowExecution",
              "appflow:DescribeFlowExecutionRecords",
              "appflow:DescribeFlows",
              "appflow:ListConnectorEntities",
              "appflow:ListConnectorFields",
              "appflow:ListConnectors",
              "appflow:ListFlows",
              "appflow:ListTagsForResource",
              "application-autoscaling:Describe*",
              "application-autoscaling:ListTagsForResource",
              "application-signals:BatchGetServiceLevelObjectiveBudgetReport",
              "application-signals:GetService",
              "application-signals:GetServiceLevelObjective",
              "application-signals:ListServices",
              "application-signals:ListServiceDependencies",
              "application-signals:ListServiceDependents",
              "application-signals:ListServiceLevelObjectives",
              "application-signals:ListServiceOperations",
              "application-signals:ListTagsForResource",
              "applicationinsights:Describe*",
              "applicationinsights:List*",
              "appmesh:Describe*",
              "appmesh:List*",
              "apprunner:DescribeAutoScalingConfiguration",
              "apprunner:DescribeCustomDomains",
              "apprunner:DescribeObservabilityConfiguration",
              "apprunner:DescribeService",
              "apprunner:DescribeVpcConnector",
              "apprunner:DescribeVpcIngressConnection",
              "apprunner:DescribeWebAclForService",
              "apprunner:ListAssociatedServicesForWebAcl",
              "apprunner:ListAutoScalingConfigurations",
              "apprunner:ListConnections",
              "apprunner:ListObservabilityConfigurations",
              "apprunner:ListOperations",
              "apprunner:ListServices",
              "apprunner:ListServicesForAutoScalingConfiguration",
              "apprunner:ListTagsForResource",
              "apprunner:ListVpcConnectors",
              "apprunner:ListVpcIngressConnections",
              "appstream:Describe*",
              "appstream:List*",
              "appstudio:GetAccountStatus",
              "appstudio:GetEnablementJobStatus",
              "appsync:Get*",
              "appsync:List*",
              "aps:DescribeAlertManagerDefinition",
              "aps:DescribeLoggingConfiguration",
              "aps:DescribeRuleGroupsNamespace",
              "aps:DescribeScraper",
              "aps:DescribeWorkspace",
              "aps:GetAlertManagerSilence",
              "aps:GetAlertManagerStatus",
              "aps:GetDefaultScraperConfiguration",
              "aps:GetLabels",
              "aps:GetMetricMetadata",
              "aps:GetSeries",
              "aps:ListAlertManagerAlertGroups",
              "aps:ListAlertManagerAlerts",
              "aps:ListAlertManagerReceivers",
              "aps:ListAlertManagerSilences",
              "aps:ListAlerts",
              "aps:ListRuleGroupsNamespaces",
              "aps:ListRules",
              "aps:ListScrapers",
              "aps:ListTagsForResource",
              "aps:ListWorkspaces",
              "aps:QueryMetrics",
              "arc-zonal-shift:GetManagedResource",
              "arc-zonal-shift:ListAutoshifts",
              "arc-zonal-shift:ListManagedResources",
              "arc-zonal-shift:ListZonalShifts",
              "artifact:GetReport",
              "artifact:GetReportMetadata",
              "artifact:GetTermForReport",
              "artifact:ListReports",
              "athena:Batch*",
              "athena:Get*",
              "athena:List*",
              "auditmanager:GetAccountStatus",
              "auditmanager:GetAssessment",
              "auditmanager:GetAssessmentFramework",
              "auditmanager:GetAssessmentReportUrl",
              "auditmanager:GetChangeLogs",
              "auditmanager:GetControl",
              "auditmanager:GetDelegations",
              "auditmanager:GetEvidence",
              "auditmanager:GetEvidenceByEvidenceFolder",
              "auditmanager:GetEvidenceFolder",
              "auditmanager:GetEvidenceFoldersByAssessment",
              "auditmanager:GetEvidenceFoldersByAssessmentControl",
              "auditmanager:GetOrganizationAdminAccount",
              "auditmanager:GetServicesInScope",
              "auditmanager:GetSettings",
              "auditmanager:ListAssessmentFrameworks",
              "auditmanager:ListAssessmentReports",
              "auditmanager:ListAssessments",
              "auditmanager:ListControls",
              "auditmanager:ListKeywordsForDataSource",
              "auditmanager:ListNotifications",
              "auditmanager:ListTagsForResource",
              "auditmanager:ValidateAssessmentReportIntegrity",
              "autoscaling-plans:Describe*",
              "autoscaling-plans:GetScalingPlanResourceForecastData",
              "autoscaling:Describe*",
              "autoscaling:GetPredictiveScalingForecast",
              "aws-portal:View*",
              "backup-gateway:GetBandwidthRateLimitSchedule",
              "backup-gateway:GetGateway",
              "backup-gateway:GetHypervisor",
              "backup-gateway:GetHypervisorPropertyMappings",
              "backup-gateway:GetVirtualMachine",
              "backup-gateway:ListGateways",
              "backup-gateway:ListHypervisors",
              "backup-gateway:ListTagsForResource",
              "backup-gateway:ListVirtualMachines",
              "backup:Describe*",
              "backup:Get*",
              "backup:List*",
              "batch:Describe*",
              "batch:List*",
              "bedrock:GetAgent",
              "bedrock:GetAgentActionGroup",
              "bedrock:GetAgentAlias",
              "bedrock:GetAgentKnowledgeBase",
              "bedrock:GetAgentVersion",
              "bedrock:GetCustomModel",
              "bedrock:GetDataSource",
              "bedrock:GetFoundationModel",
              "bedrock:GetFoundationModelAvailability",
              "bedrock:GetIngestionJob",
              "bedrock:GetKnowledgeBase",
              "bedrock:GetModelCustomizationJob",
              "bedrock:GetModelInvocationLoggingConfiguration",
              "bedrock:GetProvisionedModelThroughput",
              "bedrock:GetUseCaseForModelAccess",
              "bedrock:ListAgentActionGroups",
              "bedrock:ListAgentAliases",
              "bedrock:ListAgentKnowledgeBases",
              "bedrock:ListAgents",
              "bedrock:ListAgentVersions",
              "bedrock:ListCustomModels",
              "bedrock:ListDataSources",
              "bedrock:ListFoundationModelAgreementOffers",
              "bedrock:ListFoundationModels",
              "bedrock:ListIngestionJobs",
              "bedrock:ListKnowledgeBases",
              "bedrock:ListModelCustomizationJobs",
              "bedrock:ListProvisionedModelThroughputs",
              "billing:GetBillingData",
              "billing:GetBillingDetails",
              "billing:GetBillingNotifications",
              "billing:GetBillingPreferences",
              "billing:GetContractInformation",
              "billing:GetCredits",
              "billing:GetIAMAccessPreference",
              "billing:GetSellerOfRecord",
              "billing:ListBillingViews",
              "billingconductor:GetBillingGroupCostReport",
              "billingconductor:ListAccountAssociations",
              "billingconductor:ListBillingGroupCostReports",
              "billingconductor:ListBillingGroups",
              "billingconductor:ListCustomLineItems",
              "billingconductor:ListCustomLineItemVersions",
              "billingconductor:ListPricingPlans",
              "billingconductor:ListPricingPlansAssociatedWithPricingRule",
              "billingconductor:ListPricingRules",
              "billingconductor:ListPricingRulesAssociatedToPricingPlan",
              "billingconductor:ListResourcesAssociatedToCustomLineItem",
              "billingconductor:ListTagsForResource",
              "braket:GetDevice",
              "braket:GetJob",
              "braket:GetQuantumTask",
              "braket:SearchDevices",
              "braket:SearchJobs",
              "braket:SearchQuantumTasks",
              "budgets:Describe*",
              "budgets:ListTagsForResource",
              "budgets:View*",
              "cassandra:Select",
              "ce:DescribeCostCategoryDefinition",
              "ce:DescribeNotificationSubscription",
              "ce:DescribeReport",
              "ce:GetAnomalies",
              "ce:GetAnomalyMonitors",
              "ce:GetAnomalySubscriptions",
              "ce:GetApproximateUsageRecords",
              "ce:GetCostAndUsage",
              "ce:GetCostAndUsageWithResources",
              "ce:GetCostCategories",
              "ce:GetCostForecast",
              "ce:GetDimensionValues",
              "ce:GetPreferences",
              "ce:GetReservationCoverage",
              "ce:GetReservationPurchaseRecommendation",
              "ce:GetReservationUtilization",
              "ce:GetRightsizingRecommendation",
              "ce:GetSavingsPlanPurchaseRecommendationDetails",
              "ce:GetSavingsPlansCoverage",
              "ce:GetSavingsPlansPurchaseRecommendation",
              "ce:GetSavingsPlansUtilization",
              "ce:GetSavingsPlansUtilizationDetails",
              "ce:GetTags",
              "ce:GetUsageForecast",
              "ce:ListCostAllocationTags",
              "ce:ListCostAllocationTagBackfillHistory",
              "ce:ListCostCategoryDefinitions",
              "ce:ListSavingsPlansPurchaseRecommendationGeneration",
              "ce:ListTagsForResource",
              "chatbot:Describe*",
              "chatbot:Get*",
              "chatbot:ListMicrosoftTeamsChannelConfigurations",
              "chatbot:ListMicrosoftTeamsConfiguredTeams",
              "chatbot:ListMicrosoftTeamsUserIdentities",
              "chatbot:ListTagsForResource",
              "chime:Get*",
              "chime:List*",
              "chime:Retrieve*",
              "chime:Search*",
              "chime:Validate*",
              "cleanrooms:BatchGetCollaborationAnalysisTemplate",
              "cleanrooms:BatchGetSchema",
              "cleanrooms:GetAnalysisTemplate",
              "cleanrooms:GetCollaboration",
              "cleanrooms:GetCollaborationAnalysisTemplate",
              "cleanrooms:GetConfiguredAudienceModelAssociation",
              "cleanrooms:GetConfiguredTable",
              "cleanrooms:GetConfiguredTableAnalysisRule",
              "cleanrooms:GetConfiguredTableAssociation",
              "cleanrooms:GetMembership",
              "cleanrooms:GetProtectedQuery",
              "cleanrooms:GetSchema",
              "cleanrooms:GetSchemaAnalysisRule",
              "cleanrooms:ListAnalysisTemplates",
              "cleanrooms:ListCollaborationAnalysisTemplates",
              "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
              "cleanrooms:ListCollaborations",
              "cleanrooms:ListConfiguredTableAssociations",
              "cleanrooms:ListConfiguredTables",
              "cleanrooms:ListMembers",
              "cleanrooms:ListMemberships",
              "cleanrooms:ListProtectedQueries",
              "cleanrooms:ListSchemas",
              "cleanrooms:ListTagsForResource",
              "cleanrooms-ml:GetTrainingDataset",
              "cleanrooms-ml:GetAudienceGenerationJob",
              "cleanrooms-ml:GetAudienceModel",
              "cleanrooms-ml:GetConfiguredAudienceModel",
              "cleanrooms-ml:GetConfiguredAudienceModelPolicy",
              "cleanrooms-ml:ListAudienceExportJobs",
              "cleanrooms-ml:ListAudienceGenerationJobs",
              "cleanrooms-ml:ListAudienceModels",
              "cleanrooms-ml:ListConfiguredAudienceModels",
              "cleanrooms-ml:ListTrainingDatasets",
              "cleanrooms-ml:ListTagsForResource",
              "cloud9:Describe*",
              "cloud9:List*",
              "clouddirectory:BatchRead",
              "clouddirectory:Get*",
              "clouddirectory:List*",
              "clouddirectory:LookupPolicy",
              "cloudformation:Describe*",
              "cloudformation:Detect*",
              "cloudformation:Estimate*",
              "cloudformation:Get*",
              "cloudformation:List*",
              "cloudformation:ValidateTemplate",
              "cloudfront-keyvaluestore:Describe*",
              "cloudfront-keyvaluestore:Get*",
              "cloudfront-keyvaluestore:List*",
              "cloudfront:Describe*",
              "cloudfront:Get*",
              "cloudfront:List*",
              "cloudhsm:Describe*",
              "cloudhsm:List*",
              "cloudsearch:Describe*",
              "cloudsearch:List*",
              "cloudtrail:Describe*",
              "cloudtrail:Get*",
              "cloudtrail:List*",
              "cloudtrail:LookupEvents",
              "cloudwatch:Describe*",
              "cloudwatch:GenerateQuery",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "codeartifact:DescribeDomain",
              "codeartifact:DescribePackage",
              "codeartifact:DescribePackageVersion",
              "codeartifact:DescribeRepository",
              "codeartifact:GetAuthorizationToken",
              "codeartifact:GetDomainPermissionsPolicy",
              "codeartifact:GetPackageVersionAsset",
              "codeartifact:GetPackageVersionReadme",
              "codeartifact:GetRepositoryEndpoint",
              "codeartifact:GetRepositoryPermissionsPolicy",
              "codeartifact:ListDomains",
              "codeartifact:ListPackages",
              "codeartifact:ListPackageVersionAssets",
              "codeartifact:ListPackageVersionDependencies",
              "codeartifact:ListPackageVersions",
              "codeartifact:ListRepositories",
              "codeartifact:ListRepositoriesInDomain",
              "codeartifact:ListTagsForResource",
              "codeartifact:ReadFromRepository",
              "codebuild:BatchGet*",
              "codebuild:DescribeCodeCoverages",
              "codebuild:DescribeTestCases",
              "codebuild:List*",
              "codecatalyst:GetBillingAuthorization",
              "codecatalyst:GetConnection",
              "codecatalyst:GetPendingConnection",
              "codecatalyst:ListConnections",
              "codecatalyst:ListIamRolesForConnection",
              "codecatalyst:ListTagsForResource",
              "codecommit:BatchGet*",
              "codecommit:Describe*",
              "codecommit:Get*",
              "codecommit:GitPull",
              "codecommit:List*",
              "codedeploy:BatchGet*",
              "codedeploy:Get*",
              "codedeploy:List*",
              "codeguru-profiler:Describe*",
              "codeguru-profiler:Get*",
              "codeguru-profiler:List*",
              "codeguru-reviewer:Describe*",
              "codeguru-reviewer:Get*",
              "codeguru-reviewer:List*",
              "codepipeline:Get*",
              "codepipeline:List*",
              "codestar-connections:GetConnection",
              "codestar-connections:GetHost",
              "codestar-connections:GetRepositoryLink",
              "codestar-connections:GetRepositorySyncStatus",
              "codestar-connections:GetResourceSyncStatus",
              "codestar-connections:GetSyncConfiguration",
              "codestar-connections:ListConnections",
              "codestar-connections:ListHosts",
              "codestar-connections:ListRepositoryLinks",
              "codestar-connections:ListRepositorySyncDefinitions",
              "codestar-connections:ListSyncConfigurations",
              "codestar-connections:ListTagsForResource",
              "codestar-notifications:describeNotificationRule",
              "codestar-notifications:listEventTypes",
              "codestar-notifications:listNotificationRules",
              "codestar-notifications:listTagsForResource",
              "codestar-notifications:ListTargets",
              "codestar:Describe*",
              "codestar:Get*",
              "codestar:List*",
              "codestar:Verify*",
              "cognito-identity:Describe*",
              "cognito-identity:GetCredentialsForIdentity",
              "cognito-identity:GetIdentityPoolAnalytics",
              "cognito-identity:GetIdentityPoolDailyAnalytics",
              "cognito-identity:GetIdentityPoolRoles",
              "cognito-identity:GetIdentityProviderDailyAnalytics",
              "cognito-identity:GetOpenIdToken",
              "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
              "cognito-identity:List*",
              "cognito-identity:Lookup*",
              "cognito-idp:AdminGet*",
              "cognito-idp:AdminList*",
              "cognito-idp:Describe*",
              "cognito-idp:Get*",
              "cognito-idp:List*",
              "cognito-sync:Describe*",
              "cognito-sync:Get*",
              "cognito-sync:List*",
              "cognito-sync:QueryRecords",
              "comprehend:BatchDetect*",
              "comprehend:Classify*",
              "comprehend:Contains*",
              "comprehend:Describe*",
              "comprehend:Detect*",
              "comprehend:List*",
              "compute-optimizer:DescribeRecommendationExportJobs",
              "compute-optimizer:GetAutoScalingGroupRecommendations",
              "compute-optimizer:GetEBSVolumeRecommendations",
              "compute-optimizer:GetEC2InstanceRecommendations",
              "compute-optimizer:GetEC2RecommendationProjectedMetrics",
              "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
              "compute-optimizer:GetECSServiceRecommendations",
              "compute-optimizer:GetEffectiveRecommendationPreferences",
              "compute-optimizer:GetEnrollmentStatus",
              "compute-optimizer:GetEnrollmentStatusesForOrganization",
              "compute-optimizer:GetLambdaFunctionRecommendations",
              "compute-optimizer:GetLicenseRecommendations",
              "compute-optimizer:GetRDSDatabaseRecommendationProjectedMetrics",
              "compute-optimizer:GetRDSDatabaseRecommendations",
              "compute-optimizer:GetRecommendationPreferences",
              "compute-optimizer:GetRecommendationSummaries",
              "config:BatchGetAggregateResourceConfig",
              "config:BatchGetResourceConfig",
              "config:Deliver*",
              "config:Describe*",
              "config:Get*",
              "config:List*",
              "config:SelectAggregateResourceConfig",
              "config:SelectResourceConfig",
              "connect:Describe*",
              "connect:GetContactAttributes",
              "connect:GetCurrentMetricData",
              "connect:GetCurrentUserData",
              "connect:GetFederationToken",
              "connect:GetMetricData",
              "connect:GetMetricDataV2",
              "connect:GetTaskTemplate",
              "connect:GetTrafficDistribution",
              "connect:List*",
              "consoleapp:GetDeviceIdentity",
              "consoleapp:ListDeviceIdentities",
              "consolidatedbilling:GetAccountBillingRole",
              "consolidatedbilling:ListLinkedAccounts",
              "controlcatalog:ListCommonControls",
              "controlcatalog:ListDomains",
              "controlcatalog:ListObjectives",
              "cost-optimization-hub:GetPreferences",
              "cost-optimization-hub:GetRecommendation",
              "cost-optimization-hub:ListEnrollmentStatuses",
              "cost-optimization-hub:ListRecommendations",
              "cost-optimization-hub:ListRecommendationSummaries",
              "cur:GetClassicReport",
              "cur:GetClassicReportPreferences",
              "cur:GetUsageReport",
              "customer-verification:GetCustomerVerificationDetails",
              "customer-verification:GetCustomerVerificationEligibility",
              "databrew:DescribeDataset",
              "databrew:DescribeJob",
              "databrew:DescribeJobRun",
              "databrew:DescribeProject",
              "databrew:DescribeRecipe",
              "databrew:DescribeRuleset",
              "databrew:DescribeSchedule",
              "databrew:ListDatasets",
              "databrew:ListJobRuns",
              "databrew:ListJobs",
              "databrew:ListProjects",
              "databrew:ListRecipes",
              "databrew:ListRecipeVersions",
              "databrew:ListRulesets",
              "databrew:ListSchedules",
              "databrew:ListTagsForResource",
              "dataexchange:Get*",
              "dataexchange:List*",
              "datapipeline:Describe*",
              "datapipeline:EvaluateExpression",
              "datapipeline:Get*",
              "datapipeline:List*",
              "datapipeline:QueryObjects",
              "datapipeline:Validate*",
              "datasync:Describe*",
              "datasync:List*",
              "dax:BatchGetItem",
              "dax:Describe*",
              "dax:GetItem",
              "dax:ListTags",
              "dax:Query",
              "dax:Scan",
              "deadline:BatchGetJobEntity",
              "deadline:GetApplicationVersion",
              "deadline:GetBudget",
              "deadline:GetFarm",
              "deadline:GetFleet",
              "deadline:GetJob",
              "deadline:GetLicenseEndpoint",
              "deadline:GetMonitor",
              "deadline:GetQueue",
              "deadline:GetQueueEnvironment",
              "deadline:GetQueueFleetAssociation",
              "deadline:GetSession",
              "deadline:GetSessionAction",
              "deadline:GetSessionsStatisticsAggregation",
              "deadline:GetStep",
              "deadline:GetStorageProfile",
              "deadline:GetStorageProfileForQueue",
              "deadline:GetTask",
              "deadline:GetWorker",
              "deadline:ListAvailableMeteredProducts",
              "deadline:ListBudgets",
              "deadline:ListFarmMembers",
              "deadline:ListFarms",
              "deadline:ListFleetMembers",
              "deadline:ListFleets",
              "deadline:ListJobMembers",
              "deadline:ListJobs",
              "deadline:ListLicenseEndpoints",
              "deadline:ListMeteredProducts",
              "deadline:ListMonitors",
              "deadline:ListQueueEnvironments",
              "deadline:ListQueueFleetAssociations",
              "deadline:ListQueueMembers",
              "deadline:ListQueues",
              "deadline:ListSessionActions",
              "deadline:ListSessions",
              "deadline:ListSessionsForWorker",
              "deadline:ListStepConsumers",
              "deadline:ListStepDependencies",
              "deadline:ListSteps",
              "deadline:ListStorageProfiles",
              "deadline:ListStorageProfilesForQueue",
              "deadline:ListTagsForResource",
              "deadline:ListTasks",
              "deadline:ListWorkers",
              "deadline:SearchJobs",
              "deadline:SearchSteps",
              "deadline:SearchTasks",
              "deadline:SearchWorkers",
              "deepcomposer:GetComposition",
              "deepcomposer:GetModel",
              "deepcomposer:GetSampleModel",
              "deepcomposer:ListCompositions",
              "deepcomposer:ListModels",
              "deepcomposer:ListSampleModels",
              "deepcomposer:ListTrainingTopics",
              "detective:BatchGetGraphMemberDatasources",
              "detective:BatchGetMembershipDatasources",
              "detective:Get*",
              "detective:List*",
              "detective:SearchGraph",
              "devicefarm:Get*",
              "devicefarm:List*",
              "devops-guru:DescribeAccountHealth",
              "devops-guru:DescribeAccountOverview",
              "devops-guru:DescribeAnomaly",
              "devops-guru:DescribeEventSourcesConfig",
              "devops-guru:DescribeFeedback",
              "devops-guru:DescribeInsight",
              "devops-guru:DescribeOrganizationHealth",
              "devops-guru:DescribeOrganizationOverview",
              "devops-guru:DescribeOrganizationResourceCollectionHealth",
              "devops-guru:DescribeResourceCollectionHealth",
              "devops-guru:DescribeServiceIntegration",
              "devops-guru:GetCostEstimation",
              "devops-guru:GetResourceCollection",
              "devops-guru:ListAnomaliesForInsight",
              "devops-guru:ListAnomalousLogGroups",
              "devops-guru:ListEvents",
              "devops-guru:ListInsights",
              "devops-guru:ListMonitoredResources",
              "devops-guru:ListNotificationChannels",
              "devops-guru:ListOrganizationInsights",
              "devops-guru:ListRecommendations",
              "devops-guru:SearchInsights",
              "devops-guru:StartCostEstimation",
              "directconnect:Describe*",
              "discovery:Describe*",
              "discovery:Get*",
              "discovery:List*",
              "dlm:Get*",
              "dms:Describe*",
              "dms:List*",
              "dms:Test*",
              "drs:DescribeJobLogItems",
              "drs:DescribeJobs",
              "drs:DescribeLaunchConfigurationTemplates",
              "drs:DescribeRecoveryInstances",
              "drs:DescribeRecoverySnapshots",
              "drs:DescribeReplicationConfigurationTemplates",
              "drs:DescribeSourceNetworks",
              "drs:DescribeSourceServers",
              "drs:GetFailbackReplicationConfiguration",
              "drs:GetLaunchConfiguration",
              "drs:GetReplicationConfiguration",
              "drs:ListExtensibleSourceServers",
              "drs:ListLaunchActions",
              "drs:ListStagingAccounts",
              "drs:ListTagsForResource",
              "ds:Check*",
              "ds:Describe*",
              "ds:Get*",
              "ds:List*",
              "ds:Verify*",
              "dynamodb:BatchGet*",
              "dynamodb:Describe*",
              "dynamodb:Get*",
              "dynamodb:List*",
              "dynamodb:PartiQLSelect",
              "dynamodb:Query",
              "dynamodb:Scan",
              "ec2:Describe*",
              "ec2:Get*",
              "ec2:ListImagesInRecycleBin",
              "ec2:ListSnapshotsInRecycleBin",
              "ec2:SearchLocalGatewayRoutes",
              "ec2:SearchTransitGatewayRoutes",
              "ec2messages:Get*",
              "ecr-public:BatchCheckLayerAvailability",
              "ecr-public:DescribeImages",
              "ecr-public:DescribeImageTags",
              "ecr-public:DescribeRegistries",
              "ecr-public:DescribeRepositories",
              "ecr-public:GetAuthorizationToken",
              "ecr-public:GetRegistryCatalogData",
              "ecr-public:GetRepositoryCatalogData",
              "ecr-public:GetRepositoryPolicy",
              "ecr-public:ListTagsForResource",
              "ecr:BatchCheck*",
              "ecr:BatchGet*",
              "ecr:Describe*",
              "ecr:Get*",
              "ecr:List*",
              "ecs:Describe*",
              "ecs:List*",
              "eks:Describe*",
              "eks:List*",
              "elastic-inference:DescribeAcceleratorOfferings",
              "elastic-inference:DescribeAccelerators",
              "elastic-inference:DescribeAcceleratorTypes",
              "elastic-inference:ListTagsForResource",
              "elasticache:Describe*",
              "elasticache:List*",
              "elasticbeanstalk:Check*",
              "elasticbeanstalk:Describe*",
              "elasticbeanstalk:List*",
              "elasticbeanstalk:Request*",
              "elasticbeanstalk:Retrieve*",
              "elasticbeanstalk:Validate*",
              "elasticfilesystem:Describe*",
              "elasticfilesystem:ListTagsForResource",
              "elasticloadbalancing:Describe*",
              "elasticmapreduce:Describe*",
              "elasticmapreduce:GetBlockPublicAccessConfiguration",
              "elasticmapreduce:List*",
              "elasticmapreduce:View*",
              "elastictranscoder:List*",
              "elastictranscoder:Read*",
              "elemental-appliances-software:Get*",
              "elemental-appliances-software:List*",
              "emr-containers:DescribeJobRun",
              "emr-containers:DescribeManagedEndpoint",
              "emr-containers:DescribeVirtualCluster",
              "emr-containers:ListJobRuns",
              "emr-containers:ListManagedEndpoints",
              "emr-containers:ListTagsForResource",
              "emr-containers:ListVirtualClusters",
              "emr-serverless:GetApplication",
              "emr-serverless:GetDashboardForJobRun",
              "emr-serverless:GetJobRun",
              "emr-serverless:ListApplications",
              "emr-serverless:ListJobRuns",
              "emr-serverless:ListTagsForResource",
              "es:Describe*",
              "es:ESHttpGet",
              "es:ESHttpHead",
              "es:Get*",
              "es:List*",
              "events:Describe*",
              "events:List*",
              "events:Test*",
              "evidently:GetExperiment",
              "evidently:GetExperimentResults",
              "evidently:GetFeature",
              "evidently:GetLaunch",
              "evidently:GetProject",
              "evidently:GetSegment",
              "evidently:ListExperiments",
              "evidently:ListFeatures",
              "evidently:ListLaunches",
              "evidently:ListProjects",
              "evidently:ListSegmentReferences",
              "evidently:ListSegments",
              "evidently:ListTagsForResource",
              "evidently:TestSegmentPattern",
              "firehose:Describe*",
              "firehose:List*",
              "fis:GetAction",
              "fis:GetExperiment",
              "fis:GetExperimentTargetAccountConfiguration",
              "fis:GetExperimentTemplate",
              "fis:GetTargetAccountConfiguration",
              "fis:GetTargetResourceType",
              "fis:ListActions",
              "fis:ListExperimentResolvedTargets",
              "fis:ListExperiments",
              "fis:ListExperimentTargetAccountConfigurations",
              "fis:ListExperimentTemplates",
              "fis:ListTagsForResource",
              "fis:ListTargetAccountConfigurations",
              "fis:ListTargetResourceTypes",
              "fms:GetAdminAccount",
              "fms:GetAppsList",
              "fms:GetComplianceDetail",
              "fms:GetNotificationChannel",
              "fms:GetPolicy",
              "fms:GetProtectionStatus",
              "fms:GetProtocolsList",
              "fms:GetViolationDetails",
              "fms:ListAppsLists",
              "fms:ListComplianceStatus",
              "fms:ListMemberAccounts",
              "fms:ListPolicies",
              "fms:ListProtocolsLists",
              "fms:ListTagsForResource",
              "forecast:DescribeAutoPredictor",
              "forecast:DescribeDataset",
              "forecast:DescribeDatasetGroup",
              "forecast:DescribeDatasetImportJob",
              "forecast:DescribeExplainability",
              "forecast:DescribeExplainabilityExport",
              "forecast:DescribeForecast",
              "forecast:DescribeForecastExportJob",
              "forecast:DescribeMonitor",
              "forecast:DescribePredictor",
              "forecast:DescribePredictorBacktestExportJob",
              "forecast:DescribeWhatIfAnalysis",
              "forecast:DescribeWhatIfForecast",
              "forecast:DescribeWhatIfForecastExport",
              "forecast:GetAccuracyMetrics",
              "forecast:ListDatasetGroups",
              "forecast:ListDatasetImportJobs",
              "forecast:ListDatasets",
              "forecast:ListExplainabilities",
              "forecast:ListExplainabilityExports",
              "forecast:ListForecastExportJobs",
              "forecast:ListForecasts",
              "forecast:ListMonitorEvaluations",
              "forecast:ListMonitors",
              "forecast:ListPredictorBacktestExportJobs",
              "forecast:ListPredictors",
              "forecast:ListWhatIfAnalyses",
              "forecast:ListWhatIfForecastExports",
              "forecast:ListWhatIfForecasts",
              "forecast:QueryForecast",
              "forecast:QueryWhatIfForecast",
              "frauddetector:BatchGetVariable",
              "frauddetector:DescribeDetector",
              "frauddetector:DescribeModelVersions",
              "frauddetector:GetBatchImportJobs",
              "frauddetector:GetBatchPredictionJobs",
              "frauddetector:GetDeleteEventsByEventTypeStatus",
              "frauddetector:GetDetectors",
              "frauddetector:GetDetectorVersion",
              "frauddetector:GetEntityTypes",
              "frauddetector:GetEvent",
              "frauddetector:GetEventPredictionMetadata",
              "frauddetector:GetEventTypes",
              "frauddetector:GetExternalModels",
              "frauddetector:GetKMSEncryptionKey",
              "frauddetector:GetLabels",
              "frauddetector:GetListElements",
              "frauddetector:GetListsMetadata",
              "frauddetector:GetModels",
              "frauddetector:GetModelVersion",
              "frauddetector:GetOutcomes",
              "frauddetector:GetRules",
              "frauddetector:GetVariables",
              "frauddetector:ListEventPredictions",
              "frauddetector:ListTagsForResource",
              "freertos:Describe*",
              "freertos:List*",
              "freetier:GetFreeTierAlertPreference",
              "freetier:GetFreeTierUsage",
              "fsx:Describe*",
              "fsx:List*",
              "gamelift:Describe*",
              "gamelift:Get*",
              "gamelift:List*",
              "gamelift:ResolveAlias",
              "gamelift:Search*",
              "glacier:Describe*",
              "glacier:Get*",
              "glacier:List*",
              "globalaccelerator:Describe*",
              "globalaccelerator:List*",
              "glue:BatchGetCrawlers",
              "glue:BatchGetDevEndpoints",
              "glue:BatchGetJobs",
              "glue:BatchGetPartition",
              "glue:BatchGetTableOptimizer",
              "glue:BatchGetTriggers",
              "glue:BatchGetWorkflows",
              "glue:CheckSchemaVersionValidity",
              "glue:GetCatalogImportStatus",
              "glue:GetClassifier",
              "glue:GetClassifiers",
              "glue:GetCrawler",
              "glue:GetCrawlerMetrics",
              "glue:GetCrawlers",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetDataCatalogEncryptionSettings",
              "glue:GetDataflowGraph",
              "glue:GetDevEndpoint",
              "glue:GetDevEndpoints",
              "glue:GetJob",
              "glue:GetJobBookmark",
              "glue:GetJobRun",
              "glue:GetJobRuns",
              "glue:GetJobs",
              "glue:GetMapping",
              "glue:GetMLTaskRun",
              "glue:GetMLTaskRuns",
              "glue:GetMLTransform",
              "glue:GetMLTransforms",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetPlan",
              "glue:GetRegistry",
              "glue:GetResourcePolicy",
              "glue:GetSchema",
              "glue:GetSchemaByDefinition",
              "glue:GetSchemaVersion",
              "glue:GetSchemaVersionsDiff",
              "glue:GetSecurityConfiguration",
              "glue:GetSecurityConfigurations",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetTableOptimizer",
              "glue:GetTableVersion",
              "glue:GetTableVersions",
              "glue:GetTags",
              "glue:GetTrigger",
              "glue:GetTriggers",
              "glue:GetUserDefinedFunction",
              "glue:GetUserDefinedFunctions",
              "glue:GetWorkflow",
              "glue:GetWorkflowRun",
              "glue:GetWorkflowRunProperties",
              "glue:GetWorkflowRuns",
              "glue:ListCrawlers",
              "glue:ListCrawls",
              "glue:ListDevEndpoints",
              "glue:ListJobs",
              "glue:ListMLTransforms",
              "glue:ListRegistries",
              "glue:ListSchemas",
              "glue:ListSchemaVersions",
              "glue:ListTableOptimizerRuns",
              "glue:ListTriggers",
              "glue:ListWorkflows",
              "glue:QuerySchemaVersionMetadata",
              "glue:SearchTables",
              "grafana:DescribeWorkspace",
              "grafana:DescribeWorkspaceAuthentication",
              "grafana:DescribeWorkspaceConfiguration",
              "grafana:ListPermissions",
              "grafana:ListTagsForResource",
              "grafana:ListVersions",
              "grafana:ListWorkspaces",
              "greengrass:DescribeComponent",
              "greengrass:Get*",
              "greengrass:List*",
              "groundstation:DescribeContact",
              "groundstation:GetConfig",
              "groundstation:GetDataflowEndpointGroup",
              "groundstation:GetMinuteUsage",
              "groundstation:GetMissionProfile",
              "groundstation:GetSatellite",
              "groundstation:ListConfigs",
              "groundstation:ListContacts",
              "groundstation:ListDataflowEndpointGroups",
              "groundstation:ListGroundStations",
              "groundstation:ListMissionProfiles",
              "groundstation:ListSatellites",
              "groundstation:ListTagsForResource",
              "guardduty:Describe*",
              "guardduty:Get*",
              "guardduty:List*",
              "health:Describe*",
              "healthlake:DescribeFHIRDatastore",
              "healthlake:DescribeFHIRExportJob",
              "healthlake:DescribeFHIRImportJob",
              "healthlake:GetCapabilities",
              "healthlake:ListFHIRDatastores",
              "healthlake:ListFHIRExportJobs",
              "healthlake:ListFHIRImportJobs",
              "healthlake:ListTagsForResource",
              "healthlake:ReadResource",
              "healthlake:SearchWithGet",
              "healthlake:SearchWithPost",
              "iam:Generate*",
              "iam:Get*",
              "iam:List*",
              "iam:Simulate*",
              "identity-sync:GetSyncProfile",
              "identity-sync:GetSyncTarget",
              "identity-sync:ListSyncFilters",
              "identitystore-auth:BatchGetSession",
              "identitystore-auth:ListSessions",
              "identitystore:DescribeGroup",
              "identitystore:DescribeGroupMembership",
              "identitystore:DescribeUser",
              "identitystore:GetGroupId",
              "identitystore:GetGroupMembershipId",
              "identitystore:GetUserId",
              "identitystore:IsMemberInGroups",
              "identitystore:ListGroupMemberships",
              "identitystore:ListGroupMembershipsForMember",
              "identitystore:ListGroups",
              "identitystore:ListUsers",
              "imagebuilder:Get*",
              "imagebuilder:List*",
              "importexport:Get*",
              "importexport:List*",
              "inspector:Describe*",
              "inspector:Get*",
              "inspector:List*",
              "inspector:Preview*",
              "inspector2:BatchGetAccountStatus",
              "inspector2:BatchGetFreeTrialInfo",
              "inspector2:DescribeOrganizationConfiguration",
              "inspector2:GetDelegatedAdminAccount",
              "inspector2:GetFindingsReportStatus",
              "inspector2:GetMember",
              "inspector2:ListAccountPermissions",
              "inspector2:ListCisScans",
              "inspector2:ListCoverage",
              "inspector2:ListCoverageStatistics",
              "inspector2:ListDelegatedAdminAccounts",
              "inspector2:ListFilters",
              "inspector2:ListFindingAggregations",
              "inspector2:ListFindings",
              "inspector2:ListMembers",
              "inspector2:ListTagsForResource",
              "inspector2:ListUsageTotals",
              "internetmonitor:GetHealthEvent",
              "internetmonitor:GetInternetEvent",
              "internetmonitor:GetMonitor",
              "internetmonitor:ListHealthEvents",
              "internetmonitor:ListInternetEvents",
              "internetmonitor:ListMonitors",
              "internetmonitor:ListTagsForResource",
              "invoicing:GetInvoiceEmailDeliveryPreferences",
              "invoicing:GetInvoicePDF",
              "invoicing:ListInvoiceSummaries",
              "iot:Describe*",
              "iot:Get*",
              "iot:List*",
              "iot1click:DescribeDevice",
              "iot1click:DescribePlacement",
              "iot1click:DescribeProject",
              "iot1click:GetDeviceMethods",
              "iot1click:GetDevicesInPlacement",
              "iot1click:ListDeviceEvents",
              "iot1click:ListDevices",
              "iot1click:ListPlacements",
              "iot1click:ListProjects",
              "iot1click:ListTagsForResource",
              "iotanalytics:Describe*",
              "iotanalytics:Get*",
              "iotanalytics:List*",
              "iotanalytics:SampleChannelData",
              "iotevents:DescribeAlarm",
              "iotevents:DescribeAlarmModel",
              "iotevents:DescribeDetector",
              "iotevents:DescribeDetectorModel",
              "iotevents:DescribeInput",
              "iotevents:DescribeLoggingOptions",
              "iotevents:ListAlarmModels",
              "iotevents:ListAlarmModelVersions",
              "iotevents:ListAlarms",
              "iotevents:ListDetectorModels",
              "iotevents:ListDetectorModelVersions",
              "iotevents:ListDetectors",
              "iotevents:ListInputs",
              "iotevents:ListTagsForResource",
              "iotfleethub:DescribeApplication",
              "iotfleethub:ListApplications",
              "iotfleetwise:GetCampaign",
              "iotfleetwise:GetDecoderManifest",
              "iotfleetwise:GetFleet",
              "iotfleetwise:GetLoggingOptions",
              "iotfleetwise:GetModelManifest",
              "iotfleetwise:GetRegisterAccountStatus",
              "iotfleetwise:GetSignalCatalog",
              "iotfleetwise:GetVehicle",
              "iotfleetwise:GetVehicleStatus",
              "iotfleetwise:ListCampaigns",
              "iotfleetwise:ListDecoderManifestNetworkInterfaces",
              "iotfleetwise:ListDecoderManifests",
              "iotfleetwise:ListDecoderManifestSignals",
              "iotfleetwise:ListFleets",
              "iotfleetwise:ListFleetsForVehicle",
              "iotfleetwise:ListModelManifestNodes",
              "iotfleetwise:ListModelManifests",
              "iotfleetwise:ListSignalCatalogNodes",
              "iotfleetwise:ListSignalCatalogs",
              "iotfleetwise:ListTagsForResource",
              "iotfleetwise:ListVehicles",
              "iotfleetwise:ListVehiclesInFleet",
              "iotroborunner:GetDestination",
              "iotroborunner:GetSite",
              "iotroborunner:GetWorker",
              "iotroborunner:GetWorkerFleet",
              "iotroborunner:ListDestinations",
              "iotroborunner:ListSites",
              "iotroborunner:ListWorkerFleets",
              "iotroborunner:ListWorkers",
              "iotsitewise:Describe*",
              "iotsitewise:Get*",
              "iotsitewise:List*",
              "iotwireless:GetDestination",
              "iotwireless:GetDeviceProfile",
              "iotwireless:GetEventConfigurationByResourceTypes",
              "iotwireless:GetFuotaTask",
              "iotwireless:GetLogLevelsByResourceTypes",
              "iotwireless:GetMetrics",
              "iotwireless:GetMetricConfiguration",
              "iotwireless:GetMulticastGroup",
              "iotwireless:GetMulticastGroupSession",
              "iotwireless:GetNetworkAnalyzerConfiguration",
              "iotwireless:GetPartnerAccount",
              "iotwireless:GetPosition",
              "iotwireless:GetPositionConfiguration",
              "iotwireless:GetPositionEstimate",
              "iotwireless:GetResourceEventConfiguration",
              "iotwireless:GetResourceLogLevel",
              "iotwireless:GetResourcePosition",
              "iotwireless:GetServiceEndpoint",
              "iotwireless:GetServiceProfile",
              "iotwireless:GetWirelessDevice",
              "iotwireless:GetWirelessDeviceImportTask",
              "iotwireless:GetWirelessDeviceStatistics",
              "iotwireless:GetWirelessGateway",
              "iotwireless:GetWirelessGatewayCertificate",
              "iotwireless:GetWirelessGatewayFirmwareInformation",
              "iotwireless:GetWirelessGatewayStatistics",
              "iotwireless:GetWirelessGatewayTask",
              "iotwireless:GetWirelessGatewayTaskDefinition",
              "iotwireless:ListDestinations",
              "iotwireless:ListDeviceProfiles",
              "iotwireless:ListDevicesForWirelessDeviceImportTask",
              "iotwireless:ListEventConfigurations",
              "iotwireless:ListFuotaTasks",
              "iotwireless:ListMulticastGroups",
              "iotwireless:ListMulticastGroupsByFuotaTask",
              "iotwireless:ListNetworkAnalyzerConfigurations",
              "iotwireless:ListPartnerAccounts",
              "iotwireless:ListPositionConfigurations",
              "iotwireless:ListQueuedMessages",
              "iotwireless:ListServiceProfiles",
              "iotwireless:ListTagsForResource",
              "iotwireless:ListWirelessDeviceImportTasks",
              "iotwireless:ListWirelessDevices",
              "iotwireless:ListWirelessGateways",
              "iotwireless:ListWirelessGatewayTaskDefinitions",
              "ivs:BatchGetChannel",
              "ivs:GetChannel",
              "ivs:GetComposition",
              "ivs:GetEncoderConfiguration",
              "ivs:GetStage",
              "ivs:GetStageSession",
              "ivs:GetParticipant",
              "ivs:GetPlaybackKeyPair",
              "ivs:GetPlaybackRestrictionPolicy",
              "ivs:GetRecordingConfiguration",
              "ivs:GetStreamSession",
              "ivs:ListChannels",
              "ivs:ListCompositions",
              "ivs:ListEncoderConfigurations",
              "ivs:ListParticipants",
              "ivs:ListParticipantEvents",
              "ivs:ListPlaybackKeyPairs",
              "ivs:ListPlaybackRestrictionPolicies",
              "ivs:ListRecordingConfigurations",
              "ivs:ListStages",
              "ivs:ListStageSessions",
              "ivs:ListStreams",
              "ivs:ListStreamKeys",
              "ivs:ListStreamSessions",
              "ivs:ListTagsForResource",
              "ivschat:GetLoggingConfiguration",
              "ivschat:GetRoom",
              "ivschat:ListLoggingConfigurations",
              "ivschat:ListRooms",
              "ivschat:ListTagsForResource",
              "kafka:Describe*",
              "kafka:DescribeCluster",
              "kafka:DescribeClusterOperation",
              "kafka:DescribeClusterV2",
              "kafka:DescribeConfiguration",
              "kafka:DescribeConfigurationRevision",
              "kafka:Get*",
              "kafka:GetBootstrapBrokers",
              "kafka:GetCompatibleKafkaVersions",
              "kafka:List*",
              "kafka:ListClusterOperations",
              "kafka:ListClusters",
              "kafka:ListClustersV2",
              "kafka:ListConfigurationRevisions",
              "kafka:ListConfigurations",
              "kafka:ListKafkaVersions",
              "kafka:ListNodes",
              "kafka:ListTagsForResource",
              "kafkaconnect:DescribeConnector",
              "kafkaconnect:DescribeCustomPlugin",
              "kafkaconnect:DescribeWorkerConfiguration",
              "kafkaconnect:ListConnectors",
              "kafkaconnect:ListCustomPlugins",
              "kafkaconnect:ListWorkerConfigurations",
              "kendra:BatchGetDocumentStatus",
              "kendra:DescribeDataSource",
              "kendra:DescribeExperience",
              "kendra:DescribeFaq",
              "kendra:DescribeIndex",
              "kendra:DescribePrincipalMapping",
              "kendra:DescribeQuerySuggestionsBlockList",
              "kendra:DescribeQuerySuggestionsConfig",
              "kendra:DescribeThesaurus",
              "kendra:GetQuerySuggestions",
              "kendra:GetSnapshots",
              "kendra:ListDataSources",
              "kendra:ListDataSourceSyncJobs",
              "kendra:ListEntityPersonas",
              "kendra:ListExperienceEntities",
              "kendra:ListExperiences",
              "kendra:ListFaqs",
              "kendra:ListGroupsOlderThanOrderingId",
              "kendra:ListIndices",
              "kendra:ListQuerySuggestionsBlockLists",
              "kendra:ListTagsForResource",
              "kendra:ListThesauri",
              "kendra:Query",
              "kinesis:Describe*",
              "kinesis:Get*",
              "kinesis:List*",
              "kinesisanalytics:Describe*",
              "kinesisanalytics:Discover*",
              "kinesisanalytics:Get*",
              "kinesisanalytics:List*",
              "kinesisvideo:Describe*",
              "kinesisvideo:Get*",
              "kinesisvideo:List*",
              "kms:Describe*",
              "kms:Get*",
              "kms:List*",
              "lakeformation:DescribeResource",
              "lakeformation:GetDataCellsFilter",
              "lakeformation:GetDataLakeSettings",
              "lakeformation:GetEffectivePermissionsForPath",
              "lakeformation:GetLfTag",
              "lakeformation:GetResourceLfTags",
              "lakeformation:ListDataCellsFilter",
              "lakeformation:ListLfTags",
              "lakeformation:ListPermissions",
              "lakeformation:ListResources",
              "lakeformation:ListTableStorageOptimizers",
              "lakeformation:SearchDatabasesByLfTags",
              "lakeformation:SearchTablesByLfTags",
              "lambda:Get*",
              "lambda:List*",
              "launchwizard:DescribeAdditionalNode",
              "launchwizard:DescribeProvisionedApp",
              "launchwizard:DescribeProvisioningEvents",
              "launchwizard:DescribeSettingsSet",
              "launchwizard:GetDeployment",
              "launchwizard:GetInfrastructureSuggestion",
              "launchwizard:GetIpAddress",
              "launchwizard:GetResourceCostEstimate",
              "launchwizard:GetResourceRecommendation",
              "launchwizard:GetSettingsSet",
              "launchwizard:GetWorkload",
              "launchwizard:GetWorkloadAsset",
              "launchwizard:GetWorkloadAssets",
              "launchwizard:GetWorkloadDeploymentPattern",
              "launchwizard:ListAdditionalNodes",
              "launchwizard:ListAllowedResources",
              "launchwizard:ListDeploymentEvents",
              "launchwizard:ListDeployments",
              "launchwizard:ListProvisionedApps",
              "launchwizard:ListResourceCostEstimates",
              "launchwizard:ListSettingsSets",
              "launchwizard:ListTagsForResource",
              "launchwizard:ListWorkloadDeploymentOptions",
              "launchwizard:ListWorkloadDeploymentPatterns",
              "launchwizard:ListWorkloads",
              "lex:DescribeBot",
              "lex:DescribeBotAlias",
              "lex:DescribeBotChannel",
              "lex:DescribeBotLocale",
              "lex:DescribeBotReplica",
              "lex:DescribeBotVersion",
              "lex:DescribeExport",
              "lex:DescribeImport",
              "lex:DescribeIntent",
              "lex:DescribeResourcePolicy",
              "lex:DescribeSlot",
              "lex:DescribeSlotType",
              "lex:Get*",
              "lex:ListBotAliasReplicas",
              "lex:ListBotAliases",
              "lex:ListBotChannels",
              "lex:ListBotLocales",
              "lex:ListBotReplicas",
              "lex:ListBotVersionReplicas",
              "lex:ListBots",
              "lex:ListBotVersions",
              "lex:ListBuiltInIntents",
              "lex:ListBuiltInSlotTypes",
              "lex:ListExports",
              "lex:ListImports",
              "lex:ListIntents",
              "lex:ListSlots",
              "lex:ListSlotTypes",
              "lex:ListTagsForResource",
              "license-manager:Get*",
              "license-manager:List*",
              "lightsail:GetActiveNames",
              "lightsail:GetAlarms",
              "lightsail:GetAutoSnapshots",
              "lightsail:GetBlueprints",
              "lightsail:GetBucketAccessKeys",
              "lightsail:GetBucketBundles",
              "lightsail:GetBucketMetricData",
              "lightsail:GetBuckets",
              "lightsail:GetBundles",
              "lightsail:GetCertificates",
              "lightsail:GetCloudFormationStackRecords",
              "lightsail:GetContainerAPIMetadata",
              "lightsail:GetContainerImages",
              "lightsail:GetContainerServiceDeployments",
              "lightsail:GetContainerServiceMetricData",
              "lightsail:GetContainerServicePowers",
              "lightsail:GetContainerServices",
              "lightsail:GetDisk",
              "lightsail:GetDisks",
              "lightsail:GetDiskSnapshot",
              "lightsail:GetDiskSnapshots",
              "lightsail:GetDistributionBundles",
              "lightsail:GetDistributionLatestCacheReset",
              "lightsail:GetDistributionMetricData",
              "lightsail:GetDistributions",
              "lightsail:GetDomain",
              "lightsail:GetDomains",
              "lightsail:GetExportSnapshotRecords",
              "lightsail:GetInstance",
              "lightsail:GetInstanceMetricData",
              "lightsail:GetInstancePortStates",
              "lightsail:GetInstances",
              "lightsail:GetInstanceSnapshot",
              "lightsail:GetInstanceSnapshots",
              "lightsail:GetInstanceState",
              "lightsail:GetKeyPair",
              "lightsail:GetKeyPairs",
              "lightsail:GetLoadBalancer",
              "lightsail:GetLoadBalancerMetricData",
              "lightsail:GetLoadBalancers",
              "lightsail:GetLoadBalancerTlsCertificates",
              "lightsail:GetOperation",
              "lightsail:GetOperations",
              "lightsail:GetOperationsForResource",
              "lightsail:GetRegions",
              "lightsail:GetRelationalDatabase",
              "lightsail:GetRelationalDatabaseBlueprints",
              "lightsail:GetRelationalDatabaseBundles",
              "lightsail:GetRelationalDatabaseEvents",
              "lightsail:GetRelationalDatabaseLogEvents",
              "lightsail:GetRelationalDatabaseLogStreams",
              "lightsail:GetRelationalDatabaseMetricData",
              "lightsail:GetRelationalDatabaseParameters",
              "lightsail:GetRelationalDatabases",
              "lightsail:GetRelationalDatabaseSnapshot",
              "lightsail:GetRelationalDatabaseSnapshots",
              "lightsail:GetStaticIp",
              "lightsail:GetStaticIps",
              "lightsail:Is*",
              "logs:Describe*",
              "logs:FilterLogEvents",
              "logs:Get*",
              "logs:ListAnomalies",
              "logs:ListLogAnomalyDetectors",
              "logs:ListLogDeliveries",
              "logs:ListTagsForResource",
              "logs:ListTagsLogGroup",
              "logs:StartLiveTail",
              "logs:StartQuery",
              "logs:StopLiveTail",
              "logs:StopQuery",
              "logs:TestMetricFilter",
              "lookoutequipment:DescribeDataIngestionJob",
              "lookoutequipment:DescribeDataset",
              "lookoutequipment:DescribeInferenceScheduler",
              "lookoutequipment:DescribeLabel",
              "lookoutequipment:DescribeLabelGroup",
              "lookoutequipment:DescribeModel",
              "lookoutequipment:DescribeModelVersion",
              "lookoutequipment:DescribeResourcePolicy",
              "lookoutequipment:DescribeRetrainingScheduler",
              "lookoutequipment:ListDataIngestionJobs",
              "lookoutequipment:ListDatasets",
              "lookoutequipment:ListInferenceEvents",
              "lookoutequipment:ListInferenceExecutions",
              "lookoutequipment:ListInferenceSchedulers",
              "lookoutequipment:ListLabelGroups",
              "lookoutequipment:ListLabels",
              "lookoutequipment:ListModels",
              "lookoutequipment:ListModelVersions",
              "lookoutequipment:ListRetrainingSchedulers",
              "lookoutequipment:ListSensorStatistics",
              "lookoutequipment:ListTagsForResource",
              "lookoutmetrics:Describe*",
              "lookoutmetrics:Get*",
              "lookoutmetrics:List*",
              "lookoutvision:DescribeDataset",
              "lookoutvision:DescribeModel",
              "lookoutvision:DescribeModelPackagingJob",
              "lookoutvision:DescribeProject",
              "lookoutvision:ListDatasetEntries",
              "lookoutvision:ListModelPackagingJobs",
              "lookoutvision:ListModels",
              "lookoutvision:ListProjects",
              "lookoutvision:ListTagsForResource",
              "m2:GetApplication",
              "m2:GetApplicationVersion",
              "m2:GetBatchJobExecution",
              "m2:GetDataSetDetails",
              "m2:GetDataSetImportTask",
              "m2:GetDeployment",
              "m2:GetEnvironment",
              "m2:ListApplications",
              "m2:ListApplicationVersions",
              "m2:ListBatchJobDefinitions",
              "m2:ListBatchJobExecutions",
              "m2:ListDataSetImportHistory",
              "m2:ListDataSets",
              "m2:ListDeployments",
              "m2:ListEngineVersions",
              "m2:ListEnvironments",
              "m2:ListTagsForResource",
              "machinelearning:Describe*",
              "machinelearning:Get*",
              "macie2:BatchGetCustomDataIdentifiers",
              "macie2:DescribeBuckets",
              "macie2:DescribeClassificationJob",
              "macie2:DescribeOrganizationConfiguration",
              "macie2:GetAdministratorAccount",
              "macie2:GetAllowList",
              "macie2:GetAutomatedDiscoveryConfiguration",
              "macie2:GetBucketStatistics",
              "macie2:GetClassificationExportConfiguration",
              "macie2:GetClassificationScope",
              "macie2:GetCustomDataIdentifier",
              "macie2:GetFindings",
              "macie2:GetFindingsFilter",
              "macie2:GetFindingsPublicationConfiguration",
              "macie2:GetFindingStatistics",
              "macie2:GetInvitationsCount",
              "macie2:GetMacieSession",
              "macie2:GetMember",
              "macie2:GetResourceProfile",
              "macie2:GetRevealConfiguration",
              "macie2:GetSensitiveDataOccurrencesAvailability",
              "macie2:GetSensitivityInspectionTemplate",
              "macie2:GetUsageStatistics",
              "macie2:GetUsageTotals",
              "macie2:ListAllowLists",
              "macie2:ListAutomatedDiscoveryAccounts",
              "macie2:ListClassificationJobs",
              "macie2:ListClassificationScopes",
              "macie2:ListCustomDataIdentifiers",
              "macie2:ListFindings",
              "macie2:ListFindingsFilters",
              "macie2:ListInvitations",
              "macie2:ListMembers",
              "macie2:ListOrganizationAdminAccounts",
              "macie2:ListResourceProfileArtifacts",
              "macie2:ListResourceProfileDetections",
              "macie2:ListSensitivityInspectionTemplates",
              "macie2:ListTagsForResource",
              "macie2:SearchResources",
              "managedblockchain:GetMember",
              "managedblockchain:GetNetwork",
              "managedblockchain:GetNode",
              "managedblockchain:GetProposal",
              "managedblockchain:ListInvitations",
              "managedblockchain:ListMembers",
              "managedblockchain:ListNetworks",
              "managedblockchain:ListNodes",
              "managedblockchain:ListProposals",
              "managedblockchain:ListProposalVotes",
              "managedblockchain:ListTagsForResource",
              "mediaconnect:DescribeFlow",
              "mediaconnect:DescribeOffering",
              "mediaconnect:DescribeReservation",
              "mediaconnect:ListEntitlements",
              "mediaconnect:ListFlows",
              "mediaconnect:ListOfferings",
              "mediaconnect:ListReservations",
              "mediaconnect:ListTagsForResource",
              "mediaconvert:DescribeEndpoints",
              "mediaconvert:Get*",
              "mediaconvert:List*",
              "medialive:DescribeChannel",
              "medialive:DescribeInput",
              "medialive:DescribeInputDevice",
              "medialive:DescribeInputDeviceThumbnail",
              "medialive:DescribeInputSecurityGroup",
              "medialive:DescribeMultiplex",
              "medialive:DescribeMultiplexProgram",
              "medialive:DescribeOffering",
              "medialive:DescribeReservation",
              "medialive:DescribeSchedule",
              "medialive:GetCloudWatchAlarmTemplate",
              "medialive:GetCloudWatchAlarmTemplateGroup",
              "medialive:GetEventBridgeRuleTemplate",
              "medialive:GetEventBridgeRuleTemplateGroup",
              "medialive:GetSignalMap",
              "medialive:ListChannels",
              "medialive:ListCloudWatchAlarmTemplateGroups",
              "medialive:ListCloudWatchAlarmTemplates",
              "medialive:ListEventBridgeRuleTemplateGroups",
              "medialive:ListEventBridgeRuleTemplates",
              "medialive:ListInputDevices",
              "medialive:ListInputDeviceTransfers",
              "medialive:ListInputs",
              "medialive:ListInputSecurityGroups",
              "medialive:ListMultiplexes",
              "medialive:ListMultiplexPrograms",
              "medialive:ListOfferings",
              "medialive:ListReservations",
              "medialive:ListSignalMaps",
              "medialive:ListTagsForResource",
              "mediapackage-vod:Describe*",
              "mediapackage-vod:List*",
              "mediapackage:Describe*",
              "mediapackage:List*",
              "mediapackagev2:GetChannel",
              "mediapackagev2:GetChannelGroup",
              "mediapackagev2:GetChannelPolicy",
              "mediapackagev2:GetHeadObject",
              "mediapackagev2:GetObject",
              "mediapackagev2:GetOriginEndpoint",
              "mediapackagev2:GetOriginEndpointPolicy",
              "mediapackagev2:ListChannelGroups",
              "mediapackagev2:ListChannels",
              "mediapackagev2:ListOriginEndpoints",
              "mediapackagev2:ListTagsForResource",
              "mediastore:DescribeContainer",
              "mediastore:DescribeObject",
              "mediastore:GetContainerPolicy",
              "mediastore:GetCorsPolicy",
              "mediastore:GetLifecyclePolicy",
              "mediastore:GetMetricPolicy",
              "mediastore:GetObject",
              "mediastore:ListContainers",
              "mediastore:ListItems",
              "mediastore:ListTagsForResource",
              "memorydb:DescribeClusters",
              "memorydb:DescribeParameterGroups",
              "memorydb:DescribeParameters",
              "memorydb:ListTags",
              "mgh:Describe*",
              "mgh:GetHomeRegion",
              "mgh:List*",
              "mgn:DescribeJobLogItems",
              "mgn:DescribeJobs",
              "mgn:DescribeLaunchConfigurationTemplates",
              "mgn:DescribeReplicationConfigurationTemplates",
              "mgn:DescribeSourceServers",
              "mgn:DescribeVcenterClients",
              "mgn:GetLaunchConfiguration",
              "mgn:GetReplicationConfiguration",
              "mgn:ListApplications",
              "mgn:ListSourceServerActions",
              "mgn:ListTemplateActions",
              "mgn:ListWaves",
              "mobileanalytics:Get*",
              "mobiletargeting:Get*",
              "mobiletargeting:List*",
              "monitron:GetProject",
              "monitron:GetProjectAdminUser",
              "monitron:ListProjects",
              "monitron:ListTagsForResource",
              "mq:Describe*",
              "mq:List*",
              "network-firewall:DescribeFirewall",
              "network-firewall:DescribeFirewallPolicy",
              "network-firewall:DescribeLoggingConfiguration",
              "network-firewall:DescribeResourcePolicy",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:DescribeRuleGroupMetadata",
              "network-firewall:DescribeTLSInspectionConfiguration",
              "network-firewall:ListFirewallPolicies",
              "network-firewall:ListFirewalls",
              "network-firewall:ListRuleGroups",
              "network-firewall:ListTagsForResource",
              "network-firewall:ListTLSInspectionConfigurations",
              "networkmanager:DescribeGlobalNetworks",
              "networkmanager:GetConnectAttachment",
              "networkmanager:GetConnections",
              "networkmanager:GetConnectPeer",
              "networkmanager:GetConnectPeerAssociations",
              "networkmanager:GetCoreNetwork",
              "networkmanager:GetCoreNetworkChangeEvents",
              "networkmanager:GetCoreNetworkChangeSet",
              "networkmanager:GetCoreNetworkPolicy",
              "networkmanager:GetCustomerGatewayAssociations",
              "networkmanager:GetDevices",
              "networkmanager:GetLinkAssociations",
              "networkmanager:GetLinks",
              "networkmanager:GetNetworkResourceCounts",
              "networkmanager:GetNetworkResourceRelationships",
              "networkmanager:GetNetworkResources",
              "networkmanager:GetNetworkRoutes",
              "networkmanager:GetNetworkTelemetry",
              "networkmanager:GetResourcePolicy",
              "networkmanager:GetRouteAnalysis",
              "networkmanager:GetSites",
              "networkmanager:GetSiteToSiteVpnAttachment",
              "networkmanager:GetTransitGatewayConnectPeerAssociations",
              "networkmanager:GetTransitGatewayPeering",
              "networkmanager:GetTransitGatewayRegistrations",
              "networkmanager:GetTransitGatewayRouteTableAttachment",
              "networkmanager:GetVpcAttachment",
              "networkmanager:ListAttachments",
              "networkmanager:ListConnectPeers",
              "networkmanager:ListCoreNetworkPolicyVersions",
              "networkmanager:ListCoreNetworks",
              "networkmanager:ListPeerings",
              "networkmanager:ListTagsForResource",
              "nimble:GetEula",
              "nimble:GetFeatureMap",
              "nimble:GetLaunchProfile",
              "nimble:GetLaunchProfileDetails",
              "nimble:GetLaunchProfileInitialization",
              "nimble:GetLaunchProfileMember",
              "nimble:GetStreamingImage",
              "nimble:GetStreamingSession",
              "nimble:GetStudio",
              "nimble:GetStudioComponent",
              "nimble:GetStudioMember",
              "nimble:ListEulaAcceptances",
              "nimble:ListEulas",
              "nimble:ListLaunchProfileMembers",
              "nimble:ListLaunchProfiles",
              "nimble:ListStreamingImages",
              "nimble:ListStreamingSessions",
              "nimble:ListStudioComponents",
              "nimble:ListStudioMembers",
              "nimble:ListStudios",
              "nimble:ListTagsForResource",
              "notifications-contacts:GetEmailContact",
              "notifications-contacts:ListEmailContacts",
              "notifications-contacts:ListTagsForResource",
              "notifications:GetEventRule",
              "notifications:GetNotificationConfiguration",
              "notifications:GetNotificationEvent",
              "notifications:ListChannels",
              "notifications:ListEventRules",
              "notifications:ListNotificationConfigurations",
              "notifications:ListNotificationEvents",
              "notifications:ListNotificationHubs",
              "notifications:ListTagsForResource",
              "oam:GetLink",
              "oam:GetSink",
              "oam:GetSinkPolicy",
              "oam:ListAttachedLinks",
              "oam:ListLinks",
              "oam:ListSinks",
              "omics:Get*",
              "omics:List*",
              "one:GetDeviceConfigurationTemplate",
              "one:GetDeviceInstance",
              "one:GetDeviceInstanceConfiguration",
              "one:GetSite",
              "one:GetSiteAddress",
              "one:ListDeviceConfigurationTemplates",
              "one:ListDeviceInstances",
              "one:ListSites",
              "one:ListUsers",
              "opsworks-cm:Describe*",
              "opsworks-cm:List*",
              "opsworks:Describe*",
              "opsworks:Get*",
              "organizations:Describe*",
              "organizations:List*",
              "osis:GetPipeline",
              "osis:GetPipelineBlueprint",
              "osis:GetPipelineChangeProgress",
              "osis:ListPipelineBlueprints",
              "osis:ListPipelines",
              "osis:ListTagsForResource",
              "outposts:Get*",
              "outposts:List*",
              "payment-cryptography:GetAlias",
              "payment-cryptography:GetKey",
              "payment-cryptography:GetPublicKeyCertificate",
              "payment-cryptography:ListAliases",
              "payment-cryptography:ListKeys",
              "payment-cryptography:ListTagsForResource",
              "payments:GetPaymentInstrument",
              "payments:GetPaymentStatus",
              "payments:ListPaymentInstruments",
              "payments:ListPaymentPreferences",
              "payments:ListTagsForResource",
              "pca-connector-ad:GetConnector",
              "pca-connector-ad:GetDirectoryRegistration",
              "pca-connector-ad:GetServicePrincipalName",
              "pca-connector-ad:GetTemplate",
              "pca-connector-ad:GetTemplateGroupAccessControlEntry",
              "pca-connector-ad:ListConnectors",
              "pca-connector-ad:ListDirectoryRegistrations",
              "pca-connector-ad:ListServicePrincipalNames",
              "pca-connector-ad:ListTagsForResource",
              "pca-connector-ad:ListTemplateGroupAccessControlEntries",
              "pca-connector-ad:ListTemplates",
              "personalize:Describe*",
              "personalize:Get*",
              "personalize:List*",
              "pi:DescribeDimensionKeys",
              "pi:GetDimensionKeyDetails",
              "pi:GetResourceMetadata",
              "pi:GetResourceMetrics",
              "pi:ListAvailableResourceDimensions",
              "pi:ListAvailableResourceMetrics",
              "pipes:DescribePipe",
              "pipes:ListPipes",
              "pipes:ListTagsForResource",
              "polly:Describe*",
              "polly:Get*",
              "polly:List*",
              "polly:SynthesizeSpeech",
              "pricing:DescribeServices",
              "pricing:GetAttributeValues",
              "pricing:GetPriceListFileUrl",
              "pricing:GetProducts",
              "pricing:ListPriceLists",
              "proton:GetDeployment",
              "proton:GetEnvironment",
              "proton:GetEnvironmentTemplate",
              "proton:GetEnvironmentTemplateVersion",
              "proton:GetService",
              "proton:GetServiceInstance",
              "proton:GetServiceTemplate",
              "proton:GetServiceTemplateVersion",
              "proton:ListDeployments",
              "proton:ListEnvironmentAccountConnections",
              "proton:ListEnvironments",
              "proton:ListEnvironmentTemplates",
              "proton:ListServiceInstances",
              "proton:ListServices",
              "proton:ListServiceTemplates",
              "proton:ListTagsForResource",
              "purchase-orders:GetPurchaseOrder",
              "purchase-orders:ListPurchaseOrderInvoices",
              "purchase-orders:ListPurchaseOrders",
              "purchase-orders:ViewPurchaseOrders",
              "qldb:DescribeJournalKinesisStream",
              "qldb:DescribeJournalS3Export",
              "qldb:DescribeLedger",
              "qldb:GetBlock",
              "qldb:GetDigest",
              "qldb:GetRevision",
              "qldb:ListJournalKinesisStreamsForLedger",
              "qldb:ListJournalS3Exports",
              "qldb:ListJournalS3ExportsForLedger",
              "qldb:ListLedgers",
              "qldb:ListTagsForResource",
              "ram:Get*",
              "ram:List*",
              "rbin:GetRule",
              "rbin:ListRules",
              "rbin:ListTagsForResource",
              "rds:Describe*",
              "rds:Download*",
              "rds:List*",
              "redshift-serverless:GetCustomDomainAssociation",
              "redshift-serverless:GetEndpointAccess",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:GetRecoveryPoint",
              "redshift-serverless:GetResourcePolicy",
              "redshift-serverless:GetScheduledAction",
              "redshift-serverless:GetSnapshot",
              "redshift-serverless:GetTableRestoreStatus",
              "redshift-serverless:GetUsageLimit",
              "redshift-serverless:GetWorkgroup",
              "redshift-serverless:ListCustomDomainAssociations",
              "redshift-serverless:ListEndpointAccess",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListRecoveryPoints",
              "redshift-serverless:ListScheduledActions",
              "redshift-serverless:ListSnapshotCopyConfigurations",
              "redshift-serverless:ListSnapshots",
              "redshift-serverless:ListTableRestoreStatus",
              "redshift-serverless:ListTagsForResource",
              "redshift-serverless:ListUsageLimits",
              "redshift-serverless:ListWorkgroups",
              "redshift:Describe*",
              "redshift:GetReservedNodeExchangeOfferings",
              "redshift:ListRecommendations",
              "redshift:View*",
              "refactor-spaces:GetApplication",
              "refactor-spaces:GetEnvironment",
              "refactor-spaces:GetResourcePolicy",
              "refactor-spaces:GetRoute",
              "refactor-spaces:GetService",
              "refactor-spaces:ListApplications",
              "refactor-spaces:ListEnvironments",
              "refactor-spaces:ListEnvironmentVpcs",
              "refactor-spaces:ListRoutes",
              "refactor-spaces:ListServices",
              "refactor-spaces:ListTagsForResource",
              "rekognition:CompareFaces",
              "rekognition:DescribeDataset",
              "rekognition:DescribeProjects",
              "rekognition:DescribeProjectVersions",
              "rekognition:DescribeStreamProcessor",
              "rekognition:Detect*",
              "rekognition:GetCelebrityInfo",
              "rekognition:GetCelebrityRecognition",
              "rekognition:GetContentModeration",
              "rekognition:GetFaceDetection",
              "rekognition:GetFaceSearch",
              "rekognition:GetLabelDetection",
              "rekognition:GetPersonTracking",
              "rekognition:GetSegmentDetection",
              "rekognition:GetTextDetection",
              "rekognition:List*",
              "rekognition:RecognizeCelebrities",
              "rekognition:Search*",
              "resiliencehub:DescribeApp",
              "resiliencehub:DescribeAppAssessment",
              "resiliencehub:DescribeAppVersion",
              "resiliencehub:DescribeAppVersionAppComponent",
              "resiliencehub:DescribeAppVersionResource",
              "resiliencehub:DescribeAppVersionResourcesResolutionStatus",
              "resiliencehub:DescribeAppVersionTemplate",
              "resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
              "resiliencehub:DescribeResiliencyPolicy",
              "resiliencehub:ListAlarmRecommendations",
              "resiliencehub:ListAppAssessmentComplianceDrifts",
              "resiliencehub:ListAppAssessmentResourceDrifts",
              "resiliencehub:ListAppAssessments",
              "resiliencehub:ListAppComponentCompliances",
              "resiliencehub:ListAppComponentRecommendations",
              "resiliencehub:ListAppInputSources",
              "resiliencehub:ListApps",
              "resiliencehub:ListAppVersionAppComponents",
              "resiliencehub:ListAppVersionResourceMappings",
              "resiliencehub:ListAppVersionResources",
              "resiliencehub:ListAppVersions",
              "resiliencehub:ListRecommendationTemplates",
              "resiliencehub:ListResiliencyPolicies",
              "resiliencehub:ListSopRecommendations",
              "resiliencehub:ListSuggestedResiliencyPolicies",
              "resiliencehub:ListTagsForResource",
              "resiliencehub:ListTestRecommendations",
              "resiliencehub:ListUnsupportedAppVersionResources",
              "resource-explorer-2:BatchGetView",
              "resource-explorer-2:GetDefaultView",
              "resource-explorer-2:GetIndex",
              "resource-explorer-2:GetView",
              "resource-explorer-2:ListIndexes",
              "resource-explorer-2:ListSupportedResourceTypes",
              "resource-explorer-2:ListTagsForResource",
              "resource-explorer-2:ListViews",
              "resource-explorer-2:Search",
              "resource-groups:Get*",
              "resource-groups:List*",
              "resource-groups:Search*",
              "robomaker:BatchDescribe*",
              "robomaker:Describe*",
              "robomaker:Get*",
              "robomaker:List*",
              "route53-recovery-cluster:Get*",
              "route53-recovery-cluster:ListRoutingControls",
              "route53-recovery-control-config:Describe*",
              "route53-recovery-control-config:GetResourcePolicy",
              "route53-recovery-control-config:List*",
              "route53-recovery-readiness:Get*",
              "route53-recovery-readiness:List*",
              "route53:Get*",
              "route53:List*",
              "route53:Test*",
              "route53domains:Check*",
              "route53domains:Get*",
              "route53domains:List*",
              "route53domains:View*",
              "route53profiles:GetProfile",
              "route53profiles:GetProfileAssociation",
              "route53profiles:GetProfileResourceAssociation",
              "route53profiles:ListProfileAssociations",
              "route53profiles:ListProfileResourceAssociations",
              "route53profiles:ListProfiles",
              "route53profiles:ListTagsForResource",
              "route53resolver:Get*",
              "route53resolver:List*",
              "rum:GetAppMonitor",
              "rum:GetAppMonitorData",
              "rum:ListAppMonitors",
              "s3-object-lambda:GetObject",
              "s3-object-lambda:GetObjectAcl",
              "s3-object-lambda:GetObjectLegalHold",
              "s3-object-lambda:GetObjectRetention",
              "s3-object-lambda:GetObjectTagging",
              "s3-object-lambda:GetObjectVersion",
              "s3-object-lambda:GetObjectVersionAcl",
              "s3-object-lambda:GetObjectVersionTagging",
              "s3-object-lambda:ListBucket",
              "s3-object-lambda:ListBucketMultipartUploads",
              "s3-object-lambda:ListBucketVersions",
              "s3-object-lambda:ListMultipartUploadParts",
              "s3-outposts:GetAccessPoint",
              "s3-outposts:GetAccessPointPolicy",
              "s3-outposts:GetBucket",
              "s3-outposts:GetBucketPolicy",
              "s3-outposts:GetBucketTagging",
              "s3-outposts:GetBucketVersioning",
              "s3-outposts:GetLifecycleConfiguration",
              "s3-outposts:GetObject",
              "s3-outposts:GetObjectTagging",
              "s3-outposts:GetObjectVersion",
              "s3-outposts:GetObjectVersionForReplication",
              "s3-outposts:GetObjectVersionTagging",
              "s3-outposts:GetReplicationConfiguration",
              "s3-outposts:ListAccessPoints",
              "s3-outposts:ListBucket",
              "s3-outposts:ListBucketMultipartUploads",
              "s3-outposts:ListBucketVersions",
              "s3-outposts:ListEndpoints",
              "s3-outposts:ListMultipartUploadParts",
              "s3-outposts:ListOutpostsWithS3",
              "s3-outposts:ListRegionalBuckets",
              "s3-outposts:ListSharedEndpoints",
              "s3:DescribeJob",
              "s3:Get*",
              "s3:List*",
              "sagemaker-groundtruth-synthetic:GetAccountDetails",
              "sagemaker-groundtruth-synthetic:GetBatch",
              "sagemaker-groundtruth-synthetic:GetProject",
              "sagemaker-groundtruth-synthetic:ListBatchDataTransfers",
              "sagemaker-groundtruth-synthetic:ListBatchSummaries",
              "sagemaker-groundtruth-synthetic:ListProjectDataTransfers",
              "sagemaker-groundtruth-synthetic:ListProjectSummaries",
              "sagemaker:Describe*",
              "sagemaker:GetSearchSuggestions",
              "sagemaker:List*",
              "sagemaker:Search",
              "savingsplans:DescribeSavingsPlanRates",
              "savingsplans:DescribeSavingsPlans",
              "savingsplans:DescribeSavingsPlansOfferingRates",
              "savingsplans:DescribeSavingsPlansOfferings",
              "savingsplans:ListTagsForResource",
              "scheduler:GetSchedule",
              "scheduler:GetScheduleGroup",
              "scheduler:ListScheduleGroups",
              "scheduler:ListSchedules",
              "scheduler:ListTagsForResource",
              "schemas:Describe*",
              "schemas:Get*",
              "schemas:List*",
              "schemas:Search*",
              "sdb:Get*",
              "sdb:List*",
              "sdb:Select*",
              "secretsmanager:Describe*",
              "secretsmanager:GetResourcePolicy",
              "secretsmanager:List*",
              "securityhub:BatchGetControlEvaluations",
              "securityhub:BatchGetSecurityControls",
              "securityhub:BatchGetStandardsControlAssociations",
              "securityhub:Describe*",
              "securityhub:Get*",
              "securityhub:List*",
              "securitylake:GetDataLakeExceptionSubscription",
              "securitylake:GetDataLakeOrganizationConfiguration",
              "securitylake:GetDataLakeSources",
              "securitylake:GetSubscriber",
              "securitylake:ListDataLakeExceptions",
              "securitylake:ListDataLakes",
              "securitylake:ListLogSources",
              "securitylake:ListSubscribers",
              "securitylake:ListTagsForResource",
              "serverlessrepo:Get*",
              "serverlessrepo:List*",
              "serverlessrepo:SearchApplications",
              "servicecatalog:Describe*",
              "servicecatalog:GetApplication",
              "servicecatalog:GetAttributeGroup",
              "servicecatalog:List*",
              "servicecatalog:Scan*",
              "servicecatalog:Search*",
              "servicediscovery:DiscoverInstances",
              "servicediscovery:DiscoverInstancesRevision",
              "servicediscovery:Get*",
              "servicediscovery:List*",
              "servicequotas:GetAssociationForServiceQuotaTemplate",
              "servicequotas:GetAWSDefaultServiceQuota",
              "servicequotas:GetRequestedServiceQuotaChange",
              "servicequotas:GetServiceQuota",
              "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
              "servicequotas:ListAWSDefaultServiceQuotas",
              "servicequotas:ListRequestedServiceQuotaChangeHistory",
              "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
              "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
              "servicequotas:ListServiceQuotas",
              "servicequotas:ListServices",
              "ses:BatchGetMetricData",
              "ses:Describe*",
              "ses:Get*",
              "ses:List*",
              "shield:Describe*",
              "shield:Get*",
              "shield:List*",
              "signer:DescribeSigningJob",
              "signer:GetSigningPlatform",
              "signer:GetSigningProfile",
              "signer:ListProfilePermissions",
              "signer:ListSigningJobs",
              "signer:ListSigningPlatforms",
              "signer:ListSigningProfiles",
              "signer:ListTagsForResource",
              "signin:ListTrustedIdentityPropagationApplicationsForConsole",
              "sms-voice:DescribeAccountAttributes",
              "sms-voice:DescribeAccountLimits",
              "sms-voice:DescribeConfigurationSets",
              "sms-voice:DescribeKeywords",
              "sms-voice:DescribeOptedOutNumbers",
              "sms-voice:DescribeOptOutLists",
              "sms-voice:DescribePhoneNumbers",
              "sms-voice:DescribePools",
              "sms-voice:DescribeSenderIds",
              "sms-voice:DescribeSpendLimits",
              "sms-voice:ListPoolOriginationIdentities",
              "sms-voice:ListTagsForResource",
              "snowball:Describe*",
              "snowball:Get*",
              "snowball:List*",
              "sns:Check*",
              "sns:Get*",
              "sns:List*",
              "sqs:Get*",
              "sqs:List*",
              "sqs:Receive*",
              "ssm-contacts:DescribeEngagement",
              "ssm-contacts:DescribePage",
              "ssm-contacts:GetContact",
              "ssm-contacts:GetContactChannel",
              "ssm-contacts:ListContactChannels",
              "ssm-contacts:ListContacts",
              "ssm-contacts:ListEngagements",
              "ssm-contacts:ListPageReceipts",
              "ssm-contacts:ListPagesByContact",
              "ssm-contacts:ListPagesByEngagement",
              "ssm-incidents:GetIncidentRecord",
              "ssm-incidents:GetReplicationSet",
              "ssm-incidents:GetResourcePolicies",
              "ssm-incidents:GetResponsePlan",
              "ssm-incidents:GetTimelineEvent",
              "ssm-incidents:ListIncidentRecords",
              "ssm-incidents:ListRelatedItems",
              "ssm-incidents:ListReplicationSets",
              "ssm-incidents:ListResponsePlans",
              "ssm-incidents:ListTagsForResource",
              "ssm-incidents:ListTimelineEvents",
              "ssm:Describe*",
              "ssm:Get*",
              "ssm:List*",
              "sso-directory:Describe*",
              "sso-directory:List*",
              "sso-directory:Search*",
              "sso:Describe*",
              "sso:Get*",
              "sso:List*",
              "sso:Search*",
              "states:Describe*",
              "states:GetExecutionHistory",
              "states:List*",
              "states:ValidateStateMachineDefinition",
              "storagegateway:Describe*",
              "storagegateway:List*",
              "sts:GetAccessKeyInfo",
              "sts:GetCallerIdentity",
              "sts:GetSessionToken",
              "support:DescribeAttachment",
              "support:DescribeCases",
              "support:DescribeCommunications",
              "support:DescribeServices",
              "support:DescribeSeverityLevels",
              "support:DescribeTrustedAdvisorCheckRefreshStatuses",
              "support:DescribeTrustedAdvisorCheckResult",
              "support:DescribeTrustedAdvisorChecks",
              "support:DescribeTrustedAdvisorCheckSummaries",
              "supportplans:GetSupportPlan",
              "supportplans:GetSupportPlanUpdateStatus",
              "sustainability:GetCarbonFootprintSummary",
              "swf:Count*",
              "swf:Describe*",
              "swf:Get*",
              "swf:List*",
              "synthetics:Describe*",
              "synthetics:Get*",
              "synthetics:List*",
              "tag:DescribeReportCreation",
              "tag:Get*",
              "tax:GetExemptions",
              "tax:GetTaxInheritance",
              "tax:GetTaxInterview",
              "tax:GetTaxRegistration",
              "tax:GetTaxRegistrationDocument",
              "tax:ListTaxRegistrations",
              "timestream:DescribeBatchLoadTask",
              "timestream:DescribeDatabase",
              "timestream:DescribeEndpoints",
              "timestream:DescribeTable",
              "timestream:ListBatchLoadTasks",
              "timestream:ListDatabases",
              "timestream:ListMeasures",
              "timestream:ListTables",
              "timestream:ListTagsForResource",
              "tnb:GetSolFunctionInstance",
              "tnb:GetSolFunctionPackage",
              "tnb:GetSolFunctionPackageContent",
              "tnb:GetSolFunctionPackageDescriptor",
              "tnb:GetSolNetworkInstance",
              "tnb:GetSolNetworkOperation",
              "tnb:GetSolNetworkPackage",
              "tnb:GetSolNetworkPackageContent",
              "tnb:GetSolNetworkPackageDescriptor",
              "tnb:ListSolFunctionInstances",
              "tnb:ListSolFunctionPackages",
              "tnb:ListSolNetworkInstances",
              "tnb:ListSolNetworkOperations",
              "tnb:ListSolNetworkPackages",
              "tnb:ListTagsForResource",
              "transcribe:Get*",
              "transcribe:List*",
              "transfer:Describe*",
              "transfer:List*",
              "transfer:TestIdentityProvider",
              "translate:DescribeTextTranslationJob",
              "translate:GetParallelData",
              "translate:GetTerminology",
              "translate:ListParallelData",
              "translate:ListTerminologies",
              "translate:ListTextTranslationJobs",
              "trustedadvisor:Describe*",
              "verifiedpermissions:GetIdentitySource",
              "verifiedpermissions:GetPolicy",
              "verifiedpermissions:GetPolicyStore",
              "verifiedpermissions:GetPolicyTemplate",
              "verifiedpermissions:GetSchema",
              "verifiedpermissions:IsAuthorized",
              "verifiedpermissions:IsAuthorizedWithToken",
              "verifiedpermissions:ListIdentitySources",
              "verifiedpermissions:ListPolicies",
              "verifiedpermissions:ListPolicyStores",
              "verifiedpermissions:ListPolicyTemplates",
              "vpc-lattice:GetAccessLogSubscription",
              "vpc-lattice:GetAuthPolicy",
              "vpc-lattice:GetListener",
              "vpc-lattice:GetResourcePolicy",
              "vpc-lattice:GetRule",
              "vpc-lattice:GetService",
              "vpc-lattice:GetServiceNetwork",
              "vpc-lattice:GetServiceNetworkServiceAssociation",
              "vpc-lattice:GetServiceNetworkVpcAssociation",
              "vpc-lattice:GetTargetGroup",
              "vpc-lattice:ListAccessLogSubscriptions",
              "vpc-lattice:ListListeners",
              "vpc-lattice:ListRules",
              "vpc-lattice:ListServiceNetworks",
              "vpc-lattice:ListServiceNetworkServiceAssociations",
              "vpc-lattice:ListServiceNetworkVpcAssociations",
              "vpc-lattice:ListServices",
              "vpc-lattice:ListTagsForResource",
              "vpc-lattice:ListTargetGroups",
              "vpc-lattice:ListTargets",
              "waf-regional:Get*",
              "waf-regional:List*",
              "waf:Get*",
              "waf:List*",
              "wafv2:CheckCapacity",
              "wafv2:Describe*",
              "wafv2:Get*",
              "wafv2:List*",
              "wellarchitected:ExportLens",
              "wellarchitected:GetAnswer",
              "wellarchitected:GetConsolidatedReport",
              "wellarchitected:GetLens",
              "wellarchitected:GetLensReview",
              "wellarchitected:GetLensReviewReport",
              "wellarchitected:GetLensVersionDifference",
              "wellarchitected:GetMilestone",
              "wellarchitected:GetProfile",
              "wellarchitected:GetProfileTemplate",
              "wellarchitected:GetReviewTemplate",
              "wellarchitected:GetReviewTemplateAnswer",
              "wellarchitected:GetReviewTemplateLensReview",
              "wellarchitected:GetWorkload",
              "wellarchitected:ListAnswers",
              "wellarchitected:ListCheckDetails",
              "wellarchitected:ListCheckSummaries",
              "wellarchitected:ListLenses",
              "wellarchitected:ListLensReviewImprovements",
              "wellarchitected:ListLensReviews",
              "wellarchitected:ListLensShares",
              "wellarchitected:ListMilestones",
              "wellarchitected:ListNotifications",
              "wellarchitected:ListProfileNotifications",
              "wellarchitected:ListProfiles",
              "wellarchitected:ListProfileShares",
              "wellarchitected:ListReviewTemplateAnswers",
              "wellarchitected:ListReviewTemplates",
              "wellarchitected:ListShareInvitations",
              "wellarchitected:ListTagsForResource",
              "wellarchitected:ListTemplateShares",
              "wellarchitected:ListWorkloads",
              "wellarchitected:ListWorkloadShares",
              "workdocs:CheckAlias",
              "workdocs:Describe*",
              "workdocs:Get*",
              "workmail:Describe*",
              "workmail:Get*",
              "workmail:List*",
              "workmail:Search*",
              "workspaces-web:GetBrowserSettings",
              "workspaces-web:GetIdentityProvider",
              "workspaces-web:GetNetworkSettings",
              "workspaces-web:GetPortal",
              "workspaces-web:GetPortalServiceProviderMetadata",
              "workspaces-web:GetTrustStore",
              "workspaces-web:GetUserAccessLoggingSettings",
              "workspaces-web:GetUserSettings",
              "workspaces-web:ListBrowserSettings",
              "workspaces-web:ListIdentityProviders",
              "workspaces-web:ListNetworkSettings",
              "workspaces-web:ListPortals",
              "workspaces-web:ListTagsForResource",
              "workspaces-web:ListTrustStores",
              "workspaces-web:ListUserAccessLoggingSettings",
              "workspaces-web:ListUserSettings",
              "workspaces:Describe*",
              "xray:BatchGet*",
              "xray:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudFormationReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:Describe*",
              "cloudformation:EstimateTemplateCost",
              "cloudformation:Get*",
              "cloudformation:List*",
              "cloudformation:ValidateTemplate",
              "cloudformation:Detect*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudFrontFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "cfflistbuckets",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Sid": "cffullaccess",
            "Action": [
              "acm:ListCertificates",
              "cloudfront:*",
              "cloudfront-keyvaluestore:*",
              "iam:ListServerCertificates",
              "waf:ListWebACLs",
              "waf:GetWebACL",
              "wafv2:ListWebACLs",
              "wafv2:GetWebACL",
              "kinesis:ListStreams"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "cffdescribestream",
            "Action": [
              "kinesis:DescribeStream"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:kinesis:*:*:*"
          },
          {
            "Sid": "cfflistroles",
            "Action": [
              "iam:ListRoles"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudHSMFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "cloudhsm:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudHSMReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudhsm:Get*",
              "cloudhsm:List*",
              "cloudhsm:Describe*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ResourceGroupsandTagEditorFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "tag:getResources",
              "tag:getTagKeys",
              "tag:getTagValues",
              "tag:TagResources",
              "tag:UntagResources",
              "resource-groups:*",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources",
              "cloudformation:ListStacks"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ResourceGroupsandTagEditorReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "tag:getResources",
              "tag:getTagKeys",
              "tag:getTagValues",
              "resource-groups:Get*",
              "resource-groups:List*",
              "resource-groups:Search*",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources",
              "cloudformation:ListStacks"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudFrontReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "cfReadOnly",
            "Effect": "Allow",
            "Action": [
              "acm:ListCertificates",
              "cloudfront:Describe*",
              "cloudfront:Get*",
              "cloudfront:List*",
              "cloudfront-keyvaluestore:Describe*",
              "cloudfront-keyvaluestore:Get*",
              "cloudfront-keyvaluestore:List*",
              "iam:ListServerCertificates",
              "route53:List*",
              "waf:ListWebACLs",
              "waf:GetWebACL",
              "wafv2:ListWebACLs",
              "wafv2:GetWebACL"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudSearchFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudsearch:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudSearchReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudsearch:Describe*",
              "cloudsearch:List*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "autoscaling:Describe*",
              "cloudwatch:*",
              "logs:*",
              "sns:*",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:GetRole",
              "oam:ListSinks"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "events.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "oam:ListAttachedLinks"
            ],
            "Resource": "arn:aws:oam:*:*:sink/*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchReadOnlyAccessPermissions",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalingPolicies",
              "application-signals:BatchGet*",
              "application-signals:Get*",
              "application-signals:List*",
              "autoscaling:Describe*",
              "cloudwatch:BatchGet*",
              "cloudwatch:Describe*",
              "cloudwatch:GenerateQuery",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "logs:Get*",
              "logs:List*",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:Describe*",
              "logs:TestMetricFilter",
              "logs:FilterLogEvents",
              "logs:StartLiveTail",
              "logs:StopLiveTail",
              "oam:ListSinks",
              "sns:Get*",
              "sns:List*",
              "rum:BatchGet*",
              "rum:Get*",
              "rum:List*",
              "synthetics:Describe*",
              "synthetics:Get*",
              "synthetics:List*",
              "xray:BatchGet*",
              "xray:Get*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "OAMReadPermissions",
            "Effect": "Allow",
            "Action": [
              "oam:ListAttachedLinks"
            ],
            "Resource": "arn:aws:oam:*:*:sink/*"
          },
          {
            "Sid": "CloudWatchReadOnlyGetRolePermissions",
            "Effect": "Allow",
            "Action": "iam:GetRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/application-signals.cloudwatch.amazonaws.com/AWSServiceRoleForCloudWatchApplicationSignals"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchLogsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchLogsFullAccess",
            "Effect": "Allow",
            "Action": [
              "logs:*",
              "cloudwatch:GenerateQuery"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchLogsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchLogsReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "logs:Describe*",
              "logs:Get*",
              "logs:List*",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:TestMetricFilter",
              "logs:FilterLogEvents",
              "logs:StartLiveTail",
              "logs:StopLiveTail",
              "cloudwatch:GenerateQuery"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDirectConnectFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "directconnect:*",
              "ec2:DescribeVpnGateways",
              "ec2:DescribeTransitGateways"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDirectConnectReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "directconnect:Describe*",
              "directconnect:List*",
              "ec2:DescribeVpnGateways",
              "ec2:DescribeTransitGateways"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAppStreamFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "appstream:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget",
              "application-autoscaling:DescribeScheduledActions",
              "application-autoscaling:PutScheduledAction",
              "application-autoscaling:DeleteScheduledAction"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:PutMetricAlarm"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": "iam:ListRoles",
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": "iam:PassRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/service-role/ApplicationAutoScalingForAmazonAppStreamAccess",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "application-autoscaling.amazonaws.com"
              }
            }
          },
          {
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/appstream.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_AppStreamFleet",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "appstream.application-autoscaling.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAppStreamReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "appstream:Get*",
              "appstream:List*",
              "appstream:Describe*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDynamoDBFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "dynamodb:*",
              "dax:*",
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarmHistory",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:GetMetricData",
              "datapipeline:ActivatePipeline",
              "datapipeline:CreatePipeline",
              "datapipeline:DeletePipeline",
              "datapipeline:DescribeObjects",
              "datapipeline:DescribePipelines",
              "datapipeline:GetPipelineDefinition",
              "datapipeline:ListPipelines",
              "datapipeline:PutPipelineDefinition",
              "datapipeline:QueryObjects",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "iam:GetRole",
              "iam:ListRoles",
              "kms:DescribeKey",
              "kms:ListAliases",
              "sns:CreateTopic",
              "sns:DeleteTopic",
              "sns:ListSubscriptions",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics",
              "sns:Subscribe",
              "sns:Unsubscribe",
              "sns:SetTopicAttributes",
              "lambda:CreateFunction",
              "lambda:ListFunctions",
              "lambda:ListEventSourceMappings",
              "lambda:CreateEventSourceMapping",
              "lambda:DeleteEventSourceMapping",
              "lambda:GetFunctionConfiguration",
              "lambda:DeleteFunction",
              "resource-groups:ListGroups",
              "resource-groups:ListGroupResources",
              "resource-groups:GetGroup",
              "resource-groups:GetGroupQuery",
              "resource-groups:DeleteGroup",
              "resource-groups:CreateGroup",
              "tag:GetResources",
              "kinesis:ListStreams",
              "kinesis:DescribeStream",
              "kinesis:DescribeStreamSummary"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": "cloudwatch:GetInsightRuleReport",
            "Effect": "Allow",
            "Resource": "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "application-autoscaling.amazonaws.com",
                  "application-autoscaling.amazonaws.com.cn",
                  "dax.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "replication.dynamodb.amazonaws.com",
                  "dax.amazonaws.com",
                  "dynamodb.application-autoscaling.amazonaws.com",
                  "contributorinsights.dynamodb.amazonaws.com",
                  "kinesisreplication.dynamodb.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDynamoDBReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "GeneralReadOnlyAccess",
            "Action": [
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "cloudwatch:DescribeAlarmHistory",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricData",
              "datapipeline:DescribeObjects",
              "datapipeline:DescribePipelines",
              "datapipeline:GetPipelineDefinition",
              "datapipeline:ListPipelines",
              "datapipeline:QueryObjects",
              "dynamodb:BatchGetItem",
              "dynamodb:Describe*",
              "dynamodb:List*",
              "dynamodb:GetItem",
              "dynamodb:GetResourcePolicy",
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:PartiQLSelect",
              "dax:Describe*",
              "dax:List*",
              "dax:GetItem",
              "dax:BatchGetItem",
              "dax:Query",
              "dax:Scan",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "iam:GetRole",
              "iam:ListRoles",
              "kms:DescribeKey",
              "kms:ListAliases",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics",
              "lambda:ListFunctions",
              "lambda:ListEventSourceMappings",
              "lambda:GetFunctionConfiguration",
              "resource-groups:ListGroups",
              "resource-groups:ListGroupResources",
              "resource-groups:GetGroup",
              "resource-groups:GetGroupQuery",
              "tag:GetResources",
              "kinesis:ListStreams",
              "kinesis:DescribeStream",
              "kinesis:DescribeStreamSummary"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "CCIAccess",
            "Action": "cloudwatch:GetInsightRuleReport",
            "Effect": "Allow",
            "Resource": "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDynamoDBFullAccesswithDataPipeline",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarmHistory",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cloudwatch:PutMetricAlarm",
              "dynamodb:*",
              "sns:CreateTopic",
              "sns:DeleteTopic",
              "sns:ListSubscriptions",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics",
              "sns:Subscribe",
              "sns:Unsubscribe",
              "sns:SetTopicAttributes"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "DDBConsole"
          },
          {
            "Action": [
              "lambda:*",
              "iam:ListRoles"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "DDBConsoleTriggers"
          },
          {
            "Action": [
              "datapipeline:*",
              "iam:ListRoles"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "DDBConsoleImportExport"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRolePolicy",
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Sid": "IAMEDPRoles"
          },
          {
            "Action": [
              "ec2:CreateTags",
              "ec2:DescribeInstances",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "elasticmapreduce:*",
              "datapipeline:*"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "EMR"
          },
          {
            "Action": [
              "s3:DeleteObject",
              "s3:Get*",
              "s3:List*",
              "s3:Put*"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Sid": "S3"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": "ec2:*",
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "autoscaling:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "autoscaling.amazonaws.com",
                  "ec2scheduled.amazonaws.com",
                  "elasticloadbalancing.amazonaws.com",
                  "spot.amazonaws.com",
                  "spotfleet.amazonaws.com",
                  "transitgateway.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2ReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "ec2:Describe*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:Describe*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "autoscaling:Describe*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElastiCacheFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ElastiCacheManagementActions",
            "Effect": "Allow",
            "Action": "elasticache:*",
            "Resource": "*"
          },
          {
            "Sid": "CreateServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/elasticache.amazonaws.com/AWSServiceRoleForElastiCache",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "elasticache.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CreateVPCEndpoints",
            "Effect": "Allow",
            "Action": "ec2:CreateVpcEndpoint",
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringLike": {
                "ec2:VpceServiceName": "com.amazonaws.elasticache.serverless.*"
              }
            }
          },
          {
            "Sid": "AllowAccessToElastiCacheTaggedVpcEndpoints",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "NotResource": "arn:aws:ec2:*:*:vpc-endpoint/*"
          },
          {
            "Sid": "TagVPCEndpointsOnCreation",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint",
                "aws:RequestTag/AmazonElastiCacheManaged": "true"
              }
            }
          },
          {
            "Sid": "AllowAccessToEc2",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAccessToKMS",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases",
              "kms:ListKeys"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAccessToCloudWatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAccessToAutoScaling",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScheduledActions",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScalingActivities"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeLogGroups",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ListLogDeliveryStreams",
            "Effect": "Allow",
            "Action": [
              "firehose:ListDeliveryStreams"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeS3Buckets",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAccessToOutposts",
            "Effect": "Allow",
            "Action": [
              "outposts:ListOutposts"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAccessToSNS",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElastiCacheReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "elasticache:Describe*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticMapReduceFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudwatch:*",
              "cloudformation:CreateStack",
              "cloudformation:DescribeStackEvents",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:CancelSpotInstanceRequests",
              "ec2:CreateRoute",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTags",
              "ec2:DeleteRoute",
              "ec2:DeleteTags",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSpotPriceHistory",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "ec2:DescribeRouteTables",
              "ec2:DescribeNetworkAcls",
              "ec2:CreateVpcEndpoint",
              "ec2:ModifyImageAttribute",
              "ec2:ModifyInstanceAttribute",
              "ec2:RequestSpotInstances",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RunInstances",
              "ec2:TerminateInstances",
              "elasticmapreduce:*",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:ListRoles",
              "iam:PassRole",
              "kms:List*",
              "s3:*",
              "sdb:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "elasticmapreduce.amazonaws.com",
                  "elasticmapreduce.amazonaws.com.cn"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticMapReduceReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "elasticmapreduce:Describe*",
              "elasticmapreduce:List*",
              "elasticmapreduce:GetBlockPublicAccessConfiguration",
              "elasticmapreduce:ViewEventsFromAllClustersInConsole",
              "s3:GetObject",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "sdb:Select",
              "cloudwatch:GetMetricStatistics"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGlacierReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "glacier:DescribeJob",
              "glacier:DescribeVault",
              "glacier:GetDataRetrievalPolicy",
              "glacier:GetJobOutput",
              "glacier:GetVaultAccessPolicy",
              "glacier:GetVaultLock",
              "glacier:GetVaultNotifications",
              "glacier:ListJobs",
              "glacier:ListMultipartUploads",
              "glacier:ListParts",
              "glacier:ListTagsForVault",
              "glacier:ListVaults"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGlacierFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": "glacier:*",
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKinesisFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "kinesis:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKinesisReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:Get*",
              "kinesis:List*",
              "kinesis:Describe*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceRead-only",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Resource": "*",
            "Action": [
              "aws-marketplace:ViewSubscriptions",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs"
            ],
            "Effect": "Allow"
          },
          {
            "Resource": "*",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListBuilds",
              "aws-marketplace:DescribeBuilds",
              "iam:ListRoles",
              "iam:ListInstanceProfiles",
              "sns:GetTopicAttributes",
              "sns:ListTopics"
            ]
          },
          {
            "Resource": "*",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListPrivateMarketplaceRequests",
              "aws-marketplace:DescribePrivateMarketplaceRequests"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListPrivateListings"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceManageSubscriptions",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "aws-marketplace:ViewSubscriptions",
              "aws-marketplace:Subscribe",
              "aws-marketplace:Unsubscribe"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "aws-marketplace:CreatePrivateMarketplaceRequests",
              "aws-marketplace:ListPrivateMarketplaceRequests",
              "aws-marketplace:DescribePrivateMarketplaceRequests"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListPrivateListings"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMobileAnalyticsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "mobileanalytics:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMobileAnalyticsFinancialReportAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mobileanalytics:GetReports",
              "mobileanalytics:GetFinancialReports"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMobileAnalyticsNon-financialReportAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "mobileanalytics:GetReports",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMobileAnalyticsWriteOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "mobileanalytics:PutEvents",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "IAMFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:*",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribePolicy",
              "organizations:ListChildren",
              "organizations:ListParents",
              "organizations:ListPoliciesForTarget",
              "organizations:ListRoots",
              "organizations:ListPolicies",
              "organizations:ListTargetsForPolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "IAMReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:GenerateCredentialReport",
              "iam:GenerateServiceLastAccessedDetails",
              "iam:Get*",
              "iam:List*",
              "iam:SimulateCustomPolicy",
              "iam:SimulatePrincipalPolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSKeyManagementServicePowerUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kms:CreateAlias",
              "kms:CreateKey",
              "kms:DeleteAlias",
              "kms:Describe*",
              "kms:GenerateRandom",
              "kms:Get*",
              "kms:List*",
              "kms:TagResource",
              "kms:UntagResource",
              "iam:ListGroups",
              "iam:ListRoles",
              "iam:ListUsers"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkMailFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ds:AuthorizeApplication",
              "ds:CheckAlias",
              "ds:CreateAlias",
              "ds:CreateDirectory",
              "ds:CreateIdentityPoolDirectory",
              "ds:DeleteDirectory",
              "ds:DescribeDirectories",
              "ds:GetDirectoryLimits",
              "ds:ListAuthorizedApplications",
              "ds:UnauthorizeApplication",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateTags",
              "ec2:CreateVpc",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSubnet",
              "ec2:DeleteVpc",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "kms:DescribeKey",
              "kms:ListAliases",
              "lambda:ListFunctions",
              "route53:ChangeResourceRecordSets",
              "route53:ListHostedZones",
              "route53:ListResourceRecordSets",
              "route53:GetHostedZone",
              "route53domains:CheckDomainAvailability",
              "route53domains:ListDomains",
              "ses:*",
              "workmail:*",
              "iam:ListRoles",
              "logs:DescribeLogGroups",
              "logs:CreateLogGroup",
              "logs:PutRetentionPolicy",
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "events.workmail.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.workmail.amazonaws.com/AWSServiceRoleForAmazonWorkMailEvents*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*workmail*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "events.workmail.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkMailReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ses:Describe*",
              "ses:Get*",
              "workmail:Describe*",
              "workmail:Get*",
              "workmail:List*",
              "workmail:Search*",
              "lambda:ListFunctions",
              "iam:ListRoles",
              "logs:DescribeLogGroups",
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSImportExportReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "importexport:ListJobs",
              "importexport:GetStatus"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSImportExportFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "importexport:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaExecute",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:*"
            ],
            "Resource": "arn:aws:logs:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaInvocation-DynamoDB",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeStream",
              "dynamodb:GetRecords",
              "dynamodb:GetShardIterator",
              "dynamodb:ListStreams"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "redshift:*",
              "redshift-serverless:*",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeInternetGateways",
              "sns:CreateTopic",
              "sns:Get*",
              "sns:List*",
              "cloudwatch:Describe*",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:EnableAlarmActions",
              "cloudwatch:DisableAlarmActions",
              "tag:GetResources",
              "tag:UntagResources",
              "tag:GetTagValues",
              "tag:GetTagKeys",
              "tag:TagResources"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/redshift.amazonaws.com/AWSServiceRoleForRedshift",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "redshift.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DataAPIPermissions",
            "Action": [
              "redshift-data:ExecuteStatement",
              "redshift-data:CancelStatement",
              "redshift-data:ListStatements",
              "redshift-data:GetStatementResult",
              "redshift-data:DescribeStatement",
              "redshift-data:ListDatabases",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables",
              "redshift-data:DescribeTable"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerListPermissions",
            "Action": [
              "secretsmanager:ListSecrets"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerCreateGetPermissions",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:TagResource"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "secretsmanager:ResourceTag/RedshiftDataFullAccess": "*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonRedshiftReadOnlyAccess",
            "Action": [
              "redshift:Describe*",
              "redshift:ListRecommendations",
              "redshift:ViewQueriesInConsole",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeInternetGateways",
              "sns:Get*",
              "sns:List*",
              "cloudwatch:Describe*",
              "cloudwatch:List*",
              "cloudwatch:Get*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "rds:*",
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricData",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCoipPools",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeLocalGatewayRouteTablePermissions",
              "ec2:DescribeLocalGatewayRouteTables",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
              "ec2:DescribeLocalGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "ec2:GetCoipPoolUsage",
              "sns:ListSubscriptions",
              "sns:ListTopics",
              "sns:Publish",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "outposts:GetOutpostInstanceTypes",
              "devops-guru:GetResourceCollection"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "pi:*",
            "Resource": [
              "arn:aws:pi:*:*:metrics/rds/*",
              "arn:aws:pi:*:*:perf-reports/rds/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "rds.amazonaws.com",
                  "rds.application-autoscaling.amazonaws.com"
                ]
              }
            }
          },
          {
            "Action": [
              "devops-guru:SearchInsights",
              "devops-guru:ListAnomaliesForInsight"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "devops-guru:ServiceNames": [
                  "RDS"
                ]
              },
              "Null": {
                "devops-guru:ServiceNames": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "rds:Describe*",
              "rds:ListTagsForResource",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricData",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "devops-guru:GetResourceCollection"
            ],
            "Resource": "*"
          },
          {
            "Action": [
              "devops-guru:SearchInsights",
              "devops-guru:ListAnomaliesForInsight"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "devops-guru:ServiceNames": [
                  "RDS"
                ]
              },
              "Null": {
                "devops-guru:ServiceNames": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53:*",
              "route53domains:*",
              "cloudfront:ListDistributions",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticbeanstalk:DescribeEnvironments",
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "s3:GetBucketWebsite",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeRegions",
              "sns:ListTopics",
              "sns:ListSubscriptionsByTopic",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "apigateway:GET",
            "Resource": "arn:aws:apigateway:*::/domainnames"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53ReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53:Get*",
              "route53:List*",
              "route53:TestDNSAnswer"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53DomainsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53:CreateHostedZone",
              "route53domains:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53DomainsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53domains:Get*",
              "route53domains:List*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonS3FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:*",
              "s3-object-lambda:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonS3ReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:Get*",
              "s3:List*",
              "s3:Describe*",
              "s3-object-lambda:Get*",
              "s3-object-lambda:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "SecurityAudit",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "BaseSecurityAuditStatement",
            "Effect": "Allow",
            "Action": [
              "a4b:ListSkills",
              "access-analyzer:GetAnalyzedResource",
              "access-analyzer:GetAnalyzer",
              "access-analyzer:GetArchiveRule",
              "access-analyzer:GetFinding",
              "access-analyzer:ListAnalyzedResources",
              "access-analyzer:ListAnalyzers",
              "access-analyzer:ListArchiveRules",
              "access-analyzer:ListFindings",
              "access-analyzer:ListTagsForResource",
              "account:GetAlternateContact",
              "account:GetRegionOptStatus",
              "acm-pca:DescribeCertificateAuthority",
              "acm-pca:DescribeCertificateAuthorityAuditReport",
              "acm-pca:GetPolicy",
              "acm-pca:ListCertificateAuthorities",
              "acm-pca:ListPermissions",
              "acm-pca:ListTags",
              "acm:Describe*",
              "acm:List*",
              "airflow:GetEnvironment",
              "airflow:ListEnvironments",
              "appflow:ListFlows",
              "appflow:ListTagsForResource",
              "application-autoscaling:Describe*",
              "appmesh:Describe*",
              "appmesh:List*",
              "apprunner:DescribeAutoScalingConfiguration",
              "apprunner:DescribeCustomDomains",
              "apprunner:DescribeObservabilityConfiguration",
              "apprunner:DescribeService",
              "apprunner:DescribeVpcConnector",
              "apprunner:DescribeVpcIngressConnection",
              "apprunner:ListAutoScalingConfigurations",
              "apprunner:ListConnections",
              "apprunner:ListObservabilityConfigurations",
              "apprunner:ListOperations",
              "apprunner:ListServices",
              "apprunner:ListTagsForResource",
              "apprunner:ListVpcConnectors",
              "apprunner:ListVpcIngressConnections",
              "appsync:GetApiCache",
              "appsync:List*",
              "athena:GetWorkGroup",
              "athena:List*",
              "auditmanager:GetAccountStatus",
              "auditmanager:ListAssessmentControlInsightsByControlDomain",
              "auditmanager:ListAssessmentFrameworkShareRequests",
              "auditmanager:ListAssessmentFrameworks",
              "auditmanager:ListAssessmentReports",
              "auditmanager:ListAssessments",
              "auditmanager:ListControlDomainInsights",
              "auditmanager:ListControlDomainInsightsByAssessment",
              "auditmanager:ListControlInsightsByControlDomain",
              "auditmanager:ListControls",
              "auditmanager:ListNotifications",
              "auditmanager:ListTagsForResource",
              "autoscaling-plans:DescribeScalingPlans",
              "autoscaling:Describe*",
              "backup:DescribeGlobalSettings",
              "backup:DescribeRegionSettings",
              "backup:GetBackupVaultAccessPolicy",
              "backup:GetBackupVaultNotifications",
              "backup:ListBackupVaults",
              "backup:ListTags",
              "batch:DescribeComputeEnvironments",
              "batch:DescribeJobDefinitions",
              "bedrock:GetCustomModel",
              "bedrock:GetModelInvocationLoggingConfiguration",
              "bedrock:ListCustomModels",
              "bedrock:ListTagsForResource",
              "braket:SearchJobs",
              "braket:SearchQuantumTasks",
              "chime:List*",
              "cloud9:Describe*",
              "cloud9:ListEnvironments",
              "clouddirectory:ListDirectories",
              "cloudformation:DescribeStack*",
              "cloudformation:GetStackPolicy",
              "cloudformation:GetTemplate",
              "cloudformation:ListStack*",
              "cloudfront:Get*",
              "cloudfront:List*",
              "cloudsearch:DescribeDomainEndpointOptions",
              "cloudsearch:DescribeDomains",
              "cloudsearch:DescribeServiceAccessPolicies",
              "cloudtrail:DescribeTrails",
              "cloudtrail:GetEventSelectors",
              "cloudtrail:GetInsightSelectors",
              "cloudtrail:GetTrail",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:ListTags",
              "cloudtrail:ListTrails",
              "cloudtrail:LookupEvents",
              "cloudwatch:Describe*",
              "cloudwatch:GetDashboard",
              "cloudwatch:ListDashboards",
              "cloudwatch:ListTagsForResource",
              "codeartifact:GetDomainPermissionsPolicy",
              "codeartifact:GetRepositoryPermissionsPolicy",
              "codeartifact:ListRepositories",
              "codebuild:BatchGetProjects",
              "codebuild:GetResourcePolicy",
              "codebuild:ListProjects",
              "codecommit:BatchGetRepositories",
              "codecommit:GetBranch",
              "codecommit:GetObjectIdentifier",
              "codecommit:GetRepository",
              "codecommit:GetRepositoryTriggers",
              "codecommit:List*",
              "codedeploy:Batch*",
              "codedeploy:Get*",
              "codedeploy:List*",
              "codepipeline:GetJobDetails",
              "codepipeline:GetPipeline",
              "codepipeline:GetPipelineExecution",
              "codepipeline:GetPipelineState",
              "codepipeline:ListPipelines",
              "codestar:Describe*",
              "codestar:List*",
              "cognito-identity:Describe*",
              "cognito-identity:GetIdentityPoolRoles",
              "cognito-identity:ListIdentityPools",
              "cognito-identity:ListTagsForResource",
              "cognito-idp:Describe*",
              "cognito-idp:ListDevices",
              "cognito-idp:ListGroups",
              "cognito-idp:ListIdentityProviders",
              "cognito-idp:ListResourceServers",
              "cognito-idp:ListTagsForResource",
              "cognito-idp:ListUserImportJobs",
              "cognito-idp:ListUserPoolClients",
              "cognito-idp:ListUserPools",
              "cognito-idp:ListUsers",
              "cognito-idp:ListUsersInGroup",
              "cognito-sync:Describe*",
              "cognito-sync:List*",
              "comprehend:Describe*",
              "comprehend:List*",
              "comprehendmedical:ListICD10CMInferenceJobs",
              "comprehendmedical:ListPHIDetectionJobs",
              "comprehendmedical:ListRxNormInferenceJobs",
              "comprehendmedical:ListSNOMEDCTInferenceJobs",
              "config:BatchGetAggregateResourceConfig",
              "config:BatchGetResourceConfig",
              "config:Deliver*",
              "config:Describe*",
              "config:Get*",
              "config:List*",
              "config:SelectAggregateResourceConfig",
              "config:SelectResourceConfig",
              "connect:ListApprovedOrigins",
              "connect:ListInstanceAttributes",
              "connect:ListInstanceStorageConfigs",
              "connect:ListInstances",
              "connect:ListIntegrationAssociations",
              "connect:ListLambdaFunctions",
              "connect:ListLexBots",
              "connect:ListSecurityKeys",
              "databrew:DescribeDataset",
              "databrew:DescribeProject",
              "databrew:ListJobs",
              "databrew:ListProjects",
              "dataexchange:ListDataSets",
              "datapipeline:DescribeObjects",
              "datapipeline:DescribePipelines",
              "datapipeline:EvaluateExpression",
              "datapipeline:GetPipelineDefinition",
              "datapipeline:ListPipelines",
              "datapipeline:QueryObjects",
              "datapipeline:ValidatePipelineDefinition",
              "datasync:Describe*",
              "datasync:List*",
              "dax:Describe*",
              "dax:ListTags",
              "deepracer:ListModels",
              "detective:GetGraphIngestState",
              "detective:ListGraphs",
              "detective:ListMembers",
              "devicefarm:ListProjects",
              "directconnect:Describe*",
              "discovery:DescribeAgents",
              "discovery:DescribeConfigurations",
              "discovery:DescribeContinuousExports",
              "discovery:DescribeExportConfigurations",
              "discovery:DescribeExportTasks",
              "discovery:DescribeImportTasks",
              "dms:Describe*",
              "dms:ListTagsForResource",
              "docdb-elastic:ListClusters",
              "ds:DescribeDirectories",
              "dynamodb:DescribeContinuousBackups",
              "dynamodb:DescribeExport",
              "dynamodb:DescribeGlobalTable",
              "dynamodb:DescribeKinesisStreamingDestination",
              "dynamodb:DescribeTable",
              "dynamodb:DescribeTimeToLive",
              "dynamodb:ListBackups",
              "dynamodb:ListExports",
              "dynamodb:ListGlobalTables",
              "dynamodb:ListStreams",
              "dynamodb:ListTables",
              "dynamodb:ListTagsOfResource",
              "ec2:Describe*",
              "ec2:GetEbsEncryptionByDefault",
              "ec2:GetImageBlockPublicAccessState",
              "ec2:GetManagedPrefixListAssociations",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
              "ec2:GetNetworkInsightsAccessScopeContent",
              "ec2:GetTransitGatewayAttachmentPropagations",
              "ec2:GetTransitGatewayMulticastDomainAssociations",
              "ec2:GetTransitGatewayPrefixListReferences",
              "ec2:GetTransitGatewayRouteTableAssociations",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "ec2:SearchTransitGatewayRoutes",
              "ecr-public:DescribeImageTags",
              "ecr-public:DescribeImages",
              "ecr-public:DescribeRegistries",
              "ecr-public:DescribeRepositories",
              "ecr-public:GetRegistryCatalogData",
              "ecr-public:GetRepositoryCatalogData",
              "ecr-public:GetRepositoryPolicy",
              "ecr-public:ListTagsForResource",
              "ecr:BatchGetRepositoryScanningConfiguration",
              "ecr:DescribeImageScanFindings",
              "ecr:DescribeImages",
              "ecr:DescribeRegistry",
              "ecr:DescribeRepositories",
              "ecr:GetLifecyclePolicy",
              "ecr:GetRegistryPolicy",
              "ecr:GetRegistryScanningConfiguration",
              "ecr:GetRepositoryPolicy",
              "ecr:ListImages",
              "ecr:ListTagsForResource",
              "ecs:Describe*",
              "ecs:List*",
              "eks:DescribeCluster",
              "eks:DescribeFargateProfile",
              "eks:DescribeNodeGroup",
              "eks:ListClusters",
              "eks:ListFargateProfiles",
              "eks:ListNodeGroups",
              "eks:ListTagsForResource",
              "eks:ListUpdates",
              "elastic-inference:DescribeAccelerators",
              "elasticache:Describe*",
              "elasticache:ListTagsForResource",
              "elasticbeanstalk:Describe*",
              "elasticbeanstalk:ListTagsForResource",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeAccountPreferences",
              "elasticfilesystem:DescribeBackupPolicy",
              "elasticfilesystem:DescribeFileSystemPolicy",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeLifecycleConfiguration",
              "elasticfilesystem:DescribeMountTargetSecurityGroups",
              "elasticfilesystem:DescribeMountTargets",
              "elasticfilesystem:DescribeReplicationConfigurations",
              "elasticfilesystem:DescribeTags",
              "elasticloadbalancing:Describe*",
              "elasticmapreduce:Describe*",
              "elasticmapreduce:GetAutoTerminationPolicy",
              "elasticmapreduce:GetBlockPublicAccessConfiguration",
              "elasticmapreduce:GetManagedScalingPolicy",
              "elasticmapreduce:ListClusters",
              "elasticmapreduce:ListInstances",
              "elasticmapreduce:ListSecurityConfigurations",
              "elastictranscoder:ListPipelines",
              "emr-serverless:GetApplication",
              "emr-serverless:ListApplications",
              "emr-serverless:ListJobRuns",
              "es:Describe*",
              "es:GetCompatibleVersions",
              "es:ListDomainNames",
              "es:ListElasticsearchInstanceTypeDetails",
              "es:ListElasticsearchVersions",
              "es:ListTags",
              "events:Describe*",
              "events:List*",
              "events:TestEventPattern",
              "finspace:ListEnvironments",
              "finspace:ListKxEnvironments",
              "firehose:Describe*",
              "firehose:List*",
              "fms:ListComplianceStatus",
              "fms:ListPolicies",
              "forecast:ListDatasets",
              "frauddetector:GetDetectors",
              "fsx:Describe*",
              "fsx:List*",
              "gamelift:ListBuilds",
              "gamelift:ListFleets",
              "geo:ListMaps",
              "glacier:DescribeVault",
              "glacier:GetDataRetrievalPolicy",
              "glacier:GetVaultAccessPolicy",
              "glacier:GetVaultLock",
              "glacier:ListVaults",
              "globalaccelerator:Describe*",
              "globalaccelerator:List*",
              "glue:GetCrawlers",
              "glue:GetDataCatalogEncryptionSettings",
              "glue:GetDatabases",
              "glue:GetDevEndpoints",
              "glue:GetJobs",
              "glue:GetResourcePolicy",
              "glue:GetSecurityConfiguration",
              "glue:GetSecurityConfigurations",
              "glue:GetTags",
              "grafana:ListWorkspaces",
              "greengrass:List*",
              "guardduty:DescribePublishingDestination",
              "guardduty:Get*",
              "guardduty:List*",
              "health:DescribeAffectedAccountsForOrganization",
              "health:DescribeAffectedEntities",
              "health:DescribeAffectedEntitiesForOrganization",
              "health:DescribeEntityAggregates",
              "health:DescribeEventAggregates",
              "health:DescribeEventDetails",
              "health:DescribeEventDetailsForOrganization",
              "health:DescribeEventTypes",
              "health:DescribeEvents",
              "health:DescribeEventsForOrganization",
              "health:DescribeHealthServiceStatusForOrganization",
              "healthlake:ListFHIRDatastores",
              "honeycode:ListTables",
              "iam:GenerateCredentialReport",
              "iam:GenerateServiceLastAccessedDetails",
              "iam:Get*",
              "iam:List*",
              "iam:SimulateCustomPolicy",
              "iam:SimulatePrincipalPolicy",
              "identitystore:ListGroupMemberships",
              "identitystore:ListGroupMembershipsForMember",
              "identitystore:ListGroups",
              "identitystore:ListUsers",
              "inspector2:BatchGetAccountStatus",
              "inspector2:BatchGetFreeTrialInfo",
              "inspector2:DescribeOrganizationConfiguration",
              "inspector2:GetConfiguration",
              "inspector2:GetDelegatedAdminAccount",
              "inspector2:GetFindingsReportStatus",
              "inspector2:GetMember",
              "inspector2:ListAccountPermissions",
              "inspector2:ListCoverage",
              "inspector2:ListCoverageStatistics",
              "inspector2:ListDelegatedAdminAccounts",
              "inspector2:ListFilters",
              "inspector2:ListFindingAggregations",
              "inspector2:ListFindings",
              "inspector2:ListTagsForResource",
              "inspector2:ListUsageTotals",
              "inspector:Describe*",
              "inspector:Get*",
              "inspector:List*",
              "inspector:Preview*",
              "iot:Describe*",
              "iot:GetPolicy",
              "iot:GetPolicyVersion",
              "iot:List*",
              "iotanalytics:ListChannels",
              "iotevents:ListInputs",
              "iotfleetwise:ListModelManifests",
              "iotsitewise:DescribeGatewayCapabilityConfiguration",
              "iotsitewise:ListAssetModels",
              "iotsitewise:ListGateways",
              "iottwinmaker:ListWorkspaces",
              "kafka-cluster:Describe*",
              "kafka:Describe*",
              "kafka:GetBootstrapBrokers",
              "kafka:GetCompatibleKafkaVersions",
              "kafka:List*",
              "kafkaconnect:Describe*",
              "kafkaconnect:List*",
              "kendra:DescribeIndex",
              "kendra:ListDataSources",
              "kendra:ListIndices",
              "kendra:ListTagsForResource",
              "kinesis:DescribeLimits",
              "kinesis:DescribeStream",
              "kinesis:DescribeStreamConsumer",
              "kinesis:DescribeStreamSummary",
              "kinesis:ListShards",
              "kinesis:ListStreamConsumers",
              "kinesis:ListStreams",
              "kinesis:ListTagsForStream",
              "kinesisanalytics:ListApplications",
              "kinesisanalytics:ListTagsForResource",
              "kinesisvideo:DescribeEdgeConfiguration",
              "kinesisvideo:DescribeMappedResourceConfiguration",
              "kinesisvideo:DescribeMediaStorageConfiguration",
              "kinesisvideo:DescribeNotificationConfiguration",
              "kinesisvideo:DescribeSignalingChannel",
              "kinesisvideo:DescribeStream",
              "kinesisvideo:ListSignalingChannels",
              "kinesisvideo:ListStreams",
              "kinesisvideo:ListTagsForResource",
              "kinesisvideo:ListTagsForStream",
              "kms:Describe*",
              "kms:Get*",
              "kms:List*",
              "lambda:GetAccountSettings",
              "lambda:GetFunctionConfiguration",
              "lambda:GetFunctionEventInvokeConfig",
              "lambda:GetLayerVersionPolicy",
              "lambda:GetPolicy",
              "lambda:List*",
              "lex:DescribeBot",
              "lex:DescribeResourcePolicy",
              "lex:ListBots",
              "license-manager:List*",
              "lightsail:GetBuckets",
              "lightsail:GetContainerServices",
              "lightsail:GetDiskSnapshots",
              "lightsail:GetDisks",
              "lightsail:GetInstances",
              "lightsail:GetLoadBalancers",
              "logs:Describe*",
              "logs:ListTagsForResource",
              "logs:ListTagsLogGroup",
              "lookoutequipment:ListDatasets",
              "lookoutmetrics:ListAnomalyDetectors",
              "lookoutvision:ListProjects",
              "machinelearning:DescribeMLModels",
              "macie2:ListFindings",
              "managedblockchain:ListNetworks",
              "mechanicalturk:ListHITs",
              "mediaconnect:Describe*",
              "mediaconnect:List*",
              "medialive:ListChannels",
              "mediapackage-vod:DescribePackagingGroup",
              "mediapackage-vod:ListPackagingGroups",
              "mediapackage:DescribeOriginEndpoint",
              "mediapackage:ListOriginEndpoints",
              "mediastore:GetContainerPolicy",
              "mediastore:GetCorsPolicy",
              "mediastore:ListContainers",
              "memorydb:DescribeClusters",
              "mq:DescribeBroker",
              "mq:DescribeBrokerEngineTypes",
              "mq:DescribeBrokerInstanceOptions",
              "mq:DescribeConfiguration",
              "mq:DescribeConfigurationRevision",
              "mq:DescribeUser",
              "mq:ListBrokers",
              "mq:ListConfigurationRevisions",
              "mq:ListConfigurations",
              "mq:ListTags",
              "mq:ListUsers",
              "network-firewall:DescribeFirewall",
              "network-firewall:DescribeFirewallPolicy",
              "network-firewall:DescribeLoggingConfiguration",
              "network-firewall:DescribeResourcePolicy",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:ListFirewallPolicies",
              "network-firewall:ListFirewalls",
              "network-firewall:ListRuleGroups",
              "networkmanager:DescribeGlobalNetworks",
              "nimble:ListStudios",
              "opsworks-cm:DescribeServers",
              "opsworks:DescribeStacks",
              "organizations:Describe*",
              "organizations:List*",
              "personalize:DescribeDatasetGroup",
              "personalize:ListDatasetGroups",
              "private-networks:ListNetworks",
              "profile:GetDomain",
              "profile:ListDomains",
              "profile:ListIntegrations",
              "qldb:DescribeJournalS3Export",
              "qldb:DescribeLedger",
              "qldb:ListJournalS3Exports",
              "qldb:ListJournalS3ExportsForLedger",
              "qldb:ListLedgers",
              "quicksight:Describe*",
              "quicksight:List*",
              "ram:GetResourceShares",
              "ram:List*",
              "rds:Describe*",
              "rds:DownloadDBLogFilePortion",
              "rds:ListTagsForResource",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:ListTagsForResource",
              "redshift-serverless:ListWorkgroups",
              "redshift:Describe*",
              "rekognition:Describe*",
              "rekognition:List*",
              "resource-groups:ListGroupResources",
              "robomaker:Describe*",
              "robomaker:List*",
              "route53:Get*",
              "route53:List*",
              "route53domains:GetDomainDetail",
              "route53domains:GetOperationDetail",
              "route53domains:ListDomains",
              "route53domains:ListOperations",
              "route53domains:ListTagsForDomain",
              "route53resolver:Get*",
              "route53resolver:List*",
              "s3-outposts:ListEndpoints",
              "s3-outposts:ListOutpostsWithS3",
              "s3-outposts:ListSharedEndpoints",
              "s3:GetAccelerateConfiguration",
              "s3:GetAccessPoint",
              "s3:GetAccessPointPolicy",
              "s3:GetAccessPointPolicyStatus",
              "s3:GetAccountPublicAccessBlock",
              "s3:GetAnalyticsConfiguration",
              "s3:GetBucket*",
              "s3:GetEncryptionConfiguration",
              "s3:GetInventoryConfiguration",
              "s3:GetLifecycleConfiguration",
              "s3:GetMetricsConfiguration",
              "s3:GetMultiRegionAccessPointPolicy",
              "s3:GetObjectAcl",
              "s3:GetObjectVersionAcl",
              "s3:GetReplicationConfiguration",
              "s3:ListAccessPoints",
              "s3:ListAllMyBuckets",
              "s3:ListMultiRegionAccessPoints",
              "sagemaker:Describe*",
              "sagemaker:List*",
              "schemas:DescribeCodeBinding",
              "schemas:DescribeDiscoverer",
              "schemas:DescribeRegistry",
              "schemas:DescribeSchema",
              "schemas:GetResourcePolicy",
              "schemas:ListDiscoverers",
              "schemas:ListRegistries",
              "schemas:ListSchemaVersions",
              "schemas:ListSchemas",
              "schemas:ListTagsForResource",
              "sdb:DomainMetadata",
              "sdb:ListDomains",
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetResourcePolicy",
              "secretsmanager:ListSecretVersionIds",
              "secretsmanager:ListSecrets",
              "securityhub:Describe*",
              "securityhub:Get*",
              "securityhub:List*",
              "serverlessrepo:GetApplicationPolicy",
              "serverlessrepo:List*",
              "servicequotas:GetAWSDefaultServiceQuota",
              "servicequotas:GetAssociationForServiceQuotaTemplate",
              "servicequotas:GetRequestedServiceQuotaChange",
              "servicequotas:GetServiceQuota",
              "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
              "servicequotas:ListAWSDefaultServiceQuotas",
              "servicequotas:ListRequestedServiceQuotaChangeHistory",
              "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
              "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
              "servicequotas:ListServiceQuotas",
              "servicequotas:ListServices",
              "servicequotas:ListTagsForResource",
              "ses:Describe*",
              "ses:GetAccount",
              "ses:GetAccountSendingEnabled",
              "ses:GetConfigurationSet",
              "ses:GetConfigurationSetEventDestinations",
              "ses:GetDedicatedIps",
              "ses:GetEmailIdentity",
              "ses:GetIdentityDkimAttributes",
              "ses:GetIdentityPolicies",
              "ses:GetIdentityVerificationAttributes",
              "ses:ListConfigurationSets",
              "ses:ListDedicatedIpPools",
              "ses:ListIdentities",
              "ses:ListIdentityPolicies",
              "ses:ListReceiptFilters",
              "ses:ListReceiptRuleSets",
              "ses:ListVerifiedEmailAddresses",
              "shield:Describe*",
              "shield:GetSubscriptionState",
              "shield:List*",
              "snowball:ListClusters",
              "snowball:ListJobs",
              "sns:GetPlatformApplicationAttributes",
              "sns:GetTopicAttributes",
              "sns:ListSubscriptions",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTagsForResource",
              "sns:ListTopics",
              "sqs:GetQueueAttributes",
              "sqs:ListDeadLetterSourceQueues",
              "sqs:ListQueueTags",
              "sqs:ListQueues",
              "ssm:Describe*",
              "ssm:GetAutomationExecution",
              "ssm:GetServiceSetting",
              "ssm:ListAssociationVersions",
              "ssm:ListAssociations",
              "ssm:ListCommands",
              "ssm:ListComplianceItems",
              "ssm:ListComplianceSummaries",
              "ssm:ListDocumentMetadataHistory",
              "ssm:ListDocumentVersions",
              "ssm:ListDocuments",
              "ssm:ListInventoryEntries",
              "ssm:ListOpsMetadata",
              "ssm:ListResourceComplianceSummaries",
              "ssm:ListResourceDataSync",
              "ssm:ListTagsForResource",
              "sso:DescribeAccountAssignmentCreationStatus",
              "sso:DescribePermissionSet",
              "sso:DescribePermissionsPolicies",
              "sso:List*",
              "states:DescribeStateMachine",
              "states:ListStateMachines",
              "storagegateway:DescribeBandwidthRateLimit",
              "storagegateway:DescribeCache",
              "storagegateway:DescribeCachediSCSIVolumes",
              "storagegateway:DescribeGatewayInformation",
              "storagegateway:DescribeMaintenanceStartTime",
              "storagegateway:DescribeNFSFileShares",
              "storagegateway:DescribeSnapshotSchedule",
              "storagegateway:DescribeStorediSCSIVolumes",
              "storagegateway:DescribeTapeArchives",
              "storagegateway:DescribeTapeRecoveryPoints",
              "storagegateway:DescribeTapes",
              "storagegateway:DescribeUploadBuffer",
              "storagegateway:DescribeVTLDevices",
              "storagegateway:DescribeWorkingStorage",
              "storagegateway:List*",
              "sts:GetAccessKeyInfo",
              "support:DescribeTrustedAdvisorCheckRefreshStatuses",
              "support:DescribeTrustedAdvisorCheckResult",
              "support:DescribeTrustedAdvisorCheckSummaries",
              "support:DescribeTrustedAdvisorChecks",
              "synthetics:DescribeCanaries",
              "synthetics:DescribeCanariesLastRun",
              "synthetics:DescribeRuntimeVersions",
              "synthetics:GetCanary",
              "synthetics:GetCanaryRuns",
              "synthetics:GetGroup",
              "synthetics:ListAssociatedGroups",
              "synthetics:ListGroupResources",
              "synthetics:ListGroups",
              "synthetics:ListTagsForResource",
              "tag:GetResources",
              "tag:GetTagKeys",
              "transcribe:GetCallAnalyticsCategory",
              "transcribe:GetMedicalVocabulary",
              "transcribe:GetVocabulary",
              "transcribe:GetVocabularyFilter",
              "transcribe:ListCallAnalyticsCategories",
              "transcribe:ListCallAnalyticsJobs",
              "transcribe:ListLanguageModels",
              "transcribe:ListMedicalTranscriptionJobs",
              "transcribe:ListMedicalVocabularies",
              "transcribe:ListTagsForResource",
              "transcribe:ListTranscriptionJobs",
              "transcribe:ListVocabularies",
              "transcribe:ListVocabularyFilters",
              "transfer:Describe*",
              "transfer:List*",
              "translate:List*",
              "trustedadvisor:Describe*",
              "voiceid:DescribeDomain",
              "waf-regional:GetWebACL",
              "waf-regional:ListResourcesForWebACL",
              "waf-regional:ListTagsForResource",
              "waf-regional:ListWebACLs",
              "waf:GetWebACL",
              "waf:ListTagsForResource",
              "waf:ListWebACLs",
              "wafv2:GetLoggingConfiguration",
              "wafv2:GetWebACL",
              "wafv2:GetWebACLForResource",
              "wafv2:ListAvailableManagedRuleGroups",
              "wafv2:ListIPSets",
              "wafv2:ListLoggingConfigurations",
              "wafv2:ListRegexPatternSets",
              "wafv2:ListResourcesForWebACL",
              "wafv2:ListRuleGroups",
              "wafv2:ListTagsForResource",
              "wafv2:ListWebACLs",
              "wisdom:GetAssistant",
              "workdocs:DescribeResourcePermissions",
              "workspaces:Describe*",
              "xray:GetEncryptionConfig",
              "xray:GetGroup",
              "xray:GetGroups",
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
              "xray:GetTraceSummaries",
              "xray:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "APIGatewayAccess",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/apis",
              "arn:aws:apigateway:*::/apis/*/authorizers/*",
              "arn:aws:apigateway:*::/apis/*/authorizers",
              "arn:aws:apigateway:*::/apis/*/cors",
              "arn:aws:apigateway:*::/apis/*/deployments/*",
              "arn:aws:apigateway:*::/apis/*/deployments",
              "arn:aws:apigateway:*::/apis/*/exports/*",
              "arn:aws:apigateway:*::/apis/*/integrations/*",
              "arn:aws:apigateway:*::/apis/*/integrations",
              "arn:aws:apigateway:*::/apis/*/models/*",
              "arn:aws:apigateway:*::/apis/*/models",
              "arn:aws:apigateway:*::/apis/*/routes/*",
              "arn:aws:apigateway:*::/apis/*/routes",
              "arn:aws:apigateway:*::/apis/*/stages",
              "arn:aws:apigateway:*::/apis/*/stages/*",
              "arn:aws:apigateway:*::/clientcertificates",
              "arn:aws:apigateway:*::/clientcertificates/*",
              "arn:aws:apigateway:*::/domainnames",
              "arn:aws:apigateway:*::/domainnames/*/apimappings",
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*/authorizers/*",
              "arn:aws:apigateway:*::/restapis/*/authorizers",
              "arn:aws:apigateway:*::/restapis/*/deployments/*",
              "arn:aws:apigateway:*::/restapis/*/deployments",
              "arn:aws:apigateway:*::/restapis/*/documentation/parts/*",
              "arn:aws:apigateway:*::/restapis/*/documentation/parts",
              "arn:aws:apigateway:*::/restapis/*/documentation/versions/*",
              "arn:aws:apigateway:*::/restapis/*/documentation/versions",
              "arn:aws:apigateway:*::/restapis/*/gatewayresponses/*",
              "arn:aws:apigateway:*::/restapis/*/gatewayresponses",
              "arn:aws:apigateway:*::/restapis/*/models/*",
              "arn:aws:apigateway:*::/restapis/*/models",
              "arn:aws:apigateway:*::/restapis/*/requestvalidators",
              "arn:aws:apigateway:*::/restapis/*/requestvalidators/*",
              "arn:aws:apigateway:*::/restapis/*/resources/*",
              "arn:aws:apigateway:*::/restapis/*/resources",
              "arn:aws:apigateway:*::/restapis/*/stages",
              "arn:aws:apigateway:*::/restapis/*/stages/*",
              "arn:aws:apigateway:*::/tags/*",
              "arn:aws:apigateway:*::/vpclinks"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSESFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ses:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSESReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SESReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "ses:Get*",
              "ses:List*",
              "ses:BatchGetMetricData"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "SimpleWorkflowFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "swf:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSNSFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sns:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSNSReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sns:GetTopicAttributes",
              "sns:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSQSFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sqs:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSQSReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonSQSReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "sqs:ListDeadLetterSourceQueues",
              "sqs:ListQueues",
              "sqs:ListMessageMoveTasks",
              "sqs:ListQueueTags"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSStorageGatewayFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "storagegateway:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSnapshots",
              "ec2:DeleteSnapshot"
            ],
            "Resource": "*"
          },
          {
            "Sid": "fetchStorageGatewayParams",
            "Effect": "Allow",
            "Action": "ssm:GetParameters",
            "Resource": "arn:aws:ssm:*::parameter/aws/service/storagegateway/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSStorageGatewayReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "storagegateway:List*",
              "storagegateway:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Sid": "fetchStorageGatewayParams",
            "Effect": "Allow",
            "Action": "ssm:GetParameters",
            "Resource": "arn:aws:ssm:*::parameter/aws/service/storagegateway/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSupportAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "support:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDirectoryServiceFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DirectoryServiceFullAccess",
            "Effect": "Allow",
            "Action": [
              "ds:*",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DescribeSecurityGroups",
              "sns:GetTopicAttributes",
              "sns:ListSubscriptions",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics",
              "iam:ListRoles",
              "organizations:ListAccountsForParent",
              "organizations:ListRoots",
              "organizations:ListAccounts",
              "organizations:DescribeOrganization",
              "organizations:DescribeAccount",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DirectoryServiceEventTopic",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:DeleteTopic",
              "sns:SetTopicAttributes",
              "sns:Subscribe",
              "sns:Unsubscribe"
            ],
            "Resource": "arn:aws:sns:*:*:DirectoryMonitoring*"
          },
          {
            "Sid": "DirectoryServiceOrganizations",
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess",
              "organizations:DisableAWSServiceAccess"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": "ds.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DirectoryServiceTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDirectoryServiceReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ds:Check*",
              "ds:Describe*",
              "ds:Get*",
              "ds:List*",
              "ds:Verify*",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "sns:ListTopics",
              "sns:GetTopicAttributes",
              "sns:ListSubscriptions",
              "sns:ListSubscriptionsByTopic",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonZocaloFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "zocalo:*",
              "ds:*",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateTags",
              "ec2:CreateVpc",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonZocaloReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "zocalo:Describe*",
              "ds:DescribeDirectories",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonVPCFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonVPCFullAccess",
            "Effect": "Allow",
            "Action": [
              "ec2:AcceptVpcPeeringConnection",
              "ec2:AcceptVpcEndpointConnections",
              "ec2:AllocateAddress",
              "ec2:AssignIpv6Addresses",
              "ec2:AssignPrivateIpAddresses",
              "ec2:AssociateAddress",
              "ec2:AssociateDhcpOptions",
              "ec2:AssociateRouteTable",
              "ec2:AssociateSubnetCidrBlock",
              "ec2:AssociateVpcCidrBlock",
              "ec2:AttachClassicLinkVpc",
              "ec2:AttachInternetGateway",
              "ec2:AttachNetworkInterface",
              "ec2:AttachVpnGateway",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateCarrierGateway",
              "ec2:CreateCustomerGateway",
              "ec2:CreateDefaultSubnet",
              "ec2:CreateDefaultVpc",
              "ec2:CreateDhcpOptions",
              "ec2:CreateEgressOnlyInternetGateway",
              "ec2:CreateFlowLogs",
              "ec2:CreateInternetGateway",
              "ec2:CreateLocalGatewayRouteTableVpcAssociation",
              "ec2:CreateNatGateway",
              "ec2:CreateNetworkAcl",
              "ec2:CreateNetworkAclEntry",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateTags",
              "ec2:CreateVpc",
              "ec2:CreateVpcEndpoint",
              "ec2:CreateVpcEndpointConnectionNotification",
              "ec2:CreateVpcEndpointServiceConfiguration",
              "ec2:CreateVpcPeeringConnection",
              "ec2:CreateVpnConnection",
              "ec2:CreateVpnConnectionRoute",
              "ec2:CreateVpnGateway",
              "ec2:DeleteCarrierGateway",
              "ec2:DeleteCustomerGateway",
              "ec2:DeleteDhcpOptions",
              "ec2:DeleteEgressOnlyInternetGateway",
              "ec2:DeleteFlowLogs",
              "ec2:DeleteInternetGateway",
              "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
              "ec2:DeleteNatGateway",
              "ec2:DeleteNetworkAcl",
              "ec2:DeleteNetworkAclEntry",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSubnet",
              "ec2:DeleteTags",
              "ec2:DeleteVpc",
              "ec2:DeleteVpcEndpoints",
              "ec2:DeleteVpcEndpointConnectionNotifications",
              "ec2:DeleteVpcEndpointServiceConfigurations",
              "ec2:DeleteVpcPeeringConnection",
              "ec2:DeleteVpnConnection",
              "ec2:DeleteVpnConnectionRoute",
              "ec2:DeleteVpnGateway",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCarrierGateways",
              "ec2:DescribeClassicLinkInstances",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeEgressOnlyInternetGateways",
              "ec2:DescribeFlowLogs",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeIpv6Pools",
              "ec2:DescribeLocalGatewayRouteTables",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeMovingAddresses",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeNetworkInterfacePermissions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroupReferences",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeStaleSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcClassicLink",
              "ec2:DescribeVpcClassicLinkDnsSupport",
              "ec2:DescribeVpcEndpointConnectionNotifications",
              "ec2:DescribeVpcEndpointConnections",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcEndpointServicePermissions",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:DetachClassicLinkVpc",
              "ec2:DetachInternetGateway",
              "ec2:DetachNetworkInterface",
              "ec2:DetachVpnGateway",
              "ec2:DisableVgwRoutePropagation",
              "ec2:DisableVpcClassicLink",
              "ec2:DisableVpcClassicLinkDnsSupport",
              "ec2:DisassociateAddress",
              "ec2:DisassociateRouteTable",
              "ec2:DisassociateSubnetCidrBlock",
              "ec2:DisassociateVpcCidrBlock",
              "ec2:EnableVgwRoutePropagation",
              "ec2:EnableVpcClassicLink",
              "ec2:EnableVpcClassicLinkDnsSupport",
              "ec2:GetSecurityGroupsForVpc",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ModifySecurityGroupRules",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:ModifyVpcEndpoint",
              "ec2:ModifyVpcEndpointConnectionNotification",
              "ec2:ModifyVpcEndpointServiceConfiguration",
              "ec2:ModifyVpcEndpointServicePermissions",
              "ec2:ModifyVpcPeeringConnectionOptions",
              "ec2:ModifyVpcTenancy",
              "ec2:MoveAddressToVpc",
              "ec2:RejectVpcEndpointConnections",
              "ec2:RejectVpcPeeringConnection",
              "ec2:ReleaseAddress",
              "ec2:ReplaceNetworkAclAssociation",
              "ec2:ReplaceNetworkAclEntry",
              "ec2:ReplaceRoute",
              "ec2:ReplaceRouteTableAssociation",
              "ec2:ResetNetworkInterfaceAttribute",
              "ec2:RestoreAddressToClassic",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:UnassignIpv6Addresses",
              "ec2:UnassignPrivateIpAddresses",
              "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
              "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonVPCReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonVPCReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeCarrierGateways",
              "ec2:DescribeClassicLinkInstances",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeEgressOnlyInternetGateways",
              "ec2:DescribeFlowLogs",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeLocalGatewayRouteTables",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
              "ec2:DescribeMovingAddresses",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeNetworkInterfacePermissions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroupReferences",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeStaleSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcClassicLink",
              "ec2:DescribeVpcClassicLinkDnsSupport",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointConnectionNotifications",
              "ec2:DescribeVpcEndpointConnections",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcEndpointServicePermissions",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:GetSecurityGroupsForVpc"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAccountActivityAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "account:GetAccountInformation",
              "account:GetAlternateContact",
              "account:GetChallengeQuestions",
              "account:GetContactInformation",
              "account:GetRegionOptStatus",
              "account:ListRegions",
              "billing:GetIAMAccessPreference",
              "billing:GetSellerOfRecord",
              "payments:ListPaymentPreferences"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-portal:ViewBilling"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAccountUsageReportAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "aws-portal:ViewUsage"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticMapReduceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Resource": "*",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CancelSpotInstanceRequests",
              "ec2:CreateFleet",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTags",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteTags",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeImages",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSpotPriceHistory",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcs",
              "ec2:DetachNetworkInterface",
              "ec2:ModifyImageAttribute",
              "ec2:ModifyInstanceAttribute",
              "ec2:RequestSpotInstances",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RunInstances",
              "ec2:TerminateInstances",
              "ec2:DeleteVolume",
              "ec2:DescribeVolumeStatus",
              "ec2:DescribeVolumes",
              "ec2:DetachVolume",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:ListInstanceProfiles",
              "iam:ListRolePolicies",
              "iam:PassRole",
              "s3:CreateBucket",
              "s3:Get*",
              "s3:List*",
              "sdb:BatchPutAttributes",
              "sdb:Select",
              "sqs:CreateQueue",
              "sqs:Delete*",
              "sqs:GetQueue*",
              "sqs:PurgeQueue",
              "sqs:ReceiveMessage",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms",
              "application-autoscaling:RegisterScalableTarget",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:Describe*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "spot.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticMapReduceforEC2Role",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Resource": "*",
            "Action": [
              "cloudwatch:*",
              "dynamodb:*",
              "ec2:Describe*",
              "elasticmapreduce:Describe*",
              "elasticmapreduce:ListBootstrapActions",
              "elasticmapreduce:ListClusters",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ListInstances",
              "elasticmapreduce:ListSteps",
              "kinesis:CreateStream",
              "kinesis:DeleteStream",
              "kinesis:DescribeStream",
              "kinesis:GetRecords",
              "kinesis:GetShardIterator",
              "kinesis:MergeShards",
              "kinesis:PutRecord",
              "kinesis:SplitShard",
              "rds:Describe*",
              "s3:*",
              "sdb:*",
              "sns:*",
              "sqs:*",
              "glue:CreateDatabase",
              "glue:UpdateDatabase",
              "glue:DeleteDatabase",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:CreateTable",
              "glue:UpdateTable",
              "glue:DeleteTable",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetTableVersions",
              "glue:CreatePartition",
              "glue:BatchCreatePartition",
              "glue:UpdatePartition",
              "glue:DeletePartition",
              "glue:BatchDeletePartition",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:BatchGetPartition",
              "glue:CreateUserDefinedFunction",
              "glue:UpdateUserDefinedFunction",
              "glue:DeleteUserDefinedFunction",
              "glue:GetUserDefinedFunction",
              "glue:GetUserDefinedFunctions"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AutoScalingNotificationAccessRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Resource": "*",
            "Action": [
              "sqs:SendMessage",
              "sqs:GetQueueUrl",
              "sns:Publish"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudHSMRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:CreateTags",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DetachNetworkInterface"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2RoleforDataPipelineRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:*",
              "datapipeline:*",
              "dynamodb:*",
              "ec2:Describe*",
              "elasticmapreduce:AddJobFlowSteps",
              "elasticmapreduce:Describe*",
              "elasticmapreduce:ListInstance*",
              "elasticmapreduce:ModifyInstanceGroups",
              "rds:Describe*",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSecurityGroups",
              "s3:*",
              "sdb:*",
              "sns:*",
              "sqs:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticTranscoderRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:Get*",
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:*MultipartUpload*"
            ],
            "Sid": "1",
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Sid": "2",
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "RDSCloudHsmAuthorizationRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudhsm:CreateLunaClient",
              "cloudhsm:DeleteLunaClient",
              "cloudhsm:DescribeHapg",
              "cloudhsm:DescribeLunaClient",
              "cloudhsm:GetConfig",
              "cloudhsm:ModifyHapg",
              "cloudhsm:ModifyLunaClient"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSNSRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:PutMetricFilter",
              "logs:PutRetentionPolicy"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSConnector",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:GetUser",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteObject",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:AbortMultipartUpload",
              "s3:ListBucketMultipartUploads",
              "s3:ListMultipartUploadParts"
            ],
            "Resource": "arn:aws:s3:::import-to-ec2-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CancelConversionTask",
              "ec2:CancelExportTask",
              "ec2:CreateImage",
              "ec2:CreateInstanceExportTask",
              "ec2:CreateTags",
              "ec2:CreateVolume",
              "ec2:DeleteTags",
              "ec2:DeleteVolume",
              "ec2:DescribeConversionTasks",
              "ec2:DescribeExportTasks",
              "ec2:DescribeImages",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances",
              "ec2:DescribeRegions",
              "ec2:DescribeTags",
              "ec2:DetachVolume",
              "ec2:ImportInstance",
              "ec2:ImportVolume",
              "ec2:ModifyInstanceAttribute",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:ImportImage",
              "ec2:DescribeImportImageTasks",
              "ec2:DeregisterImage",
              "ec2:DescribeSnapshots",
              "ec2:DeleteSnapshot",
              "ec2:CancelImportTask",
              "ec2:ImportSnapshot",
              "ec2:DescribeImportSnapshotTasks"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "SNS:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:*",
              "cloudformation:CreateStack",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStackResources",
              "cloudformation:DescribeStacks",
              "cloudformation:List*",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTags",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVpcs",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CopyImage",
              "ec2:DeregisterImage",
              "ec2:DescribeSnapshots",
              "ec2:DeleteSnapshot",
              "ec2:CreateImage",
              "ec2:DescribeInstanceStatus",
              "ssm:GetAutomationExecution",
              "ssm:ListDocuments",
              "ssm:DescribeDocument",
              "sns:ListTopics",
              "sns:GetTopicAttributes",
              "sns:CreateTopic",
              "iam:GetRole",
              "iam:GetInstanceProfile",
              "iam:ListRoles",
              "iam:ListInstanceProfiles"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*image-build*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish",
              "sns:setTopicAttributes"
            ],
            "Resource": "arn:aws:sns:*:*:*image-build*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
              "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
              "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
              "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
              "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
              "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
              "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
              "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ],
                "iam:AssociatedResourceARN": [
                  "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
                  "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
                  "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
                  "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
                  "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
                  "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
                  "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
                  "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSConfigUserAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "config:Get*",
              "config:Describe*",
              "config:Deliver*",
              "config:List*",
              "config:Select*",
              "tag:GetResources",
              "tag:GetTagKeys",
              "cloudtrail:DescribeTrails",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:LookupEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2ContainerServiceforEC2Role",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeTags",
              "ecs:CreateCluster",
              "ecs:DeregisterContainerInstance",
              "ecs:DiscoverPollEndpoint",
              "ecs:Poll",
              "ecs:RegisterContainerInstance",
              "ecs:StartTelemetrySession",
              "ecs:UpdateContainerInstancesState",
              "ecs:Submit*",
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:BatchGetImage",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ecs:TagResource",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:CreateAction": [
                  "CreateCluster",
                  "RegisterContainerInstance"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCognitoReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-identity:Describe*",
              "cognito-identity:Get*",
              "cognito-identity:List*",
              "cognito-idp:Describe*",
              "cognito-idp:AdminGet*",
              "cognito-idp:AdminList*",
              "cognito-idp:List*",
              "cognito-idp:Get*",
              "cognito-sync:Describe*",
              "cognito-sync:Get*",
              "cognito-sync:List*",
              "iam:ListOpenIdConnectProviders",
              "iam:ListRoles",
              "sns:ListPlatformApplications"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCognitoPowerUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-identity:*",
              "cognito-idp:*",
              "cognito-sync:*",
              "iam:ListRoles",
              "iam:ListOpenIdConnectProviders",
              "iam:GetRole",
              "iam:ListSAMLProviders",
              "iam:GetSAMLProvider",
              "kinesis:ListStreams",
              "lambda:GetPolicy",
              "lambda:ListFunctions",
              "sns:GetSMSSandboxAccountStatus",
              "sns:ListPlatformApplications",
              "ses:ListIdentities",
              "ses:GetIdentityVerificationAttributes",
              "mobiletargeting:GetApps",
              "acm:ListCertificates"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "cognito-idp.amazonaws.com",
                  "email.cognito-idp.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdp*",
              "arn:aws:iam::*:role/aws-service-role/email.cognito-idp.amazonaws.com/AWSServiceRoleForAmazonCognitoIdpEmail*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCognitoDeveloperAuthenticatedIdentities",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
              "cognito-identity:LookupDeveloperIdentity",
              "cognito-identity:MergeDeveloperIdentities",
              "cognito-identity:UnlinkDeveloperIdentity"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesApplicationManagerAdminAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "wam:AuthenticatePackager",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaBasicExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaDynamoDBExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeStream",
              "dynamodb:GetRecords",
              "dynamodb:GetShardIterator",
              "dynamodb:ListStreams",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaKinesisExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:DescribeStream",
              "kinesis:DescribeStreamSummary",
              "kinesis:GetRecords",
              "kinesis:GetShardIterator",
              "kinesis:ListShards",
              "kinesis:ListStreams",
              "kinesis:SubscribeToShard",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2ContainerServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:Describe*",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:Describe*",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:RegisterTargets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMachineLearningBatchPredictionsAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "machinelearning:CreateBatchPrediction",
              "machinelearning:DeleteBatchPrediction",
              "machinelearning:DescribeBatchPredictions",
              "machinelearning:GetBatchPrediction",
              "machinelearning:UpdateBatchPrediction"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMachineLearningCreateOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "machinelearning:Add*",
              "machinelearning:Create*",
              "machinelearning:Delete*",
              "machinelearning:Describe*",
              "machinelearning:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMachineLearningFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "machinelearning:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMachineLearningManageRealTimeEndpointOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "machinelearning:CreateRealtimeEndpoint",
              "machinelearning:DeleteRealtimeEndpoint"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMachineLearningReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "machinelearning:Describe*",
              "machinelearning:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMachineLearningRealTimePredictionOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "machinelearning:Predict"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "autoscaling:CompleteLifecycleAction",
              "autoscaling:DeleteLifecycleHook",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeLifecycleHooks",
              "autoscaling:PutLifecycleHook",
              "autoscaling:RecordLifecycleActionHeartbeat",
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:CreateOrUpdateTags",
              "autoscaling:UpdateAutoScalingGroup",
              "autoscaling:EnableMetricsCollection",
              "autoscaling:DescribePolicies",
              "autoscaling:DescribeScheduledActions",
              "autoscaling:DescribeNotificationConfigurations",
              "autoscaling:SuspendProcesses",
              "autoscaling:ResumeProcesses",
              "autoscaling:AttachLoadBalancers",
              "autoscaling:AttachLoadBalancerTargetGroups",
              "autoscaling:PutScalingPolicy",
              "autoscaling:PutScheduledUpdateGroupAction",
              "autoscaling:PutNotificationConfiguration",
              "autoscaling:PutWarmPool",
              "autoscaling:DescribeScalingActivities",
              "autoscaling:DeleteAutoScalingGroup",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:TerminateInstances",
              "tag:GetResources",
              "sns:Publish",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:PutMetricAlarm",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:DeregisterTargets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2RoleforAWSCodeDeploy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:ListBucket"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": "codedeploy:*",
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsReadWriteAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:CreateNotificationRule",
              "codestar-notifications:DescribeNotificationRule",
              "codestar-notifications:UpdateNotificationRule",
              "codestar-notifications:DeleteNotificationRule",
              "codestar-notifications:Subscribe",
              "codestar-notifications:Unsubscribe"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codedeploy:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListTargets",
              "codestar-notifications:ListTagsforResource",
              "codestar-notifications:ListEventTypes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:SetTopicAttributes"
            ],
            "Resource": "arn:aws:sns:*:*:codestar-notifications*"
          },
          {
            "Sid": "CodeStarNotificationsChatbotAccess",
            "Effect": "Allow",
            "Action": [
              "chatbot:DescribeSlackChannelConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SNSTopicListAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployDeployerAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "codedeploy:Batch*",
              "codedeploy:CreateDeployment",
              "codedeploy:Get*",
              "codedeploy:List*",
              "codedeploy:RegisterApplicationRevision"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsReadWriteAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:CreateNotificationRule",
              "codestar-notifications:DescribeNotificationRule",
              "codestar-notifications:UpdateNotificationRule",
              "codestar-notifications:Subscribe",
              "codestar-notifications:Unsubscribe"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codedeploy:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListTargets",
              "codestar-notifications:ListTagsforResource",
              "codestar-notifications:ListEventTypes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsChatbotAccess",
            "Effect": "Allow",
            "Action": [
              "chatbot:DescribeSlackChannelConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SNSTopicListAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "codedeploy:Batch*",
              "codedeploy:Get*",
              "codedeploy:List*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsPowerUserAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:DescribeNotificationRule"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codedeploy:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListEventTypes",
              "codestar-notifications:ListTargets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticFileSystemFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:GetMetricData",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "ec2:ModifyNetworkInterfaceAttribute",
              "elasticfilesystem:CreateFileSystem",
              "elasticfilesystem:CreateMountTarget",
              "elasticfilesystem:CreateTags",
              "elasticfilesystem:CreateAccessPoint",
              "elasticfilesystem:CreateReplicationConfiguration",
              "elasticfilesystem:DeleteFileSystem",
              "elasticfilesystem:DeleteMountTarget",
              "elasticfilesystem:DeleteTags",
              "elasticfilesystem:DeleteAccessPoint",
              "elasticfilesystem:DeleteFileSystemPolicy",
              "elasticfilesystem:DeleteReplicationConfiguration",
              "elasticfilesystem:DescribeAccountPreferences",
              "elasticfilesystem:DescribeBackupPolicy",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeFileSystemPolicy",
              "elasticfilesystem:DescribeLifecycleConfiguration",
              "elasticfilesystem:DescribeMountTargets",
              "elasticfilesystem:DescribeMountTargetSecurityGroups",
              "elasticfilesystem:DescribeTags",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeReplicationConfigurations",
              "elasticfilesystem:ModifyMountTargetSecurityGroups",
              "elasticfilesystem:PutAccountPreferences",
              "elasticfilesystem:PutBackupPolicy",
              "elasticfilesystem:PutLifecycleConfiguration",
              "elasticfilesystem:PutFileSystemPolicy",
              "elasticfilesystem:UpdateFileSystem",
              "elasticfilesystem:UpdateFileSystemProtection",
              "elasticfilesystem:TagResource",
              "elasticfilesystem:UntagResource",
              "elasticfilesystem:ListTagsForResource",
              "elasticfilesystem:Backup",
              "elasticfilesystem:Restore",
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Sid": "ElasticFileSystemFullAccess",
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": "iam:CreateServiceLinkedRole",
            "Sid": "CreateServiceLinkedRoleForEFS",
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "elasticfilesystem.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticFileSystemReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ElasticFileSystemReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:GetMetricData",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "elasticfilesystem:DescribeAccountPreferences",
              "elasticfilesystem:DescribeBackupPolicy",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeFileSystemPolicy",
              "elasticfilesystem:DescribeLifecycleConfiguration",
              "elasticfilesystem:DescribeMountTargets",
              "elasticfilesystem:DescribeMountTargetSecurityGroups",
              "elasticfilesystem:DescribeTags",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeReplicationConfigurations",
              "elasticfilesystem:ListTagsForResource",
              "kms:ListAliases"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData",
              "ds:CreateComputer",
              "ds:DescribeDirectories",
              "ec2:DescribeInstanceStatus",
              "logs:*",
              "ssm:*",
              "ec2messages:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:Describe*",
              "ssm:Get*",
              "ssm:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2RoleforSSM",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAssociation",
              "ssm:GetDeployablePatchSnapshotForInstance",
              "ssm:GetDocument",
              "ssm:DescribeDocument",
              "ssm:GetManifest",
              "ssm:GetParameters",
              "ssm:ListAssociations",
              "ssm:ListInstanceAssociations",
              "ssm:PutInventory",
              "ssm:PutComplianceItems",
              "ssm:PutConfigurePackageResult",
              "ssm:UpdateAssociationStatus",
              "ssm:UpdateInstanceAssociationStatus",
              "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2messages:AcknowledgeMessage",
              "ec2messages:DeleteMessage",
              "ec2messages:FailMessage",
              "ec2messages:GetEndpoint",
              "ec2messages:GetMessages",
              "ec2messages:SendReply"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceStatus"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ds:CreateComputer",
              "ds:DescribeDirectories"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:PutObject",
              "s3:GetObject",
              "s3:GetEncryptionConfiguration",
              "s3:AbortMultipartUpload",
              "s3:ListMultipartUploadParts",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchActionsEC2Access",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:Describe*",
              "ec2:Describe*",
              "ec2:RebootInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodePipelineCustomActionAccess",
      "PolicyDocument": {
        "Statement": [
          {
            "Action": [
              "codepipeline:AcknowledgeJob",
              "codepipeline:GetJobDetails",
              "codepipeline:PollForJobs",
              "codepipeline:PutJobFailureResult",
              "codepipeline:PutJobSuccessResult"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AWSCodeCommitFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "codecommit:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchEventsCodeCommitRulesAccess",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:DescribeRule",
              "events:DisableRule",
              "events:EnableRule",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/codecommit*"
          },
          {
            "Sid": "SNSTopicAndSubscriptionAccess",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:DeleteTopic",
              "sns:Subscribe",
              "sns:Unsubscribe",
              "sns:SetTopicAttributes"
            ],
            "Resource": "arn:aws:sns:*:*:codecommit*"
          },
          {
            "Sid": "SNSTopicAndSubscriptionReadAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics",
              "sns:ListSubscriptionsByTopic",
              "sns:GetTopicAttributes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LambdaReadOnlyListAccess",
            "Effect": "Allow",
            "Action": [
              "lambda:ListFunctions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMReadOnlyListAccess",
            "Effect": "Allow",
            "Action": [
              "iam:ListUsers"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMReadOnlyConsoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:ListAccessKeys",
              "iam:ListSSHPublicKeys",
              "iam:ListServiceSpecificCredentials"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          },
          {
            "Sid": "IAMUserSSHKeys",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteSSHPublicKey",
              "iam:GetSSHPublicKey",
              "iam:ListSSHPublicKeys",
              "iam:UpdateSSHPublicKey",
              "iam:UploadSSHPublicKey"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          },
          {
            "Sid": "IAMSelfManageServiceSpecificCredentials",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceSpecificCredential",
              "iam:UpdateServiceSpecificCredential",
              "iam:DeleteServiceSpecificCredential",
              "iam:ResetServiceSpecificCredential"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          },
          {
            "Sid": "CodeStarNotificationsReadWriteAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:CreateNotificationRule",
              "codestar-notifications:DescribeNotificationRule",
              "codestar-notifications:UpdateNotificationRule",
              "codestar-notifications:DeleteNotificationRule",
              "codestar-notifications:Subscribe",
              "codestar-notifications:Unsubscribe"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codecommit:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListTargets",
              "codestar-notifications:ListTagsforResource",
              "codestar-notifications:ListEventTypes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:SetTopicAttributes"
            ],
            "Resource": "arn:aws:sns:*:*:codestar-notifications*"
          },
          {
            "Sid": "AmazonCodeGuruReviewerFullAccess",
            "Effect": "Allow",
            "Action": [
              "codeguru-reviewer:AssociateRepository",
              "codeguru-reviewer:DescribeRepositoryAssociation",
              "codeguru-reviewer:ListRepositoryAssociations",
              "codeguru-reviewer:DisassociateRepository",
              "codeguru-reviewer:DescribeCodeReview",
              "codeguru-reviewer:ListCodeReviews"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonCodeGuruReviewerSLRCreation",
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "codeguru-reviewer.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CloudWatchEventsManagedRules",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:DeleteRule",
              "events:RemoveTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "codeguru-reviewer.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsChatbotAccess",
            "Effect": "Allow",
            "Action": [
              "chatbot:DescribeSlackChannelConfigurations",
              "chatbot:ListMicrosoftTeamsChannelConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarConnectionsReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:ListConnections",
              "codestar-connections:GetConnection"
            ],
            "Resource": "arn:aws:codestar-connections:*:*:connection/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeCommitReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "codecommit:BatchGet*",
              "codecommit:BatchDescribe*",
              "codecommit:Describe*",
              "codecommit:EvaluatePullRequestApprovalRules",
              "codecommit:Get*",
              "codecommit:List*",
              "codecommit:GitPull"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchEventsCodeCommitRulesReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/codecommit*"
          },
          {
            "Sid": "SNSSubscriptionAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics",
              "sns:ListSubscriptionsByTopic",
              "sns:GetTopicAttributes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LambdaReadOnlyListAccess",
            "Effect": "Allow",
            "Action": [
              "lambda:ListFunctions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMReadOnlyListAccess",
            "Effect": "Allow",
            "Action": [
              "iam:ListUsers"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMReadOnlyConsoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:ListSSHPublicKeys",
              "iam:ListServiceSpecificCredentials",
              "iam:ListAccessKeys",
              "iam:GetSSHPublicKey"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          },
          {
            "Sid": "CodeStarConnectionsReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:ListConnections",
              "codestar-connections:GetConnection"
            ],
            "Resource": "arn:aws:codestar-connections:*:*:connection/*"
          },
          {
            "Sid": "CodeStarNotificationsReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:DescribeNotificationRule"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codecommit:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListEventTypes",
              "codestar-notifications:ListTargets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonCodeGuruReviewerReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "codeguru-reviewer:DescribeRepositoryAssociation",
              "codeguru-reviewer:ListRepositoryAssociations",
              "codeguru-reviewer:DescribeCodeReview",
              "codeguru-reviewer:ListCodeReviews"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeCommitPowerUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "codecommit:AssociateApprovalRuleTemplateWithRepository",
              "codecommit:BatchAssociateApprovalRuleTemplateWithRepositories",
              "codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories",
              "codecommit:BatchGet*",
              "codecommit:BatchDescribe*",
              "codecommit:Create*",
              "codecommit:DeleteBranch",
              "codecommit:DeleteFile",
              "codecommit:Describe*",
              "codecommit:DisassociateApprovalRuleTemplateFromRepository",
              "codecommit:EvaluatePullRequestApprovalRules",
              "codecommit:Get*",
              "codecommit:List*",
              "codecommit:Merge*",
              "codecommit:OverridePullRequestApprovalRules",
              "codecommit:Put*",
              "codecommit:Post*",
              "codecommit:TagResource",
              "codecommit:Test*",
              "codecommit:UntagResource",
              "codecommit:Update*",
              "codecommit:GitPull",
              "codecommit:GitPush"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchEventsCodeCommitRulesAccess",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:DescribeRule",
              "events:DisableRule",
              "events:EnableRule",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/codecommit*"
          },
          {
            "Sid": "SNSTopicAndSubscriptionAccess",
            "Effect": "Allow",
            "Action": [
              "sns:Subscribe",
              "sns:Unsubscribe"
            ],
            "Resource": "arn:aws:sns:*:*:codecommit*"
          },
          {
            "Sid": "SNSTopicAndSubscriptionReadAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics",
              "sns:ListSubscriptionsByTopic",
              "sns:GetTopicAttributes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LambdaReadOnlyListAccess",
            "Effect": "Allow",
            "Action": [
              "lambda:ListFunctions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMReadOnlyListAccess",
            "Effect": "Allow",
            "Action": [
              "iam:ListUsers"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMReadOnlyConsoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:ListAccessKeys",
              "iam:ListSSHPublicKeys",
              "iam:ListServiceSpecificCredentials"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          },
          {
            "Sid": "IAMUserSSHKeys",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteSSHPublicKey",
              "iam:GetSSHPublicKey",
              "iam:ListSSHPublicKeys",
              "iam:UpdateSSHPublicKey",
              "iam:UploadSSHPublicKey"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          },
          {
            "Sid": "IAMSelfManageServiceSpecificCredentials",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceSpecificCredential",
              "iam:UpdateServiceSpecificCredential",
              "iam:DeleteServiceSpecificCredential",
              "iam:ResetServiceSpecificCredential"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          },
          {
            "Sid": "CodeStarNotificationsReadWriteAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:CreateNotificationRule",
              "codestar-notifications:DescribeNotificationRule",
              "codestar-notifications:UpdateNotificationRule",
              "codestar-notifications:Subscribe",
              "codestar-notifications:Unsubscribe"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codecommit:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListTargets",
              "codestar-notifications:ListTagsforResource",
              "codestar-notifications:ListEventTypes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonCodeGuruReviewerFullAccess",
            "Effect": "Allow",
            "Action": [
              "codeguru-reviewer:AssociateRepository",
              "codeguru-reviewer:DescribeRepositoryAssociation",
              "codeguru-reviewer:ListRepositoryAssociations",
              "codeguru-reviewer:DisassociateRepository",
              "codeguru-reviewer:DescribeCodeReview",
              "codeguru-reviewer:ListCodeReviews"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonCodeGuruReviewerSLRCreation",
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "codeguru-reviewer.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CloudWatchEventsManagedRules",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:DeleteRule",
              "events:RemoveTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "codeguru-reviewer.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsChatbotAccess",
            "Effect": "Allow",
            "Action": [
              "chatbot:DescribeSlackChannelConfigurations",
              "chatbot:ListMicrosoftTeamsChannelConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarConnectionsReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:ListConnections",
              "codestar-connections:GetConnection"
            ],
            "Resource": "arn:aws:codestar-connections:*:*:connection/*"
          }
        ]
      }
    },
    {
      "PolicyName": "IAMUserSSHKeys",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteSSHPublicKey",
              "iam:GetSSHPublicKey",
              "iam:ListSSHPublicKeys",
              "iam:UpdateSSHPublicKey",
              "iam:UploadSSHPublicKey"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAPIGatewayAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "apigateway:*"
            ],
            "Resource": "arn:aws:apigateway:*::/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAPIGatewayInvokeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "execute-api:Invoke",
              "execute-api:ManageConnections"
            ],
            "Resource": "arn:aws:execute-api:*:*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeviceFarmFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "devicefarm:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDRSVPCManagement",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "VMImportExportRoleForAWSConnector",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::import-to-ec2-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifySnapshotAttribute",
              "ec2:CopySnapshot",
              "ec2:RegisterImage",
              "ec2:Describe*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesAdmin",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonWorkSpacesAdmin",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases",
              "kms:ListKeys",
              "workspaces:CreateTags",
              "workspaces:CreateWorkspaceImage",
              "workspaces:CreateWorkspaces",
              "workspaces:CreateWorkspacesPool",
              "workspaces:CreateStandbyWorkspaces",
              "workspaces:DeleteTags",
              "workspaces:DeregisterWorkspaceDirectory",
              "workspaces:DescribeTags",
              "workspaces:DescribeWorkspaceBundles",
              "workspaces:DescribeWorkspaceDirectories",
              "workspaces:DescribeWorkspaces",
              "workspaces:DescribeWorkspacesPools",
              "workspaces:DescribeWorkspacesPoolSessions",
              "workspaces:DescribeWorkspacesConnectionStatus",
              "workspaces:ModifyCertificateBasedAuthProperties",
              "workspaces:ModifySamlProperties",
              "workspaces:ModifyStreamingProperties",
              "workspaces:ModifyWorkspaceCreationProperties",
              "workspaces:ModifyWorkspaceProperties",
              "workspaces:RebootWorkspaces",
              "workspaces:RebuildWorkspaces",
              "workspaces:RegisterWorkspaceDirectory",
              "workspaces:RestoreWorkspace",
              "workspaces:StartWorkspaces",
              "workspaces:StartWorkspacesPool",
              "workspaces:StopWorkspaces",
              "workspaces:StopWorkspacesPool",
              "workspaces:TerminateWorkspaces",
              "workspaces:TerminateWorkspacesPool",
              "workspaces:TerminateWorkspacesPoolSession",
              "workspaces:UpdateWorkspacesPool"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonESFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "es:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonESReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "es:Describe*",
              "es:List*",
              "es:Get*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSWAFReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "waf:Get*",
              "waf:List*",
              "waf-regional:Get*",
              "waf-regional:List*",
              "wafv2:Get*",
              "wafv2:List*",
              "wafv2:Describe*",
              "wafv2:CheckCapacity",
              "cognito-idp:ListResourcesForWebACL",
              "cognito-idp:GetWebACLForResource",
              "apprunner:DescribeWebAclForService",
              "apprunner:ListServices",
              "apprunner:ListAssociatedServicesForWebAcl",
              "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
              "ec2:GetVerifiedAccessInstanceWebAcl"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSWAFFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowUseOfAWSWAF",
            "Effect": "Allow",
            "Action": [
              "waf:*",
              "waf-regional:*",
              "wafv2:*",
              "elasticloadbalancing:SetWebACL",
              "apigateway:SetWebACL",
              "appsync:SetWebACL",
              "logs:DescribeResourcePolicies",
              "logs:DescribeLogGroups",
              "cognito-idp:AssociateWebACL",
              "cognito-idp:DisassociateWebACL",
              "cognito-idp:ListResourcesForWebACL",
              "cognito-idp:GetWebACLForResource",
              "apprunner:AssociateWebAcl",
              "apprunner:DisassociateWebAcl",
              "apprunner:DescribeWebAclForService",
              "apprunner:ListServices",
              "apprunner:ListAssociatedServicesForWebAcl",
              "ec2:AssociateVerifiedAccessInstanceWebAcl",
              "ec2:DisassociateVerifiedAccessInstanceWebAcl",
              "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
              "ec2:GetVerifiedAccessInstanceWebAcl"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowLogDeliverySubscription",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:DeleteLogDelivery"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GrantLogDeliveryPermissionForS3Bucket",
            "Effect": "Allow",
            "Action": [
              "s3:PutBucketPolicy",
              "s3:GetBucketPolicy"
            ],
            "Resource": [
              "arn:aws:s3:::aws-waf-logs-*"
            ]
          },
          {
            "Sid": "GrantLogDeliveryPermissionForCloudWatchLogGroup",
            "Effect": "Allow",
            "Action": [
              "logs:PutResourcePolicy"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "wafv2.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonInspectorReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "inspector:Describe*",
              "inspector:Get*",
              "inspector:List*",
              "inspector:Preview*",
              "ec2:DescribeInstances",
              "ec2:DescribeTags",
              "sns:ListTopics",
              "events:DescribeRule",
              "events:ListRuleNamesByTarget"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonInspectorFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "inspector:*",
              "ec2:DescribeInstances",
              "ec2:DescribeTags",
              "sns:ListTopics",
              "events:DescribeRule",
              "events:ListRuleNamesByTarget"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "inspector.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/inspector.amazonaws.com/AWSServiceRoleForAmazonInspector",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "inspector.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKinesisFirehoseReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "firehose:Describe*",
              "firehose:List*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKinesisFirehoseFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "firehose:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTRuleActions",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "kinesis:PutRecord",
            "iot:Publish",
            "s3:PutObject",
            "sns:Publish",
            "sqs:SendMessage*",
            "cloudwatch:SetAlarmState",
            "cloudwatch:PutMetricData",
            "es:ESHttpPut",
            "firehose:PutRecord"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSIoTLogging",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:PutMetricFilter",
              "logs:PutRetentionPolicy",
              "logs:GetLogEvents",
              "logs:DeleteLogStream"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:*",
              "iotjobsdata:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDataAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:Connect",
              "iot:Publish",
              "iot:Subscribe",
              "iot:Receive",
              "iot:GetThingShadow",
              "iot:UpdateThingShadow",
              "iot:DeleteThingShadow",
              "iot:ListNamedShadowsForThing"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTConfigAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:AcceptCertificateTransfer",
              "iot:AddThingToThingGroup",
              "iot:AssociateTargetsWithJob",
              "iot:AttachPolicy",
              "iot:AttachPrincipalPolicy",
              "iot:AttachThingPrincipal",
              "iot:CancelCertificateTransfer",
              "iot:CancelJob",
              "iot:CancelJobExecution",
              "iot:ClearDefaultAuthorizer",
              "iot:CreateAuthorizer",
              "iot:CreateCertificateFromCsr",
              "iot:CreateJob",
              "iot:CreateKeysAndCertificate",
              "iot:CreateOTAUpdate",
              "iot:CreatePolicy",
              "iot:CreatePolicyVersion",
              "iot:CreateRoleAlias",
              "iot:CreateStream",
              "iot:CreateThing",
              "iot:CreateThingGroup",
              "iot:CreateThingType",
              "iot:CreateTopicRule",
              "iot:DeleteAuthorizer",
              "iot:DeleteCACertificate",
              "iot:DeleteCertificate",
              "iot:DeleteJob",
              "iot:DeleteJobExecution",
              "iot:DeleteOTAUpdate",
              "iot:DeletePolicy",
              "iot:DeletePolicyVersion",
              "iot:DeleteRegistrationCode",
              "iot:DeleteRoleAlias",
              "iot:DeleteStream",
              "iot:DeleteThing",
              "iot:DeleteThingGroup",
              "iot:DeleteThingType",
              "iot:DeleteTopicRule",
              "iot:DeleteV2LoggingLevel",
              "iot:DeprecateThingType",
              "iot:DescribeAuthorizer",
              "iot:DescribeCACertificate",
              "iot:DescribeCertificate",
              "iot:DescribeDefaultAuthorizer",
              "iot:DescribeEndpoint",
              "iot:DescribeEventConfigurations",
              "iot:DescribeIndex",
              "iot:DescribeJob",
              "iot:DescribeJobExecution",
              "iot:DescribeRoleAlias",
              "iot:DescribeStream",
              "iot:DescribeThing",
              "iot:DescribeThingGroup",
              "iot:DescribeThingRegistrationTask",
              "iot:DescribeThingType",
              "iot:DetachPolicy",
              "iot:DetachPrincipalPolicy",
              "iot:DetachThingPrincipal",
              "iot:DisableTopicRule",
              "iot:EnableTopicRule",
              "iot:GetEffectivePolicies",
              "iot:GetIndexingConfiguration",
              "iot:GetJobDocument",
              "iot:GetLoggingOptions",
              "iot:GetOTAUpdate",
              "iot:GetPolicy",
              "iot:GetPolicyVersion",
              "iot:GetRegistrationCode",
              "iot:GetTopicRule",
              "iot:GetV2LoggingOptions",
              "iot:ListAttachedPolicies",
              "iot:ListAuthorizers",
              "iot:ListCACertificates",
              "iot:ListCertificates",
              "iot:ListCertificatesByCA",
              "iot:ListIndices",
              "iot:ListJobExecutionsForJob",
              "iot:ListJobExecutionsForThing",
              "iot:ListJobs",
              "iot:ListOTAUpdates",
              "iot:ListOutgoingCertificates",
              "iot:ListPolicies",
              "iot:ListPolicyPrincipals",
              "iot:ListPolicyVersions",
              "iot:ListPrincipalPolicies",
              "iot:ListPrincipalThings",
              "iot:ListRoleAliases",
              "iot:ListStreams",
              "iot:ListTargetsForPolicy",
              "iot:ListThingGroups",
              "iot:ListThingGroupsForThing",
              "iot:ListThingPrincipals",
              "iot:ListThingRegistrationTaskReports",
              "iot:ListThingRegistrationTasks",
              "iot:ListThings",
              "iot:ListThingsInThingGroup",
              "iot:ListThingTypes",
              "iot:ListTopicRules",
              "iot:ListV2LoggingLevels",
              "iot:RegisterCACertificate",
              "iot:RegisterCertificate",
              "iot:RegisterThing",
              "iot:RejectCertificateTransfer",
              "iot:RemoveThingFromThingGroup",
              "iot:ReplaceTopicRule",
              "iot:SearchIndex",
              "iot:SetDefaultAuthorizer",
              "iot:SetDefaultPolicyVersion",
              "iot:SetLoggingOptions",
              "iot:SetV2LoggingLevel",
              "iot:SetV2LoggingOptions",
              "iot:StartThingRegistrationTask",
              "iot:StopThingRegistrationTask",
              "iot:TestAuthorization",
              "iot:TestInvokeAuthorizer",
              "iot:TransferCertificate",
              "iot:UpdateAuthorizer",
              "iot:UpdateCACertificate",
              "iot:UpdateCertificate",
              "iot:UpdateEventConfigurations",
              "iot:UpdateIndexingConfiguration",
              "iot:UpdateRoleAlias",
              "iot:UpdateStream",
              "iot:UpdateThing",
              "iot:UpdateThingGroup",
              "iot:UpdateThingGroupsForThing",
              "iot:UpdateAccountAuditConfiguration",
              "iot:DescribeAccountAuditConfiguration",
              "iot:DeleteAccountAuditConfiguration",
              "iot:StartOnDemandAuditTask",
              "iot:CancelAuditTask",
              "iot:DescribeAuditTask",
              "iot:ListAuditTasks",
              "iot:CreateScheduledAudit",
              "iot:UpdateScheduledAudit",
              "iot:DeleteScheduledAudit",
              "iot:DescribeScheduledAudit",
              "iot:ListScheduledAudits",
              "iot:ListAuditFindings",
              "iot:CreateSecurityProfile",
              "iot:DescribeSecurityProfile",
              "iot:UpdateSecurityProfile",
              "iot:DeleteSecurityProfile",
              "iot:AttachSecurityProfile",
              "iot:DetachSecurityProfile",
              "iot:ListSecurityProfiles",
              "iot:ListSecurityProfilesForTarget",
              "iot:ListTargetsForSecurityProfile",
              "iot:ListActiveViolations",
              "iot:ListViolationEvents",
              "iot:ValidateSecurityProfileBehaviors"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTConfigReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:DescribeAuthorizer",
              "iot:DescribeCACertificate",
              "iot:DescribeCertificate",
              "iot:DescribeDefaultAuthorizer",
              "iot:DescribeEndpoint",
              "iot:DescribeEventConfigurations",
              "iot:DescribeIndex",
              "iot:DescribeJob",
              "iot:DescribeJobExecution",
              "iot:DescribeRoleAlias",
              "iot:DescribeStream",
              "iot:DescribeThing",
              "iot:DescribeThingGroup",
              "iot:DescribeThingRegistrationTask",
              "iot:DescribeThingType",
              "iot:GetEffectivePolicies",
              "iot:GetIndexingConfiguration",
              "iot:GetJobDocument",
              "iot:GetLoggingOptions",
              "iot:GetOTAUpdate",
              "iot:GetPolicy",
              "iot:GetPolicyVersion",
              "iot:GetRegistrationCode",
              "iot:GetTopicRule",
              "iot:GetV2LoggingOptions",
              "iot:ListAttachedPolicies",
              "iot:ListAuthorizers",
              "iot:ListCACertificates",
              "iot:ListCertificates",
              "iot:ListCertificatesByCA",
              "iot:ListIndices",
              "iot:ListJobExecutionsForJob",
              "iot:ListJobExecutionsForThing",
              "iot:ListJobs",
              "iot:ListOTAUpdates",
              "iot:ListOutgoingCertificates",
              "iot:ListPolicies",
              "iot:ListPolicyPrincipals",
              "iot:ListPolicyVersions",
              "iot:ListPrincipalPolicies",
              "iot:ListPrincipalThings",
              "iot:ListRoleAliases",
              "iot:ListStreams",
              "iot:ListTargetsForPolicy",
              "iot:ListThingGroups",
              "iot:ListThingGroupsForThing",
              "iot:ListThingPrincipals",
              "iot:ListThingRegistrationTaskReports",
              "iot:ListThingRegistrationTasks",
              "iot:ListThings",
              "iot:ListThingsInThingGroup",
              "iot:ListThingTypes",
              "iot:ListTopicRules",
              "iot:ListV2LoggingLevels",
              "iot:SearchIndex",
              "iot:TestAuthorization",
              "iot:TestInvokeAuthorizer",
              "iot:DescribeAccountAuditConfiguration",
              "iot:DescribeAuditTask",
              "iot:ListAuditTasks",
              "iot:DescribeScheduledAudit",
              "iot:ListScheduledAudits",
              "iot:ListAuditFindings",
              "iot:DescribeSecurityProfile",
              "iot:ListSecurityProfiles",
              "iot:ListSecurityProfilesForTarget",
              "iot:ListTargetsForSecurityProfile",
              "iot:ListActiveViolations",
              "iot:ListViolationEvents",
              "iot:ValidateSecurityProfileBehaviors"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightDescribeRDS",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "rds:Describe*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightDescribeRedshift",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "redshift:Describe*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightListIAM",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSEnhancedMonitoringRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogGroups",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:RDS*"
            ]
          },
          {
            "Sid": "EnableCreationAndManagementOfRDSCloudwatchLogStreams",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:RDS*:log-stream:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAPIGatewayPushToCloudWatchLogs",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents",
              "logs:GetLogEvents",
              "logs:FilterLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDMSVPCManagementRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Statement1",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMechanicalTurkFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mechanicalturk:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMechanicalTurkReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mechanicalturk:Get*",
              "mechanicalturk:List*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2ContainerRegistryReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:GetRepositoryPolicy",
              "ecr:DescribeRepositories",
              "ecr:ListImages",
              "ecr:DescribeImages",
              "ecr:BatchGetImage",
              "ecr:GetLifecyclePolicy",
              "ecr:GetLifecyclePolicyPreview",
              "ecr:ListTagsForResource",
              "ecr:DescribeImageScanFindings"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2ContainerRegistryPowerUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:GetRepositoryPolicy",
              "ecr:DescribeRepositories",
              "ecr:ListImages",
              "ecr:DescribeImages",
              "ecr:BatchGetImage",
              "ecr:GetLifecyclePolicy",
              "ecr:GetLifecyclePolicyPreview",
              "ecr:ListTagsForResource",
              "ecr:DescribeImageScanFindings",
              "ecr:InitiateLayerUpload",
              "ecr:UploadLayerPart",
              "ecr:CompleteLayerUpload",
              "ecr:PutImage"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2ContainerRegistryFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:*",
              "cloudtrail:LookupEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "replication.ecr.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDMSCloudWatchLogsRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowDescribeOnAllLogGroups",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowDescribeOfAllLogStreamsOnDmsTasksLogGroup",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:dms-tasks-*",
              "arn:aws:logs:*:*:log-group:dms-serverless-replication-*"
            ]
          },
          {
            "Sid": "AllowCreationOfDmsLogGroups",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:dms-tasks-*",
              "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:"
            ]
          },
          {
            "Sid": "AllowCreationOfDmsLogStream",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*",
              "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:dms-serverless-*"
            ]
          },
          {
            "Sid": "AllowUploadOfLogEventsToDmsLogStream",
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:dms-tasks-*:log-stream:dms-task-*",
              "arn:aws:logs:*:*:log-group:dms-serverless-replication-*:log-stream:dms-serverless-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchEventsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:DescribeEventBus",
              "events:DescribeEventSource",
              "events:ListEventBuses",
              "events:ListEventSources",
              "events:ListRuleNamesByTarget",
              "events:ListRules",
              "events:ListTargetsByRule",
              "events:TestEventPattern",
              "events:DescribeArchive",
              "events:ListArchives",
              "events:DescribeReplay",
              "events:ListReplays",
              "events:DescribeConnection",
              "events:ListConnections",
              "events:DescribeApiDestination",
              "events:ListApiDestinations",
              "events:DescribeEndpoint",
              "events:ListEndpoints",
              "schemas:DescribeCodeBinding",
              "schemas:DescribeDiscoverer",
              "schemas:DescribeRegistry",
              "schemas:DescribeSchema",
              "schemas:ExportSchema",
              "schemas:GetCodeBindingSource",
              "schemas:GetDiscoveredSchema",
              "schemas:GetResourcePolicy",
              "schemas:ListDiscoverers",
              "schemas:ListRegistries",
              "schemas:ListSchemas",
              "schemas:ListSchemaVersions",
              "schemas:ListTagsForResource",
              "schemas:SearchSchemas",
              "scheduler:GetSchedule",
              "scheduler:GetScheduleGroup",
              "scheduler:ListSchedules",
              "scheduler:ListScheduleGroups",
              "scheduler:ListTagsForResource",
              "pipes:DescribePipe",
              "pipes:ListPipes",
              "pipes:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchEventsBuiltInTargetExecutionAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchEventsBuiltInTargetExecutionAccess",
            "Effect": "Allow",
            "Action": [
              "ec2:Describe*",
              "ec2:RebootInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:CreateSnapshot"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchEventsInvocationAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchEventsInvocationAccess",
            "Effect": "Allow",
            "Action": [
              "kinesis:PutRecord"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchEventsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EventBridgeActions",
            "Effect": "Allow",
            "Action": [
              "events:*",
              "schemas:*",
              "scheduler:*",
              "pipes:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMCreateServiceLinkedRoleForApiDestinations",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/AmazonEventBridgeApiDestinationsServiceRolePolicy",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "apidestinations.events.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "schemas.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SecretsManagerAccessForApiDestinations",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:UpdateSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:PutSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:events!*"
          },
          {
            "Sid": "IAMPassRoleForCloudWatchEvents",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/AWS_Events_Invoke_Targets"
          },
          {
            "Sid": "IAMPassRoleAccessForScheduler",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "scheduler.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMPassRoleAccessForPipes",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "pipes.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCertificateManagerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/acm.amazonaws.com/AWSServiceRoleForCertificateManager*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "acm.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus",
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/acm.amazonaws.com/AWSServiceRoleForCertificateManager*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCertificateManagerReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "acm:GetCertificate",
            "acm:ListTagsForCertificate",
            "acm:GetAccountConfiguration"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkWebTier",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "BucketAccess",
            "Action": [
              "s3:Get*",
              "s3:List*",
              "s3:PutObject"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:s3:::elasticbeanstalk-*",
              "arn:aws:s3:::elasticbeanstalk-*/*"
            ]
          },
          {
            "Sid": "XRayAccess",
            "Action": [
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
              "xray:GetSamplingStatisticSummaries"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchLogsAccess",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ]
          },
          {
            "Sid": "ElasticBeanstalkHealthAccess",
            "Action": [
              "elasticbeanstalk:PutInstanceStatistics"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:elasticbeanstalk:*:*:application/*",
              "arn:aws:elasticbeanstalk:*:*:environment/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkWorkerTier",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "MetricsAccess",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "XRayAccess",
            "Action": [
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
              "xray:GetSamplingStatisticSummaries"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "QueueAccess",
            "Action": [
              "sqs:ChangeMessageVisibility",
              "sqs:DeleteMessage",
              "sqs:ReceiveMessage",
              "sqs:SendMessage"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "BucketAccess",
            "Action": [
              "s3:Get*",
              "s3:List*",
              "s3:PutObject"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:s3:::elasticbeanstalk-*",
              "arn:aws:s3:::elasticbeanstalk-*/*"
            ]
          },
          {
            "Sid": "DynamoPeriodicTasks",
            "Action": [
              "dynamodb:BatchGetItem",
              "dynamodb:BatchWriteItem",
              "dynamodb:DeleteItem",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:UpdateItem"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:dynamodb:*:*:table/*-stack-AWSEBWorkerCronLeaderRegistry*"
            ]
          },
          {
            "Sid": "CloudWatchLogsAccess",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ]
          },
          {
            "Sid": "ElasticBeanstalkHealthAccess",
            "Action": [
              "elasticbeanstalk:PutInstanceStatistics"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:elasticbeanstalk:*:*:application/*",
              "arn:aws:elasticbeanstalk:*:*:environment/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkMulticontainerDocker",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ECSAccess",
            "Effect": "Allow",
            "Action": [
              "ecs:Poll",
              "ecs:StartTask",
              "ecs:StopTask",
              "ecs:DiscoverPollEndpoint",
              "ecs:StartTelemetrySession",
              "ecs:RegisterContainerInstance",
              "ecs:DeregisterContainerInstance",
              "ecs:DescribeContainerInstances",
              "ecs:Submit*",
              "ecs:DescribeTasks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowECSTagResource",
            "Effect": "Allow",
            "Action": [
              "ecs:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:CreateAction": [
                  "RegisterContainerInstance",
                  "StartTask"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkEnhancedHealth",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetHealth",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:GetConsoleOutput",
              "ec2:AssociateAddress",
              "ec2:DescribeAddresses",
              "ec2:DescribeSecurityGroups",
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeScalingActivities",
              "autoscaling:DescribeNotificationConfigurations",
              "sns:Publish"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogStreams",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*:log-stream:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaVPCAccessExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSLambdaVPCAccessExecutionPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "ec2:CreateNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DeleteNetworkInterface",
              "ec2:AssignPrivateIpAddresses",
              "ec2:UnassignPrivateIpAddresses"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSDirectoryServiceAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ds:DescribeDirectories",
              "ds:AuthorizeApplication",
              "ds:UnauthorizeApplication",
              "ds:GetAuthorizedApplicationDetails"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceMeteringFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "aws-marketplace:MeterUsage"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSConfigRulesExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::*/AWSLogs/*/Config/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:Put*",
              "config:Get*",
              "config:List*",
              "config:Describe*",
              "config:BatchGet*",
              "config:Select*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkService",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowCloudformationOperationsOnElasticBeanstalkStacks",
            "Effect": "Allow",
            "Action": [
              "cloudformation:*"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/awseb-*",
              "arn:aws:cloudformation:*:*:stack/eb-*"
            ]
          },
          {
            "Sid": "AllowDeleteCloudwatchLogGroups",
            "Effect": "Allow",
            "Action": [
              "logs:DeleteLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk*"
            ]
          },
          {
            "Sid": "AllowECSTagResource",
            "Effect": "Allow",
            "Action": [
              "ecs:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:CreateAction": [
                  "CreateCluster",
                  "RegisterTaskDefinition"
                ]
              }
            }
          },
          {
            "Sid": "AllowS3OperationsOnElasticBeanstalkBuckets",
            "Effect": "Allow",
            "Action": [
              "s3:*"
            ],
            "Resource": [
              "arn:aws:s3:::elasticbeanstalk-*",
              "arn:aws:s3:::elasticbeanstalk-*/*"
            ]
          },
          {
            "Sid": "AllowLaunchTemplateRunInstances",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
              }
            }
          },
          {
            "Sid": "AllowELBAddTags",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "elasticloadbalancing:CreateAction": [
                  "CreateLoadBalancer"
                ]
              }
            }
          },
          {
            "Sid": "AllowOperations",
            "Effect": "Allow",
            "Action": [
              "autoscaling:AttachInstances",
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:CreateLaunchConfiguration",
              "autoscaling:CreateOrUpdateTags",
              "autoscaling:DeleteLaunchConfiguration",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:DeleteScheduledAction",
              "autoscaling:DescribeAccountLimits",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribeLoadBalancers",
              "autoscaling:DescribeNotificationConfigurations",
              "autoscaling:DescribeScalingActivities",
              "autoscaling:DescribeScheduledActions",
              "autoscaling:DetachInstances",
              "autoscaling:DeletePolicy",
              "autoscaling:PutScalingPolicy",
              "autoscaling:PutScheduledUpdateGroupAction",
              "autoscaling:PutNotificationConfiguration",
              "autoscaling:ResumeProcesses",
              "autoscaling:SetDesiredCapacity",
              "autoscaling:SuspendProcesses",
              "autoscaling:TerminateInstanceInAutoScalingGroup",
              "autoscaling:UpdateAutoScalingGroup",
              "cloudwatch:PutMetricAlarm",
              "ec2:AssociateAddress",
              "ec2:AllocateAddress",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateLaunchTemplateVersion",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteLaunchTemplateVersions",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeVpcClassicLink",
              "ec2:DisassociateAddress",
              "ec2:ReleaseAddress",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:TerminateInstances",
              "ecs:CreateCluster",
              "ecs:DeleteCluster",
              "ecs:DescribeClusters",
              "ecs:RegisterTaskDefinition",
              "elasticbeanstalk:*",
              "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
              "elasticloadbalancing:ConfigureHealthCheck",
              "elasticloadbalancing:CreateLoadBalancer",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:DeregisterTargets",
              "iam:ListRoles",
              "iam:PassRole",
              "logs:CreateLogGroup",
              "logs:PutRetentionPolicy",
              "logs:DescribeLogGroups",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeOrderableDBInstanceOptions",
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:ListBucket",
              "sns:CreateTopic",
              "sns:GetTopicAttributes",
              "sns:ListSubscriptionsByTopic",
              "sns:Subscribe",
              "sns:SetTopicAttributes",
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "codebuild:CreateProject",
              "codebuild:DeleteProject",
              "codebuild:BatchGetBuilds",
              "codebuild:StartBuild"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDMSRedshiftS3Role",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:ListBucket",
              "s3:DeleteBucket",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:GetObjectVersion",
              "s3:GetBucketPolicy",
              "s3:PutBucketPolicy",
              "s3:GetBucketAcl",
              "s3:PutBucketVersioning",
              "s3:GetBucketVersioning",
              "s3:PutLifecycleConfiguration",
              "s3:GetLifecycleConfiguration",
              "s3:DeleteBucketPolicy"
            ],
            "Resource": "arn:aws:s3:::dms-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationDiscoveryServiceFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "mgh:*",
              "discovery:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iam:GetRole"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "continuousexport.discovery.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "migrationhub.amazonaws.com",
                  "dmsintegration.migrationhub.amazonaws.com",
                  "smsintegration.migrationhub.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationDiscoveryAgentAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "arsenal:RegisterOnPremisesAgent"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgh:GetHomeRegion"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2ContainerServiceAutoscaleRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecs:DescribeServices",
              "ecs:UpdateService"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "cloudwatch:PutMetricAlarm"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOpsWorksInstanceRegistration",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "opsworks:DescribeStackProvisioningParameters",
              "opsworks:DescribeStacks",
              "opsworks:RegisterInstance"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodePipelineApproverAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "codepipeline:GetPipeline",
              "codepipeline:GetPipelineState",
              "codepipeline:GetPipelineExecution",
              "codepipeline:ListPipelineExecutions",
              "codepipeline:ListPipelines",
              "codepipeline:PutApprovalResult"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAgentlessDiscoveryService",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "awsconnector:RegisterConnector",
              "awsconnector:GetConnectorHealth"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:GetUser",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::connector-platform-upgrade-info/*",
              "arn:aws:s3:::connector-platform-upgrade-info",
              "arn:aws:s3:::connector-platform-upgrade-bundles/*",
              "arn:aws:s3:::connector-platform-upgrade-bundles",
              "arn:aws:s3:::connector-platform-release-notes/*",
              "arn:aws:s3:::connector-platform-release-notes",
              "arn:aws:s3:::prod.agentless.discovery.connector.upgrade/*",
              "arn:aws:s3:::prod.agentless.discovery.connector.upgrade"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:PutObjectAcl"
            ],
            "Resource": [
              "arn:aws:s3:::import-to-ec2-connector-debug-logs/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "SNS:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*"
          },
          {
            "Sid": "Discovery",
            "Effect": "Allow",
            "Action": [
              "Discovery:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "arsenal",
            "Effect": "Allow",
            "Action": [
              "arsenal:RegisterOnPremisesAgent"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgh:GetHomeRegion"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2SpotFleetAutoscaleRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSpotFleetRequests",
              "ec2:ModifySpotFleetRequest"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/ec2.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_EC2SpotFleetRequest",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "ec2.application-autoscaling.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKinesisAnalyticsReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kinesisanalytics:Describe*",
              "kinesisanalytics:Get*",
              "kinesisanalytics:List*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:DescribeStream",
              "kinesis:ListStreams"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "firehose:DescribeDeliveryStream",
              "firehose:ListDeliveryStreams"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "logs:GetLogEvents",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListPolicyVersions",
              "iam:ListRoles"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKinesisAnalyticsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "kinesisanalytics:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:CreateStream",
              "kinesis:DeleteStream",
              "kinesis:DescribeStream",
              "kinesis:ListStreams",
              "kinesis:PutRecord",
              "kinesis:PutRecords"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "firehose:DescribeDeliveryStream",
              "firehose:ListDeliveryStreams"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "logs:GetLogEvents",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListPolicyVersions",
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/service-role/kinesis-analytics*"
          }
        ]
      }
    },
    {
      "PolicyName": "ServerMigrationConnector",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:GetUser",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sms:SendMessage",
              "sms:GetMessages"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteObject",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:PutLifecycleConfiguration",
              "s3:AbortMultipartUpload",
              "s3:ListBucketMultipartUploads",
              "s3:ListMultipartUploadParts"
            ],
            "Resource": [
              "arn:aws:s3:::sms-b-*",
              "arn:aws:s3:::import-to-ec2-*",
              "arn:aws:s3:::server-migration-service-upgrade",
              "arn:aws:s3:::server-migration-service-upgrade/*",
              "arn:aws:s3:::connector-platform-upgrade-info/*",
              "arn:aws:s3:::connector-platform-upgrade-info",
              "arn:aws:s3:::connector-platform-upgrade-bundles/*",
              "arn:aws:s3:::connector-platform-upgrade-bundles",
              "arn:aws:s3:::connector-platform-release-notes/*",
              "arn:aws:s3:::connector-platform-release-notes"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "awsconnector:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "SNS:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:metrics-sns-topic-for-*"
          }
        ]
      }
    },
    {
      "PolicyName": "ViewOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "GeneralViewOnlyAccessStatement",
            "Effect": "Allow",
            "Action": [
              "acm:ListCertificates",
              "athena:List*",
              "autoscaling:Describe*",
              "aws-marketplace:ViewSubscriptions",
              "backup:DescribeBackupJob",
              "backup:DescribeBackupVault",
              "backup:DescribeCopyJob",
              "backup:DescribeFramework",
              "backup:DescribeGlobalSettings",
              "backup:DescribeProtectedResource",
              "backup:DescribeRecoveryPoint",
              "backup:DescribeRegionSettings",
              "backup:DescribeReportJob",
              "backup:DescribeReportPlan",
              "backup:DescribeRestoreJob",
              "backup:GetSupportedResourceTypes",
              "backup:ListBackupJobs",
              "backup:ListBackupPlanTemplates",
              "backup:ListBackupPlanVersions",
              "backup:ListBackupPlans",
              "backup:ListBackupSelections",
              "backup:ListBackupVaults",
              "backup:ListCopyJobs",
              "backup:ListFrameworks",
              "backup:ListLegalHolds",
              "backup:ListProtectedResources",
              "backup:ListProtectedResourcesByBackupVault",
              "backup:ListRecoveryPointsByBackupVault",
              "backup:ListRecoveryPointsByLegalHold",
              "backup:ListRecoveryPointsByResource",
              "backup:ListReportJobs",
              "backup:ListReportPlans",
              "backup:ListRestoreJobs",
              "backup:ListTags",
              "batch:ListJobs",
              "bedrock:ListCustomModels",
              "bedrock:ListTagsForResource",
              "clouddirectory:ListAppliedSchemaArns",
              "clouddirectory:ListDevelopmentSchemaArns",
              "clouddirectory:ListDirectories",
              "clouddirectory:ListPublishedSchemaArns",
              "cloudformation:DescribeStacks",
              "cloudformation:List*",
              "cloudfront:List*",
              "cloudsearch:DescribeDomains",
              "cloudsearch:List*",
              "cloudtrail:DescribeTrails",
              "cloudtrail:ListTrails",
              "cloudtrail:LookupEvents",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "codebuild:ListBuilds*",
              "codebuild:ListProjects",
              "codecommit:List*",
              "codedeploy:BatchGetApplicationRevisions",
              "codedeploy:BatchGetApplications",
              "codedeploy:BatchGetDeploymentGroups",
              "codedeploy:BatchGetDeploymentInstances",
              "codedeploy:BatchGetDeploymentTargets",
              "codedeploy:BatchGetDeployments",
              "codedeploy:BatchGetOnPremisesInstances",
              "codedeploy:Get*",
              "codedeploy:List*",
              "codepipeline:ListPipelines",
              "codestar:List*",
              "cognito-identity:ListIdentities",
              "cognito-identity:ListIdentityPools",
              "cognito-idp:List*",
              "cognito-sync:ListDatasets",
              "comprehend:Describe*",
              "comprehend:List*",
              "config:Describe*",
              "config:List*",
              "connect:List*",
              "cost-optimization-hub:GetPreferences",
              "cost-optimization-hub:GetRecommendation",
              "cost-optimization-hub:ListEnrollmentStatuses",
              "cost-optimization-hub:ListRecommendationSummaries",
              "cost-optimization-hub:ListRecommendations",
              "databrew:ListJobs",
              "databrew:ListProjects",
              "datapipeline:DescribePipelines",
              "datapipeline:GetAccountLimits",
              "datapipeline:ListPipelines",
              "dax:DescribeClusters",
              "dax:DescribeDefaultParameters",
              "dax:DescribeEvents",
              "dax:DescribeParameterGroups",
              "dax:DescribeParameters",
              "dax:DescribeSubnetGroups",
              "dax:ListTags",
              "devicefarm:List*",
              "directconnect:Describe*",
              "discovery:List*",
              "dms:List*",
              "ds:DescribeDirectories",
              "dynamodb:DescribeBackup",
              "dynamodb:DescribeContinuousBackups",
              "dynamodb:DescribeGlobalTable",
              "dynamodb:DescribeGlobalTableSettings",
              "dynamodb:DescribeLimits",
              "dynamodb:DescribeReservedCapacity",
              "dynamodb:DescribeReservedCapacityOfferings",
              "dynamodb:DescribeStream",
              "dynamodb:DescribeTable",
              "dynamodb:DescribeTimeToLive",
              "dynamodb:ListBackups",
              "dynamodb:ListExports",
              "dynamodb:ListGlobalTables",
              "dynamodb:ListStreams",
              "dynamodb:ListTables",
              "dynamodb:ListTagsOfResource",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeBundleTasks",
              "ec2:DescribeCarrierGateways",
              "ec2:DescribeClassicLinkInstances",
              "ec2:DescribeConversionTasks",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeExportTasks",
              "ec2:DescribeFlowLogs",
              "ec2:DescribeHost*",
              "ec2:DescribeIdFormat",
              "ec2:DescribeIdentityIdFormat",
              "ec2:DescribeImage*",
              "ec2:DescribeImport*",
              "ec2:DescribeInstance*",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
              "ec2:DescribeLocalGatewayRouteTables",
              "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
              "ec2:DescribeLocalGatewayVirtualInterfaces",
              "ec2:DescribeLocalGateways",
              "ec2:DescribeMovingAddresses",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetwork*",
              "ec2:DescribePlacementGroups",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRegions",
              "ec2:DescribeReserved*",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshot*",
              "ec2:DescribeSpot*",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVolume*",
              "ec2:DescribeVpc*",
              "ec2:DescribeVpnGateways",
              "ec2:SearchLocalGatewayRoutes",
              "ecr:DescribeRegistry",
              "ecr:DescribeRepositories",
              "ecr:ListImages",
              "ecs:Describe*",
              "ecs:List*",
              "eks:ListTagsForResource",
              "elastic-inference:DescribeAcceleratorOfferings",
              "elastic-inference:DescribeAcceleratorTypes",
              "elastic-inference:DescribeAccelerators",
              "elastic-inference:ListTagsForResource",
              "elasticache:Describe*",
              "elasticbeanstalk:DescribeApplicationVersions",
              "elasticbeanstalk:DescribeApplications",
              "elasticbeanstalk:DescribeEnvironments",
              "elasticbeanstalk:ListAvailableSolutionStacks",
              "elasticfilesystem:DescribeFileSystems",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticmapreduce:List*",
              "elastictranscoder:List*",
              "emr-serverless:ListApplications",
              "es:DescribeElasticsearchDomain",
              "es:DescribeElasticsearchDomains",
              "es:ListDomainNames",
              "events:ListRuleNamesByTarget",
              "events:ListRules",
              "events:ListTargetsByRule",
              "firehose:DescribeDeliveryStream",
              "firehose:List*",
              "fsx:DescribeFileSystems",
              "gamelift:List*",
              "glacier:List*",
              "glue:GetTags",
              "greengrass:List*",
              "iam:GetAccountSummary",
              "iam:GetLoginProfile",
              "iam:List*",
              "importexport:ListJobs",
              "inspector:List*",
              "iot:List*",
              "kafka:ListClusters",
              "kendra:ListDataSources",
              "kendra:ListTagsForResource",
              "kinesis:ListStreams",
              "kinesisanalytics:ListApplications",
              "kinesisanalytics:ListTagsForResource",
              "kms:ListKeys",
              "kms:ListResourceTags",
              "lambda:List*",
              "lex:GetBotAliases",
              "lex:GetBotChannelAssociations",
              "lex:GetBotVersions",
              "lex:GetBots",
              "lex:GetIntentVersions",
              "lex:GetIntents",
              "lex:GetSlotTypeVersions",
              "lex:GetSlotTypes",
              "lex:GetUtterancesView",
              "lightsail:GetBlueprints",
              "lightsail:GetBundles",
              "lightsail:GetInstanceSnapshots",
              "lightsail:GetInstances",
              "lightsail:GetKeyPair",
              "lightsail:GetRegions",
              "lightsail:GetStaticIps",
              "lightsail:IsVpcPeered",
              "logs:Describe*",
              "logs:ListTagsForResource",
              "lookoutvision:ListModelPackagingJobs",
              "lookoutvision:ListModels",
              "lookoutvision:ListProjects",
              "machinelearning:Describe*",
              "mediaconnect:ListEntitlements",
              "mediaconnect:ListFlows",
              "mediaconnect:ListOfferings",
              "mediaconnect:ListReservations",
              "mobiletargeting:GetApplicationSettings",
              "mobiletargeting:GetCampaigns",
              "mobiletargeting:GetImportJobs",
              "mobiletargeting:GetSegments",
              "oam:ListAttachedLinks",
              "oam:ListLinks",
              "oam:ListSinks",
              "opsworks-cm:Describe*",
              "opsworks:Describe*",
              "organizations:List*",
              "outposts:GetOutpost",
              "outposts:GetOutpostInstanceTypes",
              "outposts:ListOutposts",
              "outposts:ListSites",
              "outposts:ListTagsForResource",
              "polly:Describe*",
              "polly:List*",
              "profile:ListDomains",
              "profile:ListIntegrations",
              "rds:Describe*",
              "redshift-serverless:ListTagsForResource",
              "redshift-serverless:ListWorkgroups",
              "redshift:DescribeClusters",
              "redshift:DescribeEvents",
              "redshift:ViewQueriesInConsole",
              "resource-explorer-2:GetDefaultView",
              "resource-explorer-2:GetIndex",
              "resource-explorer-2:ListIndexes",
              "resource-explorer-2:ListSupportedResourceTypes",
              "resource-explorer-2:ListTagsForResource",
              "resource-explorer-2:ListViews",
              "route53:Get*",
              "route53:List*",
              "route53domains:List*",
              "route53resolver:Get*",
              "route53resolver:List*",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListMultiRegionAccessPoints",
              "sagemaker:Describe*",
              "sagemaker:List*",
              "sdb:List*",
              "servicecatalog:List*",
              "ses:DescribeActiveReceiptRuleSet",
              "ses:List*",
              "ses:ListDedicatedIpPools",
              "shield:List*",
              "sns:List*",
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "sqs:ListDeadLetterSourceQueues",
              "sqs:ListMessageMoveTasks",
              "sqs:ListQueueTags",
              "sqs:ListQueues",
              "ssm:ListAssociations",
              "ssm:ListDocuments",
              "states:ListActivities",
              "states:ListStateMachineAliases",
              "states:ListStateMachineVersions",
              "states:ListStateMachines",
              "storagegateway:ListGateways",
              "storagegateway:ListLocalDisks",
              "storagegateway:ListVolumeRecoveryPoints",
              "storagegateway:ListVolumes",
              "swf:List*",
              "trustedadvisor:Describe*",
              "waf-regional:List*",
              "waf:List*",
              "wafv2:List*",
              "workdocs:DescribeAvailableDirectories",
              "workdocs:DescribeInstances",
              "workmail:Describe*",
              "workspaces:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Sid": "APIGatewayAccess",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/apis",
              "arn:aws:apigateway:*::/apis/*/authorizers/*",
              "arn:aws:apigateway:*::/apis/*/authorizers",
              "arn:aws:apigateway:*::/apis/*/cors",
              "arn:aws:apigateway:*::/apis/*/deployments/*",
              "arn:aws:apigateway:*::/apis/*/deployments",
              "arn:aws:apigateway:*::/apis/*/exports/*",
              "arn:aws:apigateway:*::/apis/*/integrations/*",
              "arn:aws:apigateway:*::/apis/*/integrations",
              "arn:aws:apigateway:*::/apis/*/models/*",
              "arn:aws:apigateway:*::/apis/*/models",
              "arn:aws:apigateway:*::/apis/*/routes/*",
              "arn:aws:apigateway:*::/apis/*/routes",
              "arn:aws:apigateway:*::/apis/*/stages",
              "arn:aws:apigateway:*::/apis/*/stages/*",
              "arn:aws:apigateway:*::/clientcertificates",
              "arn:aws:apigateway:*::/clientcertificates/*",
              "arn:aws:apigateway:*::/domainnames",
              "arn:aws:apigateway:*::/domainnames/*/apimappings",
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*/authorizers/*",
              "arn:aws:apigateway:*::/restapis/*/authorizers",
              "arn:aws:apigateway:*::/restapis/*/deployments/*",
              "arn:aws:apigateway:*::/restapis/*/deployments",
              "arn:aws:apigateway:*::/restapis/*/documentation/parts/*",
              "arn:aws:apigateway:*::/restapis/*/documentation/parts",
              "arn:aws:apigateway:*::/restapis/*/documentation/versions/*",
              "arn:aws:apigateway:*::/restapis/*/documentation/versions",
              "arn:aws:apigateway:*::/restapis/*/gatewayresponses/*",
              "arn:aws:apigateway:*::/restapis/*/gatewayresponses",
              "arn:aws:apigateway:*::/restapis/*/models/*",
              "arn:aws:apigateway:*::/restapis/*/models",
              "arn:aws:apigateway:*::/restapis/*/requestvalidators",
              "arn:aws:apigateway:*::/restapis/*/requestvalidators/*",
              "arn:aws:apigateway:*::/restapis/*/resources/*",
              "arn:aws:apigateway:*::/restapis/*/resources",
              "arn:aws:apigateway:*::/restapis/*/stages",
              "arn:aws:apigateway:*::/restapis/*/stages/*",
              "arn:aws:apigateway:*::/tags/*",
              "arn:aws:apigateway:*::/vpclinks"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "SupportUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "support:*",
              "acm:DescribeCertificate",
              "acm:GetCertificate",
              "acm:List*",
              "acm-pca:DescribeCertificateAuthority",
              "acm-pca:ListCertificateAuthorities",
              "apigateway:GET",
              "autoscaling:Describe*",
              "aws-marketplace:ViewSubscriptions",
              "cloudformation:Describe*",
              "cloudformation:Get*",
              "cloudformation:List*",
              "cloudformation:EstimateTemplateCost",
              "cloudfront:Get*",
              "cloudfront:List*",
              "cloudsearch:Describe*",
              "cloudsearch:List*",
              "cloudtrail:DescribeTrails",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:LookupEvents",
              "cloudtrail:ListTags",
              "cloudtrail:ListPublicKeys",
              "cloudwatch:Describe*",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "codecommit:BatchGetRepositories",
              "codecommit:Get*",
              "codecommit:List*",
              "codedeploy:Batch*",
              "codedeploy:Get*",
              "codedeploy:List*",
              "codepipeline:AcknowledgeJob",
              "codepipeline:AcknowledgeThirdPartyJob",
              "codepipeline:ListActionTypes",
              "codepipeline:ListPipelines",
              "codepipeline:PollForJobs",
              "codepipeline:PollForThirdPartyJobs",
              "codepipeline:GetPipelineState",
              "codepipeline:GetPipeline",
              "cognito-identity:List*",
              "cognito-identity:LookupDeveloperIdentity",
              "cognito-identity:Describe*",
              "cognito-idp:DescribeResourceServer",
              "cognito-idp:DescribeRiskConfiguration",
              "cognito-idp:DescribeUserImportJob",
              "cognito-idp:DescribeUserPool",
              "cognito-idp:DescribeUserPoolDomain",
              "cognito-idp:List*",
              "cognito-sync:Describe*",
              "cognito-sync:GetBulkPublishDetails",
              "cognito-sync:GetCognitoEvents",
              "cognito-sync:GetIdentityPoolConfiguration",
              "cognito-sync:List*",
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus",
              "config:DescribeConfigRuleEvaluationStatus",
              "config:DescribeConfigRules",
              "config:DescribeDeliveryChannels",
              "config:DescribeDeliveryChannelStatus",
              "config:GetResourceConfigHistory",
              "config:ListDiscoveredResources",
              "datapipeline:DescribeObjects",
              "datapipeline:DescribePipelines",
              "datapipeline:GetPipelineDefinition",
              "datapipeline:ListPipelines",
              "datapipeline:QueryObjects",
              "datapipeline:ReportTaskProgress",
              "datapipeline:ReportTaskRunnerHeartbeat",
              "devicefarm:List*",
              "devicefarm:Get*",
              "directconnect:Describe*",
              "discovery:Describe*",
              "discovery:ListConfigurations",
              "dms:Describe*",
              "dms:List*",
              "ds:DescribeDirectories",
              "ds:DescribeSnapshots",
              "ds:GetDirectoryLimits",
              "ds:GetSnapshotLimits",
              "ds:ListAuthorizedApplications",
              "dynamodb:DescribeLimits",
              "dynamodb:DescribeTable",
              "dynamodb:ListTables",
              "ec2:Describe*",
              "ec2:DescribeHosts",
              "ec2:describeIdentityIdFormat",
              "ec2:DescribeIdFormat",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeNatGateways",
              "ec2:DescribeReservedInstancesModifications",
              "ec2:DescribeTags",
              "ec2:SearchLocalGatewayRoutes",
              "ecr:GetRepositoryPolicy",
              "ecr:BatchCheckLayerAvailability",
              "ecr:DescribeRepositories",
              "ecr:ListImages",
              "ecs:Describe*",
              "ecs:List*",
              "elasticache:Describe*",
              "elasticache:List*",
              "elasticbeanstalk:Check*",
              "elasticbeanstalk:Describe*",
              "elasticbeanstalk:List*",
              "elasticbeanstalk:RequestEnvironmentInfo",
              "elasticbeanstalk:RetrieveEnvironmentInfo",
              "elasticbeanstalk:ValidateConfigurationSettings",
              "elasticfilesystem:Describe*",
              "elasticloadbalancing:Describe*",
              "elasticmapreduce:Describe*",
              "elasticmapreduce:List*",
              "elastictranscoder:List*",
              "elastictranscoder:ReadJob",
              "elasticfilesystem:DescribeFileSystems",
              "es:Describe*",
              "es:List*",
              "es:ESHttpGet",
              "es:ESHttpHead",
              "events:DescribeRule",
              "events:List*",
              "events:TestEventPattern",
              "firehose:Describe*",
              "firehose:List*",
              "gamelift:List*",
              "gamelift:Describe*",
              "glacier:ListVaults",
              "glacier:DescribeVault",
              "glacier:DescribeJob",
              "glacier:Get*",
              "glacier:List*",
              "iam:GenerateCredentialReport",
              "iam:GenerateServiceLastAccessedDetails",
              "iam:Get*",
              "iam:List*",
              "importexport:GetStatus",
              "importexport:ListJobs",
              "inspector:Describe*",
              "inspector:List*",
              "iot:Describe*",
              "iot:Get*",
              "iot:List*",
              "kinesisanalytics:DescribeApplication",
              "kinesisanalytics:DiscoverInputSchema",
              "kinesisanalytics:GetApplicationState",
              "kinesisanalytics:ListApplications",
              "kinesis:Describe*",
              "kinesis:Get*",
              "kinesis:List*",
              "kms:Describe*",
              "kms:Get*",
              "kms:List*",
              "lambda:List*",
              "lambda:Get*",
              "logs:Describe*",
              "logs:TestMetricFilter",
              "machinelearning:Describe*",
              "machinelearning:Get*",
              "opsworks:Describe*",
              "rds:Describe*",
              "rds:ListTagsForResource",
              "redshift:Describe*",
              "route53:Get*",
              "route53:List*",
              "route53domains:CheckDomainAvailability",
              "route53domains:GetDomainDetail",
              "route53domains:GetOperationDetail",
              "route53domains:List*",
              "s3:List*",
              "sdb:GetAttributes",
              "sdb:List*",
              "sdb:Select*",
              "servicecatalog:SearchProducts",
              "servicecatalog:DescribeProduct",
              "servicecatalog:DescribeProductView",
              "servicecatalog:ListLaunchPaths",
              "servicecatalog:DescribeProvisioningParameters",
              "servicecatalog:ListRecordHistory",
              "servicecatalog:DescribeRecord",
              "servicecatalog:ScanProvisionedProducts",
              "ses:Get*",
              "ses:List*",
              "sns:Get*",
              "sns:List*",
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "sqs:ListQueues",
              "sqs:ReceiveMessage",
              "ssm:List*",
              "ssm:Describe*",
              "storagegateway:Describe*",
              "storagegateway:List*",
              "swf:Count*",
              "swf:Describe*",
              "swf:Get*",
              "swf:List*",
              "waf:Get*",
              "waf:List*",
              "workdocs:Describe*",
              "workmail:Describe*",
              "workmail:Get*",
              "workspaces:Describe*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "SystemAdministrator",
      "PolicyDocument": {
        "Statement": [
          {
            "Action": [
              "acm:Describe*",
              "acm:Get*",
              "acm:List*",
              "acm:Request*",
              "acm:Resend*",
              "autoscaling:*",
              "cloudtrail:DescribeTrails",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:ListPublicKeys",
              "cloudtrail:ListTags",
              "cloudtrail:LookupEvents",
              "cloudtrail:StartLogging",
              "cloudtrail:StopLogging",
              "cloudwatch:*",
              "codecommit:BatchGetRepositories",
              "codecommit:CreateBranch",
              "codecommit:CreateRepository",
              "codecommit:Get*",
              "codecommit:GitPull",
              "codecommit:GitPush",
              "codecommit:List*",
              "codecommit:Put*",
              "codecommit:Test*",
              "codecommit:Update*",
              "codedeploy:*",
              "codepipeline:*",
              "config:*",
              "ds:*",
              "ec2:Allocate*",
              "ec2:AssignPrivateIpAddresses*",
              "ec2:Associate*",
              "ec2:Allocate*",
              "ec2:AttachInternetGateway",
              "ec2:AttachNetworkInterface",
              "ec2:AttachVpnGateway",
              "ec2:Bundle*",
              "ec2:Cancel*",
              "ec2:Copy*",
              "ec2:CreateCustomerGateway",
              "ec2:CreateDhcpOptions",
              "ec2:CreateFlowLogs",
              "ec2:CreateImage",
              "ec2:CreateInstanceExportTask",
              "ec2:CreateInternetGateway",
              "ec2:CreateKeyPair",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateLaunchTemplateVersion",
              "ec2:CreateNatGateway",
              "ec2:CreateNetworkInterface",
              "ec2:CreatePlacementGroup",
              "ec2:CreateReservedInstancesListing",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSnapshot",
              "ec2:CreateSpotDatafeedSubscription",
              "ec2:CreateSubnet",
              "ec2:CreateTags",
              "ec2:CreateVolume",
              "ec2:CreateVpc",
              "ec2:CreateVpcEndpoint",
              "ec2:CreateVpnConnection",
              "ec2:CreateVpnConnectionRoute",
              "ec2:CreateVpnGateway",
              "ec2:DeleteFlowLogs",
              "ec2:DeleteKeyPair",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteLaunchTemplateVersions",
              "ec2:DeleteNatGateway",
              "ec2:DeleteNetworkInterface",
              "ec2:DeletePlacementGroup",
              "ec2:DeleteSnapshot",
              "ec2:DeleteSpotDatafeedSubscription",
              "ec2:DeleteSubnet",
              "ec2:DeleteTags",
              "ec2:DeleteVpc",
              "ec2:DeleteVpcEndpoints",
              "ec2:DeleteVpnConnection",
              "ec2:DeleteVpnConnectionRoute",
              "ec2:DeleteVpnGateway",
              "ec2:DeregisterImage",
              "ec2:Describe*",
              "ec2:DetachInternetGateway",
              "ec2:DetachNetworkInterface",
              "ec2:DetachVpnGateway",
              "ec2:DisableVgwRoutePropagation",
              "ec2:DisableVpcClassicLinkDnsSupport",
              "ec2:DisassociateAddress",
              "ec2:DisassociateRouteTable",
              "ec2:EnableVgwRoutePropagation",
              "ec2:EnableVolumeIO",
              "ec2:EnableVpcClassicLinkDnsSupport",
              "ec2:GetConsoleOutput",
              "ec2:GetHostReservationPurchasePreview",
              "ec2:GetLaunchTemplateData",
              "ec2:GetPasswordData",
              "ec2:Import*",
              "ec2:Modify*",
              "ec2:MonitorInstances",
              "ec2:MoveAddressToVpc",
              "ec2:Purchase*",
              "ec2:RegisterImage",
              "ec2:Release*",
              "ec2:Replace*",
              "ec2:ReportInstanceStatus",
              "ec2:Request*",
              "ec2:Reset*",
              "ec2:RestoreAddressToClassic",
              "ec2:RunScheduledInstances",
              "ec2:UnassignPrivateIpAddresses",
              "ec2:UnmonitorInstances",
              "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
              "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
              "elasticloadbalancing:*",
              "events:*",
              "iam:GetAccount*",
              "iam:GetContextKeys*",
              "iam:GetCredentialReport",
              "iam:ListAccountAliases",
              "iam:ListGroups",
              "iam:ListOpenIDConnectProviders",
              "iam:ListPolicies",
              "iam:ListPoliciesGrantingServiceAccess",
              "iam:ListRoles",
              "iam:ListSAMLProviders",
              "iam:ListServerCertificates",
              "iam:Simulate*",
              "iam:UpdateServerCertificate",
              "iam:UpdateSigningCertificate",
              "kinesis:ListStreams",
              "kinesis:PutRecord",
              "kms:CreateAlias",
              "kms:CreateKey",
              "kms:DeleteAlias",
              "kms:Describe*",
              "kms:GenerateRandom",
              "kms:Get*",
              "kms:List*",
              "kms:Encrypt",
              "kms:ReEncrypt*",
              "lambda:Create*",
              "lambda:Delete*",
              "lambda:Get*",
              "lambda:InvokeFunction",
              "lambda:List*",
              "lambda:PublishVersion",
              "lambda:Update*",
              "logs:*",
              "rds:Describe*",
              "rds:ListTagsForResource",
              "route53:*",
              "route53domains:*",
              "ses:*",
              "sns:*",
              "sqs:*",
              "trustedadvisor:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "ec2:AcceptVpcPeeringConnection",
              "ec2:AttachClassicLinkVpc",
              "ec2:AttachVolume",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateVpcPeeringConnection",
              "ec2:DeleteCustomerGateway",
              "ec2:DeleteDhcpOptions",
              "ec2:DeleteInternetGateway",
              "ec2:DeleteNetworkAcl*",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteVolume",
              "ec2:DeleteVpcPeeringConnection",
              "ec2:DetachClassicLinkVpc",
              "ec2:DetachVolume",
              "ec2:DisableVpcClassicLink",
              "ec2:EnableVpcClassicLink",
              "ec2:GetConsoleScreenshot",
              "ec2:RebootInstances",
              "ec2:RejectVpcPeeringConnection",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": "s3:*",
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": [
              "iam:GetAccessKeyLastUsed",
              "iam:GetGroup*",
              "iam:GetInstanceProfile",
              "iam:GetLoginProfile",
              "iam:GetOpenIDConnectProvider",
              "iam:GetPolicy*",
              "iam:GetRole*",
              "iam:GetSAMLProvider",
              "iam:GetSSHPublicKey",
              "iam:GetServerCertificate",
              "iam:GetServiceLastAccessed*",
              "iam:GetUser*",
              "iam:ListAccessKeys",
              "iam:ListAttached*",
              "iam:ListEntitiesForPolicy",
              "iam:ListGroupPolicies",
              "iam:ListGroupsForUser",
              "iam:ListInstanceProfiles*",
              "iam:ListMFADevices",
              "iam:ListPolicyVersions",
              "iam:ListRolePolicies",
              "iam:ListSSHPublicKeys",
              "iam:ListSigningCertificates",
              "iam:ListUserPolicies",
              "iam:Upload*"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": [
              "iam:GetRole",
              "iam:ListRoles",
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/rds-monitoring-role",
              "arn:aws:iam::*:role/ec2-sysadmin-*",
              "arn:aws:iam::*:role/ecr-sysadmin-*",
              "arn:aws:iam::*:role/lambda-sysadmin-*"
            ]
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "DatabaseAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DeleteAlarms",
              "cloudwatch:Describe*",
              "cloudwatch:DisableAlarmActions",
              "cloudwatch:EnableAlarmActions",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "cloudwatch:PutMetricAlarm",
              "datapipeline:ActivatePipeline",
              "datapipeline:CreatePipeline",
              "datapipeline:DeletePipeline",
              "datapipeline:DescribeObjects",
              "datapipeline:DescribePipelines",
              "datapipeline:GetPipelineDefinition",
              "datapipeline:ListPipelines",
              "datapipeline:PutPipelineDefinition",
              "datapipeline:QueryObjects",
              "dynamodb:*",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "elasticache:*",
              "iam:ListRoles",
              "iam:GetRole",
              "kms:ListKeys",
              "lambda:CreateEventSourceMapping",
              "lambda:CreateFunction",
              "lambda:DeleteEventSourceMapping",
              "lambda:DeleteFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:ListEventSourceMappings",
              "lambda:ListFunctions",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:FilterLogEvents",
              "logs:GetLogEvents",
              "logs:Create*",
              "logs:PutLogEvents",
              "logs:PutMetricFilter",
              "rds:*",
              "redshift:*",
              "s3:CreateBucket",
              "sns:CreateTopic",
              "sns:DeleteTopic",
              "sns:Get*",
              "sns:List*",
              "sns:SetTopicAttributes",
              "sns:Subscribe",
              "sns:Unsubscribe"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:DeleteObject*",
              "s3:Get*",
              "s3:List*",
              "s3:PutAccelerateConfiguration",
              "s3:PutBucketTagging",
              "s3:PutBucketVersioning",
              "s3:PutBucketWebsite",
              "s3:PutLifecycleConfiguration",
              "s3:PutReplicationConfiguration",
              "s3:PutObject*",
              "s3:Replicate*",
              "s3:RestoreObject"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/rds-monitoring-role",
              "arn:aws:iam::*:role/rdbms-lambda-access",
              "arn:aws:iam::*:role/lambda_exec_role",
              "arn:aws:iam::*:role/lambda-dynamodb-*",
              "arn:aws:iam::*:role/lambda-vpc-execution-role",
              "arn:aws:iam::*:role/DataPipelineDefaultRole",
              "arn:aws:iam::*:role/DataPipelineDefaultResourceRole"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "DataScientist",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "autoscaling:*",
              "cloudwatch:*",
              "cloudformation:CreateStack",
              "cloudformation:DescribeStackEvents",
              "datapipeline:Describe*",
              "datapipeline:ListPipelines",
              "datapipeline:GetPipelineDefinition",
              "datapipeline:QueryObjects",
              "dynamodb:*",
              "ec2:CancelSpotInstanceRequests",
              "ec2:CancelSpotFleetRequests",
              "ec2:CreateTags",
              "ec2:DeleteTags",
              "ec2:Describe*",
              "ec2:ModifyImageAttribute",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifySpotFleetRequest",
              "ec2:RequestSpotInstances",
              "ec2:RequestSpotFleet",
              "elasticfilesystem:*",
              "elasticmapreduce:*",
              "es:*",
              "firehose:*",
              "fsx:DescribeFileSystems",
              "iam:GetInstanceProfile",
              "iam:GetRole",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:ListRoles",
              "kinesis:*",
              "kms:List*",
              "lambda:Create*",
              "lambda:Delete*",
              "lambda:Get*",
              "lambda:InvokeFunction",
              "lambda:PublishVersion",
              "lambda:Update*",
              "lambda:List*",
              "machinelearning:*",
              "sdb:*",
              "rds:*",
              "sns:ListSubscriptions",
              "sns:ListTopics",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "redshift:*",
              "s3:CreateBucket",
              "sns:CreateTopic",
              "sns:Get*",
              "sns:List*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:Abort*",
              "s3:DeleteObject",
              "s3:Get*",
              "s3:List*",
              "s3:PutAccelerateConfiguration",
              "s3:PutBucketCors",
              "s3:PutBucketLogging",
              "s3:PutBucketNotification",
              "s3:PutBucketTagging",
              "s3:PutObject",
              "s3:Replicate*",
              "s3:RestoreObject"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/DataPipelineDefaultRole",
              "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
              "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
              "arn:aws:iam::*:role/EMR_DefaultRole",
              "arn:aws:iam::*:role/kinesis-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "sagemaker.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:*"
            ],
            "NotResource": [
              "arn:aws:sagemaker:*:*:domain/*",
              "arn:aws:sagemaker:*:*:user-profile/*",
              "arn:aws:sagemaker:*:*:app/*",
              "arn:aws:sagemaker:*:*:flow-definition/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreatePresignedDomainUrl",
              "sagemaker:DescribeDomain",
              "sagemaker:ListDomains",
              "sagemaker:DescribeUserProfile",
              "sagemaker:ListUserProfiles",
              "sagemaker:*App",
              "sagemaker:ListApps"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:*FlowDefinition",
              "sagemaker:*FlowDefinitions"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "sagemaker:WorkteamType": [
                  "private-crowd",
                  "vendor-crowd"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "NetworkAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowDefaultNetworkAdminActions",
            "Effect": "Allow",
            "Action": [
              "autoscaling:Describe*",
              "cloudfront:ListDistributions",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:PutMetricAlarm",
              "directconnect:*",
              "ec2:AcceptVpcEndpointConnections",
              "ec2:AllocateAddress",
              "ec2:AssignIpv6Addresses",
              "ec2:AssignPrivateIpAddresses",
              "ec2:AssociateAddress",
              "ec2:AssociateDhcpOptions",
              "ec2:AssociateRouteTable",
              "ec2:AssociateSubnetCidrBlock",
              "ec2:AssociateVpcCidrBlock",
              "ec2:AttachInternetGateway",
              "ec2:AttachNetworkInterface",
              "ec2:AttachVpnGateway",
              "ec2:CreateCarrierGateway",
              "ec2:CreateCustomerGateway",
              "ec2:CreateDefaultSubnet",
              "ec2:CreateDefaultVpc",
              "ec2:CreateDhcpOptions",
              "ec2:CreateEgressOnlyInternetGateway",
              "ec2:CreateFlowLogs",
              "ec2:CreateInternetGateway",
              "ec2:CreateNatGateway",
              "ec2:CreateNetworkAcl",
              "ec2:CreateNetworkAclEntry",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:CreatePlacementGroup",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateTags",
              "ec2:CreateVpc",
              "ec2:CreateVpcEndpoint",
              "ec2:CreateVpcEndpointConnectionNotification",
              "ec2:CreateVpcEndpointServiceConfiguration",
              "ec2:CreateVpnConnection",
              "ec2:CreateVpnConnectionRoute",
              "ec2:CreateVpnGateway",
              "ec2:DeleteCarrierGateway",
              "ec2:DeleteEgressOnlyInternetGateway",
              "ec2:DeleteFlowLogs",
              "ec2:DeleteNatGateway",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DeletePlacementGroup",
              "ec2:DeleteSubnet",
              "ec2:DeleteTags",
              "ec2:DeleteVpc",
              "ec2:DeleteVpcEndpointConnectionNotifications",
              "ec2:DeleteVpcEndpointServiceConfigurations",
              "ec2:DeleteVpcEndpoints",
              "ec2:DeleteVpnConnection",
              "ec2:DeleteVpnConnectionRoute",
              "ec2:DeleteVpnGateway",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCarrierGateways",
              "ec2:DescribeClassicLinkInstances",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeEgressOnlyInternetGateways",
              "ec2:DescribeFlowLogs",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeIpv6Pools",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeMovingAddresses",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeNetworkInterfacePermissions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePlacementGroups",
              "ec2:DescribePrefixLists",
              "ec2:DescribePublicIpv4Pools",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroupReferences",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeStaleSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcClassicLink",
              "ec2:DescribeVpcClassicLinkDnsSupport",
              "ec2:DescribeVpcEndpointConnectionNotifications",
              "ec2:DescribeVpcEndpointConnections",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcEndpointServicePermissions",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:DetachInternetGateway",
              "ec2:DetachNetworkInterface",
              "ec2:DetachVpnGateway",
              "ec2:DisableVgwRoutePropagation",
              "ec2:DisableVpcClassicLinkDnsSupport",
              "ec2:DisassociateAddress",
              "ec2:DisassociateRouteTable",
              "ec2:DisassociateSubnetCidrBlock",
              "ec2:DisassociateVpcCidrBlock",
              "ec2:EnableVgwRoutePropagation",
              "ec2:EnableVpcClassicLinkDnsSupport",
              "ec2:GetVpnConnectionDeviceSampleConfiguration",
              "ec2:GetVpnConnectionDeviceTypes",
              "ec2:GetVpnTunnelReplacementStatus",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ModifySecurityGroupRules",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:ModifyVpcEndpoint",
              "ec2:ModifyVpcEndpointConnectionNotification",
              "ec2:ModifyVpcEndpointServiceConfiguration",
              "ec2:ModifyVpcEndpointServicePermissions",
              "ec2:ModifyVpcPeeringConnectionOptions",
              "ec2:ModifyVpcTenancy",
              "ec2:ModifyVpnConnection",
              "ec2:ModifyVpnConnectionOptions",
              "ec2:ModifyVpnTunnelCertificate",
              "ec2:ModifyVpnTunnelOptions",
              "ec2:MoveAddressToVpc",
              "ec2:RejectVpcEndpointConnections",
              "ec2:ReleaseAddress",
              "ec2:ReplaceNetworkAclAssociation",
              "ec2:ReplaceNetworkAclEntry",
              "ec2:ReplaceRoute",
              "ec2:ReplaceRouteTableAssociation",
              "ec2:ReplaceVpnTunnel",
              "ec2:ResetNetworkInterfaceAttribute",
              "ec2:RestoreAddressToClassic",
              "ec2:UnassignIpv6Addresses",
              "ec2:UnassignPrivateIpAddresses",
              "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
              "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
              "elasticbeanstalk:Describe*",
              "elasticbeanstalk:List*",
              "elasticbeanstalk:RequestEnvironmentInfo",
              "elasticbeanstalk:RetrieveEnvironmentInfo",
              "elasticloadbalancing:*",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "route53:*",
              "route53domains:*",
              "sns:CreateTopic",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowVPCPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:AcceptVpcPeeringConnection",
              "ec2:AttachClassicLinkVpc",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateVpcPeeringConnection",
              "ec2:DeleteCustomerGateway",
              "ec2:DeleteDhcpOptions",
              "ec2:DeleteInternetGateway",
              "ec2:DeleteNetworkAcl",
              "ec2:DeleteNetworkAclEntry",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteVolume",
              "ec2:DeleteVpcPeeringConnection",
              "ec2:DetachClassicLinkVpc",
              "ec2:DisableVpcClassicLink",
              "ec2:EnableVpcClassicLink",
              "ec2:GetConsoleScreenshot",
              "ec2:RejectVpcPeeringConnection",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowLocalGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLocalGatewayRoute",
              "ec2:CreateLocalGatewayRouteTableVpcAssociation",
              "ec2:DeleteLocalGatewayRoute",
              "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
              "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
              "ec2:DescribeLocalGatewayRouteTables",
              "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
              "ec2:DescribeLocalGatewayVirtualInterfaces",
              "ec2:DescribeLocalGateways",
              "ec2:SearchLocalGatewayRoutes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DiscoverBuckets",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetBucketWebsite",
              "s3:ListBucket"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DiscoverFlowLogRoles",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:ListRoles",
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/flow-logs-*"
          },
          {
            "Sid": "NetworkmanagerPermissions",
            "Effect": "Allow",
            "Action": [
              "networkmanager:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TransitGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:AcceptTransitGatewayVpcAttachment",
              "ec2:AssociateTransitGatewayRouteTable",
              "ec2:CreateTransitGateway",
              "ec2:CreateTransitGatewayRoute",
              "ec2:CreateTransitGatewayRouteTable",
              "ec2:CreateTransitGatewayVpcAttachment",
              "ec2:DeleteTransitGateway",
              "ec2:DeleteTransitGatewayRoute",
              "ec2:DeleteTransitGatewayRouteTable",
              "ec2:DeleteTransitGatewayVpcAttachment",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribeTransitGateways",
              "ec2:DisableTransitGatewayRouteTablePropagation",
              "ec2:DisassociateTransitGatewayRouteTable",
              "ec2:EnableTransitGatewayRouteTablePropagation",
              "ec2:ExportTransitGatewayRoutes",
              "ec2:GetTransitGatewayAttachmentPropagations",
              "ec2:GetTransitGatewayRouteTableAssociations",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "ec2:ModifyTransitGateway",
              "ec2:ModifyTransitGatewayVpcAttachment",
              "ec2:RejectTransitGatewayVpcAttachment",
              "ec2:ReplaceTransitGatewayRoute",
              "ec2:SearchTransitGatewayRoutes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowTransitGatewaySLRCreation",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "transitgateway.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "Billing",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
              "account:GetAccountInformation",
              "aws-portal:*Billing",
              "aws-portal:*PaymentMethods",
              "aws-portal:*Usage",
              "billing:GetBillingData",
              "billing:GetBillingDetails",
              "billing:GetBillingNotifications",
              "billing:GetBillingPreferences",
              "billing:GetContractInformation",
              "billing:GetCredits",
              "billing:GetIAMAccessPreference",
              "billing:GetSellerOfRecord",
              "billing:ListBillingViews",
              "billing:PutContractInformation",
              "billing:RedeemCredits",
              "billing:UpdateBillingPreferences",
              "billing:UpdateIAMAccessPreference",
              "budgets:CreateBudgetAction",
              "budgets:DeleteBudgetAction",
              "budgets:DescribeBudgetActionsForBudget",
              "budgets:DescribeBudgetAction",
              "budgets:DescribeBudgetActionsForAccount",
              "budgets:DescribeBudgetActionHistories",
              "budgets:ExecuteBudgetAction",
              "budgets:ModifyBudget",
              "budgets:UpdateBudgetAction",
              "budgets:ViewBudget",
              "ce:CreateCostCategoryDefinition",
              "ce:CreateNotificationSubscription",
              "ce:CreateReport",
              "ce:DeleteCostCategoryDefinition",
              "ce:DeleteNotificationSubscription",
              "ce:DeleteReport",
              "ce:DescribeCostCategoryDefinition",
              "ce:GetCostAndUsage",
              "ce:ListCostAllocationTags",
              "ce:ListCostCategoryDefinitions",
              "ce:ListTagsForResource",
              "ce:TagResource",
              "ce:UpdateCostAllocationTagsStatus",
              "ce:UpdateNotificationSubscription",
              "ce:UpdatePreferences",
              "ce:UpdateReport",
              "ce:UpdateCostCategoryDefinition",
              "ce:UntagResource",
              "ce:StartCostAllocationTagBackfill",
              "ce:ListCostAllocationTagBackfillHistory",
              "ce:GetTags",
              "ce:GetDimensionValues",
              "consolidatedbilling:GetAccountBillingRole",
              "consolidatedbilling:ListLinkedAccounts",
              "cur:DeleteReportDefinition",
              "cur:DescribeReportDefinitions",
              "cur:GetClassicReport",
              "cur:GetClassicReportPreferences",
              "cur:GetUsageReport",
              "cur:ModifyReportDefinition",
              "cur:PutClassicReportPreferences",
              "cur:PutReportDefinition",
              "cur:ValidateReportDestination",
              "freetier:GetFreeTierAlertPreference",
              "freetier:GetFreeTierUsage",
              "freetier:PutFreeTierAlertPreference",
              "invoicing:GetInvoiceEmailDeliveryPreferences",
              "invoicing:GetInvoicePDF",
              "invoicing:ListInvoiceSummaries",
              "invoicing:PutInvoiceEmailDeliveryPreferences",
              "payments:CreatePaymentInstrument",
              "payments:DeletePaymentInstrument",
              "payments:GetPaymentInstrument",
              "payments:GetPaymentStatus",
              "payments:ListPaymentPreferences",
              "payments:ListTagsForResource",
              "payments:ListPaymentInstruments",
              "payments:MakePayment",
              "payments:TagResource",
              "payments:UpdatePaymentPreferences",
              "payments:UpdatePaymentInstrument",
              "payments:UntagResource",
              "pricing:DescribeServices",
              "purchase-orders:AddPurchaseOrder",
              "purchase-orders:DeletePurchaseOrder",
              "purchase-orders:GetPurchaseOrder",
              "purchase-orders:ListPurchaseOrderInvoices",
              "purchase-orders:ListPurchaseOrders",
              "purchase-orders:ListTagsForResource",
              "purchase-orders:ModifyPurchaseOrders",
              "purchase-orders:TagResource",
              "purchase-orders:UntagResource",
              "purchase-orders:UpdatePurchaseOrder",
              "purchase-orders:UpdatePurchaseOrderStatus",
              "purchase-orders:ViewPurchaseOrders",
              "support:CreateCase",
              "support:AddAttachmentsToSet",
              "sustainability:GetCarbonFootprintSummary",
              "tax:BatchPutTaxRegistration",
              "tax:DeleteTaxRegistration",
              "tax:GetExemptions",
              "tax:GetTaxInheritance",
              "tax:GetTaxInterview",
              "tax:GetTaxRegistration",
              "tax:GetTaxRegistrationDocument",
              "tax:ListTaxRegistrations",
              "tax:PutTaxInheritance",
              "tax:PutTaxInterview",
              "tax:PutTaxRegistration",
              "tax:UpdateExemptions"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "IAMUserChangePassword",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:ChangePassword"
            ],
            "Resource": [
              "arn:aws:iam::*:user/${aws:username}"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetAccountPasswordPolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticMapReduceforAutoScalingRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudwatch:DescribeAlarms",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ModifyInstanceGroups"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAppStreamServiceAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeAvailabilityZones",
              "ec2:CreateNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeSubnets",
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcEndpoints",
              "s3:ListAllMyBuckets",
              "ds:DescribeDirectories"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:ListBucket",
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:GetObjectVersion",
              "s3:DeleteObjectVersion",
              "s3:GetBucketPolicy",
              "s3:PutBucketPolicy",
              "s3:PutEncryptionConfiguration"
            ],
            "Resource": [
              "arn:aws:s3:::appstream2-36fb080bb8-*",
              "arn:aws:s3:::appstream-app-settings-*",
              "arn:aws:s3:::appstream-logs-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOpsWorksCMInstanceProfileRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudformation:DescribeStackResource",
              "cloudformation:SignalResource"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListMultipartUploadParts",
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::aws-opsworks-cm-*",
            "Effect": "Allow"
          },
          {
            "Action": "acm:GetCertificate",
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Action": "secretsmanager:GetSecretValue",
            "Resource": "arn:aws:secretsmanager:*:*:opsworks-cm!aws-opsworks-cm-secrets-*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOpsWorksCMServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Resource": [
              "arn:aws:s3:::aws-opsworks-cm-*"
            ],
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteObject",
              "s3:DeleteBucket",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutBucketPolicy",
              "s3:PutObject",
              "s3:GetBucketTagging",
              "s3:PutBucketTagging"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Action": [
              "tag:UntagResources",
              "tag:TagResources"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Action": [
              "ssm:DescribeInstanceInformation",
              "ssm:GetCommandInvocation",
              "ssm:ListCommandInvocations",
              "ssm:ListCommands"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "ssm:resourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
              }
            },
            "Action": [
              "ssm:SendCommand"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "arn:aws:ssm:*::document/*",
              "arn:aws:s3:::aws-opsworks-cm-*"
            ],
            "Action": [
              "ssm:SendCommand"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Action": [
              "ec2:AllocateAddress",
              "ec2:AssociateAddress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateImage",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSnapshot",
              "ec2:CreateTags",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSnapshot",
              "ec2:DeregisterImage",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeImages",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DisassociateAddress",
              "ec2:ReleaseAddress",
              "ec2:RunInstances",
              "ec2:StopInstances"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-opsworks-cm-*"
              }
            },
            "Action": [
              "ec2:TerminateInstances",
              "ec2:RebootInstances"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "arn:aws:opsworks-cm:*:*:server/*"
            ],
            "Action": [
              "opsworks-cm:DeleteServer",
              "opsworks-cm:StartMaintenance"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/aws-opsworks-cm-*"
            ],
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResources",
              "cloudformation:DescribeStacks",
              "cloudformation:UpdateStack"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/aws-opsworks-cm-*",
              "arn:aws:iam::*:role/service-role/aws-opsworks-cm-*"
            ],
            "Action": [
              "iam:PassRole"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": "*",
            "Action": [
              "acm:DeleteCertificate",
              "acm:ImportCertificate"
            ]
          },
          {
            "Effect": "Allow",
            "Resource": "arn:aws:secretsmanager:*:*:opsworks-cm!aws-opsworks-cm-secrets-*",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:UpdateSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:TagResource",
              "secretsmanager:UntagResource"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ec2:DeleteTags",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:elastic-ip/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRekognitionFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "rekognition:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRekognitionReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonRekognitionReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "rekognition:CompareFaces",
              "rekognition:DetectFaces",
              "rekognition:DetectLabels",
              "rekognition:ListCollections",
              "rekognition:ListFaces",
              "rekognition:SearchFaces",
              "rekognition:SearchFacesByImage",
              "rekognition:DetectText",
              "rekognition:GetCelebrityInfo",
              "rekognition:RecognizeCelebrities",
              "rekognition:DetectModerationLabels",
              "rekognition:GetLabelDetection",
              "rekognition:GetFaceDetection",
              "rekognition:GetContentModeration",
              "rekognition:GetPersonTracking",
              "rekognition:GetCelebrityRecognition",
              "rekognition:GetFaceSearch",
              "rekognition:GetTextDetection",
              "rekognition:GetSegmentDetection",
              "rekognition:DescribeStreamProcessor",
              "rekognition:ListStreamProcessors",
              "rekognition:DescribeProjects",
              "rekognition:DescribeProjectVersions",
              "rekognition:DetectCustomLabels",
              "rekognition:DetectProtectiveEquipment",
              "rekognition:ListTagsForResource",
              "rekognition:ListDatasetEntries",
              "rekognition:ListDatasetLabels",
              "rekognition:DescribeDataset",
              "rekognition:ListProjectPolicies",
              "rekognition:ListUsers",
              "rekognition:SearchUsers",
              "rekognition:SearchUsersByImage",
              "rekognition:GetMediaAnalysisJob",
              "rekognition:ListMediaAnalysisJobs"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAthenaFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "BaseAthenaPermissions",
            "Effect": "Allow",
            "Action": [
              "athena:*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "BaseGluePermissions",
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase",
              "glue:DeleteDatabase",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:UpdateDatabase",
              "glue:CreateTable",
              "glue:DeleteTable",
              "glue:BatchDeleteTable",
              "glue:UpdateTable",
              "glue:GetTable",
              "glue:GetTables",
              "glue:BatchCreatePartition",
              "glue:CreatePartition",
              "glue:DeletePartition",
              "glue:BatchDeletePartition",
              "glue:UpdatePartition",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:BatchGetPartition",
              "glue:StartColumnStatisticsTaskRun",
              "glue:GetColumnStatisticsTaskRun",
              "glue:GetColumnStatisticsTaskRuns",
              "glue:GetCatalogImportStatus"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "BaseQueryResultsPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads",
              "s3:ListMultipartUploadParts",
              "s3:AbortMultipartUpload",
              "s3:CreateBucket",
              "s3:PutObject",
              "s3:PutBucketPublicAccessBlock"
            ],
            "Resource": [
              "arn:aws:s3:::aws-athena-query-results-*"
            ]
          },
          {
            "Sid": "BaseAthenaExamplesPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::athena-examples*"
            ]
          },
          {
            "Sid": "BaseS3BucketPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "BaseSNSPermissions",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics",
              "sns:GetTopicAttributes"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "BaseCloudWatchPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:GetMetricData"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "BaseLakeFormationPermissions",
            "Effect": "Allow",
            "Action": [
              "lakeformation:GetDataAccess"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "BaseDataZonePermissions",
            "Effect": "Allow",
            "Action": [
              "datazone:ListDomains",
              "datazone:ListProjects",
              "datazone:ListAccountEnvironments"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "BasePricingPermissions",
            "Effect": "Allow",
            "Action": [
              "pricing:GetProducts"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonPollyFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "polly:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonPollyReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "polly:DescribeVoices",
              "polly:GetLexicon",
              "polly:GetSpeechSynthesisTask",
              "polly:ListLexicons",
              "polly:ListSpeechSynthesisTasks",
              "polly:SynthesizeSpeech"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMMaintenanceWindowRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:GetAutomationExecution",
              "ssm:GetParameters",
              "ssm:ListCommands",
              "ssm:SendCommand",
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:SSM*",
              "arn:aws:lambda:*:*:function:*:SSM*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "states:DescribeExecution",
              "states:StartExecution"
            ],
            "Resource": [
              "arn:aws:states:*:*:stateMachine:SSM*",
              "arn:aws:states:*:*:execution:SSM*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "resource-groups:ListGroups",
              "resource-groups:ListGroupResources"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSXrayWriteOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
              "xray:GetSamplingStatisticSummaries"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSXrayReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSXrayReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
              "xray:GetSamplingStatisticSummaries",
              "xray:BatchGetTraces",
              "xray:BatchGetTraceSummaryById",
              "xray:GetDistinctTraceGraphs",
              "xray:GetServiceGraph",
              "xray:GetTraceGraph",
              "xray:GetTraceSummaries",
              "xray:GetGroups",
              "xray:GetGroup",
              "xray:ListTagsForResource",
              "xray:ListResourcePolicies",
              "xray:GetTimeSeriesServiceStatistics",
              "xray:GetInsightSummaries",
              "xray:GetInsight",
              "xray:GetInsightEvents",
              "xray:GetInsightImpactGraph"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSXrayFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSXrayFullAccess",
            "Effect": "Allow",
            "Action": [
              "xray:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeBuildDeveloperAccess",
      "PolicyDocument": {
        "Statement": [
          {
            "Sid": "AWSServicesAccess",
            "Action": [
              "codebuild:StartBuild",
              "codebuild:StopBuild",
              "codebuild:StartBuildBatch",
              "codebuild:StopBuildBatch",
              "codebuild:RetryBuild",
              "codebuild:RetryBuildBatch",
              "codebuild:BatchGet*",
              "codebuild:GetResourcePolicy",
              "codebuild:DescribeTestCases",
              "codebuild:DescribeCodeCoverages",
              "codebuild:List*",
              "codecommit:GetBranch",
              "codecommit:GetCommit",
              "codecommit:GetRepository",
              "codecommit:ListBranches",
              "cloudwatch:GetMetricStatistics",
              "events:DescribeRule",
              "events:ListTargetsByRule",
              "events:ListRuleNamesByTarget",
              "logs:GetLogEvents",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "SSMParameterWriteAccess",
            "Effect": "Allow",
            "Action": [
              "ssm:PutParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*"
          },
          {
            "Sid": "SSMStartSessionAccess",
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": "arn:aws:ecs:*:*:task/*/*"
          },
          {
            "Sid": "CodeStarConnectionsUserAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:ListConnections",
              "codestar-connections:GetConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ]
          },
          {
            "Sid": "CodeStarNotificationsReadWriteAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:CreateNotificationRule",
              "codestar-notifications:DescribeNotificationRule",
              "codestar-notifications:UpdateNotificationRule",
              "codestar-notifications:Subscribe",
              "codestar-notifications:Unsubscribe"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codebuild:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListEventTypes",
              "codestar-notifications:ListTargets",
              "codestar-notifications:ListTagsforResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SNSTopicListAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics",
              "sns:GetTopicAttributes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsChatbotAccess",
            "Effect": "Allow",
            "Action": [
              "chatbot:DescribeSlackChannelConfigurations",
              "chatbot:ListMicrosoftTeamsChannelConfigurations"
            ],
            "Resource": "*"
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AWSCodeBuildReadOnlyAccess",
      "PolicyDocument": {
        "Statement": [
          {
            "Sid": "AWSServicesAccess",
            "Action": [
              "codebuild:BatchGet*",
              "codebuild:GetResourcePolicy",
              "codebuild:List*",
              "codebuild:DescribeTestCases",
              "codebuild:DescribeCodeCoverages",
              "codecommit:GetBranch",
              "codecommit:GetCommit",
              "codecommit:GetRepository",
              "cloudwatch:GetMetricStatistics",
              "events:DescribeRule",
              "events:ListTargetsByRule",
              "events:ListRuleNamesByTarget",
              "logs:GetLogEvents"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "CodeStarConnectionsUserAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:ListConnections",
              "codestar-connections:GetConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ]
          },
          {
            "Sid": "CodeStarNotificationsPowerUserAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:DescribeNotificationRule"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codebuild:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListEventTypes",
              "codestar-notifications:ListTargets"
            ],
            "Resource": "*"
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AWSCodeBuildAdminAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSServicesAccess",
            "Action": [
              "codebuild:*",
              "codecommit:GetBranch",
              "codecommit:GetCommit",
              "codecommit:GetRepository",
              "codecommit:ListBranches",
              "codecommit:ListRepositories",
              "cloudwatch:GetMetricStatistics",
              "ec2:DescribeVpcs",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ecr:DescribeRepositories",
              "ecr:ListImages",
              "elasticfilesystem:DescribeFileSystems",
              "events:DeleteRule",
              "events:DescribeRule",
              "events:DisableRule",
              "events:EnableRule",
              "events:ListTargetsByRule",
              "events:ListRuleNamesByTarget",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets",
              "logs:GetLogEvents",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "CWLDeleteLogGroupAccess",
            "Action": [
              "logs:DeleteLogGroup"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*:log-stream:*"
          },
          {
            "Sid": "SSMParameterWriteAccess",
            "Effect": "Allow",
            "Action": [
              "ssm:PutParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/CodeBuild/*"
          },
          {
            "Sid": "SSMStartSessionAccess",
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": "arn:aws:ecs:*:*:task/*/*"
          },
          {
            "Sid": "CodeStarConnectionsReadWriteAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:CreateConnection",
              "codestar-connections:DeleteConnection",
              "codestar-connections:UpdateConnectionInstallation",
              "codestar-connections:TagResource",
              "codestar-connections:UntagResource",
              "codestar-connections:ListConnections",
              "codestar-connections:ListInstallationTargets",
              "codestar-connections:ListTagsForResource",
              "codestar-connections:GetConnection",
              "codestar-connections:GetIndividualAccessToken",
              "codestar-connections:GetInstallationUrl",
              "codestar-connections:PassConnection",
              "codestar-connections:StartOAuthHandshake",
              "codestar-connections:UseConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ]
          },
          {
            "Sid": "CodeStarNotificationsReadWriteAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:CreateNotificationRule",
              "codestar-notifications:DescribeNotificationRule",
              "codestar-notifications:UpdateNotificationRule",
              "codestar-notifications:DeleteNotificationRule",
              "codestar-notifications:Subscribe",
              "codestar-notifications:Unsubscribe"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codebuild:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsListAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListEventTypes",
              "codestar-notifications:ListTargets",
              "codestar-notifications:ListTagsforResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:SetTopicAttributes"
            ],
            "Resource": "arn:aws:sns:*:*:codestar-notifications*"
          },
          {
            "Sid": "SNSTopicListAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics",
              "sns:GetTopicAttributes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarNotificationsChatbotAccess",
            "Effect": "Allow",
            "Action": [
              "chatbot:DescribeSlackChannelConfigurations",
              "chatbot:ListMicrosoftTeamsChannelConfigurations"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMAutomationRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:Automation*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateImage",
              "ec2:CopyImage",
              "ec2:DeregisterImage",
              "ec2:DescribeImages",
              "ec2:DeleteSnapshot",
              "ec2:StartInstances",
              "ec2:RunInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:CreateTags",
              "ec2:DeleteTags",
              "ec2:DescribeTags",
              "cloudformation:CreateStack",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStacks",
              "cloudformation:UpdateStack",
              "cloudformation:DeleteStack"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": [
              "arn:aws:sns:*:*:Automation*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaENIManagementAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DeleteNetworkInterface",
              "ec2:AssignPrivateIpAddresses",
              "ec2:UnassignPrivateIpAddresses"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSHealthFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess",
              "organizations:DisableAWSServiceAccess"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": "health.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "health:*",
              "organizations:ListAccounts",
              "organizations:ListParents",
              "organizations:DescribeAccount",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "health.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBatchFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "batch:*",
              "cloudwatch:GetMetricStatistics",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeVpcs",
              "ec2:DescribeImages",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeLaunchTemplateVersions",
              "ecs:DescribeClusters",
              "ecs:Describe*",
              "ecs:List*",
              "eks:DescribeCluster",
              "eks:ListClusters",
              "logs:Describe*",
              "logs:Get*",
              "logs:TestMetricFilter",
              "logs:FilterLogEvents",
              "iam:ListInstanceProfiles",
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSBatchServiceRole",
              "arn:aws:iam::*:role/service-role/AWSBatchServiceRole",
              "arn:aws:iam::*:role/ecsInstanceRole",
              "arn:aws:iam::*:instance-profile/ecsInstanceRole",
              "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role",
              "arn:aws:iam::*:role/aws-ec2-spot-fleet-role",
              "arn:aws:iam::*:role/AWSBatchJobRole*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "arn:aws:iam::*:role/*Batch*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "batch.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBatchServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSBatchPolicyStatement1",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeImages",
              "ec2:DescribeImageAttribute",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSpotFleetInstances",
              "ec2:DescribeSpotFleetRequests",
              "ec2:DescribeSpotPriceHistory",
              "ec2:DescribeSpotFleetRequestHistory",
              "ec2:DescribeVpcClassicLink",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:CreateLaunchTemplate",
              "ec2:DeleteLaunchTemplate",
              "ec2:RequestSpotFleet",
              "ec2:CancelSpotFleetRequests",
              "ec2:ModifySpotFleetRequest",
              "ec2:TerminateInstances",
              "ec2:RunInstances",
              "autoscaling:DescribeAccountLimits",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeScalingActivities",
              "autoscaling:CreateLaunchConfiguration",
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:UpdateAutoScalingGroup",
              "autoscaling:SetDesiredCapacity",
              "autoscaling:DeleteLaunchConfiguration",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:CreateOrUpdateTags",
              "autoscaling:SuspendProcesses",
              "autoscaling:PutNotificationConfiguration",
              "autoscaling:TerminateInstanceInAutoScalingGroup",
              "ecs:DescribeClusters",
              "ecs:DescribeContainerInstances",
              "ecs:DescribeTaskDefinition",
              "ecs:DescribeTasks",
              "ecs:ListAccountSettings",
              "ecs:ListClusters",
              "ecs:ListContainerInstances",
              "ecs:ListTaskDefinitionFamilies",
              "ecs:ListTaskDefinitions",
              "ecs:ListTasks",
              "ecs:CreateCluster",
              "ecs:DeleteCluster",
              "ecs:RegisterTaskDefinition",
              "ecs:DeregisterTaskDefinition",
              "ecs:RunTask",
              "ecs:StartTask",
              "ecs:StopTask",
              "ecs:UpdateContainerAgent",
              "ecs:DeregisterContainerInstance",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogGroups",
              "iam:GetInstanceProfile",
              "iam:GetRole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSBatchPolicyStatement2",
            "Effect": "Allow",
            "Action": "ecs:TagResource",
            "Resource": [
              "arn:aws:ecs:*:*:task/*_Batch_*"
            ]
          },
          {
            "Sid": "AWSBatchPolicyStatement3",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn",
                  "ecs-tasks.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement4",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "spot.amazonaws.com",
                  "spotfleet.amazonaws.com",
                  "autoscaling.amazonaws.com",
                  "ecs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement5",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "RunInstances"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuicksightAthenaAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "athena:BatchGetQueryExecution",
              "athena:CancelQueryExecution",
              "athena:GetCatalogs",
              "athena:GetExecutionEngine",
              "athena:GetExecutionEngines",
              "athena:GetNamespace",
              "athena:GetNamespaces",
              "athena:GetQueryExecution",
              "athena:GetQueryExecutions",
              "athena:GetQueryResults",
              "athena:GetQueryResultsStream",
              "athena:GetTable",
              "athena:GetTables",
              "athena:ListQueryExecutions",
              "athena:RunQuery",
              "athena:StartQueryExecution",
              "athena:StopQueryExecution",
              "athena:ListWorkGroups",
              "athena:ListEngineVersions",
              "athena:GetWorkGroup",
              "athena:GetDataCatalog",
              "athena:GetDatabase",
              "athena:GetTableMetadata",
              "athena:ListDataCatalogs",
              "athena:ListDatabases",
              "athena:ListTableMetadata"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase",
              "glue:DeleteDatabase",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:UpdateDatabase",
              "glue:CreateTable",
              "glue:DeleteTable",
              "glue:BatchDeleteTable",
              "glue:UpdateTable",
              "glue:GetTable",
              "glue:GetTables",
              "glue:BatchCreatePartition",
              "glue:CreatePartition",
              "glue:DeletePartition",
              "glue:BatchDeletePartition",
              "glue:UpdatePartition",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:BatchGetPartition"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads",
              "s3:ListMultipartUploadParts",
              "s3:AbortMultipartUpload",
              "s3:CreateBucket",
              "s3:PutObject",
              "s3:PutBucketPublicAccessBlock"
            ],
            "Resource": [
              "arn:aws:s3:::aws-athena-query-results-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "lakeformation:GetDataAccess"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "IAMSelfManageServiceSpecificCredentials",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceSpecificCredential",
              "iam:ListServiceSpecificCredentials",
              "iam:UpdateServiceSpecificCredential",
              "iam:DeleteServiceSpecificCredential",
              "iam:ResetServiceSpecificCredential"
            ],
            "Resource": "arn:aws:iam::*:user/${aws:username}"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSStepFunctionsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "states:ListStateMachines",
              "states:ListActivities",
              "states:DescribeStateMachine",
              "states:DescribeStateMachineForExecution",
              "states:ListExecutions",
              "states:DescribeExecution",
              "states:GetExecutionHistory",
              "states:DescribeActivity",
              "states:ListTagsForResource",
              "states:DescribeMapRun",
              "states:ListMapRuns",
              "states:DescribeStateMachineAlias",
              "states:ListStateMachineAliases",
              "states:ListStateMachineVersions",
              "states:ValidateStateMachineDefinition"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSStepFunctionsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "states:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSStepFunctionsConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "states:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:ListRoles",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/service-role/StatesExecutionRole*"
          },
          {
            "Effect": "Allow",
            "Action": "lambda:ListFunctions",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AutoScalingFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "autoscaling:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricAlarm",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcClassicLink"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "autoscaling.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AutoScalingReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "autoscaling:Describe*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AutoScalingConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateKeyPair",
              "ec2:CreateSecurityGroup",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcClassicLink",
              "ec2:ImportKeyPair"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:Describe*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "autoscaling:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:ListSubscriptions",
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:ListRoles",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "autoscaling.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AutoScalingConsoleReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcClassicLink",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSubnets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:Describe*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "autoscaling:Describe*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:ListSubscriptions",
              "sns:ListTopics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataPipeline_FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "s3:List*",
              "dynamodb:DescribeTable",
              "rds:DescribeDBInstances",
              "rds:DescribeDBSecurityGroups",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSecurityGroups",
              "sns:ListTopics",
              "sns:Subscribe",
              "iam:ListRoles",
              "iam:GetRolePolicy",
              "iam:GetInstanceProfile",
              "iam:ListInstanceProfiles",
              "datapipeline:*"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": "iam:PassRole",
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
              "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataPipeline_PowerUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "s3:List*",
              "dynamodb:DescribeTable",
              "rds:DescribeDBInstances",
              "rds:DescribeDBSecurityGroups",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSecurityGroups",
              "sns:ListTopics",
              "iam:ListRoles",
              "iam:GetRolePolicy",
              "iam:GetInstanceProfile",
              "iam:ListInstanceProfiles",
              "datapipeline:*"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": "iam:PassRole",
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/DataPipelineDefaultResourceRole",
              "arn:aws:iam::*:role/DataPipelineDefaultRole"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ApplicationAutoScalingForAmazonAppStreamAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appstream:UpdateFleet",
              "appstream:DescribeFleets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGreengrassResourceAccessRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowGreengrassAccessToShadows",
            "Action": [
              "iot:DeleteThingShadow",
              "iot:GetThingShadow",
              "iot:UpdateThingShadow"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iot:*:*:thing/GG_*",
              "arn:aws:iot:*:*:thing/*-gcm",
              "arn:aws:iot:*:*:thing/*-gda",
              "arn:aws:iot:*:*:thing/*-gci"
            ]
          },
          {
            "Sid": "AllowGreengrassToDescribeThings",
            "Action": [
              "iot:DescribeThing"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iot:*:*:thing/*"
          },
          {
            "Sid": "AllowGreengrassToDescribeCertificates",
            "Action": [
              "iot:DescribeCertificate"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iot:*:*:cert/*"
          },
          {
            "Sid": "AllowGreengrassToCallGreengrassServices",
            "Action": [
              "greengrass:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "AllowGreengrassToGetLambdaFunctions",
            "Action": [
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "AllowGreengrassToGetGreengrassSecrets",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:secretsmanager:*:*:secret:greengrass-*"
          },
          {
            "Sid": "AllowGreengrassAccessToS3Objects",
            "Action": [
              "s3:GetObject"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:s3:::*Greengrass*",
              "arn:aws:s3:::*GreenGrass*",
              "arn:aws:s3:::*greengrass*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Sid": "AllowGreengrassAccessToS3BucketLocation",
            "Action": [
              "s3:GetBucketLocation"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "AllowGreengrassAccessToSageMakerTrainingJobs",
            "Action": [
              "sagemaker:DescribeTrainingJob"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:sagemaker:*:*:training-job/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkCustomPlatformforEC2Role",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EC2Access",
            "Action": [
              "ec2:AttachVolume",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CopyImage",
              "ec2:CreateImage",
              "ec2:CreateKeypair",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSnapshot",
              "ec2:CreateTags",
              "ec2:CreateVolume",
              "ec2:DeleteKeypair",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSnapshot",
              "ec2:DeleteVolume",
              "ec2:DeregisterImage",
              "ec2:DescribeImageAttribute",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeRegions",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVolumes",
              "ec2:DetachVolume",
              "ec2:GetPasswordData",
              "ec2:ModifyImageAttribute",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifySnapshotAttribute",
              "ec2:RegisterImage",
              "ec2:RunInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "BucketAccess",
            "Action": [
              "s3:Get*",
              "s3:List*",
              "s3:PutObject"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:s3:::elasticbeanstalk-*",
              "arn:aws:s3:::elasticbeanstalk-*/*"
            ]
          },
          {
            "Sid": "CloudWatchLogsAccess",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/platform/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCloudDirectoryFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "clouddirectory:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCloudDirectoryReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "clouddirectory:List*",
              "clouddirectory:Get*",
              "clouddirectory:LookupPolicy",
              "clouddirectory:BatchRead"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceGetEntitlements",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSMarketplaceGetEntitlements",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:GetEntitlements"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOpsWorksCloudWatchLogs",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLexRunBotsOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lex:PostContent",
              "lex:PostText",
              "lex:PutSession",
              "lex:GetSession",
              "lex:DeleteSession",
              "lex:RecognizeText",
              "lex:RecognizeUtterance",
              "lex:StartConversation"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLexReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonLexReadOnlyStatement1",
            "Effect": "Allow",
            "Action": [
              "lex:GetBot",
              "lex:GetBotAlias",
              "lex:GetBotAliases",
              "lex:GetBots",
              "lex:GetBotChannelAssociation",
              "lex:GetBotChannelAssociations",
              "lex:GetBotVersions",
              "lex:GetBuiltinIntent",
              "lex:GetBuiltinIntents",
              "lex:GetBuiltinSlotTypes",
              "lex:GetIntent",
              "lex:GetIntents",
              "lex:GetIntentVersions",
              "lex:GetSlotType",
              "lex:GetSlotTypes",
              "lex:GetSlotTypeVersions",
              "lex:GetUtterancesView",
              "lex:DescribeBot",
              "lex:DescribeBotAlias",
              "lex:DescribeBotChannel",
              "lex:DescribeBotLocale",
              "lex:DescribeBotRecommendation",
              "lex:DescribeBotReplica",
              "lex:DescribeBotVersion",
              "lex:DescribeExport",
              "lex:DescribeImport",
              "lex:DescribeIntent",
              "lex:DescribeResourcePolicy",
              "lex:DescribeSlot",
              "lex:DescribeSlotType",
              "lex:ListBots",
              "lex:ListBotLocales",
              "lex:ListBotAliases",
              "lex:ListBotAliasReplicas",
              "lex:ListBotChannels",
              "lex:ListBotRecommendations",
              "lex:ListBotReplicas",
              "lex:ListBotVersions",
              "lex:ListBotVersionReplicas",
              "lex:ListBuiltInIntents",
              "lex:ListBuiltInSlotTypes",
              "lex:ListExports",
              "lex:ListImports",
              "lex:ListIntents",
              "lex:ListRecommendedIntents",
              "lex:ListSlots",
              "lex:ListSlotTypes",
              "lex:ListTagsForResource",
              "lex:SearchAssociatedTranscripts",
              "lex:ListCustomVocabularyItems"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLexFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonLexFullAccessStatement1",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmsForMetric",
              "kms:DescribeKey",
              "kms:ListAliases",
              "lambda:GetPolicy",
              "lambda:ListFunctions",
              "lex:*",
              "polly:DescribeVoices",
              "polly:SynthesizeSpeech",
              "kendra:ListIndices",
              "iam:ListRoles",
              "s3:ListAllMyBuckets",
              "logs:DescribeLogGroups",
              "s3:GetBucketLocation"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AmazonLexFullAccessStatement2",
            "Effect": "Allow",
            "Action": [
              "lambda:AddPermission",
              "lambda:RemovePermission"
            ],
            "Resource": "arn:aws:lambda:*:*:function:AmazonLex*",
            "Condition": {
              "StringEquals": {
                "lambda:Principal": "lex.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement3",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
              "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
              "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
              "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
              "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
            ]
          },
          {
            "Sid": "AmazonLexFullAccessStatement4",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "lex.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement5",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "channels.lex.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement6",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "lexv2.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement7",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "channels.lexv2.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement8",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "replication.lexv2.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement9",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
              "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
              "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
              "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
              "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
            ]
          },
          {
            "Sid": "AmazonLexFullAccessStatement10",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lex.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement11",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lexv2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement12",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "channels.lexv2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonLexFullAccessStatement13",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/replication.lexv2.amazonaws.com/AWSServiceRoleForLexV2Replication*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lexv2.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeStarServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ProjectEventRules",
            "Effect": "Allow",
            "Action": [
              "events:PutTargets",
              "events:RemoveTargets",
              "events:PutRule",
              "events:DeleteRule",
              "events:DescribeRule"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/awscodestar-*"
            ]
          },
          {
            "Sid": "ProjectStack",
            "Effect": "Allow",
            "Action": [
              "cloudformation:*Stack*",
              "cloudformation:CreateChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:GetTemplate"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/awscodestar-*",
              "arn:aws:cloudformation:*:*:stack/awseb-*",
              "arn:aws:cloudformation:*:*:stack/aws-cloud9-*",
              "arn:aws:cloudformation:*:aws:transform/CodeStar*"
            ]
          },
          {
            "Sid": "ProjectStackTemplate",
            "Effect": "Allow",
            "Action": [
              "cloudformation:GetTemplateSummary",
              "cloudformation:DescribeChangeSet"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ProjectQuickstarts",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::awscodestar-*/*"
            ]
          },
          {
            "Sid": "ProjectS3Buckets",
            "Effect": "Allow",
            "Action": [
              "s3:*"
            ],
            "Resource": [
              "arn:aws:s3:::aws-codestar-*",
              "arn:aws:s3:::elasticbeanstalk-*"
            ]
          },
          {
            "Sid": "ProjectServices",
            "Effect": "Allow",
            "Action": [
              "codestar:*",
              "codecommit:*",
              "codepipeline:*",
              "codedeploy:*",
              "codebuild:*",
              "autoscaling:*",
              "cloudwatch:Put*",
              "ec2:*",
              "elasticbeanstalk:*",
              "elasticloadbalancing:*",
              "iam:ListRoles",
              "logs:*",
              "sns:*",
              "cloud9:CreateEnvironmentEC2",
              "cloud9:DeleteEnvironment",
              "cloud9:DescribeEnvironment*",
              "cloud9:ListEnvironments"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ProjectWorkerRoles",
            "Effect": "Allow",
            "Action": [
              "iam:AttachRolePolicy",
              "iam:CreateRole",
              "iam:DeleteRole",
              "iam:DeleteRolePolicy",
              "iam:DetachRolePolicy",
              "iam:GetRole",
              "iam:PassRole",
              "iam:GetRolePolicy",
              "iam:PutRolePolicy",
              "iam:SetDefaultPolicyVersion",
              "iam:CreatePolicy",
              "iam:DeletePolicy",
              "iam:AddRoleToInstanceProfile",
              "iam:CreateInstanceProfile",
              "iam:DeleteInstanceProfile",
              "iam:RemoveRoleFromInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:role/CodeStarWorker*",
              "arn:aws:iam::*:policy/CodeStarWorker*",
              "arn:aws:iam::*:instance-profile/awscodestar-*"
            ]
          },
          {
            "Sid": "ProjectTeamMembers",
            "Effect": "Allow",
            "Action": [
              "iam:AttachUserPolicy",
              "iam:DetachUserPolicy"
            ],
            "Resource": "*",
            "Condition": {
              "ArnEquals": {
                "iam:PolicyArn": [
                  "arn:aws:iam::*:policy/CodeStar_*"
                ]
              }
            }
          },
          {
            "Sid": "ProjectRoles",
            "Effect": "Allow",
            "Action": [
              "iam:CreatePolicy",
              "iam:DeletePolicy",
              "iam:CreatePolicyVersion",
              "iam:DeletePolicyVersion",
              "iam:ListEntitiesForPolicy",
              "iam:ListPolicyVersions",
              "iam:GetPolicy",
              "iam:GetPolicyVersion"
            ],
            "Resource": [
              "arn:aws:iam::*:policy/CodeStar_*"
            ]
          },
          {
            "Sid": "InspectServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-codestar-service-role",
              "arn:aws:iam::*:role/service-role/aws-codestar-service-role"
            ]
          },
          {
            "Sid": "IAMLinkRole",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "cloud9.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DescribeConfigRuleForARN",
            "Effect": "Allow",
            "Action": [
              "config:DescribeConfigRules"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ProjectCodeStarConnections",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:UseConnection",
              "codestar-connections:GetConnection"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ProjectCodeStarConnectionsPassConnections",
            "Effect": "Allow",
            "Action": "codestar-connections:PassConnection",
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "codestar-connections:PassedToService": "codepipeline.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeStarFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CodeStarEC2",
            "Effect": "Allow",
            "Action": [
              "codestar:*",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "cloud9:DescribeEnvironment*",
              "cloud9:ValidateEnvironmentName"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarCF",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStack*",
              "cloudformation:ListStacks*",
              "cloudformation:GetTemplateSummary"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/awscodestar-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGreengrassFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "greengrass:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2ContainerServiceEventsRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecs:RunTask"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ecs-tasks.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ecs:TagResource",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:CreateAction": [
                  "RunTask"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "QuickSightAccessForS3StorageManagementAnalyticsReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::s3-analytics-export-shared-*"
            ]
          },
          {
            "Action": [
              "s3:GetAnalyticsConfiguration",
              "s3:ListAllMyBuckets",
              "s3:GetBucketLocation"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2SpotFleetTaggingRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeSubnets",
              "ec2:RequestSpotInstances",
              "ec2:TerminateInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:CreateTags",
              "ec2:RunInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            },
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterTargets"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:*/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticsearchServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Stmt1480452973134",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "elasticloadbalancing:AddListenerCertificates",
              "elasticloadbalancing:RemoveListenerCertificates"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973135",
            "Effect": "Allow",
            "Action": [
              "acm:DescribeCertificate"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973136",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/ES"
              }
            }
          },
          {
            "Sid": "Stmt1480452973198",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:route-table/*"
            ]
          },
          {
            "Sid": "Stmt1480452973199",
            "Effect": "Allow",
            "Action": "ec2:CreateVpcEndpoint",
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/OpenSearchManaged": "true"
              }
            }
          },
          {
            "Sid": "Stmt1480452973200",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVpcEndpoint",
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/OpenSearchManaged": "true"
              }
            }
          },
          {
            "Sid": "Stmt1480452973201",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973149",
            "Effect": "Allow",
            "Action": [
              "ec2:AssignIpv6Addresses"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*"
          },
          {
            "Sid": "Stmt1480452973150",
            "Effect": "Allow",
            "Action": [
              "ec2:UnAssignIpv6Addresses"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*"
          },
          {
            "Sid": "Stmt1480452973202",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonVPCCrossAccountNetworkInterfaceOperations",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeRouteTables",
              "ec2:CreateRoute",
              "ec2:DeleteRoute",
              "ec2:ReplaceRoute"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DescribeNetworkInterfacePermissions",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeRegions",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AssignPrivateIpAddresses",
              "ec2:UnassignPrivateIpAddresses"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AssignIpv6Addresses",
              "ec2:UnassignIpv6Addresses"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMAutomationApproverAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAutomationExecutions",
              "ssm:GetAutomationExecution",
              "ssm:SendAutomationSignal"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubDiscoveryAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "discovery:ListConfigurations",
              "discovery:DescribeConfigurations"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "aws:migrationhub:source-id"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "dms:AddTagsToResource",
            "Resource": [
              "arn:aws:dms:*:*:endpoint:*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "aws:migrationhub:source-id"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceAttribute"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGlueServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "glue:*",
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:GetBucketAcl",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeRouteTables",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "iam:ListRolePolicies",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "cloudwatch:PutMetricData"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*/*",
              "arn:aws:s3:::*/*aws-glue-*/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::crawler-public*",
              "arn:aws:s3:::aws-glue-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:*:/aws-glue/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws-glue-service-resource"
                ]
              }
            },
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGlueConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "BaseAppPermissions",
            "Effect": "Allow",
            "Action": [
              "glue:*",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSubnetGroups",
              "iam:ListRoles",
              "iam:ListUsers",
              "iam:ListGroups",
              "iam:ListRolePolicies",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeRouteTables",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeInstances",
              "ec2:DescribeImages",
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters",
              "rds:DescribeDBSubnetGroups",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "cloudformation:ListStacks",
              "cloudformation:DescribeStacks",
              "cloudformation:GetTemplateSummary",
              "dynamodb:ListTables",
              "kms:ListAliases",
              "kms:DescribeKey",
              "cloudwatch:GetMetricData",
              "cloudwatch:ListDashboards",
              "databrew:ListRecipes",
              "databrew:ListRecipeVersions",
              "databrew:DescribeRecipe"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*/*",
              "arn:aws:s3:::*/*aws-glue-*/*",
              "arn:aws:s3:::aws-glue-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:/aws-glue/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:volume/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances",
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
              },
              "StringEquals": {
                "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "glue.amazonaws.com"
                ]
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "glue.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGlueServiceNotebookRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase",
              "glue:CreatePartition",
              "glue:CreateTable",
              "glue:DeleteDatabase",
              "glue:DeletePartition",
              "glue:DeleteTable",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetTable",
              "glue:GetTableVersions",
              "glue:GetTables",
              "glue:UpdateDatabase",
              "glue:UpdatePartition",
              "glue:UpdateTable",
              "glue:CreateConnection",
              "glue:CreateJob",
              "glue:DeleteConnection",
              "glue:DeleteJob",
              "glue:GetConnection",
              "glue:GetConnections",
              "glue:GetDevEndpoint",
              "glue:GetDevEndpoints",
              "glue:GetJob",
              "glue:GetJobs",
              "glue:UpdateJob",
              "glue:BatchDeleteConnection",
              "glue:UpdateConnection",
              "glue:GetUserDefinedFunction",
              "glue:UpdateUserDefinedFunction",
              "glue:GetUserDefinedFunctions",
              "glue:DeleteUserDefinedFunction",
              "glue:CreateUserDefinedFunction",
              "glue:BatchGetPartition",
              "glue:BatchDeletePartition",
              "glue:BatchCreatePartition",
              "glue:BatchDeleteTable",
              "glue:UpdateDevEndpoint",
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:GetBucketAcl",
              "codewhisperer:GenerateRecommendations"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::crawler-public*",
              "arn:aws:s3:::aws-glue*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:DeleteObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws-glue-service-resource"
                ]
              }
            },
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubSMSAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "mgh:CreateProgressUpdateStream"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS"
          },
          {
            "Action": [
              "mgh:AssociateCreatedArtifact",
              "mgh:DescribeMigrationTask",
              "mgh:DisassociateCreatedArtifact",
              "mgh:ImportMigrationTask",
              "mgh:ListCreatedArtifacts",
              "mgh:NotifyMigrationTaskState",
              "mgh:PutResourceAttributes",
              "mgh:NotifyApplicationState",
              "mgh:DescribeApplicationState",
              "mgh:AssociateDiscoveredResource",
              "mgh:DisassociateDiscoveredResource",
              "mgh:ListDiscoveredResources"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/*"
          },
          {
            "Action": [
              "mgh:ListMigrationTasks",
              "mgh:GetHomeRegion"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubDMSAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "mgh:CreateProgressUpdateStream"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS"
          },
          {
            "Action": [
              "mgh:AssociateCreatedArtifact",
              "mgh:DescribeMigrationTask",
              "mgh:DisassociateCreatedArtifact",
              "mgh:ImportMigrationTask",
              "mgh:ListCreatedArtifacts",
              "mgh:NotifyMigrationTaskState",
              "mgh:PutResourceAttributes",
              "mgh:NotifyApplicationState",
              "mgh:DescribeApplicationState",
              "mgh:AssociateDiscoveredResource",
              "mgh:DisassociateDiscoveredResource",
              "mgh:ListDiscoveredResources"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/*"
          },
          {
            "Action": [
              "mgh:ListMigrationTasks",
              "mgh:GetHomeRegion"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "mgh:*",
              "discovery:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iam:GetRole"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "continuousexport.discovery.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/continuousexport.discovery.amazonaws.com/AWSServiceRoleForApplicationDiscoveryServiceContinuousExport*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "migrationhub.amazonaws.com",
                  "dmsintegration.migrationhub.amazonaws.com",
                  "smsintegration.migrationhub.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMacieServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Resource": "*",
            "Action": [
              "s3:Get*",
              "s3:List*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMacieFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "macie2:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/macie.amazonaws.com/AWSServiceRoleForAmazonMacie",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "macie.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "pricing:GetProducts",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowCloudformationReadOperationsOnElasticBeanstalkStacks",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStackResources",
              "cloudformation:DescribeStacks"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/awseb-*",
              "arn:aws:cloudformation:*:*:stack/eb-*"
            ]
          },
          {
            "Sid": "AllowOperations",
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeNotificationConfigurations",
              "autoscaling:DescribeScalingActivities",
              "autoscaling:PutNotificationConfiguration",
              "ec2:DescribeInstanceStatus",
              "ec2:AssociateAddress",
              "ec2:DescribeAddresses",
              "ec2:DescribeInstances",
              "ec2:DescribeSecurityGroups",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DescribeTargetGroups",
              "lambda:GetFunction",
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "sns:Publish"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowOperationsOnHealthStreamingLogs",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:DeleteLogGroup",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSEC2SpotServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:RunInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Deny",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringNotEquals": {
                "ec2:InstanceMarketType": "spot"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "RunInstances"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Ec2VpcPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeAddresses",
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:CreateVpcEndpoint",
              "ec2:DeleteVpcEndpoints",
              "ec2:DescribeVpcEndpoints",
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PublicAccessCreateEip",
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:elastic-ip/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/Redshift": "true"
              }
            }
          },
          {
            "Sid": "PublicAccessReleaseEip",
            "Effect": "Allow",
            "Action": [
              "ec2:ReleaseAddress"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:elastic-ip/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/Redshift": "true"
              }
            }
          },
          {
            "Sid": "EnableCreationAndManagementOfRedshiftCloudwatchLogGroups",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/redshift/*"
            ]
          },
          {
            "Sid": "EnableCreationAndManagementOfRedshiftCloudwatchLogStreams",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/redshift/*:log-stream:*"
            ]
          },
          {
            "Sid": "CreateSecurityGroupWithTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/Redshift": "true"
              }
            }
          },
          {
            "Sid": "SecurityGroupPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:ModifySecurityGroupRules",
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/Redshift": "true"
              }
            }
          },
          {
            "Sid": "CreateSecurityGroup",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*"
            ]
          },
          {
            "Sid": "CreateTagsOnResources",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:route-table/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:internet-gateway/*",
              "arn:aws:ec2:*:*:elastic-ip/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateVpc",
                  "CreateSecurityGroup",
                  "CreateSubnet",
                  "CreateInternetGateway",
                  "CreateRouteTable",
                  "AllocateAddress"
                ]
              }
            }
          },
          {
            "Sid": "VPCPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeRouteTables"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/Redshift-Serverless",
                  "AWS/Redshift"
                ]
              }
            }
          },
          {
            "Sid": "SecretManager",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:PutSecretValue",
              "secretsmanager:UpdateSecret",
              "secretsmanager:UpdateSecretVersionStage",
              "secretsmanager:RotateSecret"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:redshift!*"
            ],
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "redshift",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "SecretsManagerRandomPassword",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetRandomPassword"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IPV6Permissions",
            "Effect": "Allow",
            "Action": [
              "ec2:AssignIpv6Addresses",
              "ec2:UnassignIpv6Addresses"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ]
          },
          {
            "Sid": "ServiceQuotasToCheckCustomerLimits",
            "Effect": "Allow",
            "Action": [
              "servicequotas:GetServiceQuota"
            ],
            "Resource": [
              "arn:aws:servicequotas:*:*:ec2/L-0263D0A3",
              "arn:aws:servicequotas:*:*:vpc/L-29B6F2EB"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticLoadBalancingServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAddresses",
              "ec2:DescribeCoipPools",
              "ec2:DescribeInstances",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcs",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeClassicLinkInstances",
              "ec2:DescribeVpcClassicLink",
              "ec2:CreateSecurityGroup",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:GetCoipPoolUsage",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:AllocateAddress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress",
              "ec2:AttachNetworkInterface",
              "ec2:DetachNetworkInterface",
              "ec2:AssignPrivateIpAddresses",
              "ec2:AssignIpv6Addresses",
              "ec2:ReleaseAddress",
              "ec2:UnassignIpv6Addresses",
              "ec2:DescribeVpcPeeringConnections",
              "logs:CreateLogDelivery",
              "logs:GetLogDelivery",
              "logs:UpdateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:ListLogDeliveries",
              "outposts:GetOutpostInstanceTypes"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticLoadBalancingClassicServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAddresses",
              "ec2:DescribeInstances",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcs",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeClassicLinkInstances",
              "ec2:DescribeVpcClassicLink",
              "ec2:CreateSecurityGroup",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress",
              "ec2:AttachNetworkInterface",
              "ec2:DetachNetworkInterface",
              "ec2:AssignPrivateIpAddresses",
              "ec2:AssignIpv6Addresses",
              "ec2:UnassignIpv6Addresses"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSEnhancedClassicNetworkingMangementPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeSecurityGroups"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEMRCleanupPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Resource": "*",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DeleteLaunchTemplate",
              "ec2:ModifyInstanceAttribute",
              "ec2:TerminateInstances",
              "ec2:CancelSpotInstanceRequests",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeVolumeStatus",
              "ec2:DescribeVolumes",
              "ec2:DetachVolume",
              "ec2:DeleteVolume",
              "ec2:DescribePlacementGroups",
              "ec2:DeletePlacementGroup"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "LexChannelPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "lex:PostText"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "LexBotPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "polly:SynthesizeSpeech"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "comprehend:DetectSentiment"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaReplicator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "LambdaCreateDeletePermission",
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:DeleteFunction",
              "lambda:DisableReplication"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*"
            ]
          },
          {
            "Sid": "IamPassRolePermission",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLikeIfExists": {
                "iam:PassedToService": "lambda.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CloudFrontListDistributions",
            "Effect": "Allow",
            "Action": [
              "cloudfront:ListDistributionsByLambdaFunction"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOrganizationsServiceTrustPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
            ]
          },
          {
            "Sid": "AllowCreationOfServiceLinkedRoles",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForEC2ScheduledInstances",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws:ec2sri:scheduledInstanceId"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:ec2sri:scheduledInstanceId": "*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonECSServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ECSTaskManagement",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachNetworkInterface",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:Describe*",
              "ec2:DetachNetworkInterface",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:Describe*",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:RegisterTargets",
              "route53:ChangeResourceRecordSets",
              "route53:CreateHealthCheck",
              "route53:DeleteHealthCheck",
              "route53:Get*",
              "route53:List*",
              "route53:UpdateHealthCheck",
              "servicediscovery:DeregisterInstance",
              "servicediscovery:Get*",
              "servicediscovery:List*",
              "servicediscovery:RegisterInstance",
              "servicediscovery:UpdateInstanceCustomHealthStatus"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AutoScaling",
            "Effect": "Allow",
            "Action": [
              "autoscaling:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AutoScalingManagement",
            "Effect": "Allow",
            "Action": [
              "autoscaling:DeletePolicy",
              "autoscaling:PutScalingPolicy",
              "autoscaling:SetInstanceProtection",
              "autoscaling:UpdateAutoScalingGroup",
              "autoscaling:PutLifecycleHook",
              "autoscaling:DeleteLifecycleHook",
              "autoscaling:CompleteLifecycleAction",
              "autoscaling:RecordLifecycleActionHeartbeat"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "autoscaling:ResourceTag/AmazonECSManaged": "false"
              }
            }
          },
          {
            "Sid": "AutoScalingPlanManagement",
            "Effect": "Allow",
            "Action": [
              "autoscaling-plans:CreateScalingPlan",
              "autoscaling-plans:DeleteScalingPlan",
              "autoscaling-plans:DescribeScalingPlans",
              "autoscaling-plans:DescribeScalingPlanResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EventBridge",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/ecs-managed-*"
          },
          {
            "Sid": "EventBridgeRuleManagement",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "ecs.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CWAlarmManagement",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:PutMetricAlarm"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
          },
          {
            "Sid": "ECSTagging",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*"
          },
          {
            "Sid": "CWLogGroupManagement",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups",
              "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*"
          },
          {
            "Sid": "CWLogStreamManagement",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/ecs/*:log-stream:*"
          },
          {
            "Sid": "ExecuteCommandSessionManagement",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeSessions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ExecuteCommand",
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": [
              "arn:aws:ecs:*:*:task/*",
              "arn:aws:ssm:*:*:document/AmazonECS-ExecuteInteractiveCommand"
            ]
          },
          {
            "Sid": "CloudMapResourceCreation",
            "Effect": "Allow",
            "Action": [
              "servicediscovery:CreateHttpNamespace",
              "servicediscovery:CreateService"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AmazonECSManaged"
                ]
              }
            }
          },
          {
            "Sid": "CloudMapResourceTagging",
            "Effect": "Allow",
            "Action": "servicediscovery:TagResource",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AmazonECSManaged": "*"
              }
            }
          },
          {
            "Sid": "CloudMapResourceDeletion",
            "Effect": "Allow",
            "Action": [
              "servicediscovery:DeleteService"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonECSManaged": "false"
              }
            }
          },
          {
            "Sid": "CloudMapResourceDiscovery",
            "Effect": "Allow",
            "Action": [
              "servicediscovery:DiscoverInstances",
              "servicediscovery:DiscoverInstancesRevision"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingRDSClusterPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "rds:AddTagsToResource",
              "rds:CreateDBInstance",
              "rds:DeleteDBInstance",
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstances",
              "rds:ModifyDBCluster",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "rds.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "APIGatewayServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddListenerCertificates",
              "elasticloadbalancing:RemoveListenerCertificates",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancers",
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingTargets",
              "xray:GetSamplingRules",
              "logs:CreateLogDelivery",
              "logs:GetLogDelivery",
              "logs:UpdateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:ListLogDeliveries",
              "servicediscovery:DiscoverInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "firehose:DescribeDeliveryStream",
              "firehose:PutRecord",
              "firehose:PutRecordBatch"
            ],
            "Resource": "arn:aws:firehose:*:*:deliverystream/amazon-apigateway-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm:DescribeCertificate",
              "acm:GetCertificate"
            ],
            "Resource": "arn:aws:acm:*:*:certificate/*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterfacePermission",
            "Resource": "arn:aws:ec2:*:*:network-interface/*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Owner",
                  "VpcLinkId"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface",
              "ec2:AssignPrivateIpAddresses",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeVpcs",
              "ec2:DescribeNetworkInterfacePermissions",
              "ec2:UnassignPrivateIpAddresses",
              "ec2:DescribeSubnets",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "servicediscovery:GetNamespace",
            "Resource": "arn:aws:servicediscovery:*:*:namespace/*"
          },
          {
            "Effect": "Allow",
            "Action": "servicediscovery:GetService",
            "Resource": "arn:aws:servicediscovery:*:*:service/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingAppStreamFleetPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appstream:UpdateFleet",
              "appstream:DescribeFleets",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingDynamoDBTablePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeTable",
              "dynamodb:UpdateTable",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSEC2SpotFleetServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeSubnets",
              "ec2:RequestSpotInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:RunInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:spot-instances-request/*",
              "arn:aws:ec2:*:*:spot-fleet-request/*",
              "arn:aws:ec2:*:*:volume/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterTargets"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:*/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingEC2SpotFleetRequestPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSpotFleetRequests",
              "ec2:ModifySpotFleetRequest",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingECSServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecs:DescribeServices",
              "ecs:UpdateService",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingEMRInstanceGroupPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ModifyInstanceGroups",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "chime:List*",
              "chime:Get*",
              "chime:Describe*",
              "chime:SearchAvailablePhoneNumbers"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "chime:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:GetBucketVersioning",
              "s3:GetBucketWebsite"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "logs:CreateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:GetLogDelivery",
              "logs:ListLogDeliveries",
              "logs:DescribeResourcePolicies",
              "logs:PutResourcePolicy",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:GetTopicAttributes"
            ],
            "Resource": [
              "arn:aws:sns:*:*:ChimeVoiceConnector-Streaming*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:GetQueueAttributes",
              "sqs:CreateQueue"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:ChimeVoiceConnector-Streaming*"
            ]
          },
          {
            "Action": [
              "kinesis:ListStreams"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:DescribeStream"
            ],
            "Resource": [
              "arn:aws:kinesis:*:*:stream/chime-chat-*",
              "arn:aws:kinesis:*:*:stream/chime-messaging-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetEncryptionConfiguration",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::chime-chat-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeUserManagement",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "chime:ListAccounts",
              "chime:GetAccount",
              "chime:GetAccountSettings",
              "chime:UpdateAccountSettings",
              "chime:ListUsers",
              "chime:GetUser",
              "chime:GetUserByEmail",
              "chime:InviteUsers",
              "chime:InviteUsersFromProvider",
              "chime:SuspendUsers",
              "chime:ActivateUsers",
              "chime:UpdateUserLicenses",
              "chime:ResetPersonalPIN",
              "chime:LogoutUser",
              "chime:ListDomains",
              "chime:GetDomain",
              "chime:ListDirectories",
              "chime:ListGroups",
              "chime:SubmitSupportRequest",
              "chime:ListDelegates",
              "chime:ListAccountUsageReportData",
              "chime:GetMeetingDetail",
              "chime:ListMeetingEvents",
              "chime:ListMeetingsReportData",
              "chime:GetUserActivityReportData",
              "chime:UpdateUser",
              "chime:BatchUpdateUser",
              "chime:BatchSuspendUser",
              "chime:BatchUnsuspendUser",
              "chime:AssociatePhoneNumberWithUser",
              "chime:DisassociatePhoneNumberFromUser",
              "chime:GetPhoneNumber",
              "chime:ListPhoneNumbers",
              "chime:GetUserSettings",
              "chime:UpdateUserSettings",
              "chime:CreateUser",
              "chime:AssociateSigninDelegateGroupsWithAccount",
              "chime:DisassociateSigninDelegateGroupsFromAccount"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudHSMServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonECS_FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ECSIntegrationsManagementPolicy",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget",
              "appmesh:DescribeVirtualGateway",
              "appmesh:DescribeVirtualNode",
              "appmesh:ListMeshes",
              "appmesh:ListVirtualGateways",
              "appmesh:ListVirtualNodes",
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:CreateLaunchConfiguration",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:DeleteLaunchConfiguration",
              "autoscaling:Describe*",
              "autoscaling:UpdateAutoScalingGroup",
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStack*",
              "cloudformation:UpdateStack",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:PutMetricAlarm",
              "codedeploy:BatchGetApplicationRevisions",
              "codedeploy:BatchGetApplications",
              "codedeploy:BatchGetDeploymentGroups",
              "codedeploy:BatchGetDeployments",
              "codedeploy:ContinueDeployment",
              "codedeploy:CreateApplication",
              "codedeploy:CreateDeployment",
              "codedeploy:CreateDeploymentGroup",
              "codedeploy:GetApplication",
              "codedeploy:GetApplicationRevision",
              "codedeploy:GetDeployment",
              "codedeploy:GetDeploymentConfig",
              "codedeploy:GetDeploymentGroup",
              "codedeploy:GetDeploymentTarget",
              "codedeploy:ListApplicationRevisions",
              "codedeploy:ListApplications",
              "codedeploy:ListDeploymentConfigs",
              "codedeploy:ListDeploymentGroups",
              "codedeploy:ListDeployments",
              "codedeploy:ListDeploymentTargets",
              "codedeploy:RegisterApplicationRevision",
              "codedeploy:StopDeployment",
              "ec2:AssociateRouteTable",
              "ec2:AttachInternetGateway",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CancelSpotFleetRequests",
              "ec2:CreateInternetGateway",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateVpc",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteSubnet",
              "ec2:DeleteVpc",
              "ec2:Describe*",
              "ec2:DetachInternetGateway",
              "ec2:DisassociateRouteTable",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:RequestSpotFleet",
              "ec2:RunInstances",
              "ecs:*",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeFileSystems",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:CreateLoadBalancer",
              "elasticloadbalancing:CreateRule",
              "elasticloadbalancing:CreateTargetGroup",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:DeleteRule",
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTargetGroups",
              "events:DeleteRule",
              "events:DescribeRule",
              "events:ListRuleNamesByTarget",
              "events:ListTargetsByRule",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets",
              "fsx:DescribeFileSystems",
              "iam:ListAttachedRolePolicies",
              "iam:ListInstanceProfiles",
              "iam:ListRoles",
              "lambda:ListFunctions",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups",
              "logs:FilterLogEvents",
              "route53:CreateHostedZone",
              "route53:DeleteHostedZone",
              "route53:GetHealthCheck",
              "route53:GetHostedZone",
              "route53:ListHostedZonesByName",
              "servicediscovery:CreatePrivateDnsNamespace",
              "servicediscovery:CreateService",
              "servicediscovery:DeleteService",
              "servicediscovery:GetNamespace",
              "servicediscovery:GetOperation",
              "servicediscovery:GetService",
              "servicediscovery:ListNamespaces",
              "servicediscovery:ListServices",
              "servicediscovery:UpdateService",
              "sns:ListTopics"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SSMPolicy",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameter",
              "ssm:GetParameters",
              "ssm:GetParametersByPath"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/aws/service/ecs*"
          },
          {
            "Sid": "ManagedCloudformationResourcesCleanupPolicy",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteInternetGateway",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-name": "EC2ContainerService-*"
              }
            }
          },
          {
            "Sid": "TasksPassRolePolicy",
            "Action": "iam:PassRole",
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ecs-tasks.amazonaws.com"
              }
            }
          },
          {
            "Sid": "InfrastructurePassRolePolicy",
            "Action": "iam:PassRole",
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/ecsInfrastructureRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ecs.amazonaws.com"
              }
            }
          },
          {
            "Sid": "InstancePassRolePolicy",
            "Action": "iam:PassRole",
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/ecsInstanceRole*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Sid": "AutoScalingPassRolePolicy",
            "Action": "iam:PassRole",
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/ecsAutoscaleRole*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "application-autoscaling.amazonaws.com",
                  "application-autoscaling.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Sid": "ServiceLinkedRoleCreationPolicy",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "ecs.amazonaws.com",
                  "autoscaling.amazonaws.com",
                  "ecs.application-autoscaling.amazonaws.com",
                  "spot.amazonaws.com",
                  "spotfleet.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ELBTaggingPolicy",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "elasticloadbalancing:CreateAction": [
                  "CreateTargetGroup",
                  "CreateRule",
                  "CreateListener",
                  "CreateLoadBalancer"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "DynamoDBReplicationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DynamoDBActionsNeededForSteadyStateReplication",
            "Effect": "Allow",
            "Action": [
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem",
              "dynamodb:DescribeTable",
              "dynamodb:UpdateTable",
              "dynamodb:Scan",
              "dynamodb:DescribeStream",
              "dynamodb:GetRecords",
              "dynamodb:GetShardIterator",
              "dynamodb:DescribeTimeToLive",
              "dynamodb:UpdateTimeToLive",
              "dynamodb:DescribeLimits",
              "dynamodb:GetResourcePolicy",
              "application-autoscaling:RegisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:DescribeScalingPolicies",
              "account:ListRegions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DynamoDBReplicationServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "dynamodb.application-autoscaling.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:CancelCommand",
              "ssm:GetCommandInvocation",
              "ssm:ListCommandInvocations",
              "ssm:ListCommands",
              "ssm:SendCommand",
              "ssm:GetAutomationExecution",
              "ssm:GetParameters",
              "ssm:StartAutomationExecution",
              "ssm:StopAutomationExecution",
              "ssm:ListTagsForResource",
              "ssm:GetCalendarState"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/*",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:SSM*",
              "arn:aws:lambda:*:*:function:*:SSM*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "states:DescribeExecution",
              "states:StartExecution"
            ],
            "Resource": [
              "arn:aws:states:*:*:stateMachine:SSM*",
              "arn:aws:states:*:*:execution:SSM*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "resource-groups:ListGroups",
              "resource-groups:ListGroupResources",
              "resource-groups:GetGroupQuery"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:SelectResourceConfig"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "compute-optimizer:GetEC2InstanceRecommendations",
              "compute-optimizer:GetEnrollmentStatus"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "support:DescribeTrustedAdvisorChecks",
              "support:DescribeTrustedAdvisorCheckSummaries",
              "support:DescribeTrustedAdvisorCheckResult",
              "support:DescribeCases"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DescribeComplianceByConfigRule",
              "config:DescribeComplianceByResource",
              "config:DescribeRemediationConfigurations",
              "config:DescribeConfigurationRecorders"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:DescribeAlarms",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "organizations:DescribeOrganization",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudformation:ListStackSets",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStackInstances",
              "cloudformation:DescribeStackSetOperation",
              "cloudformation:DeleteStackSet"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudformation:DeleteStackInstances",
            "Resource": [
              "arn:aws:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*",
              "arn:aws:cloudformation:*:*:stackset-target/AWS-QuickSetup-SSM*:*",
              "arn:aws:cloudformation:*:*:type/resource/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:RemoveTargets",
              "events:DeleteRule"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/SSMExplorerManagedRule"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "events:DescribeRule",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "securityhub:DescribeHub",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonECSTaskExecutionRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:BatchGetImage",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchEventsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshots",
              "ec2:DescribeVolumeStatus",
              "ec2:DescribeVolumes",
              "ec2:RebootInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:CreateSnapshot"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonInspectorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "directconnect:DescribeConnections",
              "directconnect:DescribeDirectConnectGateways",
              "directconnect:DescribeDirectConnectGatewayAssociations",
              "directconnect:DescribeDirectConnectGatewayAttachments",
              "directconnect:DescribeVirtualGateways",
              "directconnect:DescribeVirtualInterfaces",
              "directconnect:DescribeTags",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeTags",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRegions",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:DescribeManagedPrefixLists",
              "ec2:GetManagedPrefixListEntries",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:SearchTransitGatewayRoutes",
              "ec2:DescribeTransitGatewayPeeringAttachments",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPriceListServiceFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSPriceListServiceFullAccess",
            "Effect": "Allow",
            "Action": [
              "pricing:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployRoleForLambda",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudwatch:DescribeAlarms",
              "lambda:UpdateAlias",
              "lambda:GetAlias",
              "lambda:GetProvisionedConcurrencyConfig",
              "sns:Publish"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "arn:aws:s3:::*/CodeDeploy/*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
              }
            },
            "Effect": "Allow"
          },
          {
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMQFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mq:*",
              "cloudformation:CreateStack",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DetachNetworkInterface",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeNetworkInterfacePermissions",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:CreateSecurityGroup",
              "ec2:AuthorizeSecurityGroupIngress"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
            ]
          },
          {
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "mq.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMQReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "mq:Describe*",
              "mq:List*",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGuardDutyServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "GuardDutyGetDescribeListPolicy",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeImages",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeTransitGatewayAttachments",
              "organizations:ListAccounts",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetEncryptionConfiguration",
              "s3:GetBucketTagging",
              "s3:GetAccountPublicAccessBlock",
              "s3:ListAllMyBuckets",
              "s3:GetBucketAcl",
              "s3:GetBucketPolicy",
              "s3:GetBucketPolicyStatus",
              "lambda:GetFunctionConfiguration",
              "lambda:ListTags",
              "eks:ListClusters",
              "eks:DescribeCluster",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcs",
              "ec2:DescribeSecurityGroups",
              "ecs:ListClusters",
              "ecs:DescribeClusters"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GuardDutyCreateSLRPolicy",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "malware-protection.guardduty.amazonaws.com"
              }
            }
          },
          {
            "Sid": "GuardDutyCreateVpcEndpointPolicy",
            "Effect": "Allow",
            "Action": "ec2:CreateVpcEndpoint",
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "GuardDutyManaged"
              },
              "StringLike": {
                "ec2:VpceServiceName": [
                  "com.amazonaws.*.guardduty-data",
                  "com.amazonaws.*.guardduty-data-fips"
                ]
              }
            }
          },
          {
            "Sid": "GuardDutyModifyDeleteVpcEndpointPolicy",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVpcEndpoint",
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/GuardDutyManaged": false
              }
            }
          },
          {
            "Sid": "GuardDutyCreateModifyVpcEndpointNetworkPolicy",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:subnet/*"
            ]
          },
          {
            "Sid": "GuardDutyCreateTagsDuringVpcEndpointCreationPolicy",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "GuardDutyManaged"
              }
            }
          },
          {
            "Sid": "GuardDutySecurityGroupManagementPolicy",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/GuardDutyManaged": false
              }
            }
          },
          {
            "Sid": "GuardDutyCreateSecurityGroupPolicy",
            "Effect": "Allow",
            "Action": "ec2:CreateSecurityGroup",
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/GuardDutyManaged": "*"
              }
            }
          },
          {
            "Sid": "GuardDutyCreateSecurityGroupForVpcPolicy",
            "Effect": "Allow",
            "Action": "ec2:CreateSecurityGroup",
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Sid": "GuardDutyCreateTagsDuringSecurityGroupCreationPolicy",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateSecurityGroup"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "GuardDutyManaged"
              }
            }
          },
          {
            "Sid": "GuardDutyCreateEksAddonPolicy",
            "Effect": "Allow",
            "Action": "eks:CreateAddon",
            "Resource": "arn:aws:eks:*:*:cluster/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "GuardDutyManaged"
              }
            }
          },
          {
            "Sid": "GuardDutyEksAddonManagementPolicy",
            "Effect": "Allow",
            "Action": [
              "eks:DeleteAddon",
              "eks:UpdateAddon",
              "eks:DescribeAddon"
            ],
            "Resource": "arn:aws:eks:*:*:addon/*/aws-guardduty-agent/*"
          },
          {
            "Sid": "GuardDutyEksClusterTagResourcePolicy",
            "Effect": "Allow",
            "Action": "eks:TagResource",
            "Resource": "arn:aws:eks:*:*:cluster/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "GuardDutyManaged"
              }
            }
          },
          {
            "Sid": "GuardDutyEcsPutAccountSettingsDefaultPolicy",
            "Effect": "Allow",
            "Action": "ecs:PutAccountSettingDefault",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:account-setting": [
                  "guardDutyActivate"
                ]
              }
            }
          },
          {
            "Sid": "SsmCreateDescribeUpdateDeleteStartAssociationPermission",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAssociation",
              "ssm:DeleteAssociation",
              "ssm:UpdateAssociation",
              "ssm:CreateAssociation",
              "ssm:StartAssociationsOnce"
            ],
            "Resource": "arn:aws:ssm:*:*:association/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/GuardDutyManaged": "true"
              }
            }
          },
          {
            "Sid": "SsmAddTagsToResourcePermission",
            "Effect": "Allow",
            "Action": [
              "ssm:AddTagsToResource"
            ],
            "Resource": "arn:aws:ssm:*:*:association/*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "GuardDutyManaged"
                ]
              },
              "StringEquals": {
                "aws:ResourceTag/GuardDutyManaged": "true"
              }
            }
          },
          {
            "Sid": "SsmCreateUpdateAssociationInstanceDocumentPermission",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateAssociation",
              "ssm:UpdateAssociation"
            ],
            "Resource": "arn:aws:ssm:*:*:document/AmazonGuardDuty-ConfigureRuntimeMonitoringSsmPlugin"
          },
          {
            "Sid": "SsmSendCommandPermission",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:document/AmazonGuardDuty-ConfigureRuntimeMonitoringSsmPlugin"
            ]
          },
          {
            "Sid": "SsmGetCommandStatus",
            "Effect": "Allow",
            "Action": "ssm:GetCommandInvocation",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGuardDutyReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "guardduty:Describe*",
              "guardduty:Get*",
              "guardduty:List*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGuardDutyFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonGuardDutyFullAccessSid1",
            "Effect": "Allow",
            "Action": "guardduty:*",
            "Resource": "*"
          },
          {
            "Sid": "CreateServiceLinkedRoleSid1",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "guardduty.amazonaws.com",
                  "malware-protection.guardduty.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ActionsForOrganizationsSid1",
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess",
              "organizations:RegisterDelegatedAdministrator",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IamGetRoleSid1",
            "Effect": "Allow",
            "Action": "iam:GetRole",
            "Resource": "arn:aws:iam::*:role/*AWSServiceRoleForAmazonGuardDutyMalwareProtection"
          },
          {
            "Sid": "AllowPassRoleToMalwareProtectionPlan",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "malware-protection-plan.guardduty.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:Describe*",
              "sagemaker:List*",
              "sagemaker:BatchGetMetrics",
              "sagemaker:GetDeviceRegistration",
              "sagemaker:GetDeviceFleetReport",
              "sagemaker:GetSearchSuggestions",
              "sagemaker:BatchGetRecord",
              "sagemaker:GetRecord",
              "sagemaker:Search",
              "sagemaker:QueryLineage",
              "sagemaker:GetLineageGroupPolicy",
              "sagemaker:BatchDescribeModelPackage",
              "sagemaker:GetModelPackageGroupPolicy"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScheduledActions",
              "aws-marketplace:ViewSubscriptions",
              "cloudwatch:DescribeAlarms",
              "cognito-idp:DescribeUserPool",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:ListGroups",
              "cognito-idp:ListIdentityProviders",
              "cognito-idp:ListUserPoolClients",
              "cognito-idp:ListUserPools",
              "cognito-idp:ListUsers",
              "cognito-idp:ListUsersInGroup",
              "ecr:Describe*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowAllNonAdminSageMakerActions",
            "Effect": "Allow",
            "Action": [
              "sagemaker:*",
              "sagemaker-geospatial:*"
            ],
            "NotResource": [
              "arn:aws:sagemaker:*:*:domain/*",
              "arn:aws:sagemaker:*:*:user-profile/*",
              "arn:aws:sagemaker:*:*:app/*",
              "arn:aws:sagemaker:*:*:space/*",
              "arn:aws:sagemaker:*:*:flow-definition/*"
            ]
          },
          {
            "Sid": "AllowAddTagsForSpace",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddTags"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:space/*"
            ],
            "Condition": {
              "StringEquals": {
                "sagemaker:TaggingAction": "CreateSpace"
              }
            }
          },
          {
            "Sid": "AllowAddTagsForApp",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddTags"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:app/*"
            ]
          },
          {
            "Sid": "AllowStudioActions",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreatePresignedDomainUrl",
              "sagemaker:DescribeDomain",
              "sagemaker:ListDomains",
              "sagemaker:DescribeUserProfile",
              "sagemaker:ListUserProfiles",
              "sagemaker:DescribeSpace",
              "sagemaker:ListSpaces",
              "sagemaker:DescribeApp",
              "sagemaker:ListApps"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAppActionsForUserProfile",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateApp",
              "sagemaker:DeleteApp"
            ],
            "Resource": "arn:aws:sagemaker:*:*:app/*/*/*/*",
            "Condition": {
              "Null": {
                "sagemaker:OwnerUserProfileArn": "true"
              }
            }
          },
          {
            "Sid": "AllowAppActionsForSharedSpaces",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateApp",
              "sagemaker:DeleteApp"
            ],
            "Resource": "arn:aws:sagemaker:*:*:app/${sagemaker:DomainId}/*/*/*",
            "Condition": {
              "StringEquals": {
                "sagemaker:SpaceSharingType": [
                  "Shared"
                ]
              }
            }
          },
          {
            "Sid": "AllowMutatingActionsOnSharedSpacesWithoutOwner",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateSpace",
              "sagemaker:UpdateSpace",
              "sagemaker:DeleteSpace"
            ],
            "Resource": "arn:aws:sagemaker:*:*:space/${sagemaker:DomainId}/*",
            "Condition": {
              "Null": {
                "sagemaker:OwnerUserProfileArn": "true"
              }
            }
          },
          {
            "Sid": "RestrictMutatingActionsOnSpacesToOwnerUserProfile",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateSpace",
              "sagemaker:UpdateSpace",
              "sagemaker:DeleteSpace"
            ],
            "Resource": "arn:aws:sagemaker:*:*:space/${sagemaker:DomainId}/*",
            "Condition": {
              "ArnLike": {
                "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
              },
              "StringEquals": {
                "sagemaker:SpaceSharingType": [
                  "Private",
                  "Shared"
                ]
              }
            }
          },
          {
            "Sid": "RestrictMutatingActionsOnPrivateSpaceAppsToOwnerUserProfile",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateApp",
              "sagemaker:DeleteApp"
            ],
            "Resource": "arn:aws:sagemaker:*:*:app/${sagemaker:DomainId}/*/*/*",
            "Condition": {
              "ArnLike": {
                "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
              },
              "StringEquals": {
                "sagemaker:SpaceSharingType": [
                  "Private"
                ]
              }
            }
          },
          {
            "Sid": "AllowFlowDefinitionActions",
            "Effect": "Allow",
            "Action": "sagemaker:*",
            "Resource": [
              "arn:aws:sagemaker:*:*:flow-definition/*"
            ],
            "Condition": {
              "StringEqualsIfExists": {
                "sagemaker:WorkteamType": [
                  "private-crowd",
                  "vendor-crowd"
                ]
              }
            }
          },
          {
            "Sid": "AllowAWSServiceActions",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeleteScheduledAction",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScheduledActions",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:PutScheduledAction",
              "application-autoscaling:RegisterScalableTarget",
              "aws-marketplace:ViewSubscriptions",
              "cloudformation:GetTemplateSummary",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:PutMetricData",
              "codecommit:BatchGetRepositories",
              "codecommit:CreateRepository",
              "codecommit:GetRepository",
              "codecommit:List*",
              "cognito-idp:AdminAddUserToGroup",
              "cognito-idp:AdminCreateUser",
              "cognito-idp:AdminDeleteUser",
              "cognito-idp:AdminDisableUser",
              "cognito-idp:AdminEnableUser",
              "cognito-idp:AdminRemoveUserFromGroup",
              "cognito-idp:CreateGroup",
              "cognito-idp:CreateUserPool",
              "cognito-idp:CreateUserPoolClient",
              "cognito-idp:CreateUserPoolDomain",
              "cognito-idp:DescribeUserPool",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:List*",
              "cognito-idp:UpdateUserPool",
              "cognito-idp:UpdateUserPoolClient",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:CreateVpcEndpoint",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcs",
              "ecr:BatchCheckLayerAvailability",
              "ecr:BatchGetImage",
              "ecr:CreateRepository",
              "ecr:Describe*",
              "ecr:GetAuthorizationToken",
              "ecr:GetDownloadUrlForLayer",
              "ecr:StartImageScan",
              "elastic-inference:Connect",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
              "fsx:DescribeFileSystems",
              "glue:CreateJob",
              "glue:DeleteJob",
              "glue:GetJob*",
              "glue:GetTable*",
              "glue:GetWorkflowRun",
              "glue:ResetJobBookmark",
              "glue:StartJobRun",
              "glue:StartWorkflowRun",
              "glue:UpdateJob",
              "groundtruthlabeling:*",
              "iam:ListRoles",
              "kms:DescribeKey",
              "kms:ListAliases",
              "lambda:ListFunctions",
              "logs:CreateLogDelivery",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DeleteLogDelivery",
              "logs:Describe*",
              "logs:GetLogDelivery",
              "logs:GetLogEvents",
              "logs:ListLogDeliveries",
              "logs:PutLogEvents",
              "logs:PutResourcePolicy",
              "logs:UpdateLogDelivery",
              "robomaker:CreateSimulationApplication",
              "robomaker:DescribeSimulationApplication",
              "robomaker:DeleteSimulationApplication",
              "robomaker:CreateSimulationJob",
              "robomaker:DescribeSimulationJob",
              "robomaker:CancelSimulationJob",
              "secretsmanager:ListSecrets",
              "servicecatalog:Describe*",
              "servicecatalog:List*",
              "servicecatalog:ScanProvisionedProducts",
              "servicecatalog:SearchProducts",
              "servicecatalog:SearchProvisionedProducts",
              "sns:ListTopics",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowECRActions",
            "Effect": "Allow",
            "Action": [
              "ecr:SetRepositoryPolicy",
              "ecr:CompleteLayerUpload",
              "ecr:BatchDeleteImage",
              "ecr:UploadLayerPart",
              "ecr:DeleteRepositoryPolicy",
              "ecr:InitiateLayerUpload",
              "ecr:DeleteRepository",
              "ecr:PutImage"
            ],
            "Resource": [
              "arn:aws:ecr:*:*:repository/*sagemaker*"
            ]
          },
          {
            "Sid": "AllowCodeCommitActions",
            "Effect": "Allow",
            "Action": [
              "codecommit:GitPull",
              "codecommit:GitPush"
            ],
            "Resource": [
              "arn:aws:codecommit:*:*:*sagemaker*",
              "arn:aws:codecommit:*:*:*SageMaker*",
              "arn:aws:codecommit:*:*:*Sagemaker*"
            ]
          },
          {
            "Sid": "AllowCodeBuildActions",
            "Action": [
              "codebuild:BatchGetBuilds",
              "codebuild:StartBuild"
            ],
            "Resource": [
              "arn:aws:codebuild:*:*:project/sagemaker*",
              "arn:aws:codebuild:*:*:build/*"
            ],
            "Effect": "Allow"
          },
          {
            "Sid": "AllowStepFunctionsActions",
            "Action": [
              "states:DescribeExecution",
              "states:GetExecutionHistory",
              "states:StartExecution",
              "states:StopExecution",
              "states:UpdateStateMachine"
            ],
            "Resource": [
              "arn:aws:states:*:*:statemachine:*sagemaker*",
              "arn:aws:states:*:*:execution:*sagemaker*:*"
            ],
            "Effect": "Allow"
          },
          {
            "Sid": "AllowSecretManagerActions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:CreateSecret"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
            ]
          },
          {
            "Sid": "AllowReadOnlySecretManagerActions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/SageMaker": "true"
              }
            }
          },
          {
            "Sid": "AllowServiceCatalogProvisionProduct",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:ProvisionProduct"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowServiceCatalogTerminateUpdateProvisionProduct",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:TerminateProvisionedProduct",
              "servicecatalog:UpdateProvisionedProduct"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "servicecatalog:userLevel": "self"
              }
            }
          },
          {
            "Sid": "AllowS3ObjectActions",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:AbortMultipartUpload"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*",
              "arn:aws:s3:::*aws-glue*"
            ]
          },
          {
            "Sid": "AllowS3GetObjectWithSageMakerExistingObjectTag",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*"
            ],
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/SageMaker": "true"
              }
            }
          },
          {
            "Sid": "AllowS3GetObjectWithServiceCatalogProvisioningExistingObjectTag",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*"
            ],
            "Condition": {
              "StringEquals": {
                "s3:ExistingObjectTag/servicecatalog:provisioning": "true"
              }
            }
          },
          {
            "Sid": "AllowS3BucketActions",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:GetBucketCors",
              "s3:PutBucketCors"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowS3BucketACL",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketAcl",
              "s3:PutObjectAcl"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Sid": "AllowLambdaInvokeFunction",
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*SageMaker*",
              "arn:aws:lambda:*:*:function:*sagemaker*",
              "arn:aws:lambda:*:*:function:*Sagemaker*",
              "arn:aws:lambda:*:*:function:*LabelingFunction*"
            ]
          },
          {
            "Sid": "AllowCreateServiceLinkedRoleForSageMakerApplicationAutoscaling",
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowCreateServiceLinkedRoleForRobomaker",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "robomaker.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowSNSActions",
            "Effect": "Allow",
            "Action": [
              "sns:Subscribe",
              "sns:CreateTopic",
              "sns:Publish"
            ],
            "Resource": [
              "arn:aws:sns:*:*:*SageMaker*",
              "arn:aws:sns:*:*:*Sagemaker*",
              "arn:aws:sns:*:*:*sagemaker*"
            ]
          },
          {
            "Sid": "AllowPassRoleForSageMakerRoles",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*AmazonSageMaker*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "glue.amazonaws.com",
                  "robomaker.amazonaws.com",
                  "states.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AllowPassRoleToSageMaker",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "sagemaker.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowAthenaActions",
            "Effect": "Allow",
            "Action": [
              "athena:ListDataCatalogs",
              "athena:ListDatabases",
              "athena:ListTableMetadata",
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:StartQueryExecution",
              "athena:StopQueryExecution"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowGlueCreateTable",
            "Effect": "Allow",
            "Action": [
              "glue:CreateTable"
            ],
            "Resource": [
              "arn:aws:glue:*:*:table/*/sagemaker_tmp_*",
              "arn:aws:glue:*:*:table/sagemaker_featurestore/*",
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*"
            ]
          },
          {
            "Sid": "AllowGlueUpdateTable",
            "Effect": "Allow",
            "Action": [
              "glue:UpdateTable"
            ],
            "Resource": [
              "arn:aws:glue:*:*:table/sagemaker_featurestore/*",
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/sagemaker_featurestore"
            ]
          },
          {
            "Sid": "AllowGlueDeleteTable",
            "Effect": "Allow",
            "Action": [
              "glue:DeleteTable"
            ],
            "Resource": [
              "arn:aws:glue:*:*:table/*/sagemaker_tmp_*",
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*"
            ]
          },
          {
            "Sid": "AllowGlueGetTablesAndDatabases",
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables"
            ],
            "Resource": [
              "arn:aws:glue:*:*:table/*",
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*"
            ]
          },
          {
            "Sid": "AllowGlueGetAndCreateDatabase",
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase",
              "glue:GetDatabase"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/sagemaker_featurestore",
              "arn:aws:glue:*:*:database/sagemaker_processing",
              "arn:aws:glue:*:*:database/default",
              "arn:aws:glue:*:*:database/sagemaker_data_wrangler"
            ]
          },
          {
            "Sid": "AllowRedshiftDataActions",
            "Effect": "Allow",
            "Action": [
              "redshift-data:ExecuteStatement",
              "redshift-data:DescribeStatement",
              "redshift-data:CancelStatement",
              "redshift-data:GetStatementResult",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowRedshiftGetClusterCredentials",
            "Effect": "Allow",
            "Action": [
              "redshift:GetClusterCredentials"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
              "arn:aws:redshift:*:*:dbname:*"
            ]
          },
          {
            "Sid": "AllowListTagsForUserProfile",
            "Effect": "Allow",
            "Action": [
              "sagemaker:ListTags"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:user-profile/*"
            ]
          },
          {
            "Sid": "AllowCloudformationListStackResources",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStackResources"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/SC-*"
          },
          {
            "Sid": "AllowS3ExpressObjectActions",
            "Effect": "Allow",
            "Action": [
              "s3express:CreateSession"
            ],
            "Resource": [
              "arn:aws:s3express:*:*:bucket/*SageMaker*",
              "arn:aws:s3express:*:*:bucket/*Sagemaker*",
              "arn:aws:s3express:*:*:bucket/*sagemaker*",
              "arn:aws:s3express:*:*:bucket/*aws-glue*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowS3ExpressCreateBucketActions",
            "Effect": "Allow",
            "Action": [
              "s3express:CreateBucket"
            ],
            "Resource": [
              "arn:aws:s3express:*:*:bucket/*SageMaker*",
              "arn:aws:s3express:*:*:bucket/*Sagemaker*",
              "arn:aws:s3express:*:*:bucket/*sagemaker*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowS3ExpressListBucketActions",
            "Effect": "Allow",
            "Action": [
              "s3express:ListAllMyDirectoryBuckets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFreeRTOSFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "freertos:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeepLensServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DeepLensIoTThingAccess",
            "Effect": "Allow",
            "Action": [
              "iot:CreateThing",
              "iot:DeleteThing",
              "iot:DeleteThingShadow",
              "iot:DescribeThing",
              "iot:GetThingShadow",
              "iot:UpdateThing",
              "iot:UpdateThingShadow"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/deeplens*"
            ]
          },
          {
            "Sid": "DeepLensIoTCertificateAccess",
            "Effect": "Allow",
            "Action": [
              "iot:AttachThingPrincipal",
              "iot:DetachThingPrincipal",
              "iot:UpdateCertificate",
              "iot:DeleteCertificate",
              "iot:DetachPrincipalPolicy"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/deeplens*",
              "arn:aws:iot:*:*:cert/*"
            ]
          },
          {
            "Sid": "DeepLensIoTCreateCertificateAndPolicyAccess",
            "Effect": "Allow",
            "Action": [
              "iot:CreateKeysAndCertificate",
              "iot:CreatePolicy",
              "iot:CreatePolicyVersion"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DeepLensIoTAttachCertificatePolicyAccess",
            "Effect": "Allow",
            "Action": [
              "iot:AttachPrincipalPolicy"
            ],
            "Resource": [
              "arn:aws:iot:*:*:policy/deeplens*",
              "arn:aws:iot:*:*:cert/*"
            ]
          },
          {
            "Sid": "DeepLensIoTDataAccess",
            "Effect": "Allow",
            "Action": [
              "iot:GetThingShadow",
              "iot:UpdateThingShadow"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/deeplens*"
            ]
          },
          {
            "Sid": "DeepLensIoTEndpointAccess",
            "Effect": "Allow",
            "Action": [
              "iot:DescribeEndpoint"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DeepLensAccess",
            "Effect": "Allow",
            "Action": [
              "deeplens:*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DeepLensS3ObjectAccess",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::deeplens*"
            ]
          },
          {
            "Sid": "DeepLensS3Buckets",
            "Effect": "Allow",
            "Action": [
              "s3:DeleteBucket",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::deeplens*"
            ]
          },
          {
            "Sid": "DeepLensCreateS3Buckets",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DeepLensIAMPassRoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "greengrass.amazonaws.com",
                  "sagemaker.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DeepLensIAMLambdaPassRoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSDeepLens*",
              "arn:aws:iam::*:role/service-role/AWSDeepLens*"
            ],
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": "lambda.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DeepLensGreenGrassAccess",
            "Effect": "Allow",
            "Action": [
              "greengrass:AssociateRoleToGroup",
              "greengrass:AssociateServiceRoleToAccount",
              "greengrass:CreateResourceDefinition",
              "greengrass:CreateResourceDefinitionVersion",
              "greengrass:CreateCoreDefinition",
              "greengrass:CreateCoreDefinitionVersion",
              "greengrass:CreateDeployment",
              "greengrass:CreateFunctionDefinition",
              "greengrass:CreateFunctionDefinitionVersion",
              "greengrass:CreateGroup",
              "greengrass:CreateGroupCertificateAuthority",
              "greengrass:CreateGroupVersion",
              "greengrass:CreateLoggerDefinition",
              "greengrass:CreateLoggerDefinitionVersion",
              "greengrass:CreateSubscriptionDefinition",
              "greengrass:CreateSubscriptionDefinitionVersion",
              "greengrass:DeleteCoreDefinition",
              "greengrass:DeleteFunctionDefinition",
              "greengrass:DeleteGroup",
              "greengrass:DeleteLoggerDefinition",
              "greengrass:DeleteSubscriptionDefinition",
              "greengrass:DisassociateRoleFromGroup",
              "greengrass:DisassociateServiceRoleFromAccount",
              "greengrass:GetAssociatedRole",
              "greengrass:GetConnectivityInfo",
              "greengrass:GetCoreDefinition",
              "greengrass:GetCoreDefinitionVersion",
              "greengrass:GetDeploymentStatus",
              "greengrass:GetDeviceDefinition",
              "greengrass:GetDeviceDefinitionVersion",
              "greengrass:GetFunctionDefinition",
              "greengrass:GetFunctionDefinitionVersion",
              "greengrass:GetGroup",
              "greengrass:GetGroupCertificateAuthority",
              "greengrass:GetGroupCertificateConfiguration",
              "greengrass:GetGroupVersion",
              "greengrass:GetLoggerDefinition",
              "greengrass:GetLoggerDefinitionVersion",
              "greengrass:GetResourceDefinition",
              "greengrass:GetServiceRoleForAccount",
              "greengrass:GetSubscriptionDefinition",
              "greengrass:GetSubscriptionDefinitionVersion",
              "greengrass:ListCoreDefinitionVersions",
              "greengrass:ListCoreDefinitions",
              "greengrass:ListDeployments",
              "greengrass:ListDeviceDefinitionVersions",
              "greengrass:ListDeviceDefinitions",
              "greengrass:ListFunctionDefinitionVersions",
              "greengrass:ListFunctionDefinitions",
              "greengrass:ListGroupCertificateAuthorities",
              "greengrass:ListGroupVersions",
              "greengrass:ListGroups",
              "greengrass:ListLoggerDefinitionVersions",
              "greengrass:ListLoggerDefinitions",
              "greengrass:ListSubscriptionDefinitionVersions",
              "greengrass:ListSubscriptionDefinitions",
              "greengrass:ResetDeployments",
              "greengrass:UpdateConnectivityInfo",
              "greengrass:UpdateCoreDefinition",
              "greengrass:UpdateDeviceDefinition",
              "greengrass:UpdateFunctionDefinition",
              "greengrass:UpdateGroup",
              "greengrass:UpdateGroupCertificateConfiguration",
              "greengrass:UpdateLoggerDefinition",
              "greengrass:UpdateSubscriptionDefinition",
              "greengrass:UpdateResourceDefinition"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DeepLensLambdaAdminFunctionAccess",
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:DeleteFunction",
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:ListFunctions",
              "lambda:ListVersionsByFunction",
              "lambda:PublishVersion",
              "lambda:UpdateFunctionCode",
              "lambda:UpdateFunctionConfiguration"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:deeplens*"
            ]
          },
          {
            "Sid": "DeepLensLambdaUsersFunctionAccess",
            "Effect": "Allow",
            "Action": [
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:ListFunctions",
              "lambda:ListVersionsByFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*"
            ]
          },
          {
            "Sid": "DeepLensSageMakerWriteAccess",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateTrainingJob",
              "sagemaker:DescribeTrainingJob",
              "sagemaker:StopTrainingJob"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:training-job/deeplens*"
            ]
          },
          {
            "Sid": "DeepLensSageMakerReadAccess",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeTrainingJob"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:training-job/*"
            ]
          },
          {
            "Sid": "DeepLensKinesisVideoStreamAccess",
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:CreateStream",
              "kinesisvideo:DescribeStream",
              "kinesisvideo:DeleteStream"
            ],
            "Resource": [
              "arn:aws:kinesisvideo:*:*:stream/deeplens*/*"
            ]
          },
          {
            "Sid": "DeepLensKinesisVideoEndpointAccess",
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:GetDataEndpoint"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeepLensLambdaFunctionAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DeepLensS3ObjectAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::deeplens*/*",
              "arn:aws:s3:::deeplens*"
            ]
          },
          {
            "Sid": "DeepLensGreenGrassCloudWatchAccess",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents",
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*"
          },
          {
            "Sid": "DeepLensAccess",
            "Effect": "Allow",
            "Action": [
              "deeplens:*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DeepLensKinesisVideoAccess",
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:DescribeStream",
              "kinesisvideo:CreateStream",
              "kinesisvideo:GetDataEndpoint",
              "kinesisvideo:PutMedia"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRekognitionServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:AmazonRekognition*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:PutRecord",
              "kinesis:PutRecords"
            ],
            "Resource": "arn:aws:kinesis:*:*:stream/AmazonRekognition*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:GetDataEndpoint",
              "kinesisvideo:GetMedia"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightIoTAnalyticsAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "iotanalytics:ListDatasets",
              "iotanalytics:DescribeDataset",
              "iotanalytics:GetDatasetContent"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ComprehendFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "comprehend:*",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "iam:ListRoles",
              "iam:GetRole"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ComprehendReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "comprehend:DetectDominantLanguage",
              "comprehend:BatchDetectDominantLanguage",
              "comprehend:DetectEntities",
              "comprehend:BatchDetectEntities",
              "comprehend:DetectKeyPhrases",
              "comprehend:BatchDetectKeyPhrases",
              "comprehend:DetectPiiEntities",
              "comprehend:ContainsPiiEntities",
              "comprehend:DetectSentiment",
              "comprehend:BatchDetectSentiment",
              "comprehend:DetectSyntax",
              "comprehend:BatchDetectSyntax",
              "comprehend:ClassifyDocument",
              "comprehend:DescribeTopicsDetectionJob",
              "comprehend:ListTopicsDetectionJobs",
              "comprehend:DescribeDominantLanguageDetectionJob",
              "comprehend:ListDominantLanguageDetectionJobs",
              "comprehend:DescribeEntitiesDetectionJob",
              "comprehend:ListEntitiesDetectionJobs",
              "comprehend:DescribeKeyPhrasesDetectionJob",
              "comprehend:ListKeyPhrasesDetectionJobs",
              "comprehend:DescribePiiEntitiesDetectionJob",
              "comprehend:ListPiiEntitiesDetectionJobs",
              "comprehend:DescribeSentimentDetectionJob",
              "comprehend:DescribeTargetedSentimentDetectionJob",
              "comprehend:ListSentimentDetectionJobs",
              "comprehend:ListTargetedSentimentDetectionJobs",
              "comprehend:DescribeDocumentClassifier",
              "comprehend:ListDocumentClassifiers",
              "comprehend:DescribeDocumentClassificationJob",
              "comprehend:ListDocumentClassificationJobs",
              "comprehend:DescribeEntityRecognizer",
              "comprehend:ListEntityRecognizers",
              "comprehend:ListTagsForResource",
              "comprehend:DescribeEndpoint",
              "comprehend:ListEndpoints",
              "comprehend:ListDocumentClassifierSummaries",
              "comprehend:ListEntityRecognizerSummaries",
              "comprehend:DescribeResourcePolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "GreengrassOTAUpdateArtifactAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowsIotToAccessGreengrassOTAUpdateArtifacts",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*-greengrass-updates/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "TranslateReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "translate:TranslateText",
              "translate:TranslateDocument",
              "translate:GetTerminology",
              "translate:ListTerminologies",
              "translate:ListTextTranslationJobs",
              "translate:DescribeTextTranslationJob",
              "translate:GetParallelData",
              "translate:ListParallelData",
              "comprehend:DetectDominantLanguage",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloud9ServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances",
              "ec2:CreateSecurityGroup",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "cloudformation:CreateStack",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResources"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances",
              "ec2:DeleteSecurityGroup",
              "ec2:AuthorizeSecurityGroupIngress"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DeleteStack"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-cloud9-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/Name": "aws-cloud9-*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-name": "aws-cloud9-*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances"
            ],
            "Resource": [
              "arn:aws:license-manager:*:*:license-configuration:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListInstanceProfiles",
              "iam:GetInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:instance-profile/cloud9/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSCloud9SSMAccessRole"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloud9User",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloud9:UpdateUserSettings",
              "cloud9:GetUserSettings",
              "iam:GetUser",
              "iam:ListUsers",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeRouteTables"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloud9:CreateEnvironmentEC2",
              "cloud9:CreateEnvironmentSSH"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "cloud9:OwnerArn": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloud9:GetUserPublicKey"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "cloud9:UserArn": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloud9:DescribeEnvironmentMemberships"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "Null": {
                "cloud9:UserArn": "true",
                "cloud9:EnvironmentId": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "cloud9.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession",
              "ssm:GetConnectionStatus"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ssm:resourceTag/aws:cloud9:environment": "*"
              },
              "StringEquals": {
                "aws:CalledViaFirst": "cloud9.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloud9Administrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloud9:*",
              "iam:GetUser",
              "iam:ListUsers",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeRouteTables"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "cloud9.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession",
              "ssm:GetConnectionStatus"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ssm:resourceTag/aws:cloud9:environment": "*"
              },
              "StringEquals": {
                "aws:CalledViaFirst": "cloud9.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloud9EnvironmentMember",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloud9:GetUserSettings",
              "cloud9:UpdateUserSettings",
              "iam:GetUser",
              "iam:ListUsers"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloud9:DescribeEnvironmentMemberships"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "Null": {
                "cloud9:UserArn": "true",
                "cloud9:EnvironmentId": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession",
              "ssm:GetConnectionStatus"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ssm:resourceTag/aws:cloud9:environment": "*"
              },
              "StringEquals": {
                "aws:CalledViaFirst": "cloud9.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AlexaForBusinessFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "a4b:*",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "*a4b.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/*a4b.amazonaws.com/AWSServiceRoleForAlexaForBusiness*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue",
              "secretsmanager:DeleteSecret",
              "secretsmanager:UpdateSecret"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:A4B*"
          },
          {
            "Effect": "Allow",
            "Action": "secretsmanager:CreateSecret",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "secretsmanager:Name": "A4B*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AlexaForBusinessReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "a4b:Get*",
              "a4b:List*",
              "a4b:Search*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AlexaForBusinessDeviceSetup",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "a4b:RegisterDevice",
              "a4b:CompleteRegistration",
              "a4b:SearchDevices",
              "a4b:SearchNetworkProfiles",
              "a4b:GetNetworkProfile",
              "a4b:PutDeviceSetupEvents"
            ],
            "Resource": "*"
          },
          {
            "Sid": "A4bDeviceSetupAccess",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*"
          }
        ]
      }
    },
    {
      "PolicyName": "AlexaForBusinessGatewayExecution",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "a4b:Send*",
              "a4b:Get*"
            ],
            "Resource": "arn:aws:a4b:*:*:gateway/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:ReceiveMessage",
              "sqs:DeleteMessage"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:dd-*",
              "arn:aws:sqs:*:*:sd-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "a4b:List*",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogGroups",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTThingsRegistration",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:AddThingToThingGroup",
              "iot:AttachPolicy",
              "iot:AttachPrincipalPolicy",
              "iot:AttachThingPrincipal",
              "iot:CreateCertificateFromCsr",
              "iot:CreatePolicy",
              "iot:CreateThing",
              "iot:DescribeCertificate",
              "iot:DescribeThing",
              "iot:DescribeThingGroup",
              "iot:DescribeThingType",
              "iot:DetachPolicy",
              "iot:DetachThingPrincipal",
              "iot:GetPolicy",
              "iot:ListAttachedPolicies",
              "iot:ListPolicyPrincipals",
              "iot:ListPrincipalPolicies",
              "iot:ListPrincipalThings",
              "iot:ListTargetsForPolicy",
              "iot:ListThingGroupsForThing",
              "iot:ListThingPrincipals",
              "iot:RegisterCertificate",
              "iot:RegisterThing",
              "iot:RemoveThingFromThingGroup",
              "iot:UpdateCertificate",
              "iot:UpdateThing",
              "iot:UpdateThingGroupsForThing",
              "iot:AddThingToBillingGroup",
              "iot:DescribeBillingGroup",
              "iot:RemoveThingFromBillingGroup"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKinesisVideoStreamsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:Describe*",
              "kinesisvideo:Get*",
              "kinesisvideo:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKinesisVideoStreamsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "kinesisvideo:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSSOServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "IAMRoleProvisioningActions",
            "Effect": "Allow",
            "Action": [
              "iam:AttachRolePolicy",
              "iam:CreateRole",
              "iam:PutRolePolicy",
              "iam:UpdateRole",
              "iam:UpdateRoleDescription",
              "iam:UpdateAssumeRolePolicy",
              "iam:PutRolePermissionsBoundary",
              "iam:DeleteRolePermissionsBoundary"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*"
            ],
            "Condition": {
              "StringNotEquals": {
                "aws:PrincipalOrgMasterAccountId": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "IAMRoleReadActions",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:ListRoles"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "IAMRoleCleanupActions",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole",
              "iam:DeleteRolePolicy",
              "iam:DetachRolePolicy",
              "iam:ListRolePolicies",
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-reserved/sso.amazonaws.com/*"
            ]
          },
          {
            "Sid": "IAMSLRCleanupActions",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus",
              "iam:DeleteRole",
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO"
            ]
          },
          {
            "Sid": "IAMSAMLProviderCreationAction",
            "Effect": "Allow",
            "Action": [
              "iam:CreateSAMLProvider"
            ],
            "Resource": [
              "arn:aws:iam::*:saml-provider/AWSSSO_*"
            ],
            "Condition": {
              "StringNotEquals": {
                "aws:PrincipalOrgMasterAccountId": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "IAMSAMLProviderUpdateAction",
            "Effect": "Allow",
            "Action": [
              "iam:UpdateSAMLProvider"
            ],
            "Resource": [
              "arn:aws:iam::*:saml-provider/AWSSSO_*"
            ]
          },
          {
            "Sid": "IAMSAMLProviderCleanupActions",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteSAMLProvider",
              "iam:GetSAMLProvider"
            ],
            "Resource": [
              "arn:aws:iam::*:saml-provider/AWSSSO_*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowUnauthAppForDirectory",
            "Effect": "Allow",
            "Action": [
              "ds:UnauthorizeApplication"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowDescribeForDirectory",
            "Effect": "Allow",
            "Action": [
              "ds:DescribeDirectories",
              "ds:DescribeTrusts"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowDescribeAndListOperationsOnIdentitySource",
            "Effect": "Allow",
            "Action": [
              "identitystore:DescribeUser",
              "identitystore:DescribeGroup",
              "identitystore:ListGroups",
              "identitystore:ListUsers"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ElastiCacheServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ElastiCacheManagementActions",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:RevokeSecurityGroupIngress",
              "cloudwatch:PutMetricData",
              "outposts:GetOutpost",
              "outposts:GetOutpostInstanceTypes",
              "outposts:ListOutposts",
              "outposts:ListSites"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateDeleteVPCEndpoints",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringLike": {
                "ec2:VpceServiceName": "com.amazonaws.elasticache.serverless.*"
              }
            }
          },
          {
            "Sid": "TagVPCEndpointsOnCreation",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint",
                "aws:RequestTag/AmazonElastiCacheManaged": "true"
              }
            }
          },
          {
            "Sid": "ModifyVpcEndpoints",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AmazonElastiCacheManaged": "true"
              }
            }
          },
          {
            "Sid": "AllowAccessToElastiCacheTaggedVpcEndpoints",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:ModifyVpcEndpoint"
            ],
            "NotResource": "arn:aws:ec2:*:*:vpc-endpoint/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTOTAUpdate",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "iot:CreateJob",
            "signer:DescribeSigningJob"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSElementalMediaPackageFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": "mediapackage:*",
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSElementalMediaPackageReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "mediapackage:List*",
            "mediapackage:Describe*"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AmazonRDSServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CrossRegionCommunication",
            "Effect": "Allow",
            "Action": [
              "rds:CrossRegionCommunication"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Ec2",
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress",
              "ec2:AssociateAddress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateCoipPoolPermission",
              "ec2:CreateLocalGatewayRouteTablePermission",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteCoipPoolPermission",
              "ec2:DeleteLocalGatewayRouteTablePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCoipPools",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeLocalGatewayRouteTablePermissions",
              "ec2:DescribeLocalGatewayRouteTables",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
              "ec2:DescribeLocalGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "ec2:DisassociateAddress",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ModifyVpcEndpoint",
              "ec2:ReleaseAddress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeVpcEndpoints",
              "ec2:DeleteVpcEndpoints",
              "ec2:AssignPrivateIpAddresses",
              "ec2:UnassignPrivateIpAddresses"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchLogs",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/rds/*",
              "arn:aws:logs:*:*:log-group:/aws/docdb/*",
              "arn:aws:logs:*:*:log-group:/aws/neptune/*"
            ]
          },
          {
            "Sid": "CloudWatchStreams",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
              "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*",
              "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
            ]
          },
          {
            "Sid": "Kinesis",
            "Effect": "Allow",
            "Action": [
              "kinesis:CreateStream",
              "kinesis:PutRecord",
              "kinesis:PutRecords",
              "kinesis:DescribeStream",
              "kinesis:SplitShard",
              "kinesis:MergeShards",
              "kinesis:DeleteStream",
              "kinesis:UpdateShardCount"
            ],
            "Resource": [
              "arn:aws:kinesis:*:*:stream/aws-rds-das-*"
            ]
          },
          {
            "Sid": "CloudWatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/DocDB",
                  "AWS/Neptune",
                  "AWS/RDS",
                  "AWS/Usage"
                ]
              }
            }
          },
          {
            "Sid": "SecretsManagerPassword",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetRandomPassword"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerSecret",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DeleteSecret",
              "secretsmanager:DescribeSecret",
              "secretsmanager:PutSecretValue",
              "secretsmanager:RotateSecret",
              "secretsmanager:UpdateSecret",
              "secretsmanager:UpdateSecretVersionStage",
              "secretsmanager:ListSecretVersionIds"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:rds!*"
            ],
            "Condition": {
              "StringLike": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds"
              }
            }
          },
          {
            "Sid": "SecretsManagerTags",
            "Effect": "Allow",
            "Action": "secretsmanager:TagResource",
            "Resource": "arn:aws:secretsmanager:*:*:secret:rds!*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws:rds:primaryDBInstanceArn",
                  "aws:rds:primaryDBClusterArn"
                ]
              },
              "StringLike": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AutoScalingServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EC2InstanceManagement",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachClassicLinkVpc",
              "ec2:CancelSpotInstanceRequests",
              "ec2:CreateFleet",
              "ec2:CreateTags",
              "ec2:DeleteTags",
              "ec2:Describe*",
              "ec2:DetachClassicLinkVpc",
              "ec2:GetInstanceTypesFromInstanceRequirements",
              "ec2:GetSecurityGroupsForVpc",
              "ec2:ModifyInstanceAttribute",
              "ec2:RequestSpotInstances",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2InstanceProfileManagement",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ec2.amazonaws.com*"
              }
            }
          },
          {
            "Sid": "EC2SpotManagement",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "spot.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ELBManagement",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:Register*",
              "elasticloadbalancing:Deregister*",
              "elasticloadbalancing:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CWManagement",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:PutMetricAlarm"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SNSManagement",
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EventBridgeRuleManagement",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets",
              "events:DeleteRule",
              "events:DescribeRule"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "autoscaling.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SystemsManagerParameterManagement",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameters"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VpcLatticeManagement",
            "Effect": "Allow",
            "Action": [
              "vpc-lattice:DeregisterTargets",
              "vpc-lattice:GetTargetGroup",
              "vpc-lattice:ListTargets",
              "vpc-lattice:ListTargetGroups",
              "vpc-lattice:RegisterTargets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53AutoNamingReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "servicediscovery:Get*",
              "servicediscovery:List*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53AutoNamingFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53:GetHostedZone",
              "route53:ListHostedZonesByName",
              "route53:CreateHostedZone",
              "route53:DeleteHostedZone",
              "route53:ChangeResourceRecordSets",
              "route53:CreateHealthCheck",
              "route53:GetHealthCheck",
              "route53:DeleteHealthCheck",
              "route53:UpdateHealthCheck",
              "ec2:DescribeVpcs",
              "ec2:DescribeRegions",
              "servicediscovery:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingSageMakerEndpointPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SageMaker",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeInferenceComponent",
              "sagemaker:UpdateEndpointWeightsAndCapacities",
              "sagemaker:UpdateInferenceComponentRuntimeConfig",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SageMakerCloudWatchUpdate",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogAdminFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStacks",
              "cloudformation:SetStackPolicy",
              "cloudformation:UpdateStack",
              "cloudformation:CreateChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:ListChangeSets",
              "cloudformation:DeleteChangeSet",
              "cloudformation:ListStackResources",
              "cloudformation:TagResource",
              "cloudformation:CreateStackSet",
              "cloudformation:CreateStackInstances",
              "cloudformation:UpdateStackSet",
              "cloudformation:UpdateStackInstances",
              "cloudformation:DeleteStackSet",
              "cloudformation:DeleteStackInstances",
              "cloudformation:DescribeStackSet",
              "cloudformation:DescribeStackInstance",
              "cloudformation:DescribeStackSetOperation",
              "cloudformation:ListStackInstances",
              "cloudformation:ListStackSetOperations",
              "cloudformation:ListStackSetOperationResults"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/SC-*",
              "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
              "arn:aws:cloudformation:*:*:changeSet/SC-*",
              "arn:aws:cloudformation:*:*:stackset/SC-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateUploadBucket",
              "cloudformation:GetTemplateSummary",
              "cloudformation:ValidateTemplate",
              "iam:GetGroup",
              "iam:GetRole",
              "iam:GetUser",
              "iam:ListGroups",
              "iam:ListRoles",
              "iam:ListUsers",
              "servicecatalog:Get*",
              "servicecatalog:Scan*",
              "servicecatalog:Search*",
              "servicecatalog:List*",
              "servicecatalog:TagResource",
              "servicecatalog:UntagResource",
              "servicecatalog:SyncResource",
              "ssm:DescribeDocument",
              "ssm:GetAutomationExecution",
              "ssm:ListDocuments",
              "ssm:ListDocumentVersions",
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicecatalog:Accept*",
              "servicecatalog:Associate*",
              "servicecatalog:Batch*",
              "servicecatalog:Copy*",
              "servicecatalog:Create*",
              "servicecatalog:Delete*",
              "servicecatalog:Describe*",
              "servicecatalog:Disable*",
              "servicecatalog:Disassociate*",
              "servicecatalog:Enable*",
              "servicecatalog:Execute*",
              "servicecatalog:Import*",
              "servicecatalog:Provision*",
              "servicecatalog:Put*",
              "servicecatalog:Reject*",
              "servicecatalog:Terminate*",
              "servicecatalog:Update*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "servicecatalog.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/orgsdatasync.servicecatalog.amazonaws.com/AWSServiceRoleForServiceCatalogOrgsDataSync",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "orgsdatasync.servicecatalog.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogEndUserFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStacks",
              "cloudformation:SetStackPolicy",
              "cloudformation:ValidateTemplate",
              "cloudformation:UpdateStack",
              "cloudformation:CreateChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:ListChangeSets",
              "cloudformation:DeleteChangeSet",
              "cloudformation:TagResource",
              "cloudformation:CreateStackSet",
              "cloudformation:CreateStackInstances",
              "cloudformation:UpdateStackSet",
              "cloudformation:UpdateStackInstances",
              "cloudformation:DeleteStackSet",
              "cloudformation:DeleteStackInstances",
              "cloudformation:DescribeStackSet",
              "cloudformation:DescribeStackInstance",
              "cloudformation:DescribeStackSetOperation",
              "cloudformation:ListStackInstances",
              "cloudformation:ListStackResources",
              "cloudformation:ListStackSetOperations",
              "cloudformation:ListStackSetOperationResults"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/SC-*",
              "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
              "arn:aws:cloudformation:*:*:changeSet/SC-*",
              "arn:aws:cloudformation:*:*:stackset/SC-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:GetTemplateSummary",
              "servicecatalog:DescribeProduct",
              "servicecatalog:DescribeProductView",
              "servicecatalog:DescribeProvisioningParameters",
              "servicecatalog:ListLaunchPaths",
              "servicecatalog:ProvisionProduct",
              "servicecatalog:SearchProducts",
              "ssm:DescribeDocument",
              "ssm:GetAutomationExecution",
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicecatalog:DescribeProvisionedProduct",
              "servicecatalog:DescribeRecord",
              "servicecatalog:ListRecordHistory",
              "servicecatalog:ListStackInstancesForProvisionedProduct",
              "servicecatalog:ScanProvisionedProducts",
              "servicecatalog:TerminateProvisionedProduct",
              "servicecatalog:UpdateProvisionedProduct",
              "servicecatalog:SearchProvisionedProducts",
              "servicecatalog:CreateProvisionedProductPlan",
              "servicecatalog:DescribeProvisionedProductPlan",
              "servicecatalog:ExecuteProvisionedProductPlan",
              "servicecatalog:DeleteProvisionedProductPlan",
              "servicecatalog:ListProvisionedProductPlans",
              "servicecatalog:ListServiceActionsForProvisioningArtifact",
              "servicecatalog:ExecuteProvisionedProductServiceAction",
              "servicecatalog:DescribeServiceActionExecutionParameters"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "servicecatalog:userLevel": "self"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSTrustedAdvisorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "TrustedAdvisorServiceRolePermissions",
            "Effect": "Allow",
            "Action": [
              "access-analyzer:ListAnalyzers",
              "autoscaling:DescribeAccountLimits",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeLaunchConfigurations",
              "ce:GetReservationPurchaseRecommendation",
              "ce:GetSavingsPlansPurchaseRecommendation",
              "cloudformation:DescribeAccountLimits",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks",
              "cloudfront:ListDistributions",
              "cloudtrail:DescribeTrails",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:GetTrail",
              "cloudtrail:ListTrails",
              "cloudtrail:GetEventSelectors",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "dax:DescribeClusters",
              "dynamodb:DescribeLimits",
              "dynamodb:DescribeTable",
              "dynamodb:ListTables",
              "ec2:DescribeAddresses",
              "ec2:DescribeReservedInstances",
              "ec2:DescribeInstances",
              "ec2:DescribeVpcs",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeImages",
              "ec2:DescribeNatGateways",
              "ec2:DescribeVolumes",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeRegions",
              "ec2:DescribeReservedInstancesOfferings",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSnapshots",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:GetManagedPrefixListEntries",
              "ecs:DescribeTaskDefinition",
              "ecs:ListTaskDefinitions",
              "elasticloadbalancing:DescribeAccountLimits",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancerPolicies",
              "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "iam:GenerateCredentialReport",
              "iam:GetAccountPasswordPolicy",
              "iam:GetAccountSummary",
              "iam:GetCredentialReport",
              "iam:GetServerCertificate",
              "iam:ListServerCertificates",
              "iam:ListSAMLProviders",
              "kinesis:DescribeLimits",
              "kafka:DescribeClusterV2",
              "kafka:ListClustersV2",
              "kafka:ListNodes",
              "network-firewall:ListFirewalls",
              "network-firewall:DescribeFirewall",
              "outposts:ListAssets",
              "outposts:GetOutpost",
              "outposts:ListOutposts",
              "rds:DescribeAccountAttributes",
              "rds:DescribeDBClusters",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBSnapshots",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEngineDefaultParameters",
              "rds:DescribeEvents",
              "rds:DescribeOptionGroupOptions",
              "rds:DescribeOptionGroups",
              "rds:DescribeOrderableDBInstanceOptions",
              "rds:DescribeReservedDBInstances",
              "rds:DescribeReservedDBInstancesOfferings",
              "rds:ListTagsForResource",
              "redshift:DescribeClusters",
              "redshift:DescribeReservedNodeOfferings",
              "redshift:DescribeReservedNodes",
              "route53:GetAccountLimit",
              "route53:GetHealthCheck",
              "route53:GetHostedZone",
              "route53:ListHealthChecks",
              "route53:ListHostedZones",
              "route53:ListHostedZonesByName",
              "route53:ListResourceRecordSets",
              "route53resolver:ListResolverEndpoints",
              "route53resolver:ListResolverEndpointIpAddresses",
              "s3:GetAccountPublicAccessBlock",
              "s3:GetBucketAcl",
              "s3:GetBucketPolicy",
              "s3:GetBucketPolicyStatus",
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:GetBucketVersioning",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetLifecycleConfiguration",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "ses:GetSendQuota",
              "sqs:GetQueueAttributes",
              "sqs:ListQueues"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonESCognitoAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-idp:DescribeUserPool",
              "cognito-idp:CreateUserPoolClient",
              "cognito-idp:DeleteUserPoolClient",
              "cognito-idp:UpdateUserPoolClient",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:AdminInitiateAuth",
              "cognito-idp:AdminUserGlobalSignOut",
              "cognito-idp:ListUserPoolClients",
              "cognito-identity:DescribeIdentityPool",
              "cognito-identity:UpdateIdentityPool",
              "cognito-identity:SetIdentityPoolRoles",
              "cognito-identity:GetIdentityPoolRoles"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "cognito-identity.amazonaws.com",
                  "cognito-identity-us-gov.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBatchServiceEventTargetRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "batch:SubmitJob"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "DAXServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElementalMediaStoreFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "mediastore:*"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "Bool": {
                "aws:SecureTransport": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchAgentAdminPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CWACloudWatchPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData",
              "ec2:DescribeTags",
              "logs:PutLogEvents",
              "logs:PutRetentionPolicy",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
              "xray:GetSamplingStatisticSummaries"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CWASSMPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameter",
              "ssm:PutParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchAgentServerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CWACloudWatchServerPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData",
              "ec2:DescribeVolumes",
              "ec2:DescribeTags",
              "logs:PutLogEvents",
              "logs:PutRetentionPolicy",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
              "xray:GetSamplingStatisticSummaries"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CWASSMServerPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceGroupsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "resource-groups:Get*",
              "resource-groups:List*",
              "resource-groups:Search*",
              "tag:Get*",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources",
              "ec2:DescribeInstances",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeVolumes",
              "ec2:DescribeVpcs",
              "elasticache:DescribeCacheClusters",
              "elasticache:DescribeSnapshots",
              "elasticache:ListTagsForResource",
              "elasticbeanstalk:DescribeEnvironments",
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:ListClusters",
              "glacier:ListVaults",
              "glacier:DescribeVault",
              "glacier:ListTagsForVault",
              "kinesis:ListStreams",
              "kinesis:DescribeStream",
              "kinesis:ListTagsForStream",
              "opsworks:DescribeStacks",
              "opsworks:ListTags",
              "rds:DescribeDBInstances",
              "rds:DescribeDBSnapshots",
              "rds:ListTagsForResource",
              "redshift:DescribeClusters",
              "redshift:DescribeTags",
              "route53domains:ListDomains",
              "route53:ListHealthChecks",
              "route53:GetHealthCheck",
              "route53:ListHostedZones",
              "route53:GetHostedZone",
              "route53:ListTagsForResource",
              "storagegateway:ListGateways",
              "storagegateway:DescribeGatewayInformation",
              "storagegateway:ListTagsForResource",
              "s3:ListAllMyBuckets",
              "s3:GetBucketTagging",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTags",
              "ssm:ListDocuments"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElementalMediaStoreReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "mediastore:Get*",
              "mediastore:List*",
              "mediastore:Describe*"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "Bool": {
                "aws:SecureTransport": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53AutoNamingRegistrantAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53:GetHostedZone",
              "route53:ListHostedZonesByName",
              "route53:ChangeResourceRecordSets",
              "route53:CreateHealthCheck",
              "route53:GetHealthCheck",
              "route53:DeleteHealthCheck",
              "route53:UpdateHealthCheck",
              "servicediscovery:Get*",
              "servicediscovery:List*",
              "servicediscovery:RegisterInstance",
              "servicediscovery:DeregisterInstance"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSConfigRoleForOrganizations",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListAccounts",
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppSyncAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appsync:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "appsync.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "appsync.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/appsync.amazonaws.com/AWSServiceRoleForAppSync*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppSyncSchemaAuthor",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appsync:GraphQL",
              "appsync:CreateResolver",
              "appsync:CreateType",
              "appsync:DeleteResolver",
              "appsync:DeleteType",
              "appsync:GetResolver",
              "appsync:GetType",
              "appsync:GetDataSource",
              "appsync:GetSchemaCreationStatus",
              "appsync:GetIntrospectionSchema",
              "appsync:GetGraphqlApi",
              "appsync:ListTypes",
              "appsync:ListApiKeys",
              "appsync:ListResolvers",
              "appsync:ListDataSources",
              "appsync:ListGraphqlApis",
              "appsync:StartSchemaCreation",
              "appsync:UpdateResolver",
              "appsync:UpdateType",
              "appsync:TagResource",
              "appsync:UntagResource",
              "appsync:ListTagsForResource",
              "appsync:CreateFunction",
              "appsync:UpdateFunction",
              "appsync:GetFunction",
              "appsync:DeleteFunction",
              "appsync:ListFunctions",
              "appsync:ListResolversByFunction",
              "appsync:EvaluateMappingTemplate",
              "appsync:EvaluateCode"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppSyncInvokeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appsync:GraphQL",
              "appsync:GetGraphqlApi",
              "appsync:ListGraphqlApis",
              "appsync:ListApiKeys"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSEC2FleetServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeSubnets",
              "ec2:RequestSpotInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:RunInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EC2SpotManagement",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "spot.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:spot-instances-request/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "RunInstances"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:ec2:fleet-id": "*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "FMSServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "WafGeneral",
            "Effect": "Allow",
            "Action": [
              "waf:UpdateWebACL",
              "waf:DeleteWebACL",
              "waf:GetWebACL",
              "waf:GetRuleGroup",
              "waf:ListSubscribedRuleGroups",
              "waf-regional:UpdateWebACL",
              "waf-regional:DeleteWebACL",
              "waf-regional:GetWebACL",
              "waf-regional:GetRuleGroup",
              "waf-regional:ListSubscribedRuleGroups",
              "waf-regional:ListResourcesForWebACL",
              "waf-regional:AssociateWebACL",
              "waf-regional:DisassociateWebACL",
              "elasticloadbalancing:SetWebACL",
              "apigateway:SetWebACL",
              "elasticloadbalancing:SetSecurityGroups",
              "waf:ListTagsForResource",
              "waf-regional:ListTagsForResource"
            ],
            "Resource": [
              "arn:aws:waf:*:*:webacl/*",
              "arn:aws:waf-regional:*:*:webacl/*",
              "arn:aws:waf:*:*:rulegroup/*",
              "arn:aws:waf-regional:*:*:rulegroup/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*",
              "arn:aws:apigateway:*::/restapis/*/stages/*"
            ]
          },
          {
            "Sid": "Wafv2Logging",
            "Effect": "Allow",
            "Action": [
              "wafv2:PutLoggingConfiguration",
              "wafv2:GetLoggingConfiguration",
              "wafv2:ListLoggingConfigurations",
              "wafv2:DeleteLoggingConfiguration"
            ],
            "Resource": [
              "arn:aws:wafv2:*:*:regional/webacl/*",
              "arn:aws:wafv2:*:*:global/webacl/*"
            ]
          },
          {
            "Sid": "WafWebaclCreation",
            "Effect": "Allow",
            "Action": [
              "waf:CreateWebACL",
              "waf-regional:CreateWebACL",
              "waf:GetChangeToken",
              "waf-regional:GetChangeToken",
              "waf-regional:GetWebACLForResource"
            ],
            "Resource": [
              "arn:aws:waf:*:*:*",
              "arn:aws:waf-regional:*:*:*"
            ]
          },
          {
            "Sid": "ElbGeneral",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
              "elasticloadbalancing:DescribeTags"
            ],
            "Resource": "*"
          },
          {
            "Sid": "WafPermissionPolicy",
            "Effect": "Allow",
            "Action": [
              "waf:PutPermissionPolicy",
              "waf:GetPermissionPolicy",
              "waf:DeletePermissionPolicy",
              "waf-regional:PutPermissionPolicy",
              "waf-regional:GetPermissionPolicy",
              "waf-regional:DeletePermissionPolicy"
            ],
            "Resource": [
              "arn:aws:waf:*:*:webacl/*",
              "arn:aws:waf:*:*:rulegroup/*",
              "arn:aws:waf-regional:*:*:webacl/*",
              "arn:aws:waf-regional:*:*:rulegroup/*"
            ]
          },
          {
            "Sid": "CloudfrontGeneral",
            "Effect": "Allow",
            "Action": [
              "cloudfront:GetDistribution",
              "cloudfront:UpdateDistribution",
              "cloudfront:ListDistributionsByWebACLId",
              "cloudfront:ListDistributions",
              "cloudfront:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConfigScoped",
            "Effect": "Allow",
            "Action": [
              "config:DeleteConfigRule",
              "config:GetComplianceDetailsByConfigRule",
              "config:PutConfigRule",
              "config:StartConfigRulesEvaluation",
              "config:DeleteEvaluationResults"
            ],
            "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/fms.amazonaws.com/*"
          },
          {
            "Sid": "ConfigUnscoped",
            "Effect": "Allow",
            "Action": [
              "config:DescribeComplianceByConfigRule",
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus",
              "config:DescribeConfigRules",
              "config:DescribeConfigRuleEvaluationStatus",
              "config:PutConfigurationRecorder",
              "config:StartConfigurationRecorder",
              "config:PutDeliveryChannel",
              "config:DescribeDeliveryChannels",
              "config:DescribeDeliveryChannelStatus",
              "config:GetComplianceSummaryByConfigRule",
              "config:GetDiscoveredResourceCounts",
              "config:PutEvaluations",
              "config:SelectResourceConfig"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SlrDeletion",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/fms.amazonaws.com/AWSServiceRoleForFMS"
            ]
          },
          {
            "Sid": "OrganizationsGeneral",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:DescribeOrganizationalUnit",
              "organizations:ListChildren",
              "organizations:ListRoots",
              "organizations:ListParents",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ShieldGeneral",
            "Effect": "Allow",
            "Action": [
              "shield:CreateProtection",
              "shield:DeleteProtection",
              "shield:DescribeProtection",
              "shield:ListProtections",
              "shield:ListAttacks",
              "shield:CreateSubscription",
              "shield:DescribeSubscription",
              "shield:GetSubscriptionState",
              "shield:DescribeDRTAccess",
              "shield:DescribeEmergencyContactSettings",
              "shield:UpdateEmergencyContactSettings",
              "elasticloadbalancing:DescribeLoadBalancers",
              "ec2:DescribeAddresses",
              "shield:EnableApplicationLayerAutomaticResponse",
              "shield:DisableApplicationLayerAutomaticResponse",
              "shield:UpdateApplicationLayerAutomaticResponse"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2SecurityGroupScoped",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:DeleteSecurityGroup",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
              "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Sid": "SecurityGroupTagCreation",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateSecurityGroup"
              }
            }
          },
          {
            "Sid": "SecurityGroupTagManagement",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteTags",
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/FMManaged": "*"
              }
            }
          },
          {
            "Sid": "Ec2Unscoped",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup",
              "ec2:DescribeSecurityGroupReferences",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeStaleSecurityGroups",
              "ec2:DescribeNetworkInterfaces",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeInstances",
              "ec2:AssociateRouteTable",
              "ec2:CreateSubnet",
              "ec2:CreateRouteTable",
              "ec2:DeleteSubnet",
              "ec2:DisassociateRouteTable",
              "ec2:ReplaceRouteTableAssociation"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "Wafv2General",
            "Effect": "Allow",
            "Action": [
              "wafv2:TagResource",
              "wafv2:ListResourcesForWebACL",
              "wafv2:AssociateWebACL",
              "wafv2:ListTagsForResource",
              "wafv2:UntagResource",
              "wafv2:GetWebACL",
              "wafv2:DisassociateFirewallManager",
              "wafv2:DeleteWebACL",
              "wafv2:DisassociateWebACL"
            ],
            "Resource": [
              "arn:aws:wafv2:*:*:global/webacl/*",
              "arn:aws:wafv2:*:*:regional/webacl/*"
            ]
          },
          {
            "Sid": "Wafv2WebAclAndRuleGroupMutation",
            "Effect": "Allow",
            "Action": [
              "wafv2:UpdateWebACL",
              "wafv2:CreateWebACL",
              "wafv2:DeleteFirewallManagerRuleGroups",
              "wafv2:PutFirewallManagerRuleGroups"
            ],
            "Resource": [
              "arn:aws:wafv2:*:*:global/webacl/*",
              "arn:aws:wafv2:*:*:regional/webacl/*",
              "arn:aws:wafv2:*:*:global/rulegroup/*",
              "arn:aws:wafv2:*:*:regional/rulegroup/*",
              "arn:aws:wafv2:*:*:global/managedruleset/*",
              "arn:aws:wafv2:*:*:regional/managedruleset/*",
              "arn:aws:wafv2:*:*:global/ipset/*",
              "arn:aws:wafv2:*:*:regional/ipset/*",
              "arn:aws:wafv2:*:*:global/regexpatternset/*",
              "arn:aws:wafv2:*:*:regional/regexpatternset/*"
            ]
          },
          {
            "Sid": "Wafv2PermissionPolicy",
            "Effect": "Allow",
            "Action": [
              "wafv2:PutPermissionPolicy",
              "wafv2:GetPermissionPolicy",
              "wafv2:DeletePermissionPolicy"
            ],
            "Resource": [
              "arn:aws:wafv2:*:*:global/rulegroup/*",
              "arn:aws:wafv2:*:*:regional/rulegroup/*"
            ]
          },
          {
            "Sid": "Wafv2WebaclDescribe",
            "Effect": "Allow",
            "Action": [
              "wafv2:GetWebACLForResource"
            ],
            "Resource": [
              "arn:aws:wafv2:*:*:regional/webacl/*"
            ]
          },
          {
            "Sid": "RouteTableTagManagement",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:route-table/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateRouteTable"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Name",
                  "FMManaged"
                ]
              }
            }
          },
          {
            "Sid": "SubnetTagManagement",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Name",
                  "FMManaged"
                ]
              }
            }
          },
          {
            "Sid": "VPCEndpointTagManagement",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Name",
                  "FMManaged"
                ]
              }
            }
          },
          {
            "Sid": "RouteTableCleanup",
            "Effect": "Allow",
            "Action": "ec2:DeleteRouteTable",
            "Resource": "arn:aws:ec2:*:*:route-table/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/FMManaged": "true"
              }
            }
          },
          {
            "Sid": "Ec2DescribeUnscoped",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInternetGateways",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeAvailabilityZones"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateVpcEndpointScoped",
            "Effect": "Allow",
            "Action": "ec2:CreateVpcEndpoint",
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/FMManaged": [
                  "true"
                ]
              }
            }
          },
          {
            "Sid": "CreateVpcEndpointUnscoped",
            "Effect": "Allow",
            "Action": "ec2:CreateVpcEndpoint",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:vpc/*"
            ]
          },
          {
            "Sid": "VpcEndpointsDeletion",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/FMManaged": "true"
              }
            }
          },
          {
            "Sid": "RamTagManagement",
            "Effect": "Allow",
            "Action": [
              "ram:TagResource"
            ],
            "Resource": [
              "arn:aws:ram:*:*:resource-share/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Name",
                  "FMManaged"
                ]
              }
            }
          },
          {
            "Sid": "RamMutation",
            "Effect": "Allow",
            "Action": [
              "ram:AssociateResourceShare",
              "ram:UpdateResourceShare",
              "ram:DeleteResourceShare"
            ],
            "Resource": "arn:aws:ram:*:*:resource-share/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/FMManaged": "true"
              }
            }
          },
          {
            "Sid": "RamCreation",
            "Effect": "Allow",
            "Action": "ram:CreateResourceShare",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Name",
                  "FMManaged"
                ]
              },
              "StringEquals": {
                "aws:RequestTag/FMManaged": [
                  "true"
                ]
              }
            }
          },
          {
            "Sid": "RamDescribe",
            "Effect": "Allow",
            "Action": [
              "ram:GetResourceShareAssociations",
              "ram:GetResourceShares"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SlrCreation",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "network-firewall.amazonaws.com",
                  "shield.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "IamDescribe",
            "Effect": "Allow",
            "Action": "iam:GetRole",
            "Resource": "*"
          },
          {
            "Sid": "NetworkFirewallTagManagement",
            "Effect": "Allow",
            "Action": [
              "network-firewall:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Name",
                  "FMManaged"
                ]
              }
            }
          },
          {
            "Sid": "NetworkFirewallGeneral",
            "Effect": "Allow",
            "Action": [
              "network-firewall:AssociateSubnets",
              "network-firewall:CreateFirewall",
              "network-firewall:CreateFirewallPolicy",
              "network-firewall:DisassociateSubnets",
              "network-firewall:UpdateFirewallDeleteProtection",
              "network-firewall:UpdateFirewallPolicy",
              "network-firewall:UpdateFirewallPolicyChangeProtection",
              "network-firewall:UpdateSubnetChangeProtection",
              "network-firewall:AssociateFirewallPolicy",
              "network-firewall:DescribeFirewall",
              "network-firewall:DescribeFirewallPolicy",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:ListFirewallPolicies",
              "network-firewall:ListFirewalls",
              "network-firewall:ListRuleGroups",
              "network-firewall:PutResourcePolicy",
              "network-firewall:DescribeResourcePolicy",
              "network-firewall:DeleteResourcePolicy",
              "network-firewall:DescribeLoggingConfiguration",
              "network-firewall:UpdateLoggingConfiguration",
              "network-firewall:DescribeTLSInspectionConfiguration",
              "network-firewall:ListTLSInspectionConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "NetworkFirewallCleanup",
            "Effect": "Allow",
            "Action": [
              "network-firewall:DeleteFirewallPolicy",
              "network-firewall:DeleteFirewall"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/FMManaged": "true"
              }
            }
          },
          {
            "Sid": "LogsGeneral",
            "Effect": "Allow",
            "Action": [
              "logs:ListLogDeliveries",
              "logs:CreateLogDelivery",
              "logs:GetLogDelivery",
              "logs:UpdateLogDelivery",
              "logs:DeleteLogDelivery"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Route53ResolverRuleGroupUnscoped",
            "Effect": "Allow",
            "Action": [
              "route53resolver:ListFirewallRuleGroupAssociations",
              "route53resolver:ListTagsForResource",
              "route53resolver:ListFirewallRuleGroups",
              "route53resolver:GetFirewallRuleGroupAssociation",
              "route53resolver:GetFirewallRuleGroup",
              "route53resolver:GetFirewallRuleGroupPolicy",
              "route53resolver:PutFirewallRuleGroupPolicy"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Route53ResolverRuleGroupCleanup",
            "Effect": "Allow",
            "Action": [
              "route53resolver:UpdateFirewallRuleGroupAssociation",
              "route53resolver:DisassociateFirewallRuleGroup"
            ],
            "Resource": "arn:aws:route53resolver:*:*:firewall-rule-group-association/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/FMManaged": "true"
              }
            }
          },
          {
            "Sid": "Route53ResolverRuleGroupScoped",
            "Effect": "Allow",
            "Action": [
              "route53resolver:AssociateFirewallRuleGroup",
              "route53resolver:TagResource"
            ],
            "Resource": "arn:aws:route53resolver:*:*:firewall-rule-group-association/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/FMManaged": "true"
              }
            }
          },
          {
            "Sid": "NaclTagCreation",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-acl/*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Name",
                  "FMManaged",
                  "FMPolicies"
                ]
              },
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkAcl"
              }
            }
          },
          {
            "Sid": "NaclTagManagement",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-acl/*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "Name",
                  "FMManaged",
                  "FMPolicies"
                ]
              },
              "StringEquals": {
                "aws:ResourceTag/FMManaged": "true"
              }
            }
          },
          {
            "Sid": "NaclScoped",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteNetworkAclEntry",
              "ec2:CreateNetworkAclEntry",
              "ec2:ReplaceNetworkAclEntry",
              "ec2:DeleteNetworkAcl"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/FMManaged": "true"
              }
            }
          },
          {
            "Sid": "NaclUnscoped",
            "Effect": "Allow",
            "Action": [
              "ec2:ReplaceNetworkAclAssociation",
              "ec2:DescribeNetworkAcls",
              "ec2:CreateNetworkAcl"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTranscribeReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "transcribe:Get*",
              "transcribe:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTranscribeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "transcribe:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*transcribe*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "SecretsManagerReadWrite",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "BasePermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:*",
              "cloudformation:CreateChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStacks",
              "cloudformation:ExecuteChangeSet",
              "docdb-elastic:GetCluster",
              "docdb-elastic:ListClusters",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "kms:DescribeKey",
              "kms:ListAliases",
              "kms:ListKeys",
              "lambda:ListFunctions",
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstances",
              "redshift:DescribeClusters",
              "redshift-serverless:ListWorkgroups",
              "redshift-serverless:GetNamespace",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LambdaPermissions",
            "Effect": "Allow",
            "Action": [
              "lambda:AddPermission",
              "lambda:CreateFunction",
              "lambda:GetFunction",
              "lambda:InvokeFunction",
              "lambda:UpdateFunctionConfiguration"
            ],
            "Resource": "arn:aws:lambda:*:*:function:SecretsManager*"
          },
          {
            "Sid": "SARPermissions",
            "Effect": "Allow",
            "Action": [
              "serverlessrepo:CreateCloudFormationChangeSet",
              "serverlessrepo:GetApplication"
            ],
            "Resource": "arn:aws:serverlessrepo:*:*:applications/SecretsManager*"
          },
          {
            "Sid": "S3Permissions",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::awsserverlessrepo-changesets*",
              "arn:aws:s3:::secrets-manager-rotation-apps-*/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppSyncPushToCloudWatchLogs",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSArtifactAccountSync",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListAccounts",
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticTranscoder_FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "elastictranscoder:*",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "iam:ListRoles",
              "sns:ListTopics"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "elastictranscoder.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSBetaServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress",
              "ec2:AssociateAddress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateCoipPoolPermission",
              "ec2:CreateLocalGatewayRouteTablePermission",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteCoipPoolPermission",
              "ec2:DeleteLocalGatewayRouteTablePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCoipPools",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeLocalGatewayRouteTablePermissions",
              "ec2:DescribeLocalGatewayRouteTables",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
              "ec2:DescribeLocalGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "ec2:DisassociateAddress",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ModifyVpcEndpoint",
              "ec2:ReleaseAddress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeVpcEndpoints",
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/rds/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/DocDB",
                  "AWS/Neptune",
                  "AWS/RDS",
                  "AWS/Usage"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetRandomPassword"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DeleteSecret",
              "secretsmanager:DescribeSecret",
              "secretsmanager:PutSecretValue",
              "secretsmanager:RotateSecret",
              "secretsmanager:UpdateSecret",
              "secretsmanager:UpdateSecretVersionStage",
              "secretsmanager:ListSecretVersionIds"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:rds-beta-us-east-1!*"
            ],
            "Condition": {
              "StringLike": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds-beta-us-east-1"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "secretsmanager:TagResource",
            "Resource": "arn:aws:secretsmanager:*:*:secret:rds-beta-us-east-1!*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws:rds:primaryDBInstanceArn",
                  "aws:rds:primaryDBClusterArn"
                ]
              },
              "StringLike": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds-beta-us-east-1"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFMAdminFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "fms:*",
              "waf:*",
              "waf-regional:*",
              "elasticloadbalancing:SetWebACL",
              "firehose:ListDeliveryStreams",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListRoots",
              "organizations:ListChildren",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListOrganizationalUnitsForParent",
              "shield:GetSubscriptionState",
              "route53resolver:ListFirewallRuleGroups",
              "route53resolver:GetFirewallRuleGroup",
              "wafv2:ListRuleGroups",
              "wafv2:ListAvailableManagedRuleGroups",
              "wafv2:CheckCapacity",
              "wafv2:PutLoggingConfiguration",
              "wafv2:ListAvailableManagedRuleGroupVersions",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:DescribeRuleGroupMetadata",
              "network-firewall:ListRuleGroups",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeRegions"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutBucketPolicy",
              "s3:GetBucketPolicy"
            ],
            "Resource": [
              "arn:aws:s3:::aws-waf-logs-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "fms.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess",
              "organizations:ListDelegatedAdministrators",
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "fms.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFMAdminReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "fms:Get*",
              "fms:List*",
              "waf:Get*",
              "waf:List*",
              "waf-regional:Get*",
              "waf-regional:List*",
              "firehose:ListDeliveryStreams",
              "organizations:DescribeOrganization",
              "organizations:DescribeAccount",
              "organizations:ListRoots",
              "organizations:ListChildren",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListOrganizationalUnitsForParent",
              "shield:GetSubscriptionState",
              "route53resolver:ListFirewallRuleGroups",
              "route53resolver:GetFirewallRuleGroup",
              "wafv2:ListRuleGroups",
              "wafv2:ListAvailableManagedRuleGroups",
              "wafv2:CheckCapacity",
              "wafv2:ListAvailableManagedRuleGroupVersions",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:DescribeRuleGroupMetadata",
              "network-firewall:ListRuleGroups",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeRegions"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketPolicy"
            ],
            "Resource": [
              "arn:aws:s3:::aws-waf-logs-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "fms.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFMMemberReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "fms:GetAdminAccount",
              "waf:Get*",
              "waf:List*",
              "waf-regional:Get*",
              "waf-regional:List*",
              "organizations:DescribeOrganization"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoT1ClickReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "iot1click:Describe*",
              "iot1click:Get*",
              "iot1click:List*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoT1ClickFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "iot1click:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSClusterPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:UpdateAutoScalingGroup",
              "ec2:AttachVolume",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateRoute",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTags",
              "ec2:CreateVolume",
              "ec2:DeleteRoute",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteVolume",
              "ec2:DescribeInstances",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumesModifications",
              "ec2:DescribeVpcs",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeAvailabilityZones",
              "ec2:DetachVolume",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifyVolume",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeInternetGateways",
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
              "elasticloadbalancing:AttachLoadBalancerToSubnets",
              "elasticloadbalancing:ConfigureHealthCheck",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:CreateLoadBalancer",
              "elasticloadbalancing:CreateLoadBalancerListeners",
              "elasticloadbalancing:CreateLoadBalancerPolicy",
              "elasticloadbalancing:CreateTargetGroup",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:DeleteLoadBalancerListeners",
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancerPolicies",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DetachLoadBalancerFromSubnets",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:ModifyLoadBalancerAttributes",
              "elasticloadbalancing:ModifyTargetGroup",
              "elasticloadbalancing:ModifyTargetGroupAttributes",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
              "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKS_CNI_Policy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonEKSCNIPolicy",
            "Effect": "Allow",
            "Action": [
              "ec2:AssignPrivateIpAddresses",
              "ec2:AttachNetworkInterface",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeInstances",
              "ec2:DescribeTags",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeSubnets",
              "ec2:DetachNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:UnassignPrivateIpAddresses"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonEKSCNIPolicyENITag",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeInstances",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DetachNetworkInterface",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:ModifyNetworkInterfaceAttribute",
              "iam:ListAttachedRolePolicies",
              "eks:UpdateClusterVersion"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:subnet/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "route53:AssociateVPCWithHostedZone",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
          },
          {
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "eks.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSWorkerNodePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "WorkerNodePermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumesModifications",
              "ec2:DescribeVpcs",
              "eks:DescribeCluster",
              "eks-auth:AssumeRoleForPodIdentity"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "NeptuneReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowReadOnlyPermissionsForRDS",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeAccountAttributes",
              "rds:DescribeCertificates",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBClusters",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBLogFiles",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEventCategories",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeEvents",
              "rds:DescribeGlobalClusters",
              "rds:DescribeOrderableDBInstanceOptions",
              "rds:DescribePendingMaintenanceActions",
              "rds:DownloadDBLogFilePortion",
              "rds:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadOnlyPermissionsForCloudwatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadOnlyPermissionsForEC2",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadOnlyPermissionsForKMS",
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:ListRetirableGrants",
              "kms:ListAliases",
              "kms:ListKeyPolicies"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadOnlyPermissionsForLogs",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogStreams",
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
              "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
            ]
          },
          {
            "Sid": "AllowReadOnlyPermissionsForNeptuneDB",
            "Effect": "Allow",
            "Action": [
              "neptune-db:Read*",
              "neptune-db:Get*",
              "neptune-db:List*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "NeptuneFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowNeptuneCreate",
            "Effect": "Allow",
            "Action": [
              "rds:CreateDBCluster",
              "rds:CreateDBInstance"
            ],
            "Resource": [
              "arn:aws:rds:*:*:*"
            ],
            "Condition": {
              "StringEquals": {
                "rds:DatabaseEngine": [
                  "graphdb",
                  "neptune"
                ]
              }
            }
          },
          {
            "Sid": "AllowManagementPermissionsForRDS",
            "Effect": "Allow",
            "Action": [
              "rds:AddRoleToDBCluster",
              "rds:AddSourceIdentifierToSubscription",
              "rds:AddTagsToResource",
              "rds:ApplyPendingMaintenanceAction",
              "rds:CopyDBClusterParameterGroup",
              "rds:CopyDBClusterSnapshot",
              "rds:CopyDBParameterGroup",
              "rds:CreateDBClusterEndpoint",
              "rds:CreateDBClusterParameterGroup",
              "rds:CreateDBClusterSnapshot",
              "rds:CreateDBParameterGroup",
              "rds:CreateDBSubnetGroup",
              "rds:CreateEventSubscription",
              "rds:CreateGlobalCluster",
              "rds:DeleteDBCluster",
              "rds:DeleteDBClusterEndpoint",
              "rds:DeleteDBClusterParameterGroup",
              "rds:DeleteDBClusterSnapshot",
              "rds:DeleteDBInstance",
              "rds:DeleteDBParameterGroup",
              "rds:DeleteDBSubnetGroup",
              "rds:DeleteEventSubscription",
              "rds:DeleteGlobalCluster",
              "rds:DescribeDBClusterEndpoints",
              "rds:DescribeAccountAttributes",
              "rds:DescribeCertificates",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBClusters",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBLogFiles",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEngineDefaultClusterParameters",
              "rds:DescribeEngineDefaultParameters",
              "rds:DescribeEventCategories",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeEvents",
              "rds:DescribeGlobalClusters",
              "rds:DescribeOptionGroups",
              "rds:DescribeOrderableDBInstanceOptions",
              "rds:DescribePendingMaintenanceActions",
              "rds:DescribeValidDBInstanceModifications",
              "rds:DownloadDBLogFilePortion",
              "rds:FailoverDBCluster",
              "rds:FailoverGlobalCluster",
              "rds:ListTagsForResource",
              "rds:ModifyDBCluster",
              "rds:ModifyDBClusterEndpoint",
              "rds:ModifyDBClusterParameterGroup",
              "rds:ModifyDBClusterSnapshotAttribute",
              "rds:ModifyDBInstance",
              "rds:ModifyDBParameterGroup",
              "rds:ModifyDBSubnetGroup",
              "rds:ModifyEventSubscription",
              "rds:ModifyGlobalCluster",
              "rds:PromoteReadReplicaDBCluster",
              "rds:RebootDBInstance",
              "rds:RemoveFromGlobalCluster",
              "rds:RemoveRoleFromDBCluster",
              "rds:RemoveSourceIdentifierFromSubscription",
              "rds:RemoveTagsFromResource",
              "rds:ResetDBClusterParameterGroup",
              "rds:ResetDBParameterGroup",
              "rds:RestoreDBClusterFromSnapshot",
              "rds:RestoreDBClusterToPointInTime",
              "rds:StartDBCluster",
              "rds:StopDBCluster"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowOtherDepedentPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "kms:ListAliases",
              "kms:ListKeyPolicies",
              "kms:ListKeys",
              "kms:ListRetirableGrants",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "sns:ListSubscriptions",
              "sns:ListTopics",
              "sns:Publish"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowPassRoleForNeptune",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:passedToService": "rds.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowCreateSLRForNeptune",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "rds.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowDataAccessForNeptune",
            "Effect": "Allow",
            "Action": [
              "neptune-db:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSConfigServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSConfigServiceRolePolicyStatementID",
            "Effect": "Allow",
            "Action": [
              "access-analyzer:GetAnalyzer",
              "access-analyzer:GetArchiveRule",
              "access-analyzer:ListAnalyzers",
              "access-analyzer:ListArchiveRules",
              "access-analyzer:ListTagsForResource",
              "account:GetAlternateContact",
              "acm-pca:DescribeCertificateAuthority",
              "acm-pca:GetCertificateAuthorityCertificate",
              "acm-pca:GetCertificateAuthorityCsr",
              "acm-pca:ListCertificateAuthorities",
              "acm-pca:ListTags",
              "acm:DescribeCertificate",
              "acm:ListCertificates",
              "acm:ListTagsForCertificate",
              "airflow:GetEnvironment",
              "airflow:ListEnvironments",
              "airflow:ListTagsForResource",
              "amplify:GetApp",
              "amplify:GetBranch",
              "amplify:ListApps",
              "amplify:ListBranches",
              "amplifyuibuilder:ExportThemes",
              "amplifyuibuilder:GetTheme",
              "amplifyuibuilder:ListThemes",
              "app-integrations:GetEventIntegration",
              "app-integrations:ListEventIntegrationAssociations",
              "app-integrations:ListEventIntegrations",
              "appconfig:GetApplication",
              "appconfig:GetConfigurationProfile",
              "appconfig:GetDeployment",
              "appconfig:GetDeploymentStrategy",
              "appconfig:GetEnvironment",
              "appconfig:GetExtensionAssociation",
              "appconfig:GetHostedConfigurationVersion",
              "appconfig:ListApplications",
              "appconfig:ListConfigurationProfiles",
              "appconfig:ListDeployments",
              "appconfig:ListDeploymentStrategies",
              "appconfig:ListEnvironments",
              "appconfig:ListExtensionAssociations",
              "appconfig:ListHostedConfigurationVersions",
              "appconfig:ListTagsForResource",
              "appflow:DescribeConnectorProfiles",
              "appflow:DescribeFlow",
              "appflow:ListFlows",
              "appflow:ListTagsForResource",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingPolicies",
              "appmesh:DescribeGatewayRoute",
              "appmesh:DescribeMesh",
              "appmesh:DescribeRoute",
              "appmesh:DescribeVirtualGateway",
              "appmesh:DescribeVirtualNode",
              "appmesh:DescribeVirtualRouter",
              "appmesh:DescribeVirtualService",
              "appmesh:ListGatewayRoutes",
              "appmesh:ListMeshes",
              "appmesh:ListRoutes",
              "appmesh:ListTagsForResource",
              "appmesh:ListVirtualGateways",
              "appmesh:ListVirtualNodes",
              "appmesh:ListVirtualRouters",
              "appmesh:ListVirtualServices",
              "apprunner:DescribeService",
              "apprunner:DescribeVpcConnector",
              "apprunner:ListServices",
              "apprunner:ListTagsForResource",
              "apprunner:ListVpcConnectors",
              "appstream:DescribeApplications",
              "appstream:DescribeDirectoryConfigs",
              "appstream:DescribeFleets",
              "appstream:DescribeStacks",
              "appstream:ListTagsForResource",
              "appsync:GetApiCache",
              "appsync:GetGraphqlApi",
              "appsync:ListGraphqlApis",
              "aps:DescribeAlertManagerDefinition",
              "aps:DescribeLoggingConfiguration",
              "APS:DescribeRuleGroupsNamespace",
              "APS:DescribeWorkspace",
              "aps:ListRuleGroupsNamespaces",
              "aps:ListTagsForResource",
              "APS:ListWorkspaces",
              "athena:GetDataCatalog",
              "athena:GetPreparedStatement",
              "athena:GetWorkGroup",
              "athena:ListDataCatalogs",
              "athena:ListPreparedStatements",
              "athena:ListTagsForResource",
              "athena:ListWorkGroups",
              "auditmanager:GetAccountStatus",
              "auditmanager:GetAssessment",
              "auditmanager:ListAssessments",
              "autoscaling-plans:DescribeScalingPlanResources",
              "autoscaling-plans:DescribeScalingPlans",
              "autoscaling-plans:GetScalingPlanResourceForecastData",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribeLifecycleHooks",
              "autoscaling:DescribePolicies",
              "autoscaling:DescribeScheduledActions",
              "autoscaling:DescribeTags",
              "autoscaling:DescribeWarmPool",
              "backup-gateway:ListTagsForResource",
              "backup-gateway:ListVirtualMachines",
              "backup:DescribeBackupVault",
              "backup:DescribeFramework",
              "backup:DescribeProtectedResource",
              "backup:DescribeRecoveryPoint",
              "backup:DescribeReportPlan",
              "backup:GetBackupPlan",
              "backup:GetBackupSelection",
              "backup:GetBackupVaultAccessPolicy",
              "backup:GetBackupVaultNotifications",
              "backup:ListBackupPlans",
              "backup:ListBackupSelections",
              "backup:ListBackupVaults",
              "backup:ListFrameworks",
              "backup:ListRecoveryPointsByBackupVault",
              "backup:ListReportPlans",
              "backup:ListTags",
              "batch:DescribeComputeEnvironments",
              "batch:DescribeJobQueues",
              "batch:DescribeSchedulingPolicies",
              "batch:ListSchedulingPolicies",
              "batch:ListTagsForResource",
              "billingconductor:ListAccountAssociations",
              "billingconductor:ListBillingGroups",
              "billingconductor:ListCustomLineItems",
              "billingconductor:ListPricingPlans",
              "billingconductor:ListPricingRules",
              "billingconductor:ListPricingRulesAssociatedToPricingPlan",
              "billingconductor:ListTagsForResource",
              "budgets:DescribeBudgetAction",
              "budgets:DescribeBudgetActionsForAccount",
              "budgets:DescribeBudgetActionsForBudget",
              "budgets:ViewBudget",
              "cassandra:Select",
              "ce:GetAnomalyMonitors",
              "ce:GetAnomalySubscriptions",
              "cloud9:DescribeEnvironmentMemberships",
              "cloud9:DescribeEnvironments",
              "cloud9:ListEnvironments",
              "cloud9:ListTagsForResource",
              "cloudformation:DescribeType",
              "cloudformation:GetResource",
              "cloudformation:ListResources",
              "cloudformation:ListStackResources",
              "cloudformation:ListStacks",
              "cloudformation:ListTypes",
              "cloudfront:GetFunction",
              "cloudfront:GetOriginAccessControl",
              "cloudfront:GetResponseHeadersPolicy",
              "cloudfront:ListDistributions",
              "cloudfront:ListFunctions",
              "cloudfront:ListOriginAccessControls",
              "cloudfront:ListResponseHeadersPolicies",
              "cloudfront:ListTagsForResource",
              "cloudtrail:DescribeTrails",
              "cloudtrail:GetEventDataStore",
              "cloudtrail:GetEventSelectors",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:ListEventDataStores",
              "cloudtrail:ListTags",
              "cloudtrail:ListTrails",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:DescribeAnomalyDetectors",
              "cloudwatch:GetDashboard",
              "cloudwatch:GetMetricStream",
              "cloudwatch:ListDashboards",
              "cloudwatch:ListMetricStreams",
              "cloudwatch:ListTagsForResource",
              "codeartifact:DescribeRepository",
              "codeartifact:GetRepositoryPermissionsPolicy",
              "codeartifact:ListDomains",
              "codeartifact:ListPackages",
              "codeartifact:ListPackageVersions",
              "codeartifact:ListRepositories",
              "codeartifact:ListTagsForResource",
              "codebuild:BatchGetReportGroups",
              "codebuild:ListReportGroups",
              "codecommit:GetRepository",
              "codecommit:GetRepositoryTriggers",
              "codecommit:ListRepositories",
              "codecommit:ListTagsForResource",
              "codedeploy:GetDeploymentConfig",
              "codeguru-profiler:DescribeProfilingGroup",
              "codeguru-profiler:GetNotificationConfiguration",
              "codeguru-profiler:GetPolicy",
              "codeguru-profiler:ListProfilingGroups",
              "codeguru-reviewer:DescribeRepositoryAssociation",
              "codeguru-reviewer:ListRepositoryAssociations",
              "codepipeline:GetPipeline",
              "codepipeline:GetPipelineState",
              "codepipeline:ListPipelines",
              "cognito-identity:DescribeIdentityPool",
              "cognito-identity:GetIdentityPoolRoles",
              "cognito-identity:GetPrincipalTagAttributeMap",
              "cognito-identity:ListIdentityPools",
              "cognito-identity:ListTagsForResource",
              "cognito-idp:DescribeIdentityProvider",
              "cognito-idp:DescribeResourceServer",
              "cognito-idp:DescribeUserPool",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:DescribeUserPoolDomain",
              "cognito-idp:GetGroup",
              "cognito-idp:GetUserPoolMfaConfig",
              "cognito-idp:ListGroups",
              "cognito-idp:ListIdentityProviders",
              "cognito-idp:ListResourceServers",
              "cognito-idp:ListTagsForResource",
              "cognito-idp:ListUserPoolClients",
              "cognito-idp:ListUserPools",
              "config:BatchGet*",
              "config:Describe*",
              "config:Get*",
              "config:List*",
              "config:Put*",
              "config:Select*",
              "connect:DescribeEvaluationForm",
              "connect:DescribeInstance",
              "connect:DescribeInstanceStorageConfig",
              "connect:DescribePhoneNumber",
              "connect:DescribePrompt",
              "connect:DescribeQuickConnect",
              "connect:DescribeRule",
              "connect:DescribeUser",
              "connect:GetTaskTemplate",
              "connect:ListApprovedOrigins",
              "connect:ListEvaluationForms",
              "connect:ListInstanceAttributes",
              "connect:ListInstances",
              "connect:ListInstanceStorageConfigs",
              "connect:ListIntegrationAssociations",
              "connect:ListPhoneNumbers",
              "connect:ListPhoneNumbersV2",
              "connect:ListPrompts",
              "connect:ListQuickConnects",
              "connect:ListRules",
              "connect:ListSecurityKeys",
              "connect:ListTagsForResource",
              "connect:ListTaskTemplates",
              "connect:ListUsers",
              "connect:SearchAvailablePhoneNumbers",
              "databrew:DescribeDataset",
              "databrew:DescribeJob",
              "databrew:DescribeProject",
              "databrew:DescribeRecipe",
              "databrew:DescribeRuleset",
              "databrew:DescribeSchedule",
              "databrew:ListDatasets",
              "databrew:ListJobs",
              "databrew:ListProjects",
              "databrew:ListRecipes",
              "databrew:ListRecipeVersions",
              "databrew:ListRulesets",
              "databrew:ListSchedules",
              "datasync:DescribeAgent",
              "datasync:DescribeLocationEfs",
              "datasync:DescribeLocationFsxLustre",
              "datasync:DescribeLocationFsxWindows",
              "datasync:DescribeLocationHdfs",
              "datasync:DescribeLocationNfs",
              "datasync:DescribeLocationObjectStorage",
              "datasync:DescribeLocationS3",
              "datasync:DescribeLocationSmb",
              "datasync:DescribeTask",
              "datasync:ListAgents",
              "datasync:ListLocations",
              "datasync:ListTagsForResource",
              "datasync:ListTasks",
              "dax:DescribeClusters",
              "dax:DescribeParameterGroups",
              "dax:DescribeParameters",
              "dax:DescribeSubnetGroups",
              "dax:ListTags",
              "detective:ListGraphs",
              "detective:ListTagsForResource",
              "devicefarm:GetInstanceProfile",
              "devicefarm:GetNetworkProfile",
              "devicefarm:GetProject",
              "devicefarm:GetTestGridProject",
              "devicefarm:ListInstanceProfiles",
              "devicefarm:ListNetworkProfiles",
              "devicefarm:ListProjects",
              "devicefarm:ListTagsForResource",
              "devicefarm:ListTestGridProjects",
              "devops-guru:GetResourceCollection",
              "dms:DescribeCertificates",
              "dms:DescribeEndpoints",
              "dms:DescribeEventSubscriptions",
              "dms:DescribeReplicationInstances",
              "dms:DescribeReplicationSubnetGroups",
              "dms:DescribeReplicationTaskAssessmentRuns",
              "dms:DescribeReplicationTasks",
              "dms:ListTagsForResource",
              "ds:DescribeDirectories",
              "ds:DescribeDomainControllers",
              "ds:DescribeEventTopics",
              "ds:ListLogSubscriptions",
              "ds:ListTagsForResource",
              "dynamodb:DescribeContinuousBackups",
              "dynamodb:DescribeGlobalTable",
              "dynamodb:DescribeGlobalTableSettings",
              "dynamodb:DescribeLimits",
              "dynamodb:DescribeTable",
              "dynamodb:DescribeTableReplicaAutoScaling",
              "dynamodb:DescribeTimeToLive",
              "dynamodb:ListTables",
              "dynamodb:ListTagsOfResource",
              "ec2:Describe*",
              "ec2:DescribeClientVpnAuthorizationRules",
              "ec2:DescribeClientVpnEndpoints",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeFleets",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSpotFleetRequests",
              "ec2:DescribeTags",
              "ec2:DescribeTrafficMirrorFilters",
              "ec2:DescribeTrafficMirrorSessions",
              "ec2:DescribeTrafficMirrorTargets",
              "ec2:DescribeVolumeAttribute",
              "ec2:DescribeVolumes",
              "ec2:GetEbsEncryptionByDefault",
              "ec2:GetInstanceTypesFromInstanceRequirements",
              "ec2:GetIpamPoolAllocations",
              "ec2:GetIpamPoolCidrs",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
              "ec2:GetNetworkInsightsAccessScopeContent",
              "ecr-public:DescribeRepositories",
              "ecr-public:GetRepositoryCatalogData",
              "ecr-public:GetRepositoryPolicy",
              "ecr-public:ListTagsForResource",
              "ecr:BatchGetRepositoryScanningConfiguration",
              "ecr:DescribePullThroughCacheRules",
              "ecr:DescribeRegistry",
              "ecr:DescribeRepositories",
              "ecr:GetLifecyclePolicy",
              "ecr:GetRegistryPolicy",
              "ecr:GetRepositoryPolicy",
              "ecr:ListTagsForResource",
              "ecs:DescribeCapacityProviders",
              "ecs:DescribeClusters",
              "ecs:DescribeServices",
              "ecs:DescribeTaskDefinition",
              "ecs:DescribeTaskSets",
              "ecs:ListClusters",
              "ecs:ListServices",
              "ecs:ListTagsForResource",
              "ecs:ListTaskDefinitionFamilies",
              "ecs:ListTaskDefinitions",
              "eks:DescribeAddon",
              "eks:DescribeCluster",
              "eks:DescribeFargateProfile",
              "eks:DescribeIdentityProviderConfig",
              "eks:DescribeNodegroup",
              "eks:ListAddons",
              "eks:ListClusters",
              "eks:ListFargateProfiles",
              "eks:ListIdentityProviderConfigs",
              "eks:ListNodegroups",
              "eks:ListTagsForResource",
              "elasticache:DescribeCacheClusters",
              "elasticache:DescribeCacheParameterGroups",
              "elasticache:DescribeCacheParameters",
              "elasticache:DescribeCacheSecurityGroups",
              "elasticache:DescribeCacheSubnetGroups",
              "elasticache:DescribeGlobalReplicationGroups",
              "elasticache:DescribeReplicationGroups",
              "elasticache:DescribeSnapshots",
              "elasticache:DescribeUserGroups",
              "elasticache:DescribeUsers",
              "elasticache:ListTagsForResource",
              "elasticbeanstalk:DescribeConfigurationSettings",
              "elasticbeanstalk:DescribeEnvironments",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeBackupPolicy",
              "elasticfilesystem:DescribeFileSystemPolicy",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeLifecycleConfiguration",
              "elasticfilesystem:DescribeMountTargets",
              "elasticfilesystem:DescribeMountTargetSecurityGroups",
              "elasticfilesystem:DescribeTags",
              "elasticloadbalancing:DescribeListenerCertificates",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancerPolicies",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:DescribeSecurityConfiguration",
              "elasticmapreduce:DescribeStep",
              "elasticmapreduce:DescribeStudio",
              "elasticmapreduce:GetBlockPublicAccessConfiguration",
              "elasticmapreduce:GetManagedScalingPolicy",
              "elasticmapreduce:GetStudioSessionMapping",
              "elasticmapreduce:ListClusters",
              "elasticmapreduce:ListInstanceFleets",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ListInstances",
              "elasticmapreduce:ListSecurityConfigurations",
              "elasticmapreduce:ListSteps",
              "elasticmapreduce:ListStudios",
              "elasticmapreduce:ListStudioSessionMappings",
              "emr-containers:DescribeVirtualCluster",
              "emr-containers:ListVirtualClusters",
              "emr-serverless:GetApplication",
              "emr-serverless:ListApplications",
              "es:DescribeDomain",
              "es:DescribeDomains",
              "es:DescribeElasticsearchDomain",
              "es:DescribeElasticsearchDomains",
              "es:GetCompatibleElasticsearchVersions",
              "es:GetCompatibleVersions",
              "es:ListDomainNames",
              "es:ListTags",
              "events:DescribeApiDestination",
              "events:DescribeArchive",
              "events:DescribeConnection",
              "events:DescribeEndpoint",
              "events:DescribeEventBus",
              "events:DescribeRule",
              "events:ListApiDestinations",
              "events:ListArchives",
              "events:ListConnections",
              "events:ListEndpoints",
              "events:ListEventBuses",
              "events:ListRules",
              "events:ListTagsForResource",
              "events:ListTargetsByRule",
              "evidently:GetLaunch",
              "evidently:GetProject",
              "evidently:GetSegment",
              "evidently:ListLaunches",
              "evidently:ListProjects",
              "evidently:ListSegments",
              "evidently:ListTagsForResource",
              "finspace:GetEnvironment",
              "finspace:ListEnvironments",
              "firehose:DescribeDeliveryStream",
              "firehose:ListDeliveryStreams",
              "firehose:ListTagsForDeliveryStream",
              "fis:GetExperimentTemplate",
              "fis:ListExperimentTemplates",
              "fms:GetNotificationChannel",
              "fms:GetPolicy",
              "fms:ListPolicies",
              "fms:ListTagsForResource",
              "forecast:DescribeDataset",
              "forecast:DescribeDatasetGroup",
              "forecast:ListDatasetGroups",
              "forecast:ListDatasets",
              "forecast:ListTagsForResource",
              "frauddetector:GetDetectors",
              "frauddetector:GetDetectorVersion",
              "frauddetector:GetEntityTypes",
              "frauddetector:GetEventTypes",
              "frauddetector:GetExternalModels",
              "frauddetector:GetLabels",
              "frauddetector:GetModels",
              "frauddetector:GetOutcomes",
              "frauddetector:GetRules",
              "frauddetector:GetVariables",
              "frauddetector:ListTagsForResource",
              "fsx:DescribeBackups",
              "fsx:DescribeDataRepositoryAssociations",
              "fsx:DescribeFileSystems",
              "fsx:DescribeSnapshots",
              "fsx:DescribeStorageVirtualMachines",
              "fsx:DescribeVolumes",
              "fsx:ListTagsForResource",
              "gamelift:DescribeAlias",
              "gamelift:DescribeBuild",
              "gamelift:DescribeFleetAttributes",
              "gamelift:DescribeFleetCapacity",
              "gamelift:DescribeFleetLocationAttributes",
              "gamelift:DescribeFleetLocationCapacity",
              "gamelift:DescribeFleetPortSettings",
              "gamelift:DescribeGameServerGroup",
              "gamelift:DescribeGameSessionQueues",
              "gamelift:DescribeMatchmakingConfigurations",
              "gamelift:DescribeMatchmakingRuleSets",
              "gamelift:DescribeRuntimeConfiguration",
              "gamelift:DescribeScript",
              "gamelift:DescribeVpcPeeringAuthorizations",
              "gamelift:DescribeVpcPeeringConnections",
              "gamelift:ListAliases",
              "gamelift:ListBuilds",
              "gamelift:ListFleets",
              "gamelift:ListGameServerGroups",
              "gamelift:ListScripts",
              "gamelift:ListTagsForResource",
              "geo:DescribeGeofenceCollection",
              "geo:DescribeMap",
              "geo:DescribePlaceIndex",
              "geo:DescribeRouteCalculator",
              "geo:DescribeTracker",
              "geo:ListGeofenceCollections",
              "geo:ListMaps",
              "geo:ListPlaceIndexes",
              "geo:ListRouteCalculators",
              "geo:ListTrackerConsumers",
              "geo:ListTrackers",
              "globalaccelerator:DescribeAccelerator",
              "globalaccelerator:DescribeEndpointGroup",
              "globalaccelerator:DescribeListener",
              "globalaccelerator:ListAccelerators",
              "globalaccelerator:ListEndpointGroups",
              "globalaccelerator:ListListeners",
              "globalaccelerator:ListTagsForResource",
              "glue:BatchGetDevEndpoints",
              "glue:BatchGetJobs",
              "glue:BatchGetWorkflows",
              "glue:GetClassifier",
              "glue:GetClassifiers",
              "glue:GetCrawler",
              "glue:GetCrawlers",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetDevEndpoint",
              "glue:GetDevEndpoints",
              "glue:GetJob",
              "glue:GetJobs",
              "glue:GetMLTransform",
              "glue:GetMLTransforms",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetSecurityConfiguration",
              "glue:GetSecurityConfigurations",
              "glue:GetTable",
              "glue:GetTags",
              "glue:GetWorkflow",
              "glue:ListCrawlers",
              "glue:ListDevEndpoints",
              "glue:ListJobs",
              "glue:ListMLTransforms",
              "glue:ListWorkflows",
              "grafana:DescribeWorkspace",
              "grafana:DescribeWorkspaceAuthentication",
              "grafana:DescribeWorkspaceConfiguration",
              "grafana:ListWorkspaces",
              "greengrass:DescribeComponent",
              "greengrass:GetComponent",
              "greengrass:ListComponents",
              "greengrass:ListComponentVersions",
              "groundstation:GetConfig",
              "groundstation:GetDataflowEndpointGroup",
              "groundstation:GetMissionProfile",
              "groundstation:ListConfigs",
              "groundstation:ListDataflowEndpointGroups",
              "groundstation:ListMissionProfiles",
              "groundstation:ListTagsForResource",
              "guardduty:DescribePublishingDestination",
              "guardduty:GetAdministratorAccount",
              "guardduty:GetDetector",
              "guardduty:GetFilter",
              "guardduty:GetFindings",
              "guardduty:GetIPSet",
              "guardduty:GetMasterAccount",
              "guardduty:GetMemberDetectors",
              "guardduty:GetMembers",
              "guardduty:GetThreatIntelSet",
              "guardduty:ListDetectors",
              "guardduty:ListFilters",
              "guardduty:ListFindings",
              "guardduty:ListIPSets",
              "guardduty:ListMembers",
              "guardduty:ListOrganizationAdminAccounts",
              "guardduty:ListPublishingDestinations",
              "guardduty:ListTagsForResource",
              "guardduty:ListThreatIntelSets",
              "healthlake:DescribeFHIRDatastore",
              "healthlake:ListFHIRDatastores",
              "healthlake:ListTagsForResource",
              "iam:GenerateCredentialReport",
              "iam:GetAccountAuthorizationDetails",
              "iam:GetAccountPasswordPolicy",
              "iam:GetAccountSummary",
              "iam:GetCredentialReport",
              "iam:GetGroup",
              "iam:GetGroupPolicy",
              "iam:GetInstanceProfile",
              "iam:GetOpenIDConnectProvider",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:GetSAMLProvider",
              "iam:GetServerCertificate",
              "iam:GetUser",
              "iam:GetUserPolicy",
              "iam:ListAccessKeys",
              "iam:ListAttachedGroupPolicies",
              "iam:ListAttachedRolePolicies",
              "iam:ListAttachedUserPolicies",
              "iam:ListEntitiesForPolicy",
              "iam:ListGroupPolicies",
              "iam:ListGroups",
              "iam:ListGroupsForUser",
              "iam:ListInstanceProfiles",
              "iam:ListInstanceProfilesForRole",
              "iam:ListInstanceProfileTags",
              "iam:ListMFADevices",
              "iam:ListMFADeviceTags",
              "iam:ListOpenIDConnectProviders",
              "iam:ListPolicyVersions",
              "iam:ListRolePolicies",
              "iam:ListRoles",
              "iam:ListSAMLProviders",
              "iam:ListServerCertificates",
              "iam:ListUserPolicies",
              "iam:ListUsers",
              "iam:ListVirtualMFADevices",
              "imagebuilder:GetComponent",
              "imagebuilder:GetContainerRecipe",
              "imagebuilder:GetDistributionConfiguration",
              "imagebuilder:GetImage",
              "imagebuilder:GetImagePipeline",
              "imagebuilder:GetImageRecipe",
              "imagebuilder:GetInfrastructureConfiguration",
              "imagebuilder:ListComponentBuildVersions",
              "imagebuilder:ListComponents",
              "imagebuilder:ListContainerRecipes",
              "imagebuilder:ListDistributionConfigurations",
              "imagebuilder:ListImageBuildVersions",
              "imagebuilder:ListImagePipelines",
              "imagebuilder:ListImageRecipes",
              "imagebuilder:ListImages",
              "imagebuilder:ListInfrastructureConfigurations",
              "inspector2:BatchGetAccountStatus",
              "inspector2:GetDelegatedAdminAccount",
              "inspector2:ListFilters",
              "inspector2:ListMembers",
              "iot:DescribeAccountAuditConfiguration",
              "iot:DescribeAuthorizer",
              "iot:DescribeCACertificate",
              "iot:DescribeCertificate",
              "iot:DescribeCustomMetric",
              "iot:DescribeDimension",
              "iot:DescribeDomainConfiguration",
              "iot:DescribeFleetMetric",
              "iot:DescribeJobTemplate",
              "iot:DescribeMitigationAction",
              "iot:DescribeProvisioningTemplate",
              "iot:DescribeRoleAlias",
              "iot:DescribeScheduledAudit",
              "iot:DescribeSecurityProfile",
              "iot:GetPolicy",
              "iot:GetTopicRule",
              "iot:GetTopicRuleDestination",
              "iot:ListAuthorizers",
              "iot:ListCACertificates",
              "iot:ListCertificates",
              "iot:ListCustomMetrics",
              "iot:ListDimensions",
              "iot:ListDomainConfigurations",
              "iot:ListFleetMetrics",
              "iot:ListJobTemplates",
              "iot:ListMitigationActions",
              "iot:ListPolicies",
              "iot:ListProvisioningTemplates",
              "iot:ListRoleAliases",
              "iot:ListScheduledAudits",
              "iot:ListSecurityProfiles",
              "iot:ListSecurityProfilesForTarget",
              "iot:ListTagsForResource",
              "iot:ListTargetsForSecurityProfile",
              "iot:ListTopicRuleDestinations",
              "iot:ListTopicRules",
              "iot:ListV2LoggingLevels",
              "iot:ValidateSecurityProfileBehaviors",
              "iotanalytics:DescribeChannel",
              "iotanalytics:DescribeDataset",
              "iotanalytics:DescribeDatastore",
              "iotanalytics:DescribePipeline",
              "iotanalytics:ListChannels",
              "iotanalytics:ListDatasets",
              "iotanalytics:ListDatastores",
              "iotanalytics:ListPipelines",
              "iotanalytics:ListTagsForResource",
              "iotevents:DescribeAlarmModel",
              "iotevents:DescribeDetectorModel",
              "iotevents:DescribeInput",
              "iotevents:ListAlarmModels",
              "iotevents:ListDetectorModels",
              "iotevents:ListInputs",
              "iotevents:ListTagsForResource",
              "iotsitewise:DescribeAccessPolicy",
              "iotsitewise:DescribeAsset",
              "iotsitewise:DescribeAssetModel",
              "iotsitewise:DescribeDashboard",
              "iotsitewise:DescribeGateway",
              "iotsitewise:DescribePortal",
              "iotsitewise:DescribeProject",
              "iotsitewise:ListAccessPolicies",
              "iotsitewise:ListAssetModels",
              "iotsitewise:ListAssets",
              "iotsitewise:ListDashboards",
              "iotsitewise:ListGateways",
              "iotsitewise:ListPortals",
              "iotsitewise:ListProjectAssets",
              "iotsitewise:ListProjects",
              "iotsitewise:ListTagsForResource",
              "iottwinmaker:GetComponentType",
              "iottwinmaker:GetEntity",
              "iottwinmaker:GetScene",
              "iottwinmaker:GetSyncJob",
              "iottwinmaker:GetWorkspace",
              "iottwinmaker:ListComponentTypes",
              "iottwinmaker:ListEntities",
              "iottwinmaker:ListScenes",
              "iottwinmaker:ListSyncJobs",
              "iottwinmaker:ListTagsForResource",
              "iottwinmaker:ListWorkspaces",
              "iotwireless:GetFuotaTask",
              "iotwireless:GetMulticastGroup",
              "iotwireless:GetServiceProfile",
              "iotwireless:GetWirelessDevice",
              "iotwireless:GetWirelessGatewayTaskDefinition",
              "iotwireless:ListFuotaTasks",
              "iotwireless:ListMulticastGroups",
              "iotwireless:ListServiceProfiles",
              "iotwireless:ListTagsForResource",
              "iotwireless:ListWirelessDevices",
              "iotwireless:ListWirelessGatewayTaskDefinitions",
              "ivs:GetChannel",
              "ivs:GetPlaybackKeyPair",
              "ivs:GetRecordingConfiguration",
              "ivs:GetStreamKey",
              "ivs:ListChannels",
              "ivs:ListPlaybackKeyPairs",
              "ivs:ListRecordingConfigurations",
              "ivs:ListStreamKeys",
              "ivs:ListTagsForResource",
              "kafka:DescribeCluster",
              "kafka:DescribeClusterV2",
              "kafka:DescribeConfiguration",
              "kafka:DescribeConfigurationRevision",
              "kafka:DescribeVpcConnection",
              "kafka:GetClusterPolicy",
              "kafka:ListClusters",
              "kafka:ListClustersV2",
              "kafka:ListConfigurations",
              "kafka:ListScramSecrets",
              "kafka:ListTagsForResource",
              "kafka:ListVpcConnections",
              "kafkaconnect:DescribeConnector",
              "kafkaconnect:ListConnectors",
              "kendra:DescribeIndex",
              "kendra:ListIndices",
              "kendra:ListTagsForResource",
              "kinesis:DescribeStreamConsumer",
              "kinesis:DescribeStreamSummary",
              "kinesis:ListStreamConsumers",
              "kinesis:ListStreams",
              "kinesis:ListTagsForStream",
              "kinesisanalytics:DescribeApplication",
              "kinesisanalytics:ListApplications",
              "kinesisanalytics:ListTagsForResource",
              "kinesisvideo:DescribeSignalingChannel",
              "kinesisvideo:DescribeStream",
              "kinesisvideo:ListSignalingChannels",
              "kinesisvideo:ListStreams",
              "kinesisvideo:ListTagsForResource",
              "kinesisvideo:ListTagsForStream",
              "kms:DescribeKey",
              "kms:GetKeyPolicy",
              "kms:GetKeyRotationStatus",
              "kms:ListAliases",
              "kms:ListKeys",
              "kms:ListResourceTags",
              "lakeformation:DescribeResource",
              "lakeformation:GetDataLakeSettings",
              "lakeformation:ListPermissions",
              "lakeformation:ListResources",
              "lambda:GetAlias",
              "lambda:GetCodeSigningConfig",
              "lambda:GetFunction",
              "lambda:GetFunctionCodeSigningConfig",
              "lambda:GetLayerVersion",
              "lambda:GetPolicy",
              "lambda:ListAliases",
              "lambda:ListCodeSigningConfigs",
              "lambda:ListFunctions",
              "lambda:ListLayers",
              "lambda:ListLayerVersions",
              "lambda:ListTags",
              "lambda:ListVersionsByFunction",
              "lex:DescribeBot",
              "lex:DescribeBotAlias",
              "lex:DescribeBotVersion",
              "lex:DescribeResourcePolicy",
              "lex:ListBotAliases",
              "lex:ListBotLocales",
              "lex:ListBots",
              "lex:ListBotVersions",
              "lex:ListTagsForResource",
              "license-manager:GetGrant",
              "license-manager:GetLicense",
              "license-manager:ListDistributedGrants",
              "license-manager:ListLicenses",
              "license-manager:ListReceivedGrants",
              "lightsail:GetAlarms",
              "lightsail:GetBuckets",
              "lightsail:GetCertificates",
              "lightsail:GetContainerServices",
              "lightsail:GetDisk",
              "lightsail:GetDisks",
              "lightsail:GetDistributions",
              "lightsail:GetInstance",
              "lightsail:GetInstances",
              "lightsail:GetKeyPair",
              "lightsail:GetLoadBalancer",
              "lightsail:GetLoadBalancers",
              "lightsail:GetLoadBalancerTlsCertificates",
              "lightsail:GetRelationalDatabase",
              "lightsail:GetRelationalDatabaseParameters",
              "lightsail:GetRelationalDatabases",
              "lightsail:GetStaticIp",
              "lightsail:GetStaticIps",
              "logs:DescribeDestinations",
              "logs:DescribeLogGroups",
              "logs:DescribeMetricFilters",
              "logs:GetDataProtectionPolicy",
              "logs:GetLogDelivery",
              "logs:ListLogDeliveries",
              "logs:ListTagsLogGroup",
              "lookoutequipment:DescribeInferenceScheduler",
              "lookoutequipment:ListTagsForResource",
              "lookoutmetrics:DescribeAlert",
              "lookoutmetrics:DescribeAnomalyDetector",
              "lookoutmetrics:ListAlerts",
              "lookoutmetrics:ListAnomalyDetectors",
              "lookoutmetrics:ListMetricSets",
              "lookoutmetrics:ListTagsForResource",
              "lookoutvision:DescribeProject",
              "lookoutvision:ListProjects",
              "m2:GetEnvironment",
              "m2:ListEnvironments",
              "m2:ListTagsForResource",
              "macie2:DescribeOrganizationConfiguration",
              "macie2:GetAutomatedDiscoveryConfiguration",
              "macie2:GetClassificationExportConfiguration",
              "macie2:GetCustomDataIdentifier",
              "macie2:GetFindingsPublicationConfiguration",
              "macie2:GetMacieSession",
              "macie2:ListCustomDataIdentifiers",
              "macie2:ListTagsForResource",
              "managedblockchain:GetMember",
              "managedblockchain:GetNetwork",
              "managedblockchain:GetNode",
              "managedblockchain:ListInvitations",
              "managedblockchain:ListMembers",
              "managedblockchain:ListNodes",
              "mediaconnect:DescribeFlow",
              "mediaconnect:ListFlows",
              "mediaconnect:ListTagsForResource",
              "mediapackage-vod:DescribePackagingConfiguration",
              "mediapackage-vod:DescribePackagingGroup",
              "mediapackage-vod:ListPackagingConfigurations",
              "mediapackage-vod:ListPackagingGroups",
              "mediapackage-vod:ListTagsForResource",
              "mediatailor:GetPlaybackConfiguration",
              "mediatailor:ListPlaybackConfigurations",
              "memorydb:DescribeAcls",
              "memorydb:DescribeClusters",
              "memorydb:DescribeParameterGroups",
              "memorydb:DescribeParameters",
              "memorydb:DescribeSubnetGroups",
              "memorydb:DescribeUsers",
              "memorydb:ListTags",
              "mobiletargeting:GetApp",
              "mobiletargeting:GetApplicationSettings",
              "mobiletargeting:GetApps",
              "mobiletargeting:GetCampaign",
              "mobiletargeting:GetCampaigns",
              "mobiletargeting:GetEmailChannel",
              "mobiletargeting:GetEmailTemplate",
              "mobiletargeting:GetEventStream",
              "mobiletargeting:GetInAppTemplate",
              "mobiletargeting:GetSegment",
              "mobiletargeting:GetSegments",
              "mobiletargeting:ListTagsForResource",
              "mobiletargeting:ListTemplates",
              "mq:DescribeBroker",
              "mq:ListBrokers",
              "network-firewall:DescribeLoggingConfiguration",
              "network-firewall:ListFirewalls",
              "networkmanager:DescribeGlobalNetworks",
              "networkmanager:GetConnectPeer",
              "networkmanager:GetCustomerGatewayAssociations",
              "networkmanager:GetDevices",
              "networkmanager:GetLinkAssociations",
              "networkmanager:GetLinks",
              "networkmanager:GetSites",
              "networkmanager:GetTransitGatewayRegistrations",
              "networkmanager:ListConnectPeers",
              "networkmanager:ListTagsForResource",
              "nimble:GetLaunchProfile",
              "nimble:GetLaunchProfileDetails",
              "nimble:GetStreamingImage",
              "nimble:GetStudio",
              "nimble:GetStudioComponent",
              "nimble:ListLaunchProfiles",
              "nimble:ListStreamingImages",
              "nimble:ListStudioComponents",
              "nimble:ListStudios",
              "opsworks:DescribeInstances",
              "opsworks:DescribeLayers",
              "opsworks:DescribeTimeBasedAutoScaling",
              "opsworks:DescribeVolumes",
              "opsworks:ListTags",
              "organizations:DescribeAccount",
              "organizations:DescribeEffectivePolicy",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribePolicy",
              "organizations:DescribeResourcePolicy",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListParents",
              "organizations:ListPolicies",
              "organizations:ListPoliciesForTarget",
              "organizations:ListRoots",
              "organizations:ListTagsForResource",
              "organizations:ListTargetsForPolicy",
              "panorama:DescribeApplicationInstance",
              "panorama:DescribeApplicationInstanceDetails",
              "panorama:DescribePackage",
              "panorama:DescribePackageVersion",
              "panorama:ListApplicationInstances",
              "panorama:ListNodes",
              "panorama:ListPackages",
              "personalize:DescribeDataset",
              "personalize:DescribeDatasetGroup",
              "personalize:DescribeSchema",
              "personalize:DescribeSolution",
              "personalize:ListDatasetGroups",
              "personalize:ListDatasetImportJobs",
              "personalize:ListDatasets",
              "personalize:ListSchemas",
              "personalize:ListSolutions",
              "personalize:ListTagsForResource",
              "profile:GetDomain",
              "profile:GetIntegration",
              "profile:GetProfileObjectType",
              "profile:ListDomains",
              "profile:ListIntegrations",
              "profile:ListProfileObjectTypes",
              "profile:ListTagsForResource",
              "quicksight:DescribeAccountSubscription",
              "quicksight:DescribeAnalysis",
              "quicksight:DescribeAnalysisPermissions",
              "quicksight:DescribeDashboard",
              "quicksight:DescribeDashboardPermissions",
              "quicksight:DescribeDataSet",
              "quicksight:DescribeDataSetPermissions",
              "quicksight:DescribeDataSetRefreshProperties",
              "quicksight:DescribeDataSource",
              "quicksight:DescribeDataSourcePermissions",
              "quicksight:DescribeTemplate",
              "quicksight:DescribeTemplatePermissions",
              "quicksight:DescribeTheme",
              "quicksight:DescribeThemePermissions",
              "quicksight:ListAnalyses",
              "quicksight:ListDashboards",
              "quicksight:ListDataSets",
              "quicksight:ListDataSources",
              "quicksight:ListTagsForResource",
              "quicksight:ListTemplates",
              "quicksight:ListThemes",
              "ram:GetPermission",
              "ram:GetResourceShareAssociations",
              "ram:GetResourceShares",
              "ram:ListPermissionAssociations",
              "ram:ListPermissions",
              "ram:ListPermissionVersions",
              "ram:ListResources",
              "ram:ListResourceSharePermissions",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBClusters",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBProxies",
              "rds:DescribeDBProxyEndpoints",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBSnapshotAttributes",
              "rds:DescribeDBSnapshots",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEngineDefaultClusterParameters",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeGlobalClusters",
              "rds:DescribeOptionGroups",
              "rds:ListTagsForResource",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:GetWorkgroup",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListTagsForResource",
              "redshift-serverless:ListWorkgroups",
              "redshift:DescribeClusterParameterGroups",
              "redshift:DescribeClusterParameters",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSecurityGroups",
              "redshift:DescribeClusterSnapshots",
              "redshift:DescribeClusterSubnetGroups",
              "redshift:DescribeEndpointAccess",
              "redshift:DescribeEndpointAuthorization",
              "redshift:DescribeEventSubscriptions",
              "redshift:DescribeLoggingStatus",
              "redshift:DescribeScheduledActions",
              "redshift:DescribeTags",
              "refactor-spaces:GetEnvironment",
              "refactor-spaces:GetService",
              "refactor-spaces:ListApplications",
              "refactor-spaces:ListEnvironments",
              "refactor-spaces:ListServices",
              "rekognition:DescribeStreamProcessor",
              "rekognition:ListStreamProcessors",
              "rekognition:ListTagsForResource",
              "resiliencehub:DescribeApp",
              "resiliencehub:DescribeAppVersionTemplate",
              "resiliencehub:DescribeResiliencyPolicy",
              "resiliencehub:ListApps",
              "resiliencehub:ListAppVersionResourceMappings",
              "resiliencehub:ListResiliencyPolicies",
              "resiliencehub:ListTagsForResource",
              "resource-explorer-2:GetIndex",
              "resource-explorer-2:ListIndexes",
              "resource-explorer-2:ListTagsForResource",
              "resource-groups:GetGroup",
              "resource-groups:GetGroupConfiguration",
              "resource-groups:GetGroupQuery",
              "resource-groups:GetTags",
              "resource-groups:ListGroupResources",
              "resource-groups:ListGroups",
              "robomaker:DescribeRobotApplication",
              "robomaker:DescribeSimulationApplication",
              "robomaker:ListRobotApplications",
              "robomaker:ListSimulationApplications",
              "route53-recovery-control-config:DescribeCluster",
              "route53-recovery-control-config:DescribeControlPanel",
              "route53-recovery-control-config:DescribeRoutingControl",
              "route53-recovery-control-config:DescribeSafetyRule",
              "route53-recovery-control-config:ListClusters",
              "route53-recovery-control-config:ListControlPanels",
              "route53-recovery-control-config:ListRoutingControls",
              "route53-recovery-control-config:ListSafetyRules",
              "route53-recovery-control-config:ListTagsForResource",
              "route53-recovery-readiness:GetCell",
              "route53-recovery-readiness:GetReadinessCheck",
              "route53-recovery-readiness:GetRecoveryGroup",
              "route53-recovery-readiness:GetResourceSet",
              "route53-recovery-readiness:ListCells",
              "route53-recovery-readiness:ListReadinessChecks",
              "route53-recovery-readiness:ListRecoveryGroups",
              "route53-recovery-readiness:ListResourceSets",
              "route53:GetChange",
              "route53:GetDNSSEC",
              "route53:GetHealthCheck",
              "route53:GetHostedZone",
              "route53:ListCidrBlocks",
              "route53:ListCidrCollections",
              "route53:ListCidrLocations",
              "route53:ListHealthChecks",
              "route53:ListHostedZones",
              "route53:ListHostedZonesByName",
              "route53:ListQueryLoggingConfigs",
              "route53:ListResourceRecordSets",
              "route53:ListTagsForResource",
              "route53resolver:GetFirewallDomainList",
              "route53resolver:GetFirewallRuleGroup",
              "route53resolver:GetFirewallRuleGroupAssociation",
              "route53resolver:GetResolverDnssecConfig",
              "route53resolver:GetResolverEndpoint",
              "route53resolver:GetResolverQueryLogConfig",
              "route53resolver:GetResolverQueryLogConfigAssociation",
              "route53resolver:GetResolverRule",
              "route53resolver:GetResolverRuleAssociation",
              "route53resolver:ListFirewallDomainLists",
              "route53resolver:ListFirewallDomains",
              "route53resolver:ListFirewallRuleGroupAssociations",
              "route53resolver:ListFirewallRuleGroups",
              "route53resolver:ListFirewallRules",
              "route53resolver:ListResolverDnssecConfigs",
              "route53resolver:ListResolverEndpointIpAddresses",
              "route53resolver:ListResolverEndpoints",
              "route53resolver:ListResolverQueryLogConfigAssociations",
              "route53resolver:ListResolverQueryLogConfigs",
              "route53resolver:ListResolverRuleAssociations",
              "route53resolver:ListResolverRules",
              "route53resolver:ListTagsForResource",
              "rum:GetAppMonitor",
              "rum:GetAppMonitorData",
              "rum:ListAppMonitors",
              "rum:ListTagsForResource",
              "s3-outposts:GetAccessPoint",
              "s3-outposts:GetAccessPointPolicy",
              "s3-outposts:GetBucket",
              "s3-outposts:GetBucketPolicy",
              "s3-outposts:GetBucketTagging",
              "s3-outposts:GetLifecycleConfiguration",
              "s3-outposts:ListAccessPoints",
              "s3-outposts:ListEndpoints",
              "s3-outposts:ListRegionalBuckets",
              "s3:GetAccelerateConfiguration",
              "s3:GetAccessPoint",
              "s3:GetAccessPointForObjectLambda",
              "s3:GetAccessPointPolicy",
              "s3:GetAccessPointPolicyForObjectLambda",
              "s3:GetAccessPointPolicyStatus",
              "s3:GetAccessPointPolicyStatusForObjectLambda",
              "s3:GetAccountPublicAccessBlock",
              "s3:GetBucketAcl",
              "s3:GetBucketCORS",
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:GetBucketNotification",
              "s3:GetBucketObjectLockConfiguration",
              "s3:GetBucketPolicy",
              "s3:GetBucketPolicyStatus",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetBucketRequestPayment",
              "s3:GetBucketTagging",
              "s3:GetBucketVersioning",
              "s3:GetBucketWebsite",
              "s3:GetEncryptionConfiguration",
              "s3:GetLifecycleConfiguration",
              "s3:GetMultiRegionAccessPoint",
              "s3:GetMultiRegionAccessPointPolicy",
              "s3:GetMultiRegionAccessPointPolicyStatus",
              "s3:GetReplicationConfiguration",
              "s3:GetStorageLensConfiguration",
              "s3:GetStorageLensConfigurationTagging",
              "s3:ListAccessPoints",
              "s3:ListAccessPointsForObjectLambda",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListMultiRegionAccessPoints",
              "s3:ListStorageLensConfigurations",
              "s3express:GetBucketPolicy",
              "s3express:ListAllMyDirectoryBuckets",
              "sagemaker:DescribeAppImageConfig",
              "sagemaker:DescribeCodeRepository",
              "sagemaker:DescribeDataQualityJobDefinition",
              "sagemaker:DescribeDeviceFleet",
              "sagemaker:DescribeDomain",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeFeatureGroup",
              "sagemaker:DescribeImage",
              "sagemaker:DescribeImageVersion",
              "sagemaker:DescribeInferenceExperiment",
              "sagemaker:DescribeModel",
              "sagemaker:DescribeModelBiasJobDefinition",
              "sagemaker:DescribeModelExplainabilityJobDefinition",
              "sagemaker:DescribeModelQualityJobDefinition",
              "sagemaker:DescribeMonitoringSchedule",
              "sagemaker:DescribeNotebookInstance",
              "sagemaker:DescribeNotebookInstanceLifecycleConfig",
              "sagemaker:DescribePipeline",
              "sagemaker:DescribeProject",
              "sagemaker:DescribeWorkteam",
              "sagemaker:ListAppImageConfigs",
              "sagemaker:ListCodeRepositories",
              "sagemaker:ListDataQualityJobDefinitions",
              "sagemaker:ListDeviceFleets",
              "sagemaker:ListDomains",
              "sagemaker:ListEndpointConfigs",
              "sagemaker:ListEndpoints",
              "sagemaker:ListFeatureGroups",
              "sagemaker:ListImages",
              "sagemaker:ListImageVersions",
              "sagemaker:ListInferenceExperiments",
              "sagemaker:ListModelBiasJobDefinitions",
              "sagemaker:ListModelExplainabilityJobDefinitions",
              "sagemaker:ListModelQualityJobDefinitions",
              "sagemaker:ListModels",
              "sagemaker:ListMonitoringSchedules",
              "sagemaker:ListNotebookInstanceLifecycleConfigs",
              "sagemaker:ListNotebookInstances",
              "sagemaker:ListPipelines",
              "sagemaker:ListProjects",
              "sagemaker:ListTags",
              "sagemaker:ListWorkteams",
              "schemas:DescribeDiscoverer",
              "schemas:DescribeRegistry",
              "schemas:DescribeSchema",
              "schemas:GetResourcePolicy",
              "schemas:ListDiscoverers",
              "schemas:ListRegistries",
              "schemas:ListSchemas",
              "sdb:GetAttributes",
              "sdb:ListDomains",
              "secretsmanager:ListSecrets",
              "secretsmanager:ListSecretVersionIds",
              "securityhub:DescribeHub",
              "serviceCatalog:DescribePortfolioShares",
              "servicediscovery:GetInstance",
              "servicediscovery:GetNamespace",
              "servicediscovery:GetService",
              "servicediscovery:ListInstances",
              "servicediscovery:ListNamespaces",
              "servicediscovery:ListServices",
              "servicediscovery:ListTagsForResource",
              "ses:DescribeReceiptRule",
              "ses:DescribeReceiptRuleSet",
              "ses:GetConfigurationSet",
              "ses:GetConfigurationSetEventDestinations",
              "ses:GetContactList",
              "ses:GetEmailTemplate",
              "ses:GetTemplate",
              "ses:ListConfigurationSets",
              "ses:ListContactLists",
              "ses:ListEmailTemplates",
              "ses:ListReceiptFilters",
              "ses:ListReceiptRuleSets",
              "ses:ListTemplates",
              "shield:DescribeDRTAccess",
              "shield:DescribeProtection",
              "shield:DescribeSubscription",
              "signer:GetSigningProfile",
              "signer:ListProfilePermissions",
              "signer:ListSigningProfiles",
              "sns:GetDataProtectionPolicy",
              "sns:GetSMSSandboxAccountStatus",
              "sns:GetSubscriptionAttributes",
              "sns:GetTopicAttributes",
              "sns:ListSubscriptions",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTagsForResource",
              "sns:ListTopics",
              "sqs:GetQueueAttributes",
              "sqs:ListQueues",
              "sqs:ListQueueTags",
              "ssm:DescribeAutomationExecutions",
              "ssm:DescribeDocument",
              "ssm:DescribeDocumentPermission",
              "ssm:DescribeParameters",
              "ssm:GetAutomationExecution",
              "ssm:GetDocument",
              "ssm:ListDocuments",
              "ssm:ListTagsForResource",
              "ssm-sap:ListTagsForResource",
              "sso:DescribeInstanceAccessControlAttributeConfiguration",
              "sso:DescribePermissionSet",
              "sso:GetInlinePolicyForPermissionSet",
              "sso:ListManagedPoliciesInPermissionSet",
              "sso:ListPermissionSets",
              "sso:ListTagsForResource",
              "states:DescribeActivity",
              "states:DescribeStateMachine",
              "states:ListActivities",
              "states:ListStateMachines",
              "states:ListTagsForResource",
              "storagegateway:ListGateways",
              "storagegateway:ListTagsForResource",
              "storagegateway:ListVolumes",
              "sts:GetCallerIdentity",
              "support:DescribeCases",
              "synthetics:DescribeCanaries",
              "synthetics:DescribeCanariesLastRun",
              "synthetics:DescribeRuntimeVersions",
              "synthetics:GetCanary",
              "synthetics:GetCanaryRuns",
              "synthetics:GetGroup",
              "synthetics:ListAssociatedGroups",
              "synthetics:ListGroupResources",
              "synthetics:ListGroups",
              "synthetics:ListTagsForResource",
              "tag:GetResources",
              "timestream:DescribeDatabase",
              "timestream:DescribeEndpoints",
              "timestream:DescribeTable",
              "timestream:ListDatabases",
              "timestream:ListTables",
              "timestream:ListTagsForResource",
              "transfer:DescribeAgreement",
              "transfer:DescribeCertificate",
              "transfer:DescribeConnector",
              "transfer:DescribeProfile",
              "transfer:DescribeServer",
              "transfer:DescribeUser",
              "transfer:DescribeWorkflow",
              "transfer:ListAgreements",
              "transfer:ListCertificates",
              "transfer:ListConnectors",
              "transfer:ListProfiles",
              "transfer:ListServers",
              "transfer:ListTagsForResource",
              "transfer:ListUsers",
              "transfer:ListWorkflows",
              "voiceid:DescribeDomain",
              "voiceid:ListTagsForResource",
              "waf-regional:GetLoggingConfiguration",
              "waf-regional:GetWebACL",
              "waf-regional:GetWebACLForResource",
              "waf-regional:ListLoggingConfigurations",
              "waf:GetLoggingConfiguration",
              "waf:GetWebACL",
              "wafv2:GetLoggingConfiguration",
              "wafv2:GetRuleGroup",
              "wafv2:ListRuleGroups",
              "wafv2:ListTagsForResource",
              "workspaces:DescribeConnectionAliases",
              "workspaces:DescribeTags",
              "workspaces:DescribeWorkspaces"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSConfigSLRLogStatementID",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/config/*"
          },
          {
            "Sid": "AWSConfigSLRLogEventStatementID",
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/config/*:log-stream:config-rule-evaluation/*"
          },
          {
            "Sid": "AWSConfigSLRApiGatewayStatementID",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/apis",
              "arn:aws:apigateway:*::/apis/*",
              "arn:aws:apigateway:*::/apis/*/integrations",
              "arn:aws:apigateway:*::/apis/*/integrations/*",
              "arn:aws:apigateway:*::/domainnames",
              "arn:aws:apigateway:*::/clientcertificates",
              "arn:aws:apigateway:*::/clientcertificates/*",
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
              "arn:aws:apigateway:*::/restapis/*",
              "arn:aws:apigateway:*::/restapis/*/stages/*",
              "arn:aws:apigateway:*::/restapis/*/stages",
              "arn:aws:apigateway:*::/restapis/*/resources",
              "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration",
              "arn:aws:apigateway:*::/restapis/*/resources/*",
              "arn:aws:apigateway:*::/apis/*/routes/*",
              "arn:aws:apigateway:*::/apis/*/routes",
              "arn:aws:apigateway:*::/v2/apis/*/routes",
              "arn:aws:apigateway:*::/v2/apis/*/routes/*",
              "arn:aws:apigateway:*::/v2/apis",
              "arn:aws:apigateway:*::/v2/apis/*",
              "arn:aws:apigateway:*::/v2/apis/*/integrations",
              "arn:aws:apigateway:*::/v2/apis/*/integrations/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSPreviewServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "rds:CrossRegionCommunication"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress",
              "ec2:AssociateAddress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateCoipPoolPermission",
              "ec2:CreateLocalGatewayRouteTablePermission",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteCoipPoolPermission",
              "ec2:DeleteLocalGatewayRouteTablePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCoipPools",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeLocalGatewayRouteTablePermissions",
              "ec2:DescribeLocalGatewayRouteTables",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
              "ec2:DescribeLocalGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "ec2:DisassociateAddress",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ReleaseAddress",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/rds/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/DocDB-Preview",
                  "AWS/Neptune-Preview",
                  "AWS/RDS-Preview",
                  "AWS/Usage"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetRandomPassword"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DeleteSecret",
              "secretsmanager:DescribeSecret",
              "secretsmanager:PutSecretValue",
              "secretsmanager:RotateSecret",
              "secretsmanager:UpdateSecret",
              "secretsmanager:UpdateSecretVersionStage",
              "secretsmanager:ListSecretVersionIds"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:rds-preview-us-east-2!*"
            ],
            "Condition": {
              "StringLike": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds-preview-us-east-2"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "secretsmanager:TagResource",
            "Resource": "arn:aws:secretsmanager:*:*:secret:rds-preview-us-east-2!*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws:rds:primaryDBInstanceArn",
                  "aws:rds:primaryDBClusterArn"
                ]
              },
              "StringLike": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds-preview-us-east-2"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoScalingCustomResourcePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "execute-api:Invoke",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSShieldDRTAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SRTAccessProtectedResources",
            "Effect": "Allow",
            "Action": [
              "cloudfront:List*",
              "route53:List*",
              "elasticloadbalancing:Describe*",
              "cloudwatch:Describe*",
              "cloudwatch:Get*",
              "cloudwatch:List*",
              "cloudfront:GetDistribution*",
              "globalaccelerator:ListAccelerators",
              "globalaccelerator:DescribeAccelerator",
              "ec2:DescribeRegions",
              "ec2:DescribeAddresses"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SRTManageProtections",
            "Effect": "Allow",
            "Action": [
              "shield:*",
              "waf:*",
              "wafv2:*",
              "waf-regional:*",
              "elasticloadbalancing:SetWebACL",
              "cloudfront:UpdateDistribution",
              "apigateway:SetWebACL"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticTranscoder_ReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "elastictranscoder:Read*",
              "elastictranscoder:List*",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "iam:ListRoles",
              "sns:ListTopics"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticTranscoder_JobsSubmitter",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "elastictranscoder:Read*",
              "elastictranscoder:List*",
              "elastictranscoder:*Job",
              "elastictranscoder:*Preset",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "iam:ListRoles",
              "sns:ListTopics"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudFrontLogger",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/cloudfront/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaSQSQueueExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sqs:ReceiveMessage",
              "sqs:DeleteMessage",
              "sqs:GetQueueAttributes",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTAnalyticsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotanalytics:Describe*",
              "iotanalytics:List*",
              "iotanalytics:Get*",
              "iotanalytics:SampleChannelData"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTAnalyticsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotanalytics:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "NeptuneConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowNeptuneCreate",
            "Effect": "Allow",
            "Action": [
              "rds:CreateDBCluster",
              "rds:CreateDBInstance"
            ],
            "Resource": [
              "arn:aws:rds:*:*:*"
            ],
            "Condition": {
              "StringEquals": {
                "rds:DatabaseEngine": [
                  "graphdb",
                  "neptune"
                ]
              }
            }
          },
          {
            "Sid": "AllowManagementPermissionsForRDS",
            "Action": [
              "rds:AddRoleToDBCluster",
              "rds:AddSourceIdentifierToSubscription",
              "rds:AddTagsToResource",
              "rds:ApplyPendingMaintenanceAction",
              "rds:CopyDBClusterParameterGroup",
              "rds:CopyDBClusterSnapshot",
              "rds:CopyDBParameterGroup",
              "rds:CreateDBClusterParameterGroup",
              "rds:CreateDBClusterSnapshot",
              "rds:CreateDBParameterGroup",
              "rds:CreateDBSubnetGroup",
              "rds:CreateEventSubscription",
              "rds:DeleteDBCluster",
              "rds:DeleteDBClusterParameterGroup",
              "rds:DeleteDBClusterSnapshot",
              "rds:DeleteDBInstance",
              "rds:DeleteDBParameterGroup",
              "rds:DeleteDBSubnetGroup",
              "rds:DeleteEventSubscription",
              "rds:DescribeAccountAttributes",
              "rds:DescribeCertificates",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBClusters",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBLogFiles",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEngineDefaultClusterParameters",
              "rds:DescribeEngineDefaultParameters",
              "rds:DescribeEventCategories",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeEvents",
              "rds:DescribeOptionGroups",
              "rds:DescribeOrderableDBInstanceOptions",
              "rds:DescribePendingMaintenanceActions",
              "rds:DescribeValidDBInstanceModifications",
              "rds:DownloadDBLogFilePortion",
              "rds:FailoverDBCluster",
              "rds:ListTagsForResource",
              "rds:ModifyDBCluster",
              "rds:ModifyDBClusterParameterGroup",
              "rds:ModifyDBClusterSnapshotAttribute",
              "rds:ModifyDBInstance",
              "rds:ModifyDBParameterGroup",
              "rds:ModifyDBSubnetGroup",
              "rds:ModifyEventSubscription",
              "rds:PromoteReadReplicaDBCluster",
              "rds:RebootDBInstance",
              "rds:RemoveRoleFromDBCluster",
              "rds:RemoveSourceIdentifierFromSubscription",
              "rds:RemoveTagsFromResource",
              "rds:ResetDBClusterParameterGroup",
              "rds:ResetDBParameterGroup",
              "rds:RestoreDBClusterFromSnapshot",
              "rds:RestoreDBClusterToPointInTime"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowOtherDepedentPermissions",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "ec2:AllocateAddress",
              "ec2:AssignIpv6Addresses",
              "ec2:AssignPrivateIpAddresses",
              "ec2:AssociateAddress",
              "ec2:AssociateRouteTable",
              "ec2:AssociateSubnetCidrBlock",
              "ec2:AssociateVpcCidrBlock",
              "ec2:AttachInternetGateway",
              "ec2:AttachNetworkInterface",
              "ec2:CreateCustomerGateway",
              "ec2:CreateDefaultSubnet",
              "ec2:CreateDefaultVpc",
              "ec2:CreateInternetGateway",
              "ec2:CreateNatGateway",
              "ec2:CreateNetworkInterface",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateVpc",
              "ec2:CreateVpcEndpoint",
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroupReferences",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcs",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:ModifyVpcEndpoint",
              "iam:ListRoles",
              "kms:ListAliases",
              "kms:ListKeyPolicies",
              "kms:ListKeys",
              "kms:ListRetirableGrants",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "sns:ListSubscriptions",
              "sns:ListTopics",
              "sns:Publish"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowPassRoleForNeptune",
            "Action": "iam:PassRole",
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:passedToService": "rds.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowCreateSLRForNeptune",
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "rds.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowManagementPermissionsForNeptuneAnalytics",
            "Effect": "Allow",
            "Action": [
              "neptune-graph:CreateGraph",
              "neptune-graph:DeleteGraph",
              "neptune-graph:GetGraph",
              "neptune-graph:ListGraphs",
              "neptune-graph:UpdateGraph",
              "neptune-graph:ResetGraph",
              "neptune-graph:CreateGraphSnapshot",
              "neptune-graph:DeleteGraphSnapshot",
              "neptune-graph:GetGraphSnapshot",
              "neptune-graph:ListGraphSnapshots",
              "neptune-graph:RestoreGraphFromSnapshot",
              "neptune-graph:CreatePrivateGraphEndpoint",
              "neptune-graph:GetPrivateGraphEndpoint",
              "neptune-graph:ListPrivateGraphEndpoints",
              "neptune-graph:DeletePrivateGraphEndpoint",
              "neptune-graph:CreateGraphUsingImportTask",
              "neptune-graph:GetImportTask",
              "neptune-graph:ListImportTasks",
              "neptune-graph:CancelImportTask"
            ],
            "Resource": [
              "arn:aws:neptune-graph:*:*:*"
            ]
          },
          {
            "Sid": "AllowPassRoleForNeptuneAnalytics",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:passedToService": "neptune-graph.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowCreateSLRForNeptuneAnalytics",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/neptune-graph.amazonaws.com/AWSServiceRoleForNeptuneGraph",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "neptune-graph.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMacieServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListAccountAliases",
              "organizations:DescribeAccount",
              "organizations:ListAccounts",
              "s3:GetAccountPublicAccessBlock",
              "s3:ListAllMyBuckets",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:GetBucketPolicy",
              "s3:GetBucketPolicyStatus",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetBucketTagging",
              "s3:GetBucketVersioning",
              "s3:GetBucketWebsite",
              "s3:GetEncryptionConfiguration",
              "s3:GetLifecycleConfiguration",
              "s3:GetReplicationConfiguration",
              "s3:ListBucket",
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:GetObjectTagging"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/macie/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/macie/*:log-stream:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElementalMediaConvertReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mediaconvert:Get*",
              "mediaconvert:List*",
              "mediaconvert:DescribeEndpoints",
              "s3:ListAllMyBuckets",
              "s3:ListBucket"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElementalMediaConvertFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mediaconvert:*",
              "s3:ListAllMyBuckets",
              "s3:ListBucket"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "mediaconvert.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSSOReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSSSOReadOnly",
            "Effect": "Allow",
            "Action": [
              "ds:DescribeDirectories",
              "ds:DescribeTrusts",
              "iam:ListPolicies",
              "organizations:DescribeOrganization",
              "organizations:DescribeAccount",
              "organizations:ListParents",
              "organizations:ListChildren",
              "organizations:ListAccounts",
              "organizations:ListRoots",
              "organizations:ListAccountsForParent",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListDelegatedAdministrators",
              "sso:Describe*",
              "sso:Get*",
              "sso:List*",
              "sso:Search*",
              "sso-directory:DescribeDirectory",
              "access-analyzer:ValidatePolicy",
              "signin:ListTrustedIdentityPropagationApplicationsForConsole"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSSOMasterAccountAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSSSOCreateSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "sso.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AWSSSOMasterAccountAdministrator",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/sso.amazonaws.com/AWSServiceRoleForSSO",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "sso.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AWSSSOMemberAccountAdministrator",
            "Effect": "Allow",
            "Action": [
              "ds:DescribeTrusts",
              "ds:UnauthorizeApplication",
              "ds:DescribeDirectories",
              "ds:AuthorizeApplication",
              "iam:ListPolicies",
              "organizations:EnableAWSServiceAccess",
              "organizations:ListRoots",
              "organizations:ListAccounts",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListAccountsForParent",
              "organizations:DescribeOrganization",
              "organizations:ListChildren",
              "organizations:DescribeAccount",
              "organizations:ListParents",
              "organizations:ListDelegatedAdministrators",
              "sso:*",
              "sso-directory:*",
              "identitystore:*",
              "identitystore-auth:*",
              "ds:CreateAlias",
              "access-analyzer:ValidatePolicy",
              "signin:CreateTrustedIdentityPropagationApplicationForConsole",
              "signin:ListTrustedIdentityPropagationApplicationsForConsole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSSSOManageDelegatedAdministrator",
            "Effect": "Allow",
            "Action": [
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": "sso.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSSOMemberAccountAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSSSOMemberAccountAdministrator",
            "Effect": "Allow",
            "Action": [
              "ds:DescribeDirectories",
              "ds:AuthorizeApplication",
              "ds:UnauthorizeApplication",
              "ds:DescribeTrusts",
              "iam:ListPolicies",
              "organizations:EnableAWSServiceAccess",
              "organizations:DescribeOrganization",
              "organizations:DescribeAccount",
              "organizations:ListRoots",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListParents",
              "organizations:ListChildren",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListDelegatedAdministrators",
              "sso:*",
              "sso-directory:*",
              "identitystore:*",
              "identitystore-auth:*",
              "ds:CreateAlias",
              "access-analyzer:ValidatePolicy",
              "signin:CreateTrustedIdentityPropagationApplicationForConsole",
              "signin:ListTrustedIdentityPropagationApplicationsForConsole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSSSOManageDelegatedAdministrator",
            "Effect": "Allow",
            "Action": [
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": "sso.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMacieHandshakeRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "iam:AWSServiceName": "macie.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataLifecycleManagerServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot",
              "ec2:CreateSnapshots",
              "ec2:DeleteSnapshot",
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "ec2:DescribeSnapshots",
              "ec2:EnableFastSnapshotRestores",
              "ec2:DescribeFastSnapshotRestores",
              "ec2:DisableFastSnapshotRestores",
              "ec2:CopySnapshot",
              "ec2:ModifySnapshotAttribute",
              "ec2:DescribeSnapshotAttribute",
              "ec2:DescribeSnapshotTierStatus",
              "ec2:ModifySnapshotTier"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:DeleteRule",
              "events:DescribeRule",
              "events:EnableRule",
              "events:DisableRule",
              "events:ListTargetsByRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": "arn:aws:events:*:*:rule/AwsDataLifecycleRule.managed-cwe.*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceDefenderAudit",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:GetLoggingOptions",
              "iot:GetV2LoggingOptions",
              "iot:ListCACertificates",
              "iot:ListCertificates",
              "iot:DescribeCACertificate",
              "iot:DescribeCertificate",
              "iot:ListPolicies",
              "iot:GetPolicy",
              "iot:GetEffectivePolicies",
              "iot:ListRoleAliases",
              "iot:DescribeRoleAlias",
              "cognito-identity:GetIdentityPoolRoles",
              "iam:ListRolePolicies",
              "iam:ListAttachedRolePolicies",
              "iam:GetRole",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:GetRolePolicy",
              "iam:GenerateServiceLastAccessedDetails",
              "iam:GetServiceLastAccessedDetails"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceImageBuildFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListBuilds",
              "aws-marketplace:StartBuild",
              "aws-marketplace:DescribeBuilds"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:TerminateInstances",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/marketplace-image-build:build-id": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/*Automation*",
              "arn:aws:iam::*:role/*Instance*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:GetAutomationExecution",
              "ssm:ListDocuments",
              "ssm:DescribeDocument",
              "ec2:DeregisterImage",
              "ec2:CopyImage",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeImages",
              "ec2:DescribeSubnets",
              "ec2:DeleteSnapshot",
              "ec2:CreateImage",
              "ec2:RunInstances",
              "ec2:DescribeInstanceStatus",
              "sns:GetTopicAttributes",
              "iam:GetRole",
              "iam:GetInstanceProfile"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::*image-build*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": [
              "arn:aws:sns:*:*:*image-build*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
              "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
              "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
              "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
              "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
              "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
              "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
              "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ],
                "iam:AssociatedResourceARN": [
                  "arn:aws:ssm:eu-central-1:906690553262:automation-definition/*",
                  "arn:aws:ssm:us-east-1:058657716661:automation-definition/*",
                  "arn:aws:ssm:ap-northeast-1:340648487307:automation-definition/*",
                  "arn:aws:ssm:eu-west-1:564714592864:automation-definition/*",
                  "arn:aws:ssm:us-west-2:243045473901:automation-definition/*",
                  "arn:aws:ssm:ap-southeast-2:362149219987:automation-definition/*",
                  "arn:aws:ssm:eu-west-2:587945719687:automation-definition/*",
                  "arn:aws:ssm:us-east-2:134937423163:automation-definition/*"
                ]
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/marketplace-image-build:build-id": "*"
              },
              "StringNotEquals": {
                "ec2:CreateAction": "RunInstances"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDiscoveryContinuousExportFirehosePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "glue:GetTableVersions"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-application-discovery-service-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose:log-stream:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ApplicationDiscoveryServiceContinuousExportServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "glue:CreateDatabase",
              "glue:UpdateDatabase",
              "glue:CreateTable",
              "glue:UpdateTable",
              "firehose:CreateDeliveryStream",
              "firehose:DescribeDeliveryStream",
              "logs:CreateLogGroup"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "firehose:DeleteDeliveryStream",
              "firehose:PutRecord",
              "firehose:PutRecordBatch",
              "firehose:UpdateDestination"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:firehose:*:*:deliverystream/aws-application-discovery-service*"
          },
          {
            "Action": [
              "s3:CreateBucket",
              "s3:ListBucket",
              "s3:PutBucketLogging",
              "s3:PutEncryptionConfiguration"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:s3:::aws-application-discovery-service*"
          },
          {
            "Action": [
              "s3:GetObject"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:s3:::aws-application-discovery-service*/*"
          },
          {
            "Action": [
              "logs:CreateLogStream",
              "logs:PutRetentionPolicy"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/application-discovery-service/firehose*"
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/AWSApplicationDiscoveryServiceFirehose",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "firehose.amazonaws.com"
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/service-role/AWSApplicationDiscoveryServiceFirehose",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "firehose.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAutoScalingPlansEC2AutoScalingPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeScheduledActions",
              "autoscaling:BatchPutScheduledUpdateGroupAction",
              "autoscaling:BatchDeleteScheduledAction"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "WAFRegionalLoggingServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "firehose:PutRecord",
              "firehose:PutRecordBatch"
            ],
            "Resource": [
              "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "WAFLoggingServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "firehose:PutRecord",
              "firehose:PutRecordBatch"
            ],
            "Resource": [
              "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFreeRTOSOTAUpdate",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObjectVersion",
              "s3:PutObject",
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::afr-ota*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "signer:StartSigningJob",
              "signer:DescribeSigningJob",
              "signer:GetSigningProfile",
              "signer:PutSigningProfile"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucketVersions",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:GetBucketLocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iot:DeleteJob",
              "iot:DescribeJob"
            ],
            "Resource": "arn:aws:iot:*:*:job/AFR_OTA*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iot:DeleteStream"
            ],
            "Resource": "arn:aws:iot:*:*:stream/AFR_OTA*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iot:CreateStream",
              "iot:CreateJob"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSXRayDaemonWriteAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSXRayDaemonWriteAccess",
            "Effect": "Allow",
            "Action": [
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
              "xray:GetSamplingStatisticSummaries"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonConnectServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowConnectActions",
            "Effect": "Allow",
            "Action": [
              "connect:*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowDeleteSLR",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect_*"
          },
          {
            "Sid": "AllowS3ObjectForConnectBucket",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:DeleteObject"
            ],
            "Resource": [
              "arn:aws:s3:::amazon-connect-*/*"
            ]
          },
          {
            "Sid": "AllowGetBucketMetadataForConnectBucket",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetBucketAcl"
            ],
            "Resource": [
              "arn:aws:s3:::amazon-connect-*"
            ]
          },
          {
            "Sid": "AllowConnectLogGroupAccess",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/connect/*:*"
            ]
          },
          {
            "Sid": "AllowListLexBotAccess",
            "Effect": "Allow",
            "Action": [
              "lex:ListBots",
              "lex:ListBotAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowCustomerProfilesForConnectDomain",
            "Effect": "Allow",
            "Action": [
              "profile:SearchProfiles",
              "profile:CreateProfile",
              "profile:UpdateProfile",
              "profile:AddProfileKey",
              "profile:ListProfileObjectTypes",
              "profile:ListCalculatedAttributeDefinitions",
              "profile:ListCalculatedAttributesForProfile",
              "profile:GetDomain",
              "profile:ListIntegrations"
            ],
            "Resource": "arn:aws:profile:*:*:domains/amazon-connect-*"
          },
          {
            "Sid": "AllowReadPermissionForCustomerProfileObjects",
            "Effect": "Allow",
            "Action": [
              "profile:ListProfileObjects",
              "profile:GetProfileObjectType"
            ],
            "Resource": [
              "arn:aws:profile:*:*:domains/amazon-connect-*/object-types/*"
            ]
          },
          {
            "Sid": "AllowListIntegrationForCustomerProfile",
            "Effect": "Allow",
            "Action": [
              "profile:ListAccountIntegrations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadForCustomerProfileObjectTemplates",
            "Effect": "Allow",
            "Action": [
              "profile:ListProfileObjectTypeTemplates",
              "profile:GetProfileObjectTypeTemplate"
            ],
            "Resource": "arn:aws:profile:*:*:/templates*"
          },
          {
            "Sid": "AllowWisdomForConnectEnabledTaggedResources",
            "Effect": "Allow",
            "Action": [
              "wisdom:CreateContent",
              "wisdom:DeleteContent",
              "wisdom:CreateKnowledgeBase",
              "wisdom:GetAssistant",
              "wisdom:GetKnowledgeBase",
              "wisdom:GetContent",
              "wisdom:GetRecommendations",
              "wisdom:GetSession",
              "wisdom:NotifyRecommendationsReceived",
              "wisdom:QueryAssistant",
              "wisdom:StartContentUpload",
              "wisdom:UpdateContent",
              "wisdom:UntagResource",
              "wisdom:TagResource",
              "wisdom:CreateSession",
              "wisdom:CreateQuickResponse",
              "wisdom:GetQuickResponse",
              "wisdom:SearchQuickResponses",
              "wisdom:StartImportJob",
              "wisdom:GetImportJob",
              "wisdom:ListImportJobs",
              "wisdom:ListQuickResponses",
              "wisdom:UpdateQuickResponse",
              "wisdom:DeleteQuickResponse",
              "wisdom:PutFeedback",
              "wisdom:ListContentAssociations"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AmazonConnectEnabled": "True"
              }
            }
          },
          {
            "Sid": "AllowListOperationForWisdom",
            "Effect": "Allow",
            "Action": [
              "wisdom:ListAssistants",
              "wisdom:ListKnowledgeBases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowCustomerProfilesCalculatedAttributesForConnectDomain",
            "Effect": "Allow",
            "Action": [
              "profile:GetCalculatedAttributeForProfile",
              "profile:CreateCalculatedAttributeDefinition",
              "profile:DeleteCalculatedAttributeDefinition",
              "profile:GetCalculatedAttributeDefinition",
              "profile:UpdateCalculatedAttributeDefinition"
            ],
            "Resource": [
              "arn:aws:profile:*:*:domains/amazon-connect-*/calculated-attributes/*"
            ]
          },
          {
            "Sid": "AllowPutMetricsForConnectNamespace",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/Connect"
              }
            }
          },
          {
            "Sid": "AllowSMSVoiceOperationsForConnect",
            "Effect": "Allow",
            "Action": [
              "sms-voice:SendTextMessage",
              "sms-voice:DescribePhoneNumbers"
            ],
            "Resource": "arn:aws:sms-voice:*:*:phone-number/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowCognitoForConnectEnabledTaggedResources",
            "Effect": "Allow",
            "Action": [
              "cognito-idp:DescribeUserPool",
              "cognito-idp:ListUserPoolClients"
            ],
            "Resource": "arn:aws:cognito-idp:*:*:userpool/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AmazonConnectEnabled": "True"
              }
            }
          },
          {
            "Sid": "AllowWritePermissionForCustomerProfileObjects",
            "Effect": "Allow",
            "Action": [
              "profile:PutProfileObject"
            ],
            "Resource": [
              "arn:aws:profile:*:*:domains/amazon-connect-*/object-types/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ElasticLoadBalancingReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Statement1",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:Describe*",
              "elasticloadbalancing:Get*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Statement2",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeClassicLinkInstances",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Statement3",
            "Effect": "Allow",
            "Action": "arc-zonal-shift:GetManagedResource",
            "Resource": "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
          },
          {
            "Sid": "Statement4",
            "Effect": "Allow",
            "Action": [
              "arc-zonal-shift:ListManagedResources",
              "arc-zonal-shift:ListZonalShifts"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ElasticLoadBalancingFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcClassicLink",
              "ec2:DescribeInstances",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeClassicLinkInstances",
              "ec2:DescribeRouteTables",
              "ec2:DescribeCoipPools",
              "ec2:GetCoipPoolUsage",
              "ec2:DescribeVpcPeeringConnections",
              "cognito-idp:DescribeUserPoolClient"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "arc-zonal-shift:*",
            "Resource": "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "arc-zonal-shift:ListManagedResources",
              "arc-zonal-shift:ListZonalShifts"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "LightsailExportAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/lightsail.amazonaws.com/AWSServiceRoleForLightsail*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CopySnapshot",
              "ec2:DescribeSnapshots",
              "ec2:CopyImage",
              "ec2:DescribeImages"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetAccountPublicAccessBlock"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftQueryEditor",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "redshift:GetClusterCredentials",
              "redshift:ListSchemas",
              "redshift:ListTables",
              "redshift:ListDatabases",
              "redshift:ExecuteQuery",
              "redshift:FetchResults",
              "redshift:CancelQuery",
              "redshift:DescribeClusters",
              "redshift:DescribeQuery",
              "redshift:DescribeTable",
              "redshift:ViewQueriesFromConsole",
              "redshift:DescribeSavedQueries",
              "redshift:CreateSavedQuery",
              "redshift:DeleteSavedQueries",
              "redshift:ModifySavedQuery"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DataAPIPermissions",
            "Action": [
              "redshift-data:ExecuteStatement",
              "redshift-data:ListDatabases",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables",
              "redshift-data:DescribeTable"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "DataAPIIAMSessionPermissionsRestriction",
            "Action": [
              "redshift-data:GetStatementResult",
              "redshift-data:CancelStatement",
              "redshift-data:DescribeStatement",
              "redshift-data:ListStatements"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "redshift-data:statement-owner-iam-userid": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "SecretsManagerListPermissions",
            "Action": [
              "secretsmanager:ListSecrets"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerCreateGetPermissions",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:TagResource"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:secretsmanager:*:*:secret:*",
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/RedshiftQueryOwner": "${aws:userid}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGlueConsoleSageMakerNotebookFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "glue:*",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSubnetGroups",
              "iam:ListRoles",
              "iam:ListRolePolicies",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeRouteTables",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeInstances",
              "ec2:DescribeImages",
              "ec2:CreateNetworkInterface",
              "ec2:AttachNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeNetworkInterfaces",
              "rds:DescribeDBInstances",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "cloudformation:DescribeStacks",
              "cloudformation:GetTemplateSummary",
              "dynamodb:ListTables",
              "kms:ListAliases",
              "kms:DescribeKey",
              "sagemaker:ListNotebookInstances",
              "cloudformation:ListStacks",
              "cloudwatch:GetMetricData",
              "cloudwatch:ListDashboards"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::*/*aws-glue-*/*",
              "arn:aws:s3:::aws-glue-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:/aws-glue/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/aws-glue*/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreatePresignedNotebookInstanceUrl",
              "sagemaker:CreateNotebookInstance",
              "sagemaker:DeleteNotebookInstance",
              "sagemaker:DescribeNotebookInstance",
              "sagemaker:StartNotebookInstance",
              "sagemaker:StopNotebookInstance",
              "sagemaker:UpdateNotebookInstance",
              "sagemaker:ListTags"
            ],
            "Resource": "arn:aws:sagemaker:*:*:notebook-instance/aws-glue-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeNotebookInstanceLifecycleConfig",
              "sagemaker:CreateNotebookInstanceLifecycleConfig",
              "sagemaker:DeleteNotebookInstanceLifecycleConfig",
              "sagemaker:ListNotebookInstanceLifecycleConfigs"
            ],
            "Resource": "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/aws-glue-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:volume/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances",
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/aws-glue-*/*"
              },
              "StringEquals": {
                "ec2:ResourceTag/aws:cloudformation:logical-id": "ZeppelinInstance"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": [
                  "aws-glue-*"
                ]
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceRole*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "glue.amazonaws.com"
                ]
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceNotebookRole*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/AWSGlueServiceSageMakerNotebookRole*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "sagemaker.amazonaws.com"
                ]
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSGlueServiceRole*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "glue.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonConnectReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowConnectReadOnly",
            "Effect": "Allow",
            "Action": [
              "connect:Get*",
              "connect:Describe*",
              "connect:List*",
              "ds:DescribeDirectories"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DenyConnectEmergencyAccess",
            "Effect": "Deny",
            "Action": "connect:AdminGetEmergencyAccessToken",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCertificateManagerPrivateCAAuditor",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:CreateCertificateAuthorityAuditReport",
              "acm-pca:DescribeCertificateAuthority",
              "acm-pca:DescribeCertificateAuthorityAuditReport",
              "acm-pca:GetCertificateAuthorityCsr",
              "acm-pca:GetCertificateAuthorityCertificate",
              "acm-pca:GetCertificate",
              "acm-pca:GetPolicy",
              "acm-pca:ListPermissions",
              "acm-pca:ListTags"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:ListCertificateAuthorities"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCertificateManagerPrivateCAUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
            "Condition": {
              "StringLike": {
                "acm-pca:TemplateArn": [
                  "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
                ]
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
            "Condition": {
              "StringNotLike": {
                "acm-pca:TemplateArn": [
                  "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:RevokeCertificate",
              "acm-pca:GetCertificate",
              "acm-pca:ListPermissions"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:ListCertificateAuthorities"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCertificateManagerPrivateCAFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCertificateManagerPrivateCAReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:GetPolicy",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "CloudTrailServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudTrailFullAccess",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AwsOrgsAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AwsOrgsDelegatedAdminAccess",
            "Effect": "Allow",
            "Action": "organizations:ListDelegatedAdministrators",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "cloudtrail.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DeleteTableAccess",
            "Effect": "Allow",
            "Action": "glue:DeleteTable",
            "Resource": [
              "arn:*:glue:*:*:catalog",
              "arn:*:glue:*:*:database/aws:cloudtrail",
              "arn:*:glue:*:*:table/aws:cloudtrail/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "DeregisterResourceAccess",
            "Effect": "Allow",
            "Action": "lakeformation:DeregisterResource",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGreengrassReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "greengrass:List*",
              "greengrass:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSSODirectoryReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSSSODirectoryReadOnly",
            "Effect": "Allow",
            "Action": [
              "sso-directory:Search*",
              "sso-directory:Describe*",
              "sso-directory:List*",
              "sso-directory:Get*",
              "identitystore:Describe*",
              "identitystore:List*",
              "identitystore-auth:ListSessions",
              "identitystore-auth:BatchGetSession"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSSODirectoryAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSSSODirectoryAdministrator",
            "Effect": "Allow",
            "Action": [
              "sso-directory:*",
              "identitystore:*",
              "identitystore-auth:*",
              "sso:ListDirectoryAssociations"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOrganizationsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSOrganizationsFullAccess",
            "Effect": "Allow",
            "Action": "organizations:*",
            "Resource": "*"
          },
          {
            "Sid": "AWSOrganizationsFullAccessAccount",
            "Effect": "Allow",
            "Action": [
              "account:PutAlternateContact",
              "account:DeleteAlternateContact",
              "account:GetAlternateContact",
              "account:GetContactInformation",
              "account:PutContactInformation",
              "account:ListRegions",
              "account:EnableRegion",
              "account:DisableRegion"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSOrganizationsFullAccessCreateSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "organizations.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOrganizationsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSOrganizationsReadOnly",
            "Effect": "Allow",
            "Action": [
              "organizations:Describe*",
              "organizations:List*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSOrganizationsReadOnlyAccount",
            "Effect": "Allow",
            "Action": [
              "account:GetAlternateContact",
              "account:GetContactInformation",
              "account:ListRegions",
              "account:GetRegionOptStatus",
              "account:GetPrimaryEmail"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForIoTSiteWise",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowSiteWiseReadGreenGrass",
            "Effect": "Allow",
            "Action": [
              "greengrass:GetAssociatedRole",
              "greengrass:GetCoreDefinition",
              "greengrass:GetCoreDefinitionVersion",
              "greengrass:GetGroup",
              "greengrass:GetGroupVersion"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSiteWiseAccessLogGroup",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/iotsitewise*"
          },
          {
            "Sid": "AllowSiteWiseAccessLog",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/iotsitewise*:log-stream:*"
          },
          {
            "Sid": "AllowSiteWiseAccessSiteWiseManagedWorkspaceInTwinMaker",
            "Effect": "Allow",
            "Action": [
              "iottwinmaker:GetWorkspace",
              "iottwinmaker:ExecuteQuery"
            ],
            "Resource": "arn:aws:iottwinmaker:*:*:workspace/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "iottwinmaker:linkedServices": [
                  "IOTSITEWISE"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceAccessManagerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListChildren",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListParents",
              "organizations:ListRoots"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowDeletionOfServiceLinkedRoleForResourceAccessManager",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ram.amazonaws.com/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSKeyManagementServiceCustomKeyStoresServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudhsm:Describe*",
              "ec2:CreateNetworkInterface",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateSecurityGroup",
              "ec2:DescribeSecurityGroups",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:DeleteSecurityGroup",
              "ec2:DescribeVpcs",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaces"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "KafkaServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:AttachNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DetachNetworkInterface",
              "ec2:DescribeVpcEndpoints",
              "acm-pca:GetCertificateAuthorityCertificate",
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": "arn:*:ec2:*:*:subnet/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVpcEndpoints",
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": "arn:*:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AWSMSKManaged": "true"
              },
              "StringLike": {
                "ec2:ResourceTag/ClusterArn": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetResourcePolicy",
              "secretsmanager:PutResourcePolicy",
              "secretsmanager:DeleteResourcePolicy",
              "secretsmanager:DescribeSecret"
            ],
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "secretsmanager:SecretId": "arn:*:secretsmanager:*:*:secret:AmazonMSK_*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticMapReduceEditorsRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateSecurityGroup",
              "ec2:DescribeSecurityGroups",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DescribeNetworkInterfaces",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DescribeTags",
              "ec2:DescribeInstances",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "elasticmapreduce:ListInstances",
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:ListSteps"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws:elasticmapreduce:editor-id",
                  "aws:elasticmapreduce:job-flow-id"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSDataFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SecretsManagerDbCredentialsAccess",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue",
              "secretsmanager:PutResourcePolicy",
              "secretsmanager:PutSecretValue",
              "secretsmanager:DeleteSecret",
              "secretsmanager:DescribeSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:rds-db-credentials/*"
          },
          {
            "Sid": "RDSDataServiceAccess",
            "Effect": "Allow",
            "Action": [
              "dbqms:CreateFavoriteQuery",
              "dbqms:DescribeFavoriteQueries",
              "dbqms:UpdateFavoriteQuery",
              "dbqms:DeleteFavoriteQueries",
              "dbqms:GetQueryString",
              "dbqms:CreateQueryHistory",
              "dbqms:DescribeQueryHistory",
              "dbqms:UpdateQueryHistory",
              "dbqms:DeleteQueryHistory",
              "rds-data:ExecuteSql",
              "rds-data:ExecuteStatement",
              "rds-data:BatchExecuteStatement",
              "rds-data:BeginTransaction",
              "rds-data:CommitTransaction",
              "rds-data:RollbackTransaction",
              "secretsmanager:CreateSecret",
              "secretsmanager:ListSecrets",
              "secretsmanager:GetRandomPassword",
              "tag:GetResources"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSRoboMakerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
              "robomaker:List*",
              "robomaker:BatchDescribe*",
              "robomaker:Describe*",
              "robomaker:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSRoboMakerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeSecurityGroups",
              "greengrass:CreateDeployment",
              "greengrass:CreateGroupVersion",
              "greengrass:CreateFunctionDefinition",
              "greengrass:CreateFunctionDefinitionVersion",
              "greengrass:GetDeploymentStatus",
              "greengrass:GetGroup",
              "greengrass:GetGroupVersion",
              "greengrass:GetCoreDefinitionVersion",
              "greengrass:GetFunctionDefinitionVersion",
              "greengrass:GetAssociatedRole",
              "lambda:CreateFunction"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "lambda:UpdateFunctionCode",
              "lambda:GetFunction",
              "lambda:UpdateFunctionConfiguration"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": "lambda.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSRoboMakerServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeSecurityGroups",
              "greengrass:CreateDeployment",
              "greengrass:CreateGroupVersion",
              "greengrass:CreateFunctionDefinition",
              "greengrass:CreateFunctionDefinitionVersion",
              "greengrass:GetDeploymentStatus",
              "greengrass:GetGroup",
              "greengrass:GetGroupVersion",
              "greengrass:GetCoreDefinitionVersion",
              "greengrass:GetFunctionDefinitionVersion",
              "greengrass:GetAssociatedRole",
              "lambda:CreateFunction",
              "robomaker:CreateSimulationJob",
              "robomaker:CancelSimulationJob"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "robomaker:TagResource"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:robomaker:*:*:simulation-job/*"
          },
          {
            "Action": [
              "lambda:UpdateFunctionCode",
              "lambda:GetFunction",
              "lambda:UpdateFunctionConfiguration",
              "lambda:DeleteFunction",
              "lambda:ListVersionsByFunction",
              "lambda:GetAlias",
              "lambda:UpdateAlias",
              "lambda:CreateAlias",
              "lambda:DeleteAlias"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:lambda:*:*:function:aws-robomaker-*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lambda.amazonaws.com",
                  "robomaker.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSVPCTransitGatewayServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:AssignIpv6Addresses",
              "ec2:UnAssignIpv6Addresses"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "0"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLicenseManagerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "IAMPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/license-management.marketplace.amazonaws.com/AWSServiceRoleForMarketplaceLicenseManagement"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "license-management.marketplace.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMPermissionsForCreatingMemberSLR",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:*:iam::*:role/aws-service-role/license-manager.member-account.amazonaws.com/AWSServiceRoleForAWSLicenseManagerMemberAccountRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "license-manager.member-account.amazonaws.com"
              }
            }
          },
          {
            "Sid": "S3BucketPermissions1",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-license-manager-service-*"
            ]
          },
          {
            "Sid": "S3BucketPermissions2",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "S3ObjectPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-license-manager-service-*"
            ]
          },
          {
            "Sid": "SNSAccountPermissions",
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": [
              "arn:aws:sns:*:*:aws-license-manager-service-*"
            ]
          },
          {
            "Sid": "SNSTopicPermissions",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EC2Permissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeImages",
              "ec2:DescribeHosts"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SSMPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:ListInventoryEntries",
              "ssm:GetInventory",
              "ssm:CreateAssociation"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "OrganizationPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeOrganization",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "LicenseManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "license-manager:GetServiceSettings",
              "license-manager:GetLicense*",
              "license-manager:UpdateLicenseSpecificationsForResource",
              "license-manager:List*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLicenseManagerMasterAccountRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "S3BucketPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:GetLifecycleConfiguration",
              "s3:PutLifecycleConfiguration",
              "s3:GetBucketPolicy",
              "s3:PutBucketPolicy"
            ],
            "Resource": [
              "arn:aws:s3:::aws-license-manager-service-*"
            ]
          },
          {
            "Sid": "S3ObjectPermissions1",
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:PutObject",
              "s3:GetObject",
              "s3:ListBucketMultipartUploads",
              "s3:ListMultipartUploadParts"
            ],
            "Resource": [
              "arn:aws:s3:::aws-license-manager-service-*"
            ]
          },
          {
            "Sid": "S3ObjectPermissions2",
            "Effect": "Allow",
            "Action": [
              "s3:DeleteObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-license-manager-service-*/resource_sync/*"
            ]
          },
          {
            "Sid": "AthenaPermissions",
            "Effect": "Allow",
            "Action": [
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:StartQueryExecution"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "GluePermissions",
            "Effect": "Allow",
            "Action": [
              "glue:GetTable",
              "glue:GetPartition",
              "glue:GetPartitions"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "OrganizationPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:DescribeAccount",
              "organizations:ListChildren",
              "organizations:ListParents",
              "organizations:ListAccountsForParent",
              "organizations:ListRoots",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "RAMPermissions1",
            "Effect": "Allow",
            "Action": [
              "ram:GetResourceShares",
              "ram:GetResourceShareAssociations",
              "ram:TagResource"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "RAMPermissions2",
            "Effect": "Allow",
            "Action": [
              "ram:CreateResourceShare"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/Service": "LicenseManager"
              }
            }
          },
          {
            "Sid": "RAMPermissions3",
            "Effect": "Allow",
            "Action": [
              "ram:AssociateResourceShare",
              "ram:DisassociateResourceShare",
              "ram:UpdateResourceShare",
              "ram:DeleteResourceShare"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/Service": "LicenseManager"
              }
            }
          },
          {
            "Sid": "IAMGetRoles",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "IAMPassRoles",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/LicenseManagerServiceResourceDataSyncRole*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "cloudformation.amazonaws.com",
                  "glue.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CloudformationPermission",
            "Effect": "Allow",
            "Action": [
              "cloudformation:UpdateStack",
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStacks"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/LicenseManagerCrossAccountCloudDiscoveryStack/*"
            ]
          },
          {
            "Sid": "GlueUpdatePermissions",
            "Effect": "Allow",
            "Action": [
              "glue:CreateTable",
              "glue:UpdateTable",
              "glue:DeleteTable",
              "glue:UpdateJob",
              "glue:UpdateCrawler"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:crawler/LicenseManagerResourceSynDataCrawler",
              "arn:aws:glue:*:*:job/LicenseManagerResourceSynDataProcessJob",
              "arn:aws:glue:*:*:table/license_manager_resource_inventory_db/*",
              "arn:aws:glue:*:*:table/license_manager_resource_sync/*",
              "arn:aws:glue:*:*:database/license_manager_resource_inventory_db",
              "arn:aws:glue:*:*:database/license_manager_resource_sync"
            ]
          },
          {
            "Sid": "RGPermissions",
            "Effect": "Allow",
            "Action": [
              "resource-groups:PutGroupPolicy"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "ram.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLicenseManagerMemberAccountRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "LicenseManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "license-manager:UpdateLicenseSpecificationsForResource",
              "license-manager:GetLicenseConfiguration"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SSMPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:ListInventoryEntries",
              "ssm:GetInventory",
              "ssm:CreateAssociation",
              "ssm:CreateResourceDataSync",
              "ssm:DeleteResourceDataSync",
              "ssm:ListResourceDataSync",
              "ssm:ListAssociations"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "RAMPermissions",
            "Effect": "Allow",
            "Action": [
              "ram:AcceptResourceShareInvitation",
              "ram:GetResourceShareInvitations"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ServerMigrationServiceLaunchRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyInstanceAttribute",
              "ec2:StopInstances",
              "ec2:StartInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:instance/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateIamInstanceProfile",
              "ec2:AssociateIamInstanceProfile",
              "ec2:ReplaceIamInstanceProfileAssociation"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances",
              "ec2:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "applicationinsights:Describe*",
              "applicationinsights:List*",
              "cloudformation:ListStackResources",
              "cloudformation:DescribeStacks"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "applicationinsights:CreateApplication",
              "applicationinsights:CreateComponent",
              "applicationinsights:UpdateApplication",
              "applicationinsights:DeleteApplication",
              "applicationinsights:UpdateComponentConfiguration",
              "applicationinsights:DeleteComponent"
            ],
            "Resource": "arn:aws:applicationinsights:*:*:application/resource-group/sms-app-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "resource-groups:CreateGroup",
              "resource-groups:GetGroup",
              "resource-groups:UpdateGroup",
              "resource-groups:DeleteGroup"
            ],
            "Resource": "arn:aws:resource-groups:*:*:group/sms-app-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "application-insights.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "GlobalAcceleratorReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "globalaccelerator:Describe*",
              "globalaccelerator:List*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "GlobalAcceleratorFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "globalaccelerator:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": "elasticloadbalancing:DescribeLoadBalancers",
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "ec2:DescribeAddresses",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeRegions",
              "ec2:DescribeSubnets"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/globalaccelerator.amazonaws.com/AWSServiceRoleForGlobalAccelerator*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "globalaccelerator.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPrivateMarketplaceAdminFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PrivateMarketplaceRequestPermissions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:AssociateProductsWithPrivateMarketplace",
              "aws-marketplace:DisassociateProductsFromPrivateMarketplace",
              "aws-marketplace:ListPrivateMarketplaceRequests",
              "aws-marketplace:DescribePrivateMarketplaceRequests"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PrivateMarketplaceCatalogAPIPermissions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListEntities",
              "aws-marketplace:DescribeEntity",
              "aws-marketplace:StartChangeSet",
              "aws-marketplace:ListChangeSets",
              "aws-marketplace:DescribeChangeSet",
              "aws-marketplace:CancelChangeSet"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PrivateMarketplaceCatalogTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:TagResource",
              "aws-marketplace:UntagResource",
              "aws-marketplace:ListTagsForResource"
            ],
            "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
          },
          {
            "Sid": "PrivateMarketplaceOrganizationPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribeAccount",
              "organizations:ListRoots",
              "organizations:ListParents",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListAccountsForParent",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ComprehendMedicalFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "comprehendmedical:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployRoleForECS",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ecs:DescribeServices",
              "ecs:CreateTaskSet",
              "ecs:UpdateServicePrimaryTaskSet",
              "ecs:DeleteTaskSet",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:ModifyRule",
              "lambda:InvokeFunction",
              "cloudwatch:DescribeAlarms",
              "sns:Publish",
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "ecs-tasks.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployRoleForECSLimited",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ecs:DescribeServices",
              "ecs:CreateTaskSet",
              "ecs:UpdateServicePrimaryTaskSet",
              "ecs:DeleteTaskSet",
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "sns:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:CodeDeployTopic_*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:ModifyRule"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
              }
            },
            "Effect": "Allow"
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/ecsTaskExecutionRole",
              "arn:aws:iam::*:role/ECSTaskExecution*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "ecs-tasks.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "TranslateFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "translate:*",
              "comprehend:DetectDominantLanguage",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "iam:ListRoles",
              "iam:GetRole"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSecurityHubServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SecurityHubServiceRolePermissions",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:DescribeTrails",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:GetEventSelectors",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmsForMetric",
              "logs:DescribeMetricFilters",
              "sns:ListSubscriptionsByTopic",
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus",
              "config:DescribeConfigRules",
              "config:DescribeConfigRuleEvaluationStatus",
              "config:BatchGetResourceConfig",
              "config:SelectResourceConfig",
              "iam:GenerateCredentialReport",
              "organizations:ListAccounts",
              "config:PutEvaluations",
              "tag:GetResources",
              "iam:GetCredentialReport",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListChildren",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeOrganizationalUnit",
              "securityhub:BatchDisableStandards",
              "securityhub:BatchEnableStandards",
              "securityhub:BatchUpdateStandardsControlAssociations",
              "securityhub:BatchGetSecurityControls",
              "securityhub:BatchGetStandardsControlAssociations",
              "securityhub:CreateMembers",
              "securityhub:DeleteMembers",
              "securityhub:DescribeHub",
              "securityhub:DescribeOrganizationConfiguration",
              "securityhub:DescribeStandards",
              "securityhub:DescribeStandardsControls",
              "securityhub:DisassociateFromAdministratorAccount",
              "securityhub:DisassociateMembers",
              "securityhub:DisableSecurityHub",
              "securityhub:EnableSecurityHub",
              "securityhub:GetEnabledStandards",
              "securityhub:ListStandardsControlAssociations",
              "securityhub:ListSecurityControlDefinitions",
              "securityhub:UpdateOrganizationConfiguration",
              "securityhub:UpdateSecurityControl",
              "securityhub:UpdateSecurityHubConfiguration",
              "securityhub:UpdateStandardsControl"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecurityHubServiceRoleConfigPermissions",
            "Effect": "Allow",
            "Action": [
              "config:PutConfigRule",
              "config:DeleteConfigRule",
              "config:GetComplianceDetailsByConfigRule"
            ],
            "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/*securityhub*"
          },
          {
            "Sid": "SecurityHubServiceRoleOrganizationsPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "securityhub.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSecurityHubFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SecurityHubAllowAll",
            "Effect": "Allow",
            "Action": "securityhub:*",
            "Resource": "*"
          },
          {
            "Sid": "SecurityHubServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "securityhub.amazonaws.com"
              }
            }
          },
          {
            "Sid": "OtherServicePermission",
            "Effect": "Allow",
            "Action": [
              "guardduty:GetDetector",
              "guardduty:ListDetectors",
              "inspector2:BatchGetAccountStatus",
              "pricing:GetProducts"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSecurityHubReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSSecurityHubReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "securityhub:Get*",
              "securityhub:List*",
              "securityhub:BatchGet*",
              "securityhub:Describe*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFSxServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateFileSystem",
            "Effect": "Allow",
            "Action": [
              "ds:AuthorizeApplication",
              "ds:GetAuthorizedApplicationDetails",
              "ds:UnauthorizeApplication",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeAddresses",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DisassociateAddress",
              "ec2:GetSecurityGroupsForVpc",
              "route53:AssociateVPCWithHostedZone"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PutMetrics",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/FSx"
              }
            }
          },
          {
            "Sid": "TagResourceNetworkInterface",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "AmazonFSx.FileSystemId"
              }
            }
          },
          {
            "Sid": "ManageNetworkInterface",
            "Effect": "Allow",
            "Action": [
              "ec2:AssignPrivateIpAddresses",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:UnassignPrivateIpAddresses"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonFSx.FileSystemId": "false"
              }
            }
          },
          {
            "Sid": "ManageRouteTable",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateRoute",
              "ec2:ReplaceRoute",
              "ec2:DeleteRoute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:route-table/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AmazonFSx": "ManagedByAmazonFSx"
              }
            }
          },
          {
            "Sid": "PutCloudWatchLogs",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/fsx/*"
          },
          {
            "Sid": "ManageAuditLogs",
            "Effect": "Allow",
            "Action": [
              "firehose:DescribeDeliveryStream",
              "firehose:PutRecord",
              "firehose:PutRecordBatch"
            ],
            "Resource": "arn:aws:firehose:*:*:deliverystream/aws-fsx-*"
          }
        ]
      }
    },
    {
      "PolicyName": "FSxDeleteServiceLinkedRoleAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus",
              "iam:GetRole"
            ],
            "Resource": "arn:*:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/AWSServiceRoleForFSxS3Access_*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFSxReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "fsx:Describe*",
              "fsx:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFSxFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ViewAWSDSDirectories",
            "Effect": "Allow",
            "Action": [
              "ds:DescribeDirectories"
            ],
            "Resource": "*"
          },
          {
            "Sid": "FullAccessToFSx",
            "Effect": "Allow",
            "Action": [
              "fsx:AssociateFileGateway",
              "fsx:AssociateFileSystemAliases",
              "fsx:CancelDataRepositoryTask",
              "fsx:CopyBackup",
              "fsx:CopySnapshotAndUpdateVolume",
              "fsx:CreateBackup",
              "fsx:CreateDataRepositoryAssociation",
              "fsx:CreateDataRepositoryTask",
              "fsx:CreateFileCache",
              "fsx:CreateFileSystem",
              "fsx:CreateFileSystemFromBackup",
              "fsx:CreateSnapshot",
              "fsx:CreateStorageVirtualMachine",
              "fsx:CreateVolume",
              "fsx:CreateVolumeFromBackup",
              "fsx:DeleteBackup",
              "fsx:DeleteDataRepositoryAssociation",
              "fsx:DeleteFileCache",
              "fsx:DeleteFileSystem",
              "fsx:DeleteSnapshot",
              "fsx:DeleteStorageVirtualMachine",
              "fsx:DeleteVolume",
              "fsx:DescribeAssociatedFileGateways",
              "fsx:DescribeBackups",
              "fsx:DescribeDataRepositoryAssociations",
              "fsx:DescribeDataRepositoryTasks",
              "fsx:DescribeFileCaches",
              "fsx:DescribeFileSystemAliases",
              "fsx:DescribeFileSystems",
              "fsx:DescribeSharedVpcConfiguration",
              "fsx:DescribeSnapshots",
              "fsx:DescribeStorageVirtualMachines",
              "fsx:DescribeVolumes",
              "fsx:DisassociateFileGateway",
              "fsx:DisassociateFileSystemAliases",
              "fsx:ListTagsForResource",
              "fsx:ManageBackupPrincipalAssociations",
              "fsx:ReleaseFileSystemNfsV3Locks",
              "fsx:RestoreVolumeFromSnapshot",
              "fsx:TagResource",
              "fsx:UntagResource",
              "fsx:UpdateDataRepositoryAssociation",
              "fsx:UpdateFileCache",
              "fsx:UpdateFileSystem",
              "fsx:UpdateSharedVpcConfiguration",
              "fsx:UpdateSnapshot",
              "fsx:UpdateStorageVirtualMachine",
              "fsx:UpdateVolume"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateSLRForFSx",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "fsx.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CreateSLRForLustreS3Integration",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "s3.data-source.lustre.fsx.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CreateLogsForFSxWindowsAuditLogs",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/fsx/*"
            ]
          },
          {
            "Sid": "WriteToAmazonKinesisDataFirehose",
            "Effect": "Allow",
            "Action": [
              "firehose:PutRecord"
            ],
            "Resource": [
              "arn:aws:firehose:*:*:deliverystream/aws-fsx-*"
            ]
          },
          {
            "Sid": "CreateTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:route-table/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/AmazonFSx": "ManagedByAmazonFSx"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "fsx.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DescribeEC2VpcResources",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSecurityGroups",
              "ec2:GetSecurityGroupsForVpc",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeRouteTables"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "fsx.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ManageCrossAccountDataReplication",
            "Effect": "Allow",
            "Action": [
              "fsx:PutResourcePolicy",
              "fsx:GetResourcePolicy",
              "fsx:DeleteResourcePolicy"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "ram.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFSxConsoleReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "FSxReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "ds:DescribeDirectories",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeSecurityGroups",
              "ec2:GetSecurityGroupsForVpc",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "firehose:ListDeliveryStreams",
              "fsx:Describe*",
              "fsx:ListTagsForResource",
              "kms:DescribeKey",
              "logs:DescribeLogGroups"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFSxConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ListResourcesAssociatedWithFSxFileSystem",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "ds:DescribeDirectories",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:GetSecurityGroupsForVpc",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "firehose:ListDeliveryStreams",
              "kms:ListAliases",
              "logs:DescribeLogGroups",
              "s3:ListBucket"
            ],
            "Resource": "*"
          },
          {
            "Sid": "FullAccessToFSx",
            "Effect": "Allow",
            "Action": [
              "fsx:AssociateFileGateway",
              "fsx:AssociateFileSystemAliases",
              "fsx:CancelDataRepositoryTask",
              "fsx:CopyBackup",
              "fsx:CopySnapshotAndUpdateVolume",
              "fsx:CreateBackup",
              "fsx:CreateDataRepositoryAssociation",
              "fsx:CreateDataRepositoryTask",
              "fsx:CreateFileCache",
              "fsx:CreateFileSystem",
              "fsx:CreateFileSystemFromBackup",
              "fsx:CreateSnapshot",
              "fsx:CreateStorageVirtualMachine",
              "fsx:CreateVolume",
              "fsx:CreateVolumeFromBackup",
              "fsx:DeleteBackup",
              "fsx:DeleteDataRepositoryAssociation",
              "fsx:DeleteFileCache",
              "fsx:DeleteFileSystem",
              "fsx:DeleteSnapshot",
              "fsx:DeleteStorageVirtualMachine",
              "fsx:DeleteVolume",
              "fsx:DescribeAssociatedFileGateways",
              "fsx:DescribeBackups",
              "fsx:DescribeDataRepositoryAssociations",
              "fsx:DescribeDataRepositoryTasks",
              "fsx:DescribeFileCaches",
              "fsx:DescribeFileSystemAliases",
              "fsx:DescribeFileSystems",
              "fsx:DescribeSharedVpcConfiguration",
              "fsx:DescribeSnapshots",
              "fsx:DescribeStorageVirtualMachines",
              "fsx:DescribeVolumes",
              "fsx:DisassociateFileGateway",
              "fsx:DisassociateFileSystemAliases",
              "fsx:ListTagsForResource",
              "fsx:ManageBackupPrincipalAssociations",
              "fsx:ReleaseFileSystemNfsV3Locks",
              "fsx:RestoreVolumeFromSnapshot",
              "fsx:TagResource",
              "fsx:UntagResource",
              "fsx:UpdateDataRepositoryAssociation",
              "fsx:UpdateFileCache",
              "fsx:UpdateFileSystem",
              "fsx:UpdateSharedVpcConfiguration",
              "fsx:UpdateSnapshot",
              "fsx:UpdateStorageVirtualMachine",
              "fsx:UpdateVolume"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateFSxSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "fsx.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CreateSLRForLustreS3Integration",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "s3.data-source.lustre.fsx.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CreateTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:route-table/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/AmazonFSx": "ManagedByAmazonFSx"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "fsx.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ManageCrossAccountDataReplication",
            "Effect": "Allow",
            "Action": [
              "fsx:PutResourcePolicy",
              "fsx:GetResourcePolicy",
              "fsx:DeleteResourcePolicy"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "ram.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTextractFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "textract:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTextractServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:AmazonTextract*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudMapReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "servicediscovery:Get*",
              "servicediscovery:List*",
              "servicediscovery:DiscoverInstances",
              "servicediscovery:DiscoverInstancesRevision"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudMapFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53:GetHostedZone",
              "route53:ListHostedZonesByName",
              "route53:CreateHostedZone",
              "route53:DeleteHostedZone",
              "route53:ChangeResourceRecordSets",
              "route53:CreateHealthCheck",
              "route53:GetHealthCheck",
              "route53:DeleteHealthCheck",
              "route53:UpdateHealthCheck",
              "ec2:DescribeVpcs",
              "ec2:DescribeRegions",
              "ec2:DescribeInstances",
              "servicediscovery:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudMapDiscoverInstanceAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "servicediscovery:DiscoverInstances",
              "servicediscovery:DiscoverInstancesRevision"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudMapRegisterInstanceAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53:GetHostedZone",
              "route53:ListHostedZonesByName",
              "route53:ChangeResourceRecordSets",
              "route53:CreateHealthCheck",
              "route53:GetHealthCheck",
              "route53:DeleteHealthCheck",
              "route53:UpdateHealthCheck",
              "servicediscovery:Get*",
              "servicediscovery:List*",
              "servicediscovery:RegisterInstance",
              "servicediscovery:DeregisterInstance",
              "servicediscovery:DiscoverInstances",
              "servicediscovery:DiscoverInstancesRevision",
              "ec2:DescribeInstances"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "WellArchitectedConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "wellarchitected:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "WellArchitectedConsoleReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "wellarchitected:Get*",
              "wellarchitected:List*",
              "wellarchitected:ExportLens"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudwatchApplicationInsightsServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarmHistory",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:ListMetrics",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:PutAnomalyDetector",
              "cloudwatch:DeleteAnomalyDetector",
              "cloudwatch:DescribeAnomalyDetectors"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CloudWatchLogs",
            "Effect": "Allow",
            "Action": [
              "logs:FilterLogEvents",
              "logs:GetLogEvents",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EventBridge",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CloudFormation",
            "Effect": "Allow",
            "Action": [
              "cloudFormation:CreateStack",
              "cloudFormation:UpdateStack",
              "cloudFormation:DeleteStack",
              "cloudFormation:DescribeStackResources",
              "cloudFormation:UpdateTerminationProtection"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/ApplicationInsights-*"
            ]
          },
          {
            "Sid": "CloudFormationStacks",
            "Effect": "Allow",
            "Action": [
              "cloudFormation:DescribeStacks",
              "cloudFormation:ListStackResources",
              "cloudFormation:ListStacks"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "Tag",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ResourceGroups",
            "Effect": "Allow",
            "Action": [
              "resource-groups:ListGroupResources",
              "resource-groups:GetGroupQuery",
              "resource-groups:GetGroup"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ApplicationInsightsResourceGroup",
            "Effect": "Allow",
            "Action": [
              "resource-groups:CreateGroup",
              "resource-groups:DeleteGroup"
            ],
            "Resource": [
              "arn:aws:resource-groups:*:*:group/ApplicationInsights-*"
            ]
          },
          {
            "Sid": "ElasticLoadBalancing",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AutoScaling",
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAutoScalingGroups"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SSMParameter",
            "Effect": "Allow",
            "Action": [
              "ssm:PutParameter",
              "ssm:DeleteParameter",
              "ssm:AddTagsToResource",
              "ssm:RemoveTagsFromResource",
              "ssm:GetParameters"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-ApplicationInsights-*"
          },
          {
            "Sid": "SSMAssociation",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateAssociation",
              "ssm:UpdateAssociation",
              "ssm:DeleteAssociation",
              "ssm:DescribeAssociation"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:association/*",
              "arn:aws:ssm:*:*:managed-instance/*",
              "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure",
              "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
              "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent"
            ]
          },
          {
            "Sid": "SSMOpsItem",
            "Effect": "Allow",
            "Action": [
              "ssm:GetOpsItem",
              "ssm:CreateOpsItem",
              "ssm:DescribeOpsItems",
              "ssm:UpdateOpsItem",
              "ssm:DescribeInstanceInformation"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SSMTags",
            "Effect": "Allow",
            "Action": [
              "ssm:AddTagsToResource"
            ],
            "Resource": "arn:aws:ssm:*:*:opsitem/*"
          },
          {
            "Sid": "SSMGetCommandInvocation",
            "Effect": "Allow",
            "Action": [
              "ssm:ListCommandInvocations",
              "ssm:GetCommandInvocation"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SSMSendCommand",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:document/AWSEC2-CheckPerformanceCounterSets",
              "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
              "arn:aws:ssm:*:*:document/AWSEC2-DetectWorkload",
              "arn:aws:ssm:*:*:document/AmazonCloudWatch-ManageAgent"
            ]
          },
          {
            "Sid": "EC2",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumeStatus",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeNatGateways"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "RDS",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "Lambda",
            "Effect": "Allow",
            "Action": [
              "lambda:ListFunctions",
              "lambda:GetFunctionConfiguration",
              "lambda:ListEventSourceMappings"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EventBridgeManagedRule",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets",
              "events:DeleteRule"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/AmazonCloudWatch-ApplicationInsights-*"
            ]
          },
          {
            "Sid": "XRay",
            "Effect": "Allow",
            "Action": [
              "xray:GetServiceGraph",
              "xray:GetTraceSummaries",
              "xray:GetTimeSeriesServiceStatistics",
              "xray:GetTraceGraph"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DynamoDB",
            "Effect": "Allow",
            "Action": [
              "dynamodb:ListTables",
              "dynamodb:DescribeTable",
              "dynamodb:DescribeContributorInsights",
              "dynamodb:DescribeTimeToLive"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ApplicationAutoscaling",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalableTargets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "S3",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:GetMetricsConfiguration",
              "s3:GetReplicationConfiguration"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "States",
            "Effect": "Allow",
            "Action": [
              "states:ListStateMachines",
              "states:DescribeExecution",
              "states:DescribeStateMachine",
              "states:GetExecutionHistory"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "APIGateway",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ECS",
            "Effect": "Allow",
            "Action": [
              "ecs:DescribeClusters",
              "ecs:DescribeContainerInstances",
              "ecs:DescribeServices",
              "ecs:DescribeTaskDefinition",
              "ecs:DescribeTasks",
              "ecs:DescribeTaskSets",
              "ecs:ListClusters",
              "ecs:ListContainerInstances",
              "ecs:ListServices",
              "ecs:ListTasks"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ECSCluster",
            "Effect": "Allow",
            "Action": [
              "ecs:UpdateClusterSettings"
            ],
            "Resource": [
              "arn:aws:ecs:*:*:cluster/*"
            ]
          },
          {
            "Sid": "EKS",
            "Effect": "Allow",
            "Action": [
              "eks:DescribeCluster",
              "eks:DescribeFargateProfile",
              "eks:DescribeNodegroup",
              "eks:ListClusters",
              "eks:ListFargateProfiles",
              "eks:ListNodegroups",
              "fsx:DescribeFileSystems",
              "fsx:DescribeVolumes"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SNS",
            "Effect": "Allow",
            "Action": [
              "sns:GetSubscriptionAttributes",
              "sns:GetTopicAttributes",
              "sns:GetSMSAttributes",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SQS",
            "Effect": "Allow",
            "Action": [
              "sqs:ListQueues"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchLogsDeleteSubscriptionFilter",
            "Effect": "Allow",
            "Action": [
              "logs:DeleteSubscriptionFilter"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:*"
            ]
          },
          {
            "Sid": "CloudWatchLogsCreateSubscriptionFilter",
            "Effect": "Allow",
            "Action": [
              "logs:PutSubscriptionFilter"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:*",
              "arn:aws:logs:*:*:destination:AmazonCloudWatch-ApplicationInsights-LogIngestionDestination*"
            ]
          },
          {
            "Sid": "EFS",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DescribeFileSystems"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "Route53",
            "Effect": "Allow",
            "Action": [
              "route53:GetHostedZone",
              "route53:GetHealthCheck",
              "route53:ListHostedZones",
              "route53:ListHealthChecks",
              "route53:ListQueryLoggingConfigs"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "Route53Resolver",
            "Effect": "Allow",
            "Action": [
              "route53resolver:ListFirewallRuleGroupAssociations",
              "route53resolver:GetFirewallRuleGroup",
              "route53resolver:ListFirewallRuleGroups",
              "route53resolver:ListResolverEndpoints",
              "route53resolver:GetResolverQueryLogConfig",
              "route53resolver:ListResolverQueryLogConfigs",
              "route53resolver:ListResolverQueryLogConfigAssociations",
              "route53resolver:GetResolverEndpoint",
              "route53resolver:GetFirewallRuleGroupAssociation"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTSiteWiseFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotsitewise:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTSiteWiseReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotsitewise:Describe*",
              "iotsitewise:List*",
              "iotsitewise:Get*",
              "iotsitewise:BatchGet*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonPersonalizeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "personalize:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::*Personalize*",
              "arn:aws:s3:::*personalize*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "personalize.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ClientVPNServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeInternetGateways",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeAccountAttributes",
              "ds:AuthorizeApplication",
              "ds:DescribeDirectories",
              "ds:GetDirectoryLimits",
              "ds:UnauthorizeApplication",
              "logs:DescribeLogStreams",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogGroups",
              "acm:GetCertificate",
              "acm:DescribeCertificate",
              "iam:GetSAMLProvider",
              "lambda:GetFunctionConfiguration"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMQApiReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "mq:Describe*",
              "mq:List*",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMQApiFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mq:*",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DetachNetworkInterface",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeNetworkInterfacePermissions",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
            ]
          },
          {
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "mq.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDocDBFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "rds:AddRoleToDBCluster",
              "rds:AddSourceIdentifierToSubscription",
              "rds:AddTagsToResource",
              "rds:ApplyPendingMaintenanceAction",
              "rds:CopyDBClusterParameterGroup",
              "rds:CopyDBClusterSnapshot",
              "rds:CopyDBParameterGroup",
              "rds:CreateDBCluster",
              "rds:CreateDBClusterParameterGroup",
              "rds:CreateDBClusterSnapshot",
              "rds:CreateDBInstance",
              "rds:CreateDBParameterGroup",
              "rds:CreateDBSubnetGroup",
              "rds:CreateEventSubscription",
              "rds:DeleteDBCluster",
              "rds:DeleteDBClusterParameterGroup",
              "rds:DeleteDBClusterSnapshot",
              "rds:DeleteDBInstance",
              "rds:DeleteDBParameterGroup",
              "rds:DeleteDBSubnetGroup",
              "rds:DeleteEventSubscription",
              "rds:DescribeAccountAttributes",
              "rds:DescribeCertificates",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBClusters",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBLogFiles",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEngineDefaultClusterParameters",
              "rds:DescribeEngineDefaultParameters",
              "rds:DescribeEventCategories",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeEvents",
              "rds:DescribeOptionGroups",
              "rds:DescribeOrderableDBInstanceOptions",
              "rds:DescribePendingMaintenanceActions",
              "rds:DescribeValidDBInstanceModifications",
              "rds:DownloadDBLogFilePortion",
              "rds:FailoverDBCluster",
              "rds:ListTagsForResource",
              "rds:ModifyDBCluster",
              "rds:ModifyDBClusterParameterGroup",
              "rds:ModifyDBClusterSnapshotAttribute",
              "rds:ModifyDBInstance",
              "rds:ModifyDBParameterGroup",
              "rds:ModifyDBSubnetGroup",
              "rds:ModifyEventSubscription",
              "rds:PromoteReadReplicaDBCluster",
              "rds:RebootDBInstance",
              "rds:RemoveRoleFromDBCluster",
              "rds:RemoveSourceIdentifierFromSubscription",
              "rds:RemoveTagsFromResource",
              "rds:ResetDBClusterParameterGroup",
              "rds:ResetDBParameterGroup",
              "rds:RestoreDBClusterFromSnapshot",
              "rds:RestoreDBClusterToPointInTime"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "kms:ListAliases",
              "kms:ListKeyPolicies",
              "kms:ListKeys",
              "kms:ListRetirableGrants",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "sns:ListSubscriptions",
              "sns:ListTopics",
              "sns:Publish"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "rds.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDocDBReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "rds:DescribeAccountAttributes",
              "rds:DescribeCertificates",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBClusters",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBLogFiles",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEventCategories",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeEvents",
              "rds:DescribeOrderableDBInstanceOptions",
              "rds:DescribePendingMaintenanceActions",
              "rds:DownloadDBLogFilePortion",
              "rds:ListTagsForResource"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "kms:ListKeys",
              "kms:ListRetirableGrants",
              "kms:ListAliases",
              "kms:ListKeyPolicies"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "logs:DescribeLogStreams",
              "logs:GetLogEvents"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
              "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDocDBConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "docdb-elastic:CreateCluster",
              "docdb-elastic:UpdateCluster",
              "docdb-elastic:GetCluster",
              "docdb-elastic:DeleteCluster",
              "docdb-elastic:ListClusters",
              "docdb-elastic:CreateClusterSnapshot",
              "docdb-elastic:GetClusterSnapshot",
              "docdb-elastic:DeleteClusterSnapshot",
              "docdb-elastic:ListClusterSnapshots",
              "docdb-elastic:RestoreClusterFromSnapshot",
              "docdb-elastic:TagResource",
              "docdb-elastic:UntagResource",
              "docdb-elastic:ListTagsForResource",
              "rds:AddRoleToDBCluster",
              "rds:AddSourceIdentifierToSubscription",
              "rds:AddTagsToResource",
              "rds:ApplyPendingMaintenanceAction",
              "rds:CopyDBClusterParameterGroup",
              "rds:CopyDBClusterSnapshot",
              "rds:CopyDBParameterGroup",
              "rds:CreateDBCluster",
              "rds:CreateDBClusterParameterGroup",
              "rds:CreateDBClusterSnapshot",
              "rds:CreateDBInstance",
              "rds:CreateDBParameterGroup",
              "rds:CreateDBSubnetGroup",
              "rds:CreateEventSubscription",
              "rds:CreateGlobalCluster",
              "rds:DeleteDBCluster",
              "rds:DeleteDBClusterParameterGroup",
              "rds:DeleteDBClusterSnapshot",
              "rds:DeleteDBInstance",
              "rds:DeleteDBParameterGroup",
              "rds:DeleteDBSubnetGroup",
              "rds:DeleteEventSubscription",
              "rds:DeleteGlobalCluster",
              "rds:DescribeAccountAttributes",
              "rds:DescribeCertificates",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBClusters",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBLogFiles",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEngineDefaultClusterParameters",
              "rds:DescribeEngineDefaultParameters",
              "rds:DescribeEventCategories",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeEvents",
              "rds:DescribeGlobalClusters",
              "rds:DescribeOptionGroups",
              "rds:DescribeOrderableDBInstanceOptions",
              "rds:DescribePendingMaintenanceActions",
              "rds:DescribeValidDBInstanceModifications",
              "rds:DownloadDBLogFilePortion",
              "rds:FailoverDBCluster",
              "rds:ListTagsForResource",
              "rds:ModifyDBCluster",
              "rds:ModifyDBClusterParameterGroup",
              "rds:ModifyDBClusterSnapshotAttribute",
              "rds:ModifyDBInstance",
              "rds:ModifyDBParameterGroup",
              "rds:ModifyDBSubnetGroup",
              "rds:ModifyEventSubscription",
              "rds:ModifyGlobalCluster",
              "rds:PromoteReadReplicaDBCluster",
              "rds:RebootDBInstance",
              "rds:RemoveFromGlobalCluster",
              "rds:RemoveRoleFromDBCluster",
              "rds:RemoveSourceIdentifierFromSubscription",
              "rds:RemoveTagsFromResource",
              "rds:ResetDBClusterParameterGroup",
              "rds:ResetDBParameterGroup",
              "rds:RestoreDBClusterFromSnapshot",
              "rds:RestoreDBClusterToPointInTime"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "ec2:AllocateAddress",
              "ec2:AssignIpv6Addresses",
              "ec2:AssignPrivateIpAddresses",
              "ec2:AssociateAddress",
              "ec2:AssociateRouteTable",
              "ec2:AssociateSubnetCidrBlock",
              "ec2:AssociateVpcCidrBlock",
              "ec2:AttachInternetGateway",
              "ec2:AttachNetworkInterface",
              "ec2:CreateCustomerGateway",
              "ec2:CreateDefaultSubnet",
              "ec2:CreateDefaultVpc",
              "ec2:CreateInternetGateway",
              "ec2:CreateNatGateway",
              "ec2:CreateNetworkInterface",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateVpc",
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroupReferences",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcs",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:ModifyVpcEndpoint",
              "kms:DescribeKey",
              "kms:ListAliases",
              "kms:ListKeyPolicies",
              "kms:ListKeys",
              "kms:ListRetirableGrants",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "sns:ListSubscriptions",
              "sns:ListTopics",
              "sns:Publish"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "rds.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/docdb-elastic.amazonaws.com/AWSServiceRoleForDocDB-Elastic",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "docdb-elastic.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupServiceRolePolicyForBackup",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DynamoDBPermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeTable",
              "dynamodb:CreateBackup"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/*"
          },
          {
            "Sid": "DynamoDBBackupResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeBackup",
              "dynamodb:DeleteBackup"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*"
          },
          {
            "Sid": "DynamoDBBackupPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:AddTagsToResource",
              "rds:ListTagsForResource",
              "rds:DescribeDBSnapshots",
              "rds:CreateDBSnapshot",
              "rds:CopyDBSnapshot",
              "rds:DescribeDBInstances",
              "rds:CreateDBClusterSnapshot",
              "rds:DescribeDBClusters",
              "rds:DescribeDBClusterSnapshots",
              "rds:CopyDBClusterSnapshot",
              "rds:DescribeDBClusterAutomatedBackups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RDSModifyPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:ModifyDBInstance"
            ],
            "Resource": [
              "arn:aws:rds:*:*:db:*"
            ]
          },
          {
            "Sid": "RDSClusterPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:ModifyDBCluster"
            ],
            "Resource": [
              "arn:aws:rds:*:*:cluster:*"
            ]
          },
          {
            "Sid": "RDSClusterBackupPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:DeleteDBClusterAutomatedBackup"
            ],
            "Resource": "arn:aws:rds:*:*:cluster-auto-backup:*"
          },
          {
            "Sid": "RDSBackupPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:DeleteDBSnapshot",
              "rds:ModifyDBSnapshotAttribute"
            ],
            "Resource": [
              "arn:aws:rds:*:*:snapshot:awsbackup:*"
            ]
          },
          {
            "Sid": "RDSClusterModifyPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:DeleteDBClusterSnapshot",
              "rds:ModifyDBClusterSnapshotAttribute"
            ],
            "Resource": [
              "arn:aws:rds:*:*:cluster-snapshot:awsbackup:*"
            ]
          },
          {
            "Sid": "StorageGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "storagegateway:CreateSnapshot",
              "storagegateway:ListTagsForResource"
            ],
            "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
          },
          {
            "Sid": "EBSCopyPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CopySnapshot"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*"
          },
          {
            "Sid": "EC2CopyPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CopyImage"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EBSTagAndDeletePermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*"
          },
          {
            "Sid": "EC2Permissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateImage",
              "ec2:DeregisterImage",
              "ec2:DescribeSnapshots",
              "ec2:DescribeTags",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceCreditSpecifications",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeElasticGpus",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSnapshotTierStatus"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2TagPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:image/*"
          },
          {
            "Sid": "EC2ModifyPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifySnapshotAttribute",
              "ec2:ModifyImageAttribute"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/aws:backup:source-resource": "false"
              }
            }
          },
          {
            "Sid": "EBSSnapshotTierPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifySnapshotTier"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/aws:backup:source-resource": "false"
              }
            }
          },
          {
            "Sid": "BackupVaultPermissions",
            "Effect": "Allow",
            "Action": [
              "backup:DescribeBackupVault",
              "backup:CopyIntoBackupVault"
            ],
            "Resource": "arn:aws:backup:*:*:backup-vault:*"
          },
          {
            "Sid": "BackupVaultCopyPermissions",
            "Effect": "Allow",
            "Action": [
              "backup:CopyFromBackupVault"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EFSPermissions",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:Backup",
              "elasticfilesystem:DescribeTags"
            ],
            "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*"
          },
          {
            "Sid": "EBSResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot",
              "ec2:DeleteSnapshot",
              "ec2:DescribeVolumes",
              "ec2:DescribeSnapshots"
            ],
            "Resource": [
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*:*:volume/*"
            ]
          },
          {
            "Sid": "KMSDynamoDBPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "dynamodb.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "KMSPermissions",
            "Effect": "Allow",
            "Action": "kms:DescribeKey",
            "Resource": "*"
          },
          {
            "Sid": "KMSCreateGrantPermissions",
            "Effect": "Allow",
            "Action": "kms:CreateGrant",
            "Resource": "*",
            "Condition": {
              "Bool": {
                "kms:GrantIsForAWSResource": "true"
              }
            }
          },
          {
            "Sid": "KMSDataKeyEC2Permissions",
            "Effect": "Allow",
            "Action": [
              "kms:GenerateDataKeyWithoutPlaintext"
            ],
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "ec2.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "GetResourcesPermissions",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:CancelCommand",
              "ssm:GetCommandInvocation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMSendPermissions",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Sid": "FsxBackupPermissions",
            "Effect": "Allow",
            "Action": "fsx:DescribeBackups",
            "Resource": "arn:aws:fsx:*:*:backup/*"
          },
          {
            "Sid": "FsxCreateBackupPermissions",
            "Effect": "Allow",
            "Action": "fsx:CreateBackup",
            "Resource": [
              "arn:aws:fsx:*:*:file-system/*",
              "arn:aws:fsx:*:*:backup/*",
              "arn:aws:fsx:*:*:volume/*"
            ]
          },
          {
            "Sid": "FsxPermissions",
            "Effect": "Allow",
            "Action": "fsx:DescribeFileSystems",
            "Resource": "arn:aws:fsx:*:*:file-system/*"
          },
          {
            "Sid": "FsxVolumePermissions",
            "Effect": "Allow",
            "Action": "fsx:DescribeVolumes",
            "Resource": "arn:aws:fsx:*:*:volume/*"
          },
          {
            "Sid": "FsxListTagsPermissions",
            "Effect": "Allow",
            "Action": "fsx:ListTagsForResource",
            "Resource": [
              "arn:aws:fsx:*:*:file-system/*",
              "arn:aws:fsx:*:*:volume/*"
            ]
          },
          {
            "Sid": "FsxDeletePermissions",
            "Effect": "Allow",
            "Action": "fsx:DeleteBackup",
            "Resource": "arn:aws:fsx:*:*:backup/*"
          },
          {
            "Sid": "FsxResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:ListTagsForResource",
              "fsx:ManageBackupPrincipalAssociations",
              "fsx:CopyBackup",
              "fsx:TagResource"
            ],
            "Resource": "arn:aws:fsx:*:*:backup/*"
          },
          {
            "Sid": "DynamodbBackupPermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:StartAwsBackupJob",
              "dynamodb:ListTagsOfResource"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/*"
          },
          {
            "Sid": "BackupGatewayBackupPermissions",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:Backup",
              "backup-gateway:ListTagsForResource"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:vm/*"
          },
          {
            "Sid": "CloudformationStackPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStacks",
              "cloudformation:GetTemplate",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/*/*"
          },
          {
            "Sid": "RedshiftCreatePermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:CreateClusterSnapshot",
              "redshift:DescribeClusterSnapshots",
              "redshift:DescribeTags"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:snapshot:*/*",
              "arn:aws:redshift:*:*:cluster:*"
            ]
          },
          {
            "Sid": "RedshiftSnapshotPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DeleteClusterSnapshot"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:snapshot:*/*"
            ]
          },
          {
            "Sid": "RedshiftPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:cluster:*"
            ]
          },
          {
            "Sid": "RedshiftResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:CreateTags"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:snapshot:*/*"
            ]
          },
          {
            "Sid": "TimestreamResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "timestream:StartAwsBackupJob",
              "timestream:GetAwsBackupStatus",
              "timestream:ListTables",
              "timestream:ListDatabases",
              "timestream:ListTagsForResource",
              "timestream:DescribeTable",
              "timestream:DescribeDatabase"
            ],
            "Resource": [
              "arn:aws:timestream:*:*:database/*"
            ]
          },
          {
            "Sid": "TimestreamEndpointPermissions",
            "Effect": "Allow",
            "Action": [
              "timestream:DescribeEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMSAPPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-sap:GetOperation",
              "ssm-sap:ListDatabases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMSAPResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-sap:BackupDatabase",
              "ssm-sap:UpdateHanaBackupSettings",
              "ssm-sap:GetDatabase",
              "ssm-sap:ListTagsForResource"
            ],
            "Resource": "arn:aws:ssm-sap:*:*:*"
          },
          {
            "Sid": "RecoveryPointTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "backup:TagResource"
            ],
            "Resource": "arn:aws:backup:*:*:recovery-point:*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": "${aws:ResourceAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTEventsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotevents:Describe*",
              "iotevents:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTEventsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotevents:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkMaintenance",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowCloudformationChangeSetOperationsOnElasticBeanstalkStacks",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:ListChangeSets",
              "cloudformation:DescribeStacks",
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/awseb-*",
              "arn:aws:cloudformation:*:*:stack/eb-*"
            ]
          },
          {
            "Sid": "AllowElasticBeanstalkStacksUpdateExecuteSuccessfully",
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DescribeLoadBalancers",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupServiceRolePolicyForRestores",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DynamoDBPermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:Scan",
              "dynamodb:Query",
              "dynamodb:UpdateItem",
              "dynamodb:PutItem",
              "dynamodb:GetItem",
              "dynamodb:DeleteItem",
              "dynamodb:BatchWriteItem",
              "dynamodb:DescribeTable"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/*"
          },
          {
            "Sid": "DynamoDBBackupResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:RestoreTableFromBackup"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*"
          },
          {
            "Sid": "EBSPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume",
              "ec2:DeleteVolume"
            ],
            "Resource": [
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*:*:volume/*"
            ]
          },
          {
            "Sid": "EC2DescribePermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshots",
              "ec2:DescribeVolumes",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSnapshotTierStatus"
            ],
            "Resource": "*"
          },
          {
            "Sid": "StorageGatewayVolumePermissions",
            "Effect": "Allow",
            "Action": [
              "storagegateway:DeleteVolume",
              "storagegateway:DescribeCachediSCSIVolumes",
              "storagegateway:DescribeStorediSCSIVolumes",
              "storagegateway:AddTagsToResource"
            ],
            "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
          },
          {
            "Sid": "StorageGatewayGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "storagegateway:DescribeGatewayInformation",
              "storagegateway:CreateStorediSCSIVolume",
              "storagegateway:CreateCachediSCSIVolume"
            ],
            "Resource": "arn:aws:storagegateway:*:*:gateway/*"
          },
          {
            "Sid": "StorageGatewayListPermissions",
            "Effect": "Allow",
            "Action": [
              "storagegateway:ListVolumes"
            ],
            "Resource": "arn:aws:storagegateway:*:*:*"
          },
          {
            "Sid": "RDSPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances",
              "rds:DescribeDBSnapshots",
              "rds:ListTagsForResource",
              "rds:RestoreDBInstanceFromDBSnapshot",
              "rds:DeleteDBInstance",
              "rds:AddTagsToResource",
              "rds:DescribeDBClusters",
              "rds:RestoreDBClusterFromSnapshot",
              "rds:DeleteDBCluster",
              "rds:RestoreDBInstanceToPointInTime",
              "rds:DescribeDBClusterSnapshots",
              "rds:RestoreDBClusterToPointInTime"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EFSPermissions",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:Restore",
              "elasticfilesystem:CreateFilesystem",
              "elasticfilesystem:DescribeFilesystems",
              "elasticfilesystem:DeleteFilesystem",
              "elasticfilesystem:TagResource"
            ],
            "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*"
          },
          {
            "Sid": "KMSDescribePermissions",
            "Effect": "Allow",
            "Action": "kms:DescribeKey",
            "Resource": "*"
          },
          {
            "Sid": "KMSPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:Encrypt",
              "kms:GenerateDataKey",
              "kms:ReEncryptTo",
              "kms:ReEncryptFrom",
              "kms:GenerateDataKeyWithoutPlaintext"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "dynamodb.*.amazonaws.com",
                  "ec2.*.amazonaws.com",
                  "elasticfilesystem.*.amazonaws.com",
                  "rds.*.amazonaws.com",
                  "redshift.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "KMSCreateGrantPermissions",
            "Effect": "Allow",
            "Action": "kms:CreateGrant",
            "Resource": "*",
            "Condition": {
              "Bool": {
                "kms:GrantIsForAWSResource": "true"
              }
            }
          },
          {
            "Sid": "EBSSnapshotBlockPermissions",
            "Effect": "Allow",
            "Action": [
              "ebs:CompleteSnapshot",
              "ebs:StartSnapshot",
              "ebs:PutSnapshotBlock"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*"
          },
          {
            "Sid": "RDSResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "rds:CreateDBInstance"
            ],
            "Resource": "arn:aws:rds:*:*:db:*"
          },
          {
            "Sid": "EC2DeleteAndRestorePermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot",
              "ec2:DeleteTags",
              "ec2:RestoreSnapshotTier"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/aws:backup:source-resource": "false"
              }
            }
          },
          {
            "Sid": "EC2CreateTagsScopedPermissions",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws:backup:source-resource"
                ]
              }
            }
          },
          {
            "Sid": "EC2RunInstancesPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2TerminateInstancesPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*"
          },
          {
            "Sid": "EC2CreateTagsPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "ForAnyValue:StringLike": {
                "ec2:CreateAction": [
                  "RunInstances",
                  "CreateVolume"
                ]
              }
            }
          },
          {
            "Sid": "FsxPermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:CreateFileSystemFromBackup"
            ],
            "Resource": [
              "arn:aws:fsx:*:*:file-system/*",
              "arn:aws:fsx:*:*:backup/*"
            ]
          },
          {
            "Sid": "FsxTagPermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:DescribeFileSystems",
              "fsx:TagResource"
            ],
            "Resource": "arn:aws:fsx:*:*:file-system/*"
          },
          {
            "Sid": "FsxBackupPermissions",
            "Effect": "Allow",
            "Action": "fsx:DescribeBackups",
            "Resource": "arn:aws:fsx:*:*:backup/*"
          },
          {
            "Sid": "FsxDeletePermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:DeleteFileSystem",
              "fsx:UntagResource"
            ],
            "Resource": "arn:aws:fsx:*:*:file-system/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/aws:backup:source-resource": "false"
              }
            }
          },
          {
            "Sid": "FsxDescribePermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:DescribeVolumes"
            ],
            "Resource": "arn:aws:fsx:*:*:volume/*"
          },
          {
            "Sid": "FsxVolumeTagPermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:CreateVolumeFromBackup",
              "fsx:TagResource"
            ],
            "Resource": [
              "arn:aws:fsx:*:*:volume/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws:backup:source-resource"
                ]
              }
            }
          },
          {
            "Sid": "FsxBackupTagPermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:CreateVolumeFromBackup",
              "fsx:TagResource"
            ],
            "Resource": [
              "arn:aws:fsx:*:*:storage-virtual-machine/*",
              "arn:aws:fsx:*:*:backup/*",
              "arn:aws:fsx:*:*:volume/*"
            ]
          },
          {
            "Sid": "FsxVolumePermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:DeleteVolume",
              "fsx:UntagResource"
            ],
            "Resource": "arn:aws:fsx:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/aws:backup:source-resource": "false"
              }
            }
          },
          {
            "Sid": "DSPermissions",
            "Effect": "Allow",
            "Action": "ds:DescribeDirectories",
            "Resource": "*"
          },
          {
            "Sid": "DynamoDBRestorePermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:RestoreTableFromAwsBackup"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/*"
          },
          {
            "Sid": "GatewayRestorePermissions",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:Restore"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:hypervisor/*"
          },
          {
            "Sid": "CloudformationChangeSetPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:TagResource"
            ],
            "Resource": "arn:aws:cloudformation:*:*:*/*/*"
          },
          {
            "Sid": "RedshiftClusterSnapshotPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:RestoreFromClusterSnapshot",
              "redshift:RestoreTableFromClusterSnapshot"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:snapshot:*/*",
              "arn:aws:redshift:*:*:cluster:*"
            ]
          },
          {
            "Sid": "RedshiftClusterPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:cluster:*"
            ]
          },
          {
            "Sid": "RedshiftTablePermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeTableRestoreStatus"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TimestreamResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "timestream:StartAwsRestoreJob",
              "timestream:GetAwsRestoreStatus",
              "timestream:ListTables",
              "timestream:ListTagsForResource",
              "timestream:ListDatabases",
              "timestream:DescribeTable",
              "timestream:DescribeDatabase"
            ],
            "Resource": [
              "arn:aws:timestream:*:*:database/*"
            ]
          },
          {
            "Sid": "TimestreamEndpointPermissions",
            "Effect": "Allow",
            "Action": [
              "timestream:DescribeEndpoints"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSTransferLoggingAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:CreateLogGroup",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMSKFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kafka:*",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeRouteTables",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcAttribute",
              "kms:DescribeKey",
              "kms:CreateGrant",
              "logs:CreateLogDelivery",
              "logs:GetLogDelivery",
              "logs:UpdateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:ListLogDeliveries",
              "logs:PutResourcePolicy",
              "logs:DescribeResourcePolicies",
              "logs:DescribeLogGroups",
              "S3:GetBucketPolicy",
              "firehose:TagDeliveryStream"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "Resource": [
              "arn:*:ec2:*:*:vpc/*",
              "arn:*:ec2:*:*:subnet/*",
              "arn:*:ec2:*:*:security-group/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "Resource": [
              "arn:*:ec2:*:*:vpc-endpoint/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/AWSMSKManaged": "true"
              },
              "StringLike": {
                "aws:RequestTag/ClusterArn": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:*:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "arn:*:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AWSMSKManaged": "true"
              },
              "StringLike": {
                "ec2:ResourceTag/ClusterArn": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "kafka.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/kafka.amazonaws.com/AWSServiceRoleForKafka*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "kafka.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/delivery.logs.amazonaws.com/AWSServiceRoleForLogDelivery*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "delivery.logs.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMSKReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "kafka:Describe*",
              "kafka:List*",
              "kafka:Get*",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "kms:DescribeKey"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonForecastFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "forecast:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "forecast.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataSyncReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "datasync:Describe*",
              "datasync:List*",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
              "fsx:DescribeFileSystems",
              "iam:GetRole",
              "iam:ListRoles",
              "logs:DescribeLogGroups",
              "logs:DescribeResourcePolicies",
              "s3:ListAllMyBuckets",
              "s3:ListBucket"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataSyncFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DataSyncFullAccessPermissions",
            "Effect": "Allow",
            "Action": [
              "datasync:*",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeRegions",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcEndpoints",
              "ec2:ModifyNetworkInterfaceAttribute",
              "fsx:DescribeFileSystems",
              "fsx:DescribeStorageVirtualMachines",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
              "iam:GetRole",
              "iam:ListRoles",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups",
              "logs:DescribeResourcePolicies",
              "outposts:ListOutposts",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3-outposts:ListAccessPoints",
              "s3-outposts:ListRegionalBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DataSyncPassRolePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "datasync.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "WorkLinkServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:PutRecord",
              "kinesis:PutRecords"
            ],
            "Resource": "arn:aws:kinesis:*:*:stream/AmazonWorkLink-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeepRacerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "deepracer:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "robomaker:*",
              "sagemaker:*",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStackResources",
              "cloudformation:DescribeStacks",
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStackResources",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DetectStackDrift",
              "cloudformation:DescribeStackDriftDetectionStatus",
              "cloudformation:DescribeStackResourceDrifts"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "robomaker.amazonaws.com"
              }
            },
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSDeepRacer*",
              "arn:aws:iam::*:role/service-role/AWSDeepRacer*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:DeleteFunction",
              "lambda:GetFunction",
              "lambda:InvokeFunction",
              "lambda:UpdateFunctionCode"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*DeepRacer*",
              "arn:aws:lambda:*:*:function:*Deepracer*",
              "arn:aws:lambda:*:*:function:*deepracer*",
              "arn:aws:lambda:*:*:function:*dr-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetBucketLocation",
              "s3:DeleteObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:PutBucketPolicy",
              "s3:GetBucketAcl"
            ],
            "Resource": [
              "arn:aws:s3:::*DeepRacer*",
              "arn:aws:s3:::*Deepracer*",
              "arn:aws:s3:::*deepracer*",
              "arn:aws:s3:::dr-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/DeepRacer": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:CreateStream",
              "kinesisvideo:DeleteStream",
              "kinesisvideo:DescribeStream",
              "kinesisvideo:GetDataEndpoint",
              "kinesisvideo:GetHLSStreamingSessionURL",
              "kinesisvideo:GetMedia",
              "kinesisvideo:PutMedia",
              "kinesisvideo:TagStream"
            ],
            "Resource": [
              "arn:aws:kinesisvideo:*:*:stream/dr-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeepRacerCloudFormationAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress",
              "ec2:AttachInternetGateway",
              "ec2:AssociateRouteTable",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateInternetGateway",
              "ec2:CreateNatGateway",
              "ec2:CreateNetworkAcl",
              "ec2:CreateNetworkAclEntry",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateTags",
              "ec2:CreateVpc",
              "ec2:CreateVpcEndpoint",
              "ec2:DeleteInternetGateway",
              "ec2:DeleteNatGateway",
              "ec2:DeleteNetworkAcl",
              "ec2:DeleteNetworkAclEntry",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteSubnet",
              "ec2:DeleteTags",
              "ec2:DeleteVpc",
              "ec2:DeleteVpcEndpoints",
              "ec2:DescribeAddresses",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcs",
              "ec2:DetachInternetGateway",
              "ec2:DisassociateRouteTable",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:ReleaseAddress",
              "ec2:ReplaceNetworkAclAssociation",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/AWSDeepRacerLambdaAccessRole",
            "Condition": {
              "StringLikeIfExists": {
                "iam:PassedToService": "lambda.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:GetFunction",
              "lambda:DeleteFunction",
              "lambda:TagResource",
              "lambda:UpdateFunctionCode"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*DeepRacer*",
              "arn:aws:lambda:*:*:function:*Deepracer*",
              "arn:aws:lambda:*:*:function:*deepracer*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutBucketPolicy",
              "s3:CreateBucket",
              "s3:ListBucket",
              "s3:GetBucketAcl",
              "s3:DeleteBucket"
            ],
            "Resource": [
              "arn:aws:s3:::*DeepRacer*",
              "arn:aws:s3:::*Deepracer*",
              "arn:aws:s3:::*deepracer*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "robomaker:CreateSimulationApplication",
              "robomaker:CreateSimulationApplicationVersion",
              "robomaker:DeleteSimulationApplication",
              "robomaker:DescribeSimulationApplication",
              "robomaker:ListSimulationApplications",
              "robomaker:TagResource",
              "robomaker:UpdateSimulationApplication"
            ],
            "Resource": [
              "arn:aws:robomaker:*:*:/createSimulationApplication",
              "arn:aws:robomaker:*:*:simulation-application/deepracer*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeepRacerRoboMakerAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "robomaker:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs",
              "arn:aws:logs:*:*:log-group:/aws/robomaker/SimulationJobs:log-stream:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::*DeepRacer*",
              "arn:aws:s3:::*Deepracer*",
              "arn:aws:s3:::*deepracer*",
              "arn:aws:s3:::dr-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/DeepRacer": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:CreateStream",
              "kinesisvideo:DescribeStream",
              "kinesisvideo:GetDataEndpoint",
              "kinesisvideo:PutMedia",
              "kinesisvideo:TagStream"
            ],
            "Resource": [
              "arn:aws:kinesisvideo:*:*:stream/dr-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ComprehendDataAccessRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
          ],
          "Resource": [
            "arn:aws:s3:::*Comprehend*",
            "arn:aws:s3:::*comprehend*"
          ]
        }
      }
    },
    {
      "PolicyName": "AlexaForBusinessNetworkProfileServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "A4bPcaTagAccess",
            "Action": [
              "acm-pca:GetCertificate",
              "acm-pca:IssueCertificate",
              "acm-pca:RevokeCertificate"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/a4b": "enabled"
              }
            }
          },
          {
            "Sid": "A4bNetworkProfileAccess",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:A4BNetworkProfile*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMManagedInstanceCore",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAssociation",
              "ssm:GetDeployablePatchSnapshotForInstance",
              "ssm:GetDocument",
              "ssm:DescribeDocument",
              "ssm:GetManifest",
              "ssm:GetParameter",
              "ssm:GetParameters",
              "ssm:ListAssociations",
              "ssm:ListInstanceAssociations",
              "ssm:PutInventory",
              "ssm:PutComplianceItems",
              "ssm:PutConfigurePackageResult",
              "ssm:UpdateAssociationStatus",
              "ssm:UpdateInstanceAssociationStatus",
              "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2messages:AcknowledgeMessage",
              "ec2messages:DeleteMessage",
              "ec2messages:FailMessage",
              "ec2messages:GetEndpoint",
              "ec2messages:GetMessages",
              "ec2messages:SendReply"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMDirectoryServiceAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ds:CreateComputer",
              "ds:DescribeDirectories"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCognitoIdpEmailServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ses:SendEmail",
              "ses:SendRawEmail"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Deny",
            "Action": [
              "ses:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIQFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "iq:*",
              "iq-permission:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "permission.iq.amazonaws.com",
                  "contract.iq.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGlobalAcceleratorSLRPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EC2Action1",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSubnets",
              "ec2:DescribeRegions",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeAddresses"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2Action2",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSecurityGroup",
              "ec2:AssignIpv6Addresses",
              "ec2:UnassignIpv6Addresses"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AWSServiceName": "GlobalAccelerator"
              }
            }
          },
          {
            "Sid": "EC2Action3",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ElbAction1",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeTargetGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2Action4",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:network-interface/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkMailEventsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppMeshFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appmesh:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/appmesh.amazonaws.com/AWSServiceRoleForAppMesh",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "appmesh.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStack*",
              "cloudformation:UpdateStack"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm:ListCertificates",
              "acm:DescribeCertificate",
              "acm-pca:DescribeCertificateAuthority",
              "acm-pca:ListCertificateAuthorities"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicediscovery:ListNamespaces",
              "servicediscovery:ListServices",
              "servicediscovery:ListInstances"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppMeshReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appmesh:Describe*",
              "appmesh:List*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStack*"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/AWSAppMesh-GettingStarted-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm:ListCertificates",
              "acm:DescribeCertificate",
              "acm-pca:DescribeCertificateAuthority",
              "acm-pca:ListCertificateAuthorities"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicediscovery:ListNamespaces",
              "servicediscovery:ListServices",
              "servicediscovery:ListInstances"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonManagedBlockchainConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "managedblockchain:*",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:CreateVpcEndpoint",
              "kms:ListAliases",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonManagedBlockchainFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "managedblockchain:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonManagedBlockchainReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "managedblockchain:Get*",
              "managedblockchain:List*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDenyAll",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DenyAll",
            "Effect": "Deny",
            "Action": [
              "*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSControlTowerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:CreateStackInstances",
              "cloudformation:CreateStackSet",
              "cloudformation:DeleteStack",
              "cloudformation:DeleteStackInstances",
              "cloudformation:DeleteStackSet",
              "cloudformation:DescribeStackInstance",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackSet",
              "cloudformation:DescribeStackSetOperation",
              "cloudformation:ListStackInstances",
              "cloudformation:UpdateStack",
              "cloudformation:UpdateStackInstances",
              "cloudformation:UpdateStackSet"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:type/resource/AWS-IAM-Role"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:CreateStackInstances",
              "cloudformation:CreateStackSet",
              "cloudformation:DeleteStack",
              "cloudformation:DeleteStackInstances",
              "cloudformation:DeleteStackSet",
              "cloudformation:DescribeStackInstance",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackSet",
              "cloudformation:DescribeStackSetOperation",
              "cloudformation:GetTemplate",
              "cloudformation:ListStackInstances",
              "cloudformation:UpdateStack",
              "cloudformation:UpdateStackInstances",
              "cloudformation:UpdateStackSet"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/AWSControlTower*/*",
              "arn:aws:cloudformation:*:*:stack/StackSet-AWSControlTower*/*",
              "arn:aws:cloudformation:*:*:stackset/AWSControlTower*:*",
              "arn:aws:cloudformation:*:*:stackset-target/AWSControlTower*/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudtrail:CreateTrail",
              "cloudtrail:DeleteTrail",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:StartLogging",
              "cloudtrail:StopLogging",
              "cloudtrail:UpdateTrail",
              "cloudtrail:PutEventSelectors",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:PutRetentionPolicy"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:aws-controltower/CloudTrailLogs:*",
              "arn:aws:cloudtrail:*:*:trail/aws-controltower*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-controltower*/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sts:AssumeRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSControlTowerExecution",
              "arn:aws:iam::*:role/AWSControlTowerBlueprintAccess"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudtrail:DescribeTrails",
              "ec2:DescribeAvailabilityZones",
              "iam:ListRoles",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups",
              "organizations:CreateAccount",
              "organizations:DescribeAccount",
              "organizations:DescribeCreateAccountStatus",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribePolicy",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListChildren",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListParents",
              "organizations:ListPoliciesForTarget",
              "organizations:ListTargetsForPolicy",
              "organizations:ListRoots",
              "organizations:MoveAccount",
              "servicecatalog:AssociatePrincipalWithPortfolio"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:GetUser",
              "iam:ListAttachedRolePolicies",
              "iam:GetRolePolicy"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSControlTowerStackSetRole",
              "arn:aws:iam::*:role/service-role/AWSControlTowerCloudTrailRole",
              "arn:aws:iam::*:role/service-role/AWSControlTowerConfigAggregatorRoleForOrganizations"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DeleteConfigurationAggregator",
              "config:PutConfigurationAggregator",
              "config:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/aws-control-tower": "managed-by-control-tower"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess",
              "organizations:DisableAWSServiceAccess"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "organizations:ServicePrincipal": [
                  "config.amazonaws.com",
                  "cloudtrail.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "cloudtrail.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "account:EnableRegion",
              "account:ListRegions",
              "account:GetRegionOptStatus"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53ResolverFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonRoute53ResolverFullAccess",
            "Effect": "Allow",
            "Action": [
              "route53resolver:*",
              "ec2:DescribeSubnets",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DescribeNetworkInterfaces",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcs",
              "ec2:DescribeAvailabilityZones"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53ResolverReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonRoute53ResolverReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "route53resolver:Get*",
              "route53resolver:List*",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTSiteWiseConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": "iotsitewise:*",
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iotanalytics:List*",
              "iotanalytics:Describe*",
              "iotanalytics:Create*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iot:DescribeEndpoint",
              "iot:GetThingShadow"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "greengrass:GetGroup",
              "greengrass:GetGroupVersion",
              "greengrass:GetCoreDefinitionVersion",
              "greengrass:ListGroups"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "secretsmanager:ListSecrets",
              "secretsmanager:CreateSecret"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "secretsmanager:UpdateSecret"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:secretsmanager:*:*:secret:greengrass-*"
          },
          {
            "Action": [
              "tag:GetResources"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "iotsitewise.amazonaws.com"
              }
            }
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/iotsitewise.amazonaws.com/AWSServiceRoleForIoTSiteWise*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "iotsitewise.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppMeshServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudMapServiceDiscovery",
            "Effect": "Allow",
            "Action": [
              "servicediscovery:DiscoverInstances",
              "servicediscovery:DiscoverInstancesRevision"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ACMCertificateVerification",
            "Effect": "Allow",
            "Action": [
              "acm:DescribeCertificate"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceAccessManagerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ram:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "MigrationHubServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "discovery:ListConfigurations",
              "discovery:DescribeConfigurations"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "aws:migrationhub:source-id"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "dms:AddTagsToResource",
            "Resource": [
              "arn:aws:dms:*:*:endpoint:*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "aws:migrationhub:source-id"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceAttribute"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "MigrationHubDMSAccessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "mgh:CreateProgressUpdateStream",
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgh:DescribeMigrationTask",
              "mgh:AssociateDiscoveredResource",
              "mgh:ListDiscoveredResources",
              "mgh:ImportMigrationTask",
              "mgh:ListCreatedArtifacts",
              "mgh:DisassociateDiscoveredResource",
              "mgh:AssociateCreatedArtifact",
              "mgh:NotifyMigrationTaskState",
              "mgh:DisassociateCreatedArtifact",
              "mgh:PutResourceAttributes"
            ],
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/DMS/migrationTask/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgh:ListMigrationTasks",
              "mgh:NotifyApplicationState",
              "mgh:DescribeApplicationState",
              "mgh:GetHomeRegion"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "MigrationHubSMSAccessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "mgh:CreateProgressUpdateStream",
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgh:DescribeMigrationTask",
              "mgh:AssociateDiscoveredResource",
              "mgh:ListDiscoveredResources",
              "mgh:ImportMigrationTask",
              "mgh:ListCreatedArtifacts",
              "mgh:DisassociateDiscoveredResource",
              "mgh:AssociateCreatedArtifact",
              "mgh:NotifyMigrationTaskState",
              "mgh:DisassociateCreatedArtifact",
              "mgh:PutResourceAttributes"
            ],
            "Resource": "arn:aws:mgh:*:*:progressUpdateStream/SMS/migrationTask/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgh:ListMigrationTasks",
              "mgh:NotifyApplicationState",
              "mgh:DescribeApplicationState",
              "mgh:GetHomeRegion"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSConfigMultiAccountSetupPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "config:PutConfigRule",
              "config:DeleteConfigRule"
            ],
            "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/config-multiaccountsetup.amazonaws.com/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DescribeConfigurationRecorders"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListAccounts",
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeAccount"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:PutConformancePack",
              "config:DeleteConformancePack"
            ],
            "Resource": "arn:aws:config:*:*:conformance-pack/aws-service-conformance-pack/config-multiaccountsetup.amazonaws.com/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DescribeConformancePackStatus"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "config-conforms.amazonaws.com"
              }
            }
          },
          {
            "Action": "iam:PassRole",
            "Resource": "*",
            "Effect": "Allow",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ssm.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOpsWorksRegisterCLI_OnPremises",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "opsworks:AssignInstance",
              "opsworks:CreateLayer",
              "opsworks:DeregisterInstance",
              "opsworks:DescribeInstances",
              "opsworks:DescribeStackProvisioningParameters",
              "opsworks:DescribeStacks",
              "opsworks:UnassignInstance"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateGroup",
              "iam:AddUserToGroup"
            ],
            "Resource": [
              "arn:aws:iam::*:group/AWS/OpsWorks/OpsWorks-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateUser",
              "iam:CreateAccessKey"
            ],
            "Resource": [
              "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:AttachUserPolicy"
            ],
            "Resource": [
              "arn:aws:iam::*:user/AWS/OpsWorks/OpsWorks-*"
            ],
            "Condition": {
              "ArnEquals": {
                "iam:PolicyARN": "arn:aws:iam::aws:policy/AWSOpsWorksInstanceRegistration"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOpsWorksRegisterCLI_EC2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "opsworks:AssignInstance",
              "opsworks:CreateLayer",
              "opsworks:DeregisterInstance",
              "opsworks:DescribeInstances",
              "opsworks:DescribeStackProvisioningParameters",
              "opsworks:DescribeStacks",
              "opsworks:UnassignInstance"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSConfigRemediationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ssm:GetDocument",
              "ssm:DescribeDocument",
              "ssm:StartAutomationExecution"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ssm.amazonaws.com"
              }
            },
            "Action": "iam:PassRole",
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppMeshPreviewServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudMapServiceDiscovery",
            "Effect": "Allow",
            "Action": [
              "servicediscovery:DiscoverInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ACMCertificateVerification",
            "Effect": "Allow",
            "Action": [
              "acm:DescribeCertificate"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCertificateManagerPrivateCAPrivilegedUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
            "Condition": {
              "StringLike": {
                "acm-pca:TemplateArn": [
                  "arn:aws:acm-pca:::template/*CACertificate*/V*"
                ]
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
            "Condition": {
              "StringNotLike": {
                "acm-pca:TemplateArn": [
                  "arn:aws:acm-pca:::template/*CACertificate*/V*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:RevokeCertificate",
              "acm-pca:GetCertificate",
              "acm-pca:ListPermissions"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:ListCertificateAuthorities"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "LakeFormationDataAccessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "LakeFormationDataAccessServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": [
              "arn:aws:s3:::*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "IAMAccessAdvisorReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "iam:ListUsers",
              "iam:ListGroups",
              "iam:ListPolicies",
              "iam:ListPoliciesGrantingServiceAccess",
              "iam:GenerateServiceLastAccessedDetails",
              "iam:GenerateOrganizationsAccessReport",
              "iam:GenerateCredentialReport",
              "iam:GetRole",
              "iam:GetPolicy",
              "iam:GetServiceLastAccessedDetails",
              "iam:GetServiceLastAccessedDetailsWithEntities",
              "iam:GetOrganizationsAccessReport",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribePolicy",
              "organizations:ListChildren",
              "organizations:ListParents",
              "organizations:ListPoliciesForTarget",
              "organizations:ListRoots",
              "organizations:ListPolicies",
              "organizations:ListTargetsForPolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ServiceQuotasServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "support:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ServiceQuotasReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAccountLimits",
              "cloudformation:DescribeAccountLimits",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "dynamodb:DescribeLimits",
              "elasticloadbalancing:DescribeAccountLimits",
              "iam:GetAccountSummary",
              "kinesis:DescribeLimits",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization",
              "rds:DescribeAccountAttributes",
              "route53:GetAccountLimit",
              "tag:GetTagKeys",
              "tag:GetTagValues",
              "servicequotas:GetAssociationForServiceQuotaTemplate",
              "servicequotas:GetAWSDefaultServiceQuota",
              "servicequotas:GetRequestedServiceQuotaChange",
              "servicequotas:GetServiceQuota",
              "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
              "servicequotas:ListAWSDefaultServiceQuotas",
              "servicequotas:ListRequestedServiceQuotaChangeHistory",
              "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
              "servicequotas:ListServices",
              "servicequotas:ListServiceQuotas",
              "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
              "servicequotas:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ServiceQuotasFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAccountLimits",
              "cloudformation:DescribeAccountLimits",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:PutMetricAlarm",
              "dynamodb:DescribeLimits",
              "elasticloadbalancing:DescribeAccountLimits",
              "iam:GetAccountSummary",
              "kinesis:DescribeLimits",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization",
              "rds:DescribeAccountAttributes",
              "route53:GetAccountLimit",
              "tag:GetTagKeys",
              "tag:GetTagValues",
              "servicequotas:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/ServiceQuotaMonitor": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "organizations:ServicePrincipal": [
                  "servicequotas.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "servicequotas.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceProcurementSystemAdminFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:PutProcurementSystemConfiguration",
              "aws-marketplace:DescribeProcurementSystemConfiguration",
              "organizations:Describe*",
              "organizations:List*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "EC2InstanceConnect",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EC2InstanceConnect",
            "Action": [
              "ec2:DescribeInstances",
              "ec2-instance-connect:SendSSHPublicKey"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesServiceAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaces"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesSelfServiceAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "workspaces:RebootWorkspaces",
              "workspaces:RebuildWorkspaces",
              "workspaces:ModifyWorkspaceProperties"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceSellerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "MarketplaceManagement",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace-management:viewReports",
              "aws-marketplace-management:viewSupport",
              "aws-marketplace:ListChangeSets",
              "aws-marketplace:DescribeChangeSet",
              "aws-marketplace:StartChangeSet",
              "aws-marketplace:CancelChangeSet",
              "aws-marketplace:ListEntities",
              "aws-marketplace:DescribeEntity",
              "aws-marketplace:ListTasks",
              "aws-marketplace:DescribeTask",
              "aws-marketplace:UpdateTask",
              "aws-marketplace:CompleteTask",
              "aws-marketplace:GetSellerDashboard",
              "ec2:DescribeImages",
              "ec2:DescribeSnapshots",
              "ec2:ModifyImageAttribute",
              "ec2:ModifySnapshotAttribute"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AgreementAccess",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:SearchAgreements",
              "aws-marketplace:DescribeAgreement",
              "aws-marketplace:GetAgreementTerms"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws-marketplace:PartyType": "Proposer"
              },
              "ForAllValues:StringEquals": {
                "aws-marketplace:AgreementType": [
                  "PurchaseAgreement"
                ]
              }
            }
          },
          {
            "Sid": "IAMGetRole",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Sid": "AssetScanning",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "assets.marketplace.amazonaws.com"
              }
            }
          },
          {
            "Sid": "VendorInsights",
            "Effect": "Allow",
            "Action": [
              "vendor-insights:GetDataSource",
              "vendor-insights:ListDataSources",
              "vendor-insights:ListSecurityProfiles",
              "vendor-insights:GetSecurityProfile",
              "vendor-insights:GetSecurityProfileSnapshot",
              "vendor-insights:ListSecurityProfileSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TagManagement",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:TagResource",
              "aws-marketplace:UntagResource",
              "aws-marketplace:ListTagsForResource"
            ],
            "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
          },
          {
            "Sid": "SellerSettings",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace-management:GetSellerVerificationDetails",
              "aws-marketplace-management:PutSellerVerificationDetails",
              "aws-marketplace-management:GetBankAccountVerificationDetails",
              "aws-marketplace-management:PutBankAccountVerificationDetails",
              "aws-marketplace-management:GetSecondaryUserVerificationDetails",
              "aws-marketplace-management:PutSecondaryUserVerificationDetails",
              "aws-marketplace-management:GetAdditionalSellerNotificationRecipients",
              "aws-marketplace-management:PutAdditionalSellerNotificationRecipients",
              "payments:GetPaymentInstrument",
              "payments:CreatePaymentInstrument",
              "tax:GetTaxInterview",
              "tax:PutTaxInterview",
              "tax:GetTaxInfoReportingDocument"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Support",
            "Effect": "Allow",
            "Action": [
              "support:CreateCase"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ResourcePolicyManagement",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:GetResourcePolicy",
              "aws-marketplace:PutResourcePolicy",
              "aws-marketplace:DeleteResourcePolicy"
            ],
            "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
          },
          {
            "Sid": "CreateServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "resale-authorization.marketplace.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceSellerProductsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListChangeSets",
              "aws-marketplace:DescribeChangeSet",
              "aws-marketplace:StartChangeSet",
              "aws-marketplace:CancelChangeSet",
              "aws-marketplace:ListEntities",
              "aws-marketplace:DescribeEntity",
              "aws-marketplace:ListTasks",
              "aws-marketplace:DescribeTask",
              "aws-marketplace:UpdateTask",
              "aws-marketplace:CompleteTask",
              "ec2:DescribeImages",
              "ec2:DescribeSnapshots",
              "ec2:ModifyImageAttribute",
              "ec2:ModifySnapshotAttribute"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "assets.marketplace.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "vendor-insights:GetDataSource",
              "vendor-insights:ListDataSources",
              "vendor-insights:ListSecurityProfiles",
              "vendor-insights:GetSecurityProfile",
              "vendor-insights:GetSecurityProfileSnapshot",
              "vendor-insights:ListSecurityProfileSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:TagResource",
              "aws-marketplace:UntagResource",
              "aws-marketplace:ListTagsForResource"
            ],
            "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:GetResourcePolicy",
              "aws-marketplace:PutResourcePolicy",
              "aws-marketplace:DeleteResourcePolicy"
            ],
            "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceSellerProductsReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListChangeSets",
              "aws-marketplace:DescribeChangeSet",
              "aws-marketplace:ListEntities",
              "aws-marketplace:DescribeEntity",
              "aws-marketplace:ListTasks",
              "aws-marketplace:DescribeTask",
              "ec2:DescribeImages",
              "ec2:DescribeSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListTagsForResource"
            ],
            "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppMeshEnvoyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appmesh:StreamAggregatedResources"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgeReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:DescribeEventBus",
              "events:DescribeEventSource",
              "events:ListEventBuses",
              "events:ListEventSources",
              "events:ListRuleNamesByTarget",
              "events:ListRules",
              "events:ListTargetsByRule",
              "events:TestEventPattern",
              "events:DescribeArchive",
              "events:ListArchives",
              "events:DescribeReplay",
              "events:ListReplays",
              "events:DescribeConnection",
              "events:ListConnections",
              "events:DescribeApiDestination",
              "events:ListApiDestinations",
              "events:DescribeEndpoint",
              "events:ListEndpoints",
              "schemas:DescribeCodeBinding",
              "schemas:DescribeDiscoverer",
              "schemas:DescribeRegistry",
              "schemas:DescribeSchema",
              "schemas:ExportSchema",
              "schemas:GetCodeBindingSource",
              "schemas:GetDiscoveredSchema",
              "schemas:GetResourcePolicy",
              "schemas:ListDiscoverers",
              "schemas:ListRegistries",
              "schemas:ListSchemas",
              "schemas:ListSchemaVersions",
              "schemas:ListTagsForResource",
              "schemas:SearchSchemas",
              "scheduler:GetSchedule",
              "scheduler:GetScheduleGroup",
              "scheduler:ListSchedules",
              "scheduler:ListScheduleGroups",
              "scheduler:ListTagsForResource",
              "pipes:DescribePipe",
              "pipes:ListPipes",
              "pipes:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EventBridgeActions",
            "Effect": "Allow",
            "Action": [
              "events:*",
              "schemas:*",
              "scheduler:*",
              "pipes:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMCreateServiceLinkedRoleForApiDestinations",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/AmazonEventBridgeApiDestinationsServiceRolePolicy",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "apidestinations.events.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "schemas.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SecretsManagerAccessForApiDestinations",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:UpdateSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:PutSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:events!*"
          },
          {
            "Sid": "IAMPassRoleAccessForEventBridge",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "events.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMPassRoleAccessForScheduler",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "scheduler.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMPassRoleAccessForPipes",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "pipes.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatch-CrossAccountAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/CloudWatch-CrossAccountSharing*"
            ],
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchAutomaticDashboardsAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "autoscaling:DescribeAutoScalingGroups",
              "cloudfront:GetDistribution",
              "cloudfront:ListDistributions",
              "dynamodb:DescribeTable",
              "dynamodb:ListTables",
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "ecs:DescribeClusters",
              "ecs:DescribeContainerInstances",
              "ecs:ListClusters",
              "ecs:ListContainerInstances",
              "ecs:ListServices",
              "elasticache:DescribeCacheClusters",
              "elasticbeanstalk:DescribeEnvironments",
              "elasticfilesystem:DescribeFileSystems",
              "elasticloadbalancing:DescribeLoadBalancers",
              "kinesis:DescribeStream",
              "kinesis:ListStreams",
              "lambda:GetFunction",
              "lambda:ListFunctions",
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstances",
              "resource-groups:ListGroupResources",
              "resource-groups:ListGroups",
              "route53:GetHealthCheck",
              "route53:ListHealthChecks",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "sns:ListTopics",
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "sqs:ListQueues",
              "synthetics:DescribeCanariesLastRun",
              "tag:GetResources"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "apigateway:GET"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:apigateway:*::/restapis*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ConfigConformsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "config:PutConfigRule",
              "config:DeleteConfigRule"
            ],
            "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/config-conforms.amazonaws.com*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DescribeConfigRules"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DescribeRemediationConfigurations",
              "config:DeleteRemediationConfiguration",
              "config:PutRemediationConfigurations"
            ],
            "Resource": "arn:aws:config:*:*:remediation-configuration/aws-service-remediation-configuration/config-conforms.amazonaws.com*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/remediation.config.amazonaws.com/AWSServiceRoleForConfigRemediation"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/remediation.config.amazonaws.com/AWSServiceRoleForConfigRemediation",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "remediation.config.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeDocument",
              "ssm:GetDocument"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:GetObject",
              "s3:GetBucketAcl"
            ],
            "Resource": "arn:aws:s3:::awsconfigconforms*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStackResources",
              "cloudformation:DescribeStacks",
              "cloudformation:GetStackPolicy",
              "cloudformation:SetStackPolicy",
              "cloudformation:UpdateStack",
              "cloudformation:UpdateTerminationProtection",
              "cloudformation:ValidateTemplate",
              "cloudformation:ListStackResources"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/awsconfigconforms-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/Config"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudFormationFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ElementalAppliancesSoftwareFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elemental-appliances-software:*",
              "elemental-activations:CompleteAccountRegistration"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppMeshPreviewEnvoyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appmesh-preview:StreamAggregatedResources"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSVPCS2SVpnServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "0",
            "Effect": "Allow",
            "Action": [
              "acm:ExportCertificate",
              "acm:DescribeCertificate",
              "acm:ListCertificates",
              "acm-pca:DescribeCertificateAuthority"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForSMS",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateChangeSet",
              "cloudformation:CreateStack"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
            "Condition": {
              "Null": {
                "cloudformation:ResourceTypes": "false"
              },
              "ForAllValues:StringEquals": {
                "cloudformation:ResourceTypes": [
                  "AWS::EC2::Instance",
                  "AWS::ApplicationInsights::Application",
                  "AWS::ResourceGroups::Group"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DeleteStack",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStackResources",
              "cloudformation:GetTemplate"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:ValidateTemplate",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteObject",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:PutLifecycleConfiguration"
            ],
            "Resource": "arn:aws:s3:::sms-app-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sms:CreateReplicationJob",
              "sms:DeleteReplicationJob",
              "sms:GetReplicationJobs",
              "sms:GetReplicationRuns",
              "sms:GetServers",
              "sms:ImportServerCatalog",
              "sms:StartOnDemandReplicationRun",
              "sms:UpdateReplicationJob"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ssm:*::document/AWS-RunRemoteScript",
              "arn:aws:s3:::sms-app-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "ssm:resourceTag/UseForSMSApplicationValidation": [
                  "true"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:CancelCommand",
              "ssm:GetCommandInvocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CopySnapshot"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CopySnapshot",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/SMSJobId": [
                  "sms-*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifySnapshotAttribute",
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/SMSJobId": [
                  "sms-*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CopyImage",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSnapshotAttribute",
              "ec2:DeregisterImage",
              "ec2:ImportImage",
              "ec2:DescribeImportImageTasks",
              "ec2:GetEbsEncryptionByDefault"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:GetInstanceProfile"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateIamInstanceProfile",
              "ec2:AssociateIamInstanceProfile",
              "ec2:ReplaceIamInstanceProfileAssociation"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": "cloudformation.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceArn": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyInstanceAttribute",
              "ec2:StopInstances",
              "ec2:StartInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "applicationinsights:Describe*",
              "applicationinsights:List*",
              "cloudformation:ListStackResources"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "applicationinsights:CreateApplication",
              "applicationinsights:CreateComponent",
              "applicationinsights:UpdateApplication",
              "applicationinsights:DeleteApplication",
              "applicationinsights:UpdateComponentConfiguration",
              "applicationinsights:DeleteComponent"
            ],
            "Resource": "arn:aws:applicationinsights:*:*:application/resource-group/sms-app-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "resource-groups:CreateGroup",
              "resource-groups:GetGroup",
              "resource-groups:UpdateGroup",
              "resource-groups:DeleteGroup"
            ],
            "Resource": "arn:aws:resource-groups:*:*:group/sms-app-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "application-insights.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceDefenderEnableIoTLoggingMitigationAction",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:SetV2LoggingOptions"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "iot.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceDefenderReplaceDefaultPolicyMitigationAction",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:CreatePolicyVersion"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceDefenderUpdateCACertMitigationAction",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:UpdateCACertificate"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceDefenderUpdateDeviceCertMitigationAction",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:UpdateCertificate"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:ListPrincipalThings",
              "iot:AddThingToThingGroup"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLakeFormationDataAdmin",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSLakeFormationDataAdminAllow",
            "Effect": "Allow",
            "Action": [
              "lakeformation:*",
              "cloudtrail:DescribeTrails",
              "cloudtrail:LookupEvents",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:CreateDatabase",
              "glue:UpdateDatabase",
              "glue:DeleteDatabase",
              "glue:GetConnections",
              "glue:SearchTables",
              "glue:GetTable",
              "glue:CreateTable",
              "glue:UpdateTable",
              "glue:DeleteTable",
              "glue:GetTableVersions",
              "glue:GetPartitions",
              "glue:GetTables",
              "glue:ListWorkflows",
              "glue:BatchGetWorkflows",
              "glue:DeleteWorkflow",
              "glue:GetWorkflowRuns",
              "glue:StartWorkflowRun",
              "glue:GetWorkflow",
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets",
              "s3:GetBucketAcl",
              "iam:ListUsers",
              "iam:ListRoles",
              "iam:GetRole",
              "iam:GetRolePolicy"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSLakeFormationDataAdminDeny",
            "Effect": "Deny",
            "Action": [
              "lakeformation:PutDataLakeSettings"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIQContractServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "aws-marketplace:Subscribe"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIQPermissionServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole",
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": "arn:aws:iam::*:role/AWSIQPermission-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:AttachRolePolicy"
            ],
            "Resource": "arn:aws:iam::*:role/AWSIQPermission-*",
            "Condition": {
              "ArnEquals": {
                "iam:PolicyARN": "arn:aws:iam::aws:policy/AWSDenyAll"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DetachRolePolicy"
            ],
            "Resource": "arn:aws:iam::*:role/AWSIQPermission-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonQLDBReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "qldb:ListLedgers",
              "qldb:DescribeLedger",
              "qldb:ListJournalS3Exports",
              "qldb:ListJournalS3ExportsForLedger",
              "qldb:DescribeJournalS3Export",
              "qldb:DescribeJournalKinesisStream",
              "qldb:ListJournalKinesisStreamsForLedger",
              "qldb:GetBlock",
              "qldb:GetDigest",
              "qldb:GetRevision",
              "qldb:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonQLDBFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "qldb:CreateLedger",
              "qldb:UpdateLedger",
              "qldb:UpdateLedgerPermissionsMode",
              "qldb:DeleteLedger",
              "qldb:ListLedgers",
              "qldb:DescribeLedger",
              "qldb:ExportJournalToS3",
              "qldb:ListJournalS3Exports",
              "qldb:ListJournalS3ExportsForLedger",
              "qldb:DescribeJournalS3Export",
              "qldb:CancelJournalKinesisStream",
              "qldb:DescribeJournalKinesisStream",
              "qldb:ListJournalKinesisStreamsForLedger",
              "qldb:StreamJournalToKinesis",
              "qldb:GetDigest",
              "qldb:GetRevision",
              "qldb:GetBlock",
              "qldb:TagResource",
              "qldb:UntagResource",
              "qldb:ListTagsForResource",
              "qldb:SendCommand",
              "qldb:PartiQLCreateTable",
              "qldb:PartiQLCreateIndex",
              "qldb:PartiQLDropTable",
              "qldb:PartiQLDropIndex",
              "qldb:PartiQLUndropTable",
              "qldb:PartiQLDelete",
              "qldb:PartiQLInsert",
              "qldb:PartiQLUpdate",
              "qldb:PartiQLSelect",
              "qldb:PartiQLHistoryFunction",
              "qldb:PartiQLRedact"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "qldb.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonQLDBConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "qldb:CreateLedger",
              "qldb:UpdateLedger",
              "qldb:UpdateLedgerPermissionsMode",
              "qldb:DeleteLedger",
              "qldb:ListLedgers",
              "qldb:DescribeLedger",
              "qldb:ExportJournalToS3",
              "qldb:ListJournalS3Exports",
              "qldb:ListJournalS3ExportsForLedger",
              "qldb:DescribeJournalS3Export",
              "qldb:CancelJournalKinesisStream",
              "qldb:DescribeJournalKinesisStream",
              "qldb:ListJournalKinesisStreamsForLedger",
              "qldb:StreamJournalToKinesis",
              "qldb:GetBlock",
              "qldb:GetDigest",
              "qldb:GetRevision",
              "qldb:TagResource",
              "qldb:UntagResource",
              "qldb:ListTagsForResource",
              "qldb:SendCommand",
              "qldb:ExecuteStatement",
              "qldb:ShowCatalog",
              "qldb:InsertSampleData",
              "qldb:PartiQLCreateTable",
              "qldb:PartiQLCreateIndex",
              "qldb:PartiQLDropTable",
              "qldb:PartiQLDropIndex",
              "qldb:PartiQLUndropTable",
              "qldb:PartiQLDelete",
              "qldb:PartiQLInsert",
              "qldb:PartiQLUpdate",
              "qldb:PartiQLSelect",
              "qldb:PartiQLHistoryFunction",
              "qldb:PartiQLRedact"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "dbqms:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:ListStreams",
              "kinesis:DescribeStream"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "qldb.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeVoiceConnectorServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "chime:GetVoiceConnector*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:GetDataEndpoint",
              "kinesisvideo:PutMedia",
              "kinesisvideo:UpdateDataRetention",
              "kinesisvideo:DescribeStream",
              "kinesisvideo:CreateStream"
            ],
            "Resource": [
              "arn:aws:kinesisvideo:*:*:stream/ChimeVoiceConnector-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:ListStreams"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "SNS:Publish"
            ],
            "Resource": [
              "arn:aws:sns:*:*:ChimeVoiceConnector-Streaming*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:SendMessage"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:ChimeVoiceConnector-Streaming*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "polly:SynthesizeSpeech"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "chime:CreateMediaInsightsPipeline",
              "chime:GetMediaInsightsPipelineConfiguration"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/chime.amazonaws.com/AWSServiceRoleForAmazonChime"
            ],
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "chime.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForLogDeliveryPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "firehose:PutRecord",
              "firehose:PutRecordBatch",
              "firehose:ListTagsForDeliveryStream"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/LogDeliveryEnabled": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AlexaForBusinessPolyDelegatedAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "a4b:DisassociateDeviceFromRoom",
              "a4b:DeleteDevice",
              "a4b:UpdateDevice",
              "a4b:GetDevice"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:a4b:us-east-1:*:device/*/*:A238TWV36W3S92",
              "arn:aws:a4b:us-east-1:*:device/*/*:A1FUZ1SC53VJXD"
            ]
          },
          {
            "Action": [
              "a4b:RegisterAVSDevice"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "a4b:amazonId": [
                  "A238TWV36W3S92",
                  "A1FUZ1SC53VJXD"
                ]
              }
            }
          },
          {
            "Action": [
              "a4b:SearchDevices"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          },
          {
            "Action": [
              "a4b:AssociateDeviceWithRoom"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:a4b:us-east-1:*:device/*/*:A238TWV36W3S92",
              "arn:aws:a4b:us-east-1:*:device/*/*:A1FUZ1SC53VJXD",
              "arn:aws:a4b:us-east-1:*:room/*"
            ]
          },
          {
            "Action": [
              "a4b:GetRoom",
              "a4b:SearchRooms",
              "a4b:CreateRoom",
              "a4b:GetProfile",
              "a4b:SearchSkillGroups",
              "a4b:DisassociateSkillGroupFromRoom",
              "a4b:AssociateSkillGroupWithRoom",
              "a4b:GetSkillGroup",
              "a4b:SearchProfiles",
              "a4b:GetAddressBook",
              "a4b:UpdateRoom"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerNotebooksServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowSageMakerDeleteApp",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DeleteApp"
            ],
            "Resource": "arn:aws:sagemaker:*:*:app/*"
          },
          {
            "Sid": "AllowEFSAccessPointCreation",
            "Effect": "Allow",
            "Action": "elasticfilesystem:CreateAccessPoint",
            "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/ManagedByAmazonSageMakerResource": "*",
                "aws:RequestTag/ManagedByAmazonSageMakerResource": "*"
              }
            }
          },
          {
            "Sid": "AllowEFSAccessPointDeletion",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DeleteAccessPoint"
            ],
            "Resource": "arn:aws:elasticfilesystem:*:*:access-point/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/ManagedByAmazonSageMakerResource": "*"
              }
            }
          },
          {
            "Sid": "AllowEFSCreation",
            "Effect": "Allow",
            "Action": "elasticfilesystem:CreateFileSystem",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/ManagedByAmazonSageMakerResource": "*"
              }
            }
          },
          {
            "Sid": "AllowEFSMountWithDeletion",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:CreateMountTarget",
              "elasticfilesystem:DeleteFileSystem",
              "elasticfilesystem:DeleteMountTarget"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/ManagedByAmazonSageMakerResource": "*"
              }
            }
          },
          {
            "Sid": "AllowEFSDescribe",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowEFSTagging",
            "Effect": "Allow",
            "Action": "elasticfilesystem:TagResource",
            "Resource": [
              "arn:aws:elasticfilesystem:*:*:access-point/*",
              "arn:aws:elasticfilesystem:*:*:file-system/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/ManagedByAmazonSageMakerResource": "*"
              }
            }
          },
          {
            "Sid": "AllowEC2Tagging",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "AllowEC2Operations",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowEC2AuthZ",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DeleteSecurityGroup",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/ManagedByAmazonSageMakerResource": "*"
              }
            }
          },
          {
            "Sid": "AllowIdcOperations",
            "Effect": "Allow",
            "Action": [
              "sso:CreateManagedApplicationInstance",
              "sso:DeleteManagedApplicationInstance",
              "sso:GetManagedApplicationInstance"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSagemakerProfileCreation",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateUserProfile",
              "sagemaker:DescribeUserProfile"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSagemakerSpaceOperationsForCanvasManagedSpaces",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateSpace",
              "sagemaker:DescribeSpace",
              "sagemaker:DeleteSpace",
              "sagemaker:ListTags"
            ],
            "Resource": "arn:aws:sagemaker:*:*:space/*/CanvasManagedSpace-*"
          },
          {
            "Sid": "AllowSagemakerAddTagsForAppManagedSpaces",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddTags"
            ],
            "Resource": "arn:aws:sagemaker:*:*:space/*/CanvasManagedSpace-*",
            "Condition": {
              "StringEquals": {
                "sagemaker:TaggingAction": "CreateSpace"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingLambdaConcurrencyPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lambda:PutProvisionedConcurrencyConfig",
              "lambda:GetProvisionedConcurrencyConfig",
              "lambda:DeleteProvisionedConcurrencyConfig",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSystemsManagerAccountDiscoveryServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:ListRoots",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListChildren",
              "organizations:ListParents",
              "organizations:ListDelegatedServicesForAccount",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogEndUserReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeChangeSet",
              "cloudformation:ListChangeSets",
              "cloudformation:DescribeStackSet",
              "cloudformation:DescribeStackInstance",
              "cloudformation:DescribeStackSetOperation",
              "cloudformation:ListStackInstances",
              "cloudformation:ListStackResources",
              "cloudformation:ListStackSetOperations",
              "cloudformation:ListStackSetOperationResults"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/SC-*",
              "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
              "arn:aws:cloudformation:*:*:changeSet/SC-*",
              "arn:aws:cloudformation:*:*:stackset/SC-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:GetTemplateSummary",
              "servicecatalog:DescribeProduct",
              "servicecatalog:DescribeProductView",
              "servicecatalog:DescribeProvisioningParameters",
              "servicecatalog:ListLaunchPaths",
              "servicecatalog:SearchProducts",
              "ssm:DescribeDocument",
              "ssm:GetAutomationExecution",
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicecatalog:DescribeProvisionedProduct",
              "servicecatalog:DescribeRecord",
              "servicecatalog:ListRecordHistory",
              "servicecatalog:ListStackInstancesForProvisionedProduct",
              "servicecatalog:ScanProvisionedProducts",
              "servicecatalog:SearchProvisionedProducts",
              "servicecatalog:DescribeProvisionedProductPlan",
              "servicecatalog:ListProvisionedProductPlans",
              "servicecatalog:ListServiceActionsForProvisioningArtifact",
              "servicecatalog:DescribeServiceActionExecutionParameters"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "servicecatalog:userLevel": "self"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogAdminReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeChangeSet",
              "cloudformation:ListChangeSets",
              "cloudformation:ListStackResources",
              "cloudformation:DescribeStackSet",
              "cloudformation:DescribeStackInstance",
              "cloudformation:DescribeStackSetOperation",
              "cloudformation:ListStackInstances",
              "cloudformation:ListStackSetOperations",
              "cloudformation:ListStackSetOperationResults"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/SC-*",
              "arn:aws:cloudformation:*:*:stack/StackSet-SC-*",
              "arn:aws:cloudformation:*:*:changeSet/SC-*",
              "arn:aws:cloudformation:*:*:stackset/SC-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:GetTemplateSummary",
              "iam:GetGroup",
              "iam:GetRole",
              "iam:GetUser",
              "iam:ListGroups",
              "iam:ListRoles",
              "iam:ListUsers",
              "servicecatalog:Get*",
              "servicecatalog:List*",
              "servicecatalog:Describe*",
              "servicecatalog:ScanProvisionedProducts",
              "servicecatalog:Search*",
              "ssm:DescribeDocument",
              "ssm:GetAutomationExecution",
              "ssm:ListDocuments",
              "ssm:ListDocumentVersions",
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPrivateMarketplaceRequests",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:CreatePrivateMarketplaceRequests",
              "aws-marketplace:ListPrivateMarketplaceRequests",
              "aws-marketplace:DescribePrivateMarketplaceRequests"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSForWordPressPluginPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Permissions1",
            "Effect": "Allow",
            "Action": [
              "polly:SynthesizeSpeech",
              "polly:DescribeVoices",
              "translate:TranslateText"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Permissions2",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketAcl",
              "s3:GetBucketPolicy",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:CreateBucket",
              "s3:PutObjectAcl"
            ],
            "Resource": [
              "arn:aws:s3:::audio_for_wordpress*",
              "arn:aws:s3:::audio-for-wordpress*"
            ]
          },
          {
            "Sid": "Permissions3",
            "Effect": "Allow",
            "Action": [
              "acm:AddTagsToCertificate",
              "acm:DescribeCertificate",
              "acm:RequestCertificate",
              "cloudformation:CreateStack",
              "cloudfront:ListDistributions"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:RequestedRegion": "us-east-1"
              }
            }
          },
          {
            "Sid": "Permissions4",
            "Effect": "Allow",
            "Action": [
              "acm:DeleteCertificate",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResources",
              "cloudformation:UpdateStack",
              "cloudfront:CreateDistribution",
              "cloudfront:CreateInvalidation",
              "cloudfront:DeleteDistribution",
              "cloudfront:GetDistribution",
              "cloudfront:GetInvalidation",
              "cloudfront:TagResource",
              "cloudfront:UpdateDistribution"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/createdBy": "AWSForWordPressPlugin"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeStarNotificationsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "events:PutTargets",
              "events:PutRule",
              "events:DescribeRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/awscodestarnotifications-*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "sns:CreateTopic"
            ],
            "Resource": "arn:aws:sns:*:*:CodeStarNotifications-*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "codecommit:GetCommentsForPullRequest",
              "codecommit:GetCommentsForComparedCommit",
              "chatbot:DescribeSlackChannelConfigurations",
              "chatbot:UpdateSlackChannelConfiguration",
              "codecommit:GetDifferences",
              "codepipeline:ListActionExecutions"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "codecommit:GetFile"
            ],
            "Resource": "*",
            "Condition": {
              "StringNotEquals": {
                "aws:ResourceTag/ExcludeFileContentFromNotifications": "true"
              }
            },
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticFileSystemServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "backup-storage:MountCapsule",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:ModifyNetworkInterfaceAttribute",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": "arn:aws:kms:*:*:key/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "backup:CreateBackupVault",
              "backup:PutBackupVaultAccessPolicy"
            ],
            "Resource": [
              "arn:aws:backup:*:*:backup-vault:aws/efs/automatic-backup-vault"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "backup:CreateBackupPlan",
              "backup:CreateBackupSelection"
            ],
            "Resource": [
              "arn:aws:backup:*:*:backup-plan:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/backup.amazonaws.com/AWSServiceRoleForBackup"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "backup.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:CreateReplicationConfiguration",
              "elasticfilesystem:DescribeReplicationConfigurations",
              "elasticfilesystem:DeleteReplicationConfiguration"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSavingsPlansReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "savingsplans:Describe*",
              "savingsplans:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSavingsPlansFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "savingsplans:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "WAFV2LoggingServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "FirehoseAPIStatement",
            "Effect": "Allow",
            "Action": [
              "firehose:PutRecord",
              "firehose:PutRecordBatch"
            ],
            "Resource": [
              "arn:aws:firehose:*:*:deliverystream/aws-waf-logs-*"
            ]
          },
          {
            "Sid": "DescribeOrganizationAPIStatement",
            "Effect": "Allow",
            "Action": "organizations:DescribeOrganization",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForAmazonEKSNodegroup",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SharedSecurityGroupRelatedPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:RevokeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:DescribeInstances",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/eks": "*"
              }
            }
          },
          {
            "Sid": "EKSCreatedSecurityGroupRelatedPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:RevokeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:DescribeInstances",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/eks:nodegroup-name": "*"
              }
            }
          },
          {
            "Sid": "LaunchTemplateRelatedPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteLaunchTemplate",
              "ec2:CreateLaunchTemplateVersion"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/eks:nodegroup-name": "*"
              }
            }
          },
          {
            "Sid": "AutoscalingRelatedPermissions",
            "Effect": "Allow",
            "Action": [
              "autoscaling:UpdateAutoScalingGroup",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:TerminateInstanceInAutoScalingGroup",
              "autoscaling:CompleteLifecycleAction",
              "autoscaling:PutLifecycleHook",
              "autoscaling:PutNotificationConfiguration",
              "autoscaling:EnableMetricsCollection",
              "autoscaling:PutScheduledUpdateGroupAction",
              "autoscaling:ResumeProcesses",
              "autoscaling:SuspendProcesses"
            ],
            "Resource": "arn:aws:autoscaling:*:*:*:autoScalingGroupName/eks-*"
          },
          {
            "Sid": "AllowAutoscalingToCreateSLR",
            "Effect": "Allow",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "autoscaling.amazonaws.com"
              }
            },
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*"
          },
          {
            "Sid": "AllowASGCreationByEKS",
            "Effect": "Allow",
            "Action": [
              "autoscaling:CreateOrUpdateTags",
              "autoscaling:CreateAutoScalingGroup"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "eks",
                  "eks:cluster-name",
                  "eks:nodegroup-name"
                ]
              }
            }
          },
          {
            "Sid": "AllowPassRoleToAutoscaling",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "autoscaling.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowPassRoleToEC2",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "PermissionsToManageResourcesForNodegroups",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "ec2:CreateLaunchTemplate",
              "ec2:DescribeInstances",
              "iam:GetInstanceProfile",
              "ec2:DescribeLaunchTemplates",
              "autoscaling:DescribeAutoScalingGroups",
              "ec2:CreateSecurityGroup",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:RunInstances",
              "ec2:DescribeSecurityGroups",
              "ec2:GetConsoleOutput",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSubnets",
              "ec2:DescribeCapacityReservations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PermissionsToCreateAndManageInstanceProfiles",
            "Effect": "Allow",
            "Action": [
              "iam:CreateInstanceProfile",
              "iam:DeleteInstanceProfile",
              "iam:RemoveRoleFromInstanceProfile",
              "iam:AddRoleToInstanceProfile"
            ],
            "Resource": "arn:aws:iam::*:instance-profile/eks-*"
          },
          {
            "Sid": "PermissionsToManageEKSAndKubernetesTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "eks",
                  "eks:cluster-name",
                  "eks:nodegroup-name",
                  "kubernetes.io/cluster/*"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2RolePolicyForLaunchWizard",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume",
              "ec2:RebootInstances",
              "ec2:StartInstances",
              "ec2:StopInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/LaunchWizardResourceGroupID": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ReplaceRoute"
            ],
            "Resource": "arn:aws:ec2:*:*:route-table/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/LaunchWizardApplicationType": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAddresses",
              "ec2:AssociateAddress",
              "ec2:DescribeInstances",
              "ec2:DescribeImages",
              "ec2:DescribeRegions",
              "ec2:DescribeVolumes",
              "ec2:DescribeRouteTables",
              "ec2:ModifyInstanceAttribute",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:PutMetricData",
              "ssm:GetCommandInvocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:CreateVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "LaunchWizardResourceGroupID",
                  "LaunchWizardApplicationType"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:PutObjectTagging",
              "s3:GetBucketLocation",
              "logs:PutLogEvents",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:*",
              "arn:aws:s3:::launchwizard*",
              "arn:aws:s3:::aws-sap-data-provider/config.properties"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "logs:Create*",
            "Resource": "arn:aws:logs:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:Describe*",
              "cloudformation:DescribeStackResources",
              "cloudformation:SignalResource",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStacks"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "LaunchWizardResourceGroupID"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:BatchGetItem",
              "dynamodb:PutItem",
              "sqs:ReceiveMessage",
              "sqs:SendMessage",
              "dynamodb:Scan",
              "s3:ListBucket",
              "dynamodb:Query",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteTable",
              "dynamodb:CreateTable",
              "s3:GetObject",
              "dynamodb:DescribeTable",
              "s3:GetBucketLocation",
              "dynamodb:UpdateTable"
            ],
            "Resource": [
              "arn:aws:s3:::launchwizard*",
              "arn:aws:dynamodb:*:*:table/LaunchWizard*",
              "arn:aws:sqs:*:*:LaunchWizard*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ssm:resourceTag/LaunchWizardApplicationType": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:GetDocument"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSSAP-InstallBackint"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "fsx:DescribeFileSystems",
              "fsx:ListTagsForResource",
              "fsx:DescribeStorageVirtualMachines"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": "LaunchWizard*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataExchangeReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DataExchangeReadOnlyActions",
            "Effect": "Allow",
            "Action": [
              "dataexchange:GetAsset",
              "dataexchange:GetDataSet",
              "dataexchange:GetEventAction",
              "dataexchange:GetJob",
              "dataexchange:GetRevision",
              "dataexchange:ListDataSetRevisions",
              "dataexchange:ListDataSets",
              "dataexchange:ListEventActions",
              "dataexchange:ListJobs",
              "dataexchange:ListRevisionAssets",
              "dataexchange:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSMarketplaceReadOnlyActions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ViewSubscriptions",
              "aws-marketplace:GetAgreementRequest",
              "aws-marketplace:ListAgreementRequests",
              "aws-marketplace:GetAgreementApprovalRequest",
              "aws-marketplace:ListAgreementApprovalRequests",
              "aws-marketplace:DescribeEntity",
              "aws-marketplace:ListEntities",
              "aws-marketplace:DescribeChangeSet",
              "aws-marketplace:ListChangeSets",
              "aws-marketplace:SearchAgreements",
              "aws-marketplace:GetAgreementTerms",
              "aws-marketplace:ListPrivateListings",
              "aws-marketplace:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataExchangeSubscriberFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DataExchangeReadOnlyActions",
            "Effect": "Allow",
            "Action": [
              "dataexchange:Get*",
              "dataexchange:List*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DataExchangeExportActions",
            "Effect": "Allow",
            "Action": [
              "dataexchange:CreateJob",
              "dataexchange:StartJob",
              "dataexchange:CancelJob"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "dataexchange:JobType": [
                  "EXPORT_ASSETS_TO_S3",
                  "EXPORT_ASSET_TO_SIGNED_URL",
                  "EXPORT_REVISIONS_TO_S3"
                ]
              }
            }
          },
          {
            "Sid": "DataExchangeEventActionActions",
            "Effect": "Allow",
            "Action": [
              "dataexchange:CreateEventAction",
              "dataexchange:UpdateEventAction",
              "dataexchange:DeleteEventAction",
              "dataexchange:SendApiAsset"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3GetActionConditionalResourceAndADX",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::*aws-data-exchange*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "dataexchange.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "S3ReadActions",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSMarketplaceSubscriberActions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:Subscribe",
              "aws-marketplace:Unsubscribe",
              "aws-marketplace:ViewSubscriptions",
              "aws-marketplace:GetAgreementRequest",
              "aws-marketplace:ListAgreementRequests",
              "aws-marketplace:CancelAgreementRequest",
              "aws-marketplace:ListPrivateListings"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KMSActions",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases",
              "kms:ListKeys"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataExchangeProviderFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DataExchangeActions",
            "Effect": "Allow",
            "Action": [
              "dataexchange:CreateDataSet",
              "dataexchange:CreateRevision",
              "dataexchange:CreateAsset",
              "dataexchange:Get*",
              "dataexchange:Update*",
              "dataexchange:List*",
              "dataexchange:Delete*",
              "dataexchange:TagResource",
              "dataexchange:UntagResource",
              "dataexchange:PublishDataSet",
              "dataexchange:SendApiAsset",
              "dataexchange:RevokeRevision",
              "dataexchange:SendDataSetNotification",
              "tag:GetTagKeys",
              "tag:GetTagValues"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DataExchangeJobsActions",
            "Effect": "Allow",
            "Action": [
              "dataexchange:CreateJob",
              "dataexchange:StartJob",
              "dataexchange:CancelJob"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "dataexchange:JobType": [
                  "IMPORT_ASSETS_FROM_S3",
                  "IMPORT_ASSET_FROM_SIGNED_URL",
                  "EXPORT_ASSETS_TO_S3",
                  "EXPORT_ASSET_TO_SIGNED_URL",
                  "IMPORT_ASSET_FROM_API_GATEWAY_API",
                  "IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES"
                ]
              }
            }
          },
          {
            "Sid": "S3GetActionConditionalResourceAndADX",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::*aws-data-exchange*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "dataexchange.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "S3GetActionConditionalTagAndADX",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/AWSDataExchange": "true"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "dataexchange.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "S3WriteActions",
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:PutObjectAcl"
            ],
            "Resource": "arn:aws:s3:::*aws-data-exchange*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "dataexchange.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "S3ReadActions",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSMarketplaceActions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:DescribeEntity",
              "aws-marketplace:ListEntities",
              "aws-marketplace:DescribeChangeSet",
              "aws-marketplace:ListChangeSets",
              "aws-marketplace:StartChangeSet",
              "aws-marketplace:CancelChangeSet",
              "aws-marketplace:GetAgreementApprovalRequest",
              "aws-marketplace:ListAgreementApprovalRequests",
              "aws-marketplace:AcceptAgreementApprovalRequest",
              "aws-marketplace:RejectAgreementApprovalRequest",
              "aws-marketplace:UpdateAgreementApprovalRequest",
              "aws-marketplace:SearchAgreements",
              "aws-marketplace:GetAgreementTerms"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KMSActions",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases",
              "kms:ListKeys"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RedshiftConditionalActions",
            "Effect": "Allow",
            "Action": [
              "redshift:AuthorizeDataShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "redshift:ConsumerIdentifier": "ADX"
              }
            }
          },
          {
            "Sid": "RedshiftActions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeDataSharesForProducer",
              "redshift:DescribeDataShares"
            ],
            "Resource": "*"
          },
          {
            "Sid": "APIGatewayActions",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataExchangeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DataExchangeActions",
            "Effect": "Allow",
            "Action": [
              "dataexchange:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3GetActionConditionalResourceAndADX",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::*aws-data-exchange*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "dataexchange.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "S3GetActionConditionalTagAndADX",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/AWSDataExchange": "true"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "dataexchange.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "S3WriteActions",
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:PutObjectAcl"
            ],
            "Resource": "arn:aws:s3:::*aws-data-exchange*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "dataexchange.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "S3ReadActions",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSMarketplaceProviderActions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:DescribeEntity",
              "aws-marketplace:ListEntities",
              "aws-marketplace:StartChangeSet",
              "aws-marketplace:ListChangeSets",
              "aws-marketplace:DescribeChangeSet",
              "aws-marketplace:CancelChangeSet",
              "aws-marketplace:GetAgreementApprovalRequest",
              "aws-marketplace:ListAgreementApprovalRequests",
              "aws-marketplace:AcceptAgreementApprovalRequest",
              "aws-marketplace:RejectAgreementApprovalRequest",
              "aws-marketplace:UpdateAgreementApprovalRequest",
              "aws-marketplace:SearchAgreements",
              "aws-marketplace:GetAgreementTerms",
              "aws-marketplace:TagResource",
              "aws-marketplace:UntagResource",
              "aws-marketplace:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSMarketplaceSubscriberActions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:Subscribe",
              "aws-marketplace:Unsubscribe",
              "aws-marketplace:ViewSubscriptions",
              "aws-marketplace:GetAgreementRequest",
              "aws-marketplace:ListAgreementRequests",
              "aws-marketplace:CancelAgreementRequest",
              "aws-marketplace:ListPrivateListings",
              "aws-marketplace:DescribeAgreement"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KMSActions",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases",
              "kms:ListKeys"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RedshiftConditionalActions",
            "Effect": "Allow",
            "Action": [
              "redshift:AuthorizeDataShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "redshift:ConsumerIdentifier": "ADX"
              }
            }
          },
          {
            "Sid": "RedshiftActions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeDataSharesForProducer",
              "redshift:DescribeDataShares"
            ],
            "Resource": "*"
          },
          {
            "Sid": "APIGatewayActions",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTSiteWiseMonitorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotsitewise:CreateProject",
              "iotsitewise:DescribeProject",
              "iotsitewise:UpdateProject",
              "iotsitewise:DeleteProject",
              "iotsitewise:ListProjects",
              "iotsitewise:BatchAssociateProjectAssets",
              "iotsitewise:BatchDisassociateProjectAssets",
              "iotsitewise:ListProjectAssets",
              "iotsitewise:CreateDashboard",
              "iotsitewise:DescribeDashboard",
              "iotsitewise:UpdateDashboard",
              "iotsitewise:DeleteDashboard",
              "iotsitewise:ListDashboards",
              "iotsitewise:CreateAccessPolicy",
              "iotsitewise:DescribeAccessPolicy",
              "iotsitewise:UpdateAccessPolicy",
              "iotsitewise:DeleteAccessPolicy",
              "iotsitewise:ListAccessPolicies",
              "iotsitewise:DescribeAsset",
              "iotsitewise:ListAssets",
              "iotsitewise:ListAssociatedAssets",
              "iotsitewise:DescribeAssetProperty",
              "iotsitewise:GetAssetPropertyValue",
              "iotsitewise:GetAssetPropertyValueHistory",
              "iotsitewise:GetAssetPropertyAggregates",
              "sso-directory:DescribeUsers"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingComprehendEndpointPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "comprehend:UpdateEndpoint",
              "comprehend:DescribeEndpoint",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "DynamoDBCloudWatchContributorInsightsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudwatch:DeleteInsightRules",
              "cloudwatch:PutInsightRule"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:cloudwatch:*:*:insight-rule/DynamoDBContributorInsights*"
          },
          {
            "Action": [
              "cloudwatch:DescribeInsightRules"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSChatbotServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics",
              "sns:Unsubscribe",
              "sns:Subscribe",
              "sns:ListSubscriptions"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/chatbot/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AwsBackupAllAccessPermissions",
            "Effect": "Allow",
            "Action": "backup:*",
            "Resource": "*"
          },
          {
            "Sid": "AwsBackupStorageAllAccessPermissions",
            "Effect": "Allow",
            "Action": "backup-storage:*",
            "Resource": "*"
          },
          {
            "Sid": "RdsPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBSnapshots",
              "rds:ListTagsForResource",
              "rds:DescribeDBInstances",
              "rds:describeDBEngineVersions",
              "rds:describeOptionGroups",
              "rds:describeOrderableDBInstanceOptions",
              "rds:describeDBSubnetGroups",
              "rds:describeDBClusterSnapshots",
              "rds:describeDBClusters",
              "rds:describeDBParameterGroups",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBInstanceAutomatedBackups",
              "rds:DescribeDBClusterAutomatedBackups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RdsDeletePermissions",
            "Effect": "Allow",
            "Action": [
              "rds:DeleteDBSnapshot",
              "rds:DeleteDBClusterSnapshot"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DynamoDbPermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:ListBackups",
              "dynamodb:ListTables"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DynamoDbDeleteBackupPermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:DeleteBackup"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "EfsFileSystemPermissions",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DescribeFilesystems"
            ],
            "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*"
          },
          {
            "Sid": "Ec2Permissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSnapshots",
              "ec2:DescribeVolumes",
              "ec2:describeAvailabilityZones",
              "ec2:DescribeVpcs",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeImages",
              "ec2:DescribeSubnets",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeAddresses"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Ec2DeletePermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot",
              "ec2:DeregisterImage"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ResourceGroupTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "tag:GetTagKeys",
              "tag:GetTagValues",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "StorageGatewayVolumePermissions",
            "Effect": "Allow",
            "Action": [
              "storagegateway:DescribeCachediSCSIVolumes",
              "storagegateway:DescribeStorediSCSIVolumes"
            ],
            "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
          },
          {
            "Sid": "StorageGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "storagegateway:ListGateways"
            ],
            "Resource": "arn:aws:storagegateway:*:*:*"
          },
          {
            "Sid": "StorageGatewayGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "storagegateway:DescribeGatewayInformation",
              "storagegateway:ListVolumes",
              "storagegateway:ListLocalDisks"
            ],
            "Resource": "arn:aws:storagegateway:*:*:gateway/*"
          },
          {
            "Sid": "IamRolePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "iam:GetRole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IamPassRolePermissions",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/*AwsBackup*",
              "arn:aws:iam::*:role/*AWSBackup*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "backup.amazonaws.com",
                  "restore-testing.backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AwsOrganizationsPermissions",
            "Effect": "Allow",
            "Action": "organizations:DescribeOrganization",
            "Resource": "*"
          },
          {
            "Sid": "KmsPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:DescribeKey",
              "kms:GenerateDataKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KmsCreateGrantPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "kms:EncryptionContextKeys": "aws:backup:backup-vault"
              },
              "Bool": {
                "kms:GrantIsForAWSResource": true
              },
              "StringLike": {
                "kms:ViaService": "backup.*.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SystemManagerCommandPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:CancelCommand",
              "ssm:GetCommandInvocation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SystemManagerSendCommandPermissions",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Sid": "FsxPermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:DescribeFileSystems",
              "fsx:DescribeBackups",
              "fsx:DescribeVolumes",
              "fsx:DescribeStorageVirtualMachines"
            ],
            "Resource": "*"
          },
          {
            "Sid": "FsxDeletePermissions",
            "Effect": "Allow",
            "Action": "fsx:DeleteBackup",
            "Resource": "arn:aws:fsx:*:*:backup/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DirectoryServicePermissions",
            "Effect": "Allow",
            "Action": "ds:DescribeDirectories",
            "Resource": "*"
          },
          {
            "Sid": "IamCreateServiceLinkedRolePermissions",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "backup.amazonaws.com",
                  "restore-testing.backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "BackupGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:AssociateGatewayToServer",
              "backup-gateway:CreateGateway",
              "backup-gateway:DeleteGateway",
              "backup-gateway:DeleteHypervisor",
              "backup-gateway:DisassociateGatewayFromServer",
              "backup-gateway:ImportHypervisorConfiguration",
              "backup-gateway:ListGateways",
              "backup-gateway:ListHypervisors",
              "backup-gateway:ListTagsForResource",
              "backup-gateway:ListVirtualMachines",
              "backup-gateway:PutMaintenanceStartTime",
              "backup-gateway:TagResource",
              "backup-gateway:TestHypervisorConfiguration",
              "backup-gateway:UntagResource",
              "backup-gateway:UpdateGatewayInformation",
              "backup-gateway:UpdateHypervisor"
            ],
            "Resource": "*"
          },
          {
            "Sid": "BackupGatewayHypervisorPermissions",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:GetHypervisor",
              "backup-gateway:GetHypervisorPropertyMappings",
              "backup-gateway:PutHypervisorPropertyMappings",
              "backup-gateway:StartVirtualMachinesMetadataSync"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:hypervisor/*"
          },
          {
            "Sid": "BackupGatewayVirtualMachinePermissions",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:GetVirtualMachine"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:vm/*"
          },
          {
            "Sid": "BackupGatewayGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:GetBandwidthRateLimitSchedule",
              "backup-gateway:GetGateway",
              "backup-gateway:PutBandwidthRateLimitSchedule"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:gateway/*"
          },
          {
            "Sid": "CloudWatchPermissions",
            "Effect": "Allow",
            "Action": "cloudwatch:GetMetricData",
            "Resource": "*"
          },
          {
            "Sid": "TimestreamDatabasePermissions",
            "Effect": "Allow",
            "Action": [
              "timestream:ListTables",
              "timestream:ListDatabases"
            ],
            "Resource": [
              "arn:aws:timestream:*:*:database/*"
            ]
          },
          {
            "Sid": "TimestreamPermissions",
            "Effect": "Allow",
            "Action": [
              "timestream:DescribeEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3BucketPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Sid": "RedshiftResourcesPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSubnetGroups",
              "redshift:DescribeClusterSnapshots",
              "redshift:DescribeSnapshotSchedules"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:cluster:*",
              "arn:aws:redshift:*:*:subnetgroup:*",
              "arn:aws:redshift:*:*:snapshot:*/*",
              "arn:aws:redshift:*:*:snapshotschedule:*"
            ]
          },
          {
            "Sid": "RedshiftPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeNodeConfigurationOptions",
              "redshift:DescribeOrderableClusterOptions",
              "redshift:DescribeClusterParameterGroups",
              "redshift:DescribeClusterTracks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudFormationStackPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStacks"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/*"
            ]
          },
          {
            "Sid": "SystemsManagerForSapPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-sap:GetOperation",
              "ssm-sap:ListDatabases",
              "ssm-sap:GetDatabase",
              "ssm-sap:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ResourceAccessManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "ram:GetResourceShareAssociations"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupOperatorAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AwsBackupAllAccess",
            "Effect": "Allow",
            "Action": [
              "backup:Get*",
              "backup:List*",
              "backup:Describe*",
              "backup:CreateBackupSelection",
              "backup:DeleteBackupSelection",
              "backup:StartBackupJob",
              "backup:StartRestoreJob",
              "backup:StartCopyJob"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RDSDescribeAccess",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBSnapshots",
              "rds:ListTagsForResource",
              "rds:DescribeDBInstances",
              "rds:describeDBEngineVersions",
              "rds:describeOptionGroups",
              "rds:describeOrderableDBInstanceOptions",
              "rds:describeDBSubnetGroups",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBClusters",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBInstanceAutomatedBackups",
              "rds:DescribeDBClusterAutomatedBackups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DynamoDBAccess",
            "Effect": "Allow",
            "Action": [
              "dynamodb:ListBackups",
              "dynamodb:ListTables"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EFSAccess",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DescribeFilesystems"
            ],
            "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*"
          },
          {
            "Sid": "EC2Access",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSnapshots",
              "ec2:DescribeVolumes",
              "ec2:describeAvailabilityZones",
              "ec2:DescribeVpcs",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeImages",
              "ec2:DescribeSubnets",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeAddresses"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TagReadAccess",
            "Effect": "Allow",
            "Action": [
              "tag:GetTagKeys",
              "tag:GetTagValues",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "StorageGatewaySCSIAccess",
            "Effect": "Allow",
            "Action": [
              "storagegateway:DescribeCachediSCSIVolumes",
              "storagegateway:DescribeStorediSCSIVolumes"
            ],
            "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
          },
          {
            "Sid": "StorageGatewayReadAccess",
            "Effect": "Allow",
            "Action": [
              "storagegateway:ListGateways"
            ],
            "Resource": "arn:aws:storagegateway:*:*:*"
          },
          {
            "Sid": "StorageGatewayDiskReadAccess",
            "Effect": "Allow",
            "Action": [
              "storagegateway:DescribeGatewayInformation",
              "storagegateway:ListLocalDisks"
            ],
            "Resource": "arn:aws:storagegateway:*:*:gateway/*"
          },
          {
            "Sid": "StorageGatewayVolumeReadAccess",
            "Effect": "Allow",
            "Action": [
              "storagegateway:ListVolumes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMRoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "iam:GetRole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PassRoleAccess",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/*AwsBackup*",
              "arn:aws:iam::*:role/*AWSBackup*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "backup.amazonaws.com"
              }
            }
          },
          {
            "Sid": "OrganizationsAccess",
            "Effect": "Allow",
            "Action": "organizations:DescribeOrganization",
            "Resource": "*"
          },
          {
            "Sid": "SSMReadAccess",
            "Effect": "Allow",
            "Action": [
              "ssm:CancelCommand",
              "ssm:GetCommandInvocation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMComandAccess",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Sid": "FSXDescribeAccess",
            "Effect": "Allow",
            "Action": "fsx:DescribeBackups",
            "Resource": "arn:aws:fsx:*:*:backup/*"
          },
          {
            "Sid": "FSxFileAccess",
            "Effect": "Allow",
            "Action": "fsx:DescribeFileSystems",
            "Resource": "arn:aws:fsx:*:*:file-system/*"
          },
          {
            "Sid": "FSxVolumeAccess",
            "Effect": "Allow",
            "Action": "fsx:DescribeVolumes",
            "Resource": "arn:aws:fsx:*:*:volume/*/*"
          },
          {
            "Sid": "FSxMachineAccess",
            "Effect": "Allow",
            "Action": "fsx:DescribeStorageVirtualMachines",
            "Resource": "arn:aws:fsx:*:*:storage-virtual-machine/*/*"
          },
          {
            "Sid": "DirectoryServiceAccess",
            "Effect": "Allow",
            "Action": "ds:DescribeDirectories",
            "Resource": "*"
          },
          {
            "Sid": "BackupGatewayListAccess",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:ListGateways",
              "backup-gateway:ListHypervisors",
              "backup-gateway:ListTagsForResource",
              "backup-gateway:ListVirtualMachines"
            ],
            "Resource": "*"
          },
          {
            "Sid": "BackupGatewayHypervisorAccess",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:GetHypervisor",
              "backup-gateway:GetHypervisorPropertyMappings"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:hypervisor/*"
          },
          {
            "Sid": "BackupGatewayMachineAccess",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:GetVirtualMachine"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:vm/*"
          },
          {
            "Sid": "BackupGatewayAccess",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:GetBandwidthRateLimitSchedule",
              "backup-gateway:GetGateway"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:gateway/*"
          },
          {
            "Sid": "CloudWatchAccess",
            "Effect": "Allow",
            "Action": "cloudwatch:GetMetricData",
            "Resource": "*"
          },
          {
            "Sid": "TimestreamListAccess",
            "Effect": "Allow",
            "Action": [
              "timestream:ListDatabases",
              "timestream:ListTables"
            ],
            "Resource": [
              "arn:aws:timestream:*:*:database/*"
            ]
          },
          {
            "Sid": "TimestreamDescribeAccess",
            "Effect": "Allow",
            "Action": [
              "timestream:DescribeEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3ListAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Sid": "RedshiftAccess",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSubnetGroups",
              "redshift:DescribeClusterSnapshots",
              "redshift:DescribeSnapshotSchedules"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:cluster:*",
              "arn:aws:redshift:*:*:subnetgroup:*",
              "arn:aws:redshift:*:*:snapshot:*/*",
              "arn:aws:redshift:*:*:snapshotschedule:*"
            ]
          },
          {
            "Sid": "RedshiftOptionsAccess",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeNodeConfigurationOptions",
              "redshift:DescribeOrderableClusterOptions",
              "redshift:DescribeClusterParameterGroups",
              "redshift:DescribeClusterTracks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudFormationAccess",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStacks"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/*"
            ]
          },
          {
            "Sid": "SAPAccess",
            "Effect": "Allow",
            "Action": [
              "ssm-sap:GetOperation",
              "ssm-sap:ListDatabases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SAPDatabaseAccess",
            "Effect": "Allow",
            "Action": [
              "ssm-sap:GetDatabase",
              "ssm-sap:ListTagsForResource"
            ],
            "Resource": "arn:aws:ssm-sap:*:*:*"
          },
          {
            "Sid": "RAMAccess",
            "Effect": "Allow",
            "Action": [
              "ram:GetResourceShareAssociations"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSTrustedAdvisorReportingServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListChildren",
              "organizations:ListParents",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribeAccount"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceMeteringRegisterUsage",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "aws-marketplace:RegisterUsage"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkManagedUpdatesServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowPassRoleToElasticBeanstalkAndDownstreamServices",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "iam:PassedToService": [
                  "elasticbeanstalk.amazonaws.com",
                  "ec2.amazonaws.com",
                  "autoscaling.amazonaws.com",
                  "elasticloadbalancing.amazonaws.com",
                  "ecs.amazonaws.com",
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "SingleInstanceAPIs",
            "Effect": "Allow",
            "Action": [
              "ec2:releaseAddress",
              "ec2:allocateAddress",
              "ec2:DisassociateAddress",
              "ec2:AssociateAddress"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ECS",
            "Effect": "Allow",
            "Action": [
              "ecs:RegisterTaskDefinition",
              "ecs:DeRegisterTaskDefinition",
              "ecs:List*",
              "ecs:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ElasticBeanstalkAPIs",
            "Effect": "Allow",
            "Action": [
              "elasticbeanstalk:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ReadOnlyAPIs",
            "Effect": "Allow",
            "Action": [
              "cloudformation:Describe*",
              "cloudformation:List*",
              "ec2:Describe*",
              "autoscaling:Describe*",
              "elasticloadbalancing:Describe*",
              "logs:DescribeLogGroups",
              "sns:GetTopicAttributes",
              "sns:ListSubscriptionsByTopic",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ASG",
            "Effect": "Allow",
            "Action": [
              "autoscaling:AttachInstances",
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:CreateLaunchConfiguration",
              "autoscaling:CreateOrUpdateTags",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:DeleteLaunchConfiguration",
              "autoscaling:DeleteScheduledAction",
              "autoscaling:DetachInstances",
              "autoscaling:PutNotificationConfiguration",
              "autoscaling:PutScalingPolicy",
              "autoscaling:PutScheduledUpdateGroupAction",
              "autoscaling:ResumeProcesses",
              "autoscaling:SuspendProcesses",
              "autoscaling:TerminateInstanceInAutoScalingGroup",
              "autoscaling:UpdateAutoScalingGroup"
            ],
            "Resource": [
              "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
              "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
              "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
              "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
            ]
          },
          {
            "Sid": "CFN",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:CancelUpdateStack",
              "cloudformation:DeleteStack",
              "cloudformation:GetTemplate",
              "cloudformation:UpdateStack",
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/awseb-e-*",
              "arn:aws:cloudformation:*:*:stack/eb-*"
            ]
          },
          {
            "Sid": "EC2",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": [
                  "arn:aws:cloudformation:*:*:stack/awseb-e-*",
                  "arn:aws:cloudformation:*:*:stack/eb-*"
                ]
              }
            }
          },
          {
            "Sid": "S3Obj",
            "Effect": "Allow",
            "Action": [
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:GetObjectVersion",
              "s3:GetObjectVersionAcl",
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:PutObjectVersionAcl"
            ],
            "Resource": "arn:aws:s3:::elasticbeanstalk-*/*"
          },
          {
            "Sid": "S3Bucket",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetBucketPolicy",
              "s3:ListBucket",
              "s3:PutBucketPolicy"
            ],
            "Resource": "arn:aws:s3:::elasticbeanstalk-*"
          },
          {
            "Sid": "CWL",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:DeleteLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
          },
          {
            "Sid": "ELB",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:DeRegisterTargets",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-e-*",
              "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*"
            ]
          },
          {
            "Sid": "SNS",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic"
            ],
            "Resource": "arn:aws:sns:*:*:ElasticBeanstalkNotifications-Environment-*"
          },
          {
            "Sid": "EC2LaunchTemplate",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplate",
              "ec2:DeleteLaunchTemplate",
              "ec2:CreateLaunchTemplateVersion",
              "ec2:DeleteLaunchTemplateVersions"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*"
          },
          {
            "Sid": "AllowLaunchTemplateRunInstances",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
              }
            }
          },
          {
            "Sid": "AllowECSTagResource",
            "Effect": "Allow",
            "Action": [
              "ecs:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:CreateAction": [
                  "RegisterTaskDefinition"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSFargatePodExecutionRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:BatchGetImage"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSForFargateServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeRouteTables"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchSyntheticsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "synthetics:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:PutEncryptionConfiguration"
            ],
            "Resource": [
              "arn:aws:s3:::cw-syn-results-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "s3:ListAllMyBuckets",
              "xray:GetTraceSummaries",
              "xray:BatchGetTraces",
              "apigateway:GET"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::cw-syn-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObjectVersion"
            ],
            "Resource": "arn:aws:s3:::aws-synthetics-library-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lambda.amazonaws.com",
                  "synthetics.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/CloudWatchSyntheticsRole*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:Synthetics-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:AddPermission",
              "lambda:PublishVersion",
              "lambda:UpdateFunctionCode",
              "lambda:UpdateFunctionConfiguration",
              "lambda:GetFunctionConfiguration",
              "lambda:DeleteFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:cwsyn-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:GetLayerVersion",
              "lambda:PublishLayerVersion",
              "lambda:DeleteLayerVersion"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:layer:cwsyn-*",
              "arn:aws:lambda:*:*:layer:Synthetics:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:Subscribe",
              "sns:ListSubscriptionsByTopic"
            ],
            "Resource": [
              "arn:*:sns:*:*:Synthetics-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": "arn:aws:kms:*:*:key/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt"
            ],
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "s3.*.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchSyntheticsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "synthetics:Describe*",
              "synthetics:Get*",
              "synthetics:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgeSchemasServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:EnableRule",
              "events:DisableRule",
              "events:DeleteRule",
              "events:RemoveTargets",
              "events:ListTargetsByRule"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/*Schemas-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgeSchemasReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonEventBridgeSchemasReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "schemas:ListDiscoverers",
              "schemas:DescribeDiscoverer",
              "schemas:ListRegistries",
              "schemas:DescribeRegistry",
              "schemas:SearchSchemas",
              "schemas:ListSchemas",
              "schemas:ListSchemaVersions",
              "schemas:DescribeSchema",
              "schemas:GetDiscoveredSchema",
              "schemas:DescribeCodeBinding",
              "schemas:GetCodeBindingSource",
              "schemas:ListTagsForResource",
              "schemas:GetResourcePolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgeSchemasFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonEventBridgeSchemasFullAccess",
            "Effect": "Allow",
            "Action": [
              "schemas:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonEventBridgeManageRule",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:EnableRule",
              "events:DisableRule",
              "events:DeleteRule",
              "events:RemoveTargets",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/*Schemas*"
          },
          {
            "Sid": "IAMCreateServiceLinkedRoleForAmazonEventBridgeSchemas",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/schemas.amazonaws.com/AWSServiceRoleForSchemas"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForImageBuilder",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*:*:launch-template/*",
              "arn:aws:license-manager:*:*:license-configuration:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": [
                  "EC2 Image Builder",
                  "EC2 Fast Launch"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn",
                  "vmie.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:StopInstances",
              "ec2:StartInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CopyImage",
              "ec2:CreateImage",
              "ec2:CreateLaunchTemplate",
              "ec2:DeregisterImage",
              "ec2:DescribeImages",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:ModifyImageAttribute",
              "ec2:DescribeImportImageTasks",
              "ec2:DescribeExportImageTasks",
              "ec2:DescribeSnapshots",
              "ec2:DescribeHosts"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifySnapshotAttribute"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "RunInstances",
                  "CreateImage"
                ],
                "aws:RequestTag/CreatedBy": [
                  "EC2 Image Builder",
                  "EC2 Fast Launch"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*:*:export-image-task/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": [
                  "EC2 Image Builder",
                  "EC2 Fast Launch"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "license-manager:UpdateLicenseSpecificationsForResource"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:ListCommands",
              "ssm:ListCommandInvocations",
              "ssm:AddTagsToResource",
              "ssm:DescribeInstanceInformation",
              "ssm:GetAutomationExecution",
              "ssm:StopAutomationExecution",
              "ssm:ListInventoryEntries",
              "ssm:SendAutomationSignal",
              "ssm:DescribeInstanceAssociationsStatus",
              "ssm:DescribeAssociationExecutions",
              "ssm:GetCommandInvocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ssm:*:*:document/AWS-RunPowerShellScript",
              "arn:aws:ssm:*:*:document/AWS-RunShellScript",
              "arn:aws:ssm:*:*:document/AWSEC2-RunSysprep",
              "arn:aws:s3:::*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ssm:resourceTag/CreatedBy": [
                  "EC2 Image Builder"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ssm:StartAutomationExecution",
            "Resource": "arn:aws:ssm:*:*:automation-definition/ImageBuilder*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:CreateAssociation",
              "ssm:DeleteAssociation"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWS-GatherSoftwareInventory",
              "arn:aws:ssm:*:*:association/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:Encrypt",
              "kms:Decrypt",
              "kms:ReEncryptFrom",
              "kms:ReEncryptTo",
              "kms:GenerateDataKeyWithoutPlaintext"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "kms:EncryptionContextKeys": [
                  "aws:ebs:id"
                ]
              },
              "StringLike": {
                "kms:ViaService": [
                  "ec2.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "ec2.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "kms:CreateGrant",
            "Resource": "*",
            "Condition": {
              "Bool": {
                "kms:GrantIsForAWSResource": true
              },
              "StringLike": {
                "kms:ViaService": [
                  "ec2.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "sts:AssumeRole",
            "Resource": "arn:aws:iam::*:role/EC2ImageBuilderDistributionCrossAccountRole"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplateVersion",
              "ec2:DescribeLaunchTemplates",
              "ec2:ModifyLaunchTemplate",
              "ec2:DescribeLaunchTemplateVersions"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ExportImage"
            ],
            "Resource": "arn:aws:ec2:*::image/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ExportImage"
            ],
            "Resource": "arn:aws:ec2:*:*:export-image-task/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CancelExportTask"
            ],
            "Resource": "arn:aws:ec2:*:*:export-image-task/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "ssm.amazonaws.com",
                  "ec2fastlaunch.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:EnableFastLaunch"
            ],
            "Resource": [
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "inspector2:ListCoverage",
              "inspector2:ListFindings"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:CreateRepository"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:TagResource"
            ],
            "Resource": "arn:aws:ecr:*:*:repository/image-builder-*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:BatchDeleteImage"
            ],
            "Resource": "arn:aws:ecr:*:*:repository/image-builder-*",
            "Condition": {
              "StringEquals": {
                "ecr:ResourceTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:DescribeRule",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/ImageBuilder-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "EC2InstanceProfileForImageBuilder",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "imagebuilder:GetComponent"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "kms:EncryptionContextKeys": "aws:imagebuilder:arn",
                "aws:CalledVia": [
                  "imagebuilder.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::ec2imagebuilder*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
          }
        ]
      }
    },
    {
      "PolicyName": "IAMAccessAnalyzerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "access-analyzer:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "access-analyzer.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListChildren",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListParents",
              "organizations:ListRoots"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "IAMAccessAnalyzerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "IAMAccessAnalyzerReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "access-analyzer:CheckAccessNotGranted",
              "access-analyzer:CheckNoNewAccess",
              "access-analyzer:CheckNoPublicAccess",
              "access-analyzer:Get*",
              "access-analyzer:List*",
              "access-analyzer:ValidatePolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AccessAnalyzerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AccessAnalyzerServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "dynamodb:GetResourcePolicy",
              "dynamodb:ListStreams",
              "dynamodb:ListTables",
              "ec2:DescribeAddresses",
              "ec2:DescribeByoipCidrs",
              "ec2:DescribeSnapshotAttribute",
              "ec2:DescribeSnapshots",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcs",
              "ec2:GetSnapshotBlockPublicAccessState",
              "ecr:DescribeRepositories",
              "ecr:GetRepositoryPolicy",
              "elasticfilesystem:DescribeFileSystemPolicy",
              "elasticfilesystem:DescribeFileSystems",
              "iam:GetRole",
              "iam:ListEntitiesForPolicy",
              "iam:ListRoles",
              "iam:ListUsers",
              "iam:GetUser",
              "iam:GetGroup",
              "iam:GenerateServiceLastAccessedDetails",
              "iam:GetServiceLastAccessedDetails",
              "iam:ListAccessKeys",
              "iam:GetLoginProfile",
              "iam:GetAccessKeyLastUsed",
              "iam:ListRolePolicies",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "iam:ListUserPolicies",
              "iam:GetUserPolicy",
              "iam:ListAttachedUserPolicies",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:ListGroupsForUser",
              "kms:DescribeKey",
              "kms:GetKeyPolicy",
              "kms:ListGrants",
              "kms:ListKeyPolicies",
              "kms:ListKeys",
              "lambda:GetFunctionUrlConfig",
              "lambda:GetLayerVersionPolicy",
              "lambda:GetPolicy",
              "lambda:ListAliases",
              "lambda:ListFunctions",
              "lambda:ListLayers",
              "lambda:ListLayerVersions",
              "lambda:ListVersionsByFunction",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListChildren",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListParents",
              "organizations:ListRoots",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBSnapshotAttributes",
              "rds:DescribeDBSnapshots",
              "s3:DescribeMultiRegionAccessPointOperation",
              "s3:GetAccessPoint",
              "s3:GetAccessPointPolicy",
              "s3:GetAccessPointPolicyStatus",
              "s3:GetAccountPublicAccessBlock",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "s3:GetBucketPolicyStatus",
              "s3:GetBucketPolicy",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetMultiRegionAccessPoint",
              "s3:GetMultiRegionAccessPointPolicy",
              "s3:GetMultiRegionAccessPointPolicyStatus",
              "s3:ListAccessPoints",
              "s3:ListAllMyBuckets",
              "s3:ListMultiRegionAccessPoints",
              "s3express:GetBucketPolicy",
              "s3express:ListAllMyDirectoryBuckets",
              "sns:GetTopicAttributes",
              "sns:ListTopics",
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetResourcePolicy",
              "secretsmanager:ListSecrets",
              "sqs:GetQueueAttributes",
              "sqs:ListQueues"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeGuruReviewerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AccessCodeGuruReviewerEnabledRepositories",
            "Effect": "Allow",
            "Action": [
              "codecommit:GetRepository",
              "codecommit:GetBranch",
              "codecommit:DescribePullRequestEvents",
              "codecommit:GetCommentsForPullRequest",
              "codecommit:GetDifferences",
              "codecommit:GetPullRequest",
              "codecommit:ListPullRequests",
              "codecommit:PostCommentForPullRequest",
              "codecommit:GitPull",
              "codecommit:UntagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/codeguru-reviewer": "enabled"
              }
            }
          },
          {
            "Sid": "AccessCodeGuruReviewerEnabledConnections",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:UseConnection"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "codestar-connections:ProviderAction": [
                  "ListBranches",
                  "GetBranch",
                  "ListRepositories",
                  "ListOwners",
                  "ListPullRequests",
                  "GetPullRequest",
                  "ListPullRequestComments",
                  "ListPullRequestCommits",
                  "ListCommitFiles",
                  "ListBranchCommits",
                  "CreatePullRequestDiffComment",
                  "GitPull"
                ]
              },
              "Null": {
                "aws:ResourceTag/codeguru-reviewer": "false"
              }
            }
          },
          {
            "Sid": "CloudWatchEventsResourceCleanup",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:RemoveTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "codeguru-reviewer.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowGuruS3GetObject",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::codeguru-reviewer-*",
              "arn:aws:s3:::codeguru-reviewer-*/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeGuruReviewerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonCodeGuruReviewerFullAccess",
            "Effect": "Allow",
            "Action": [
              "codeguru-reviewer:*",
              "codeguru:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonCodeGuruReviewerSLRCreation",
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "codeguru-reviewer.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonCodeGuruReviewerSLRDeletion",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/codeguru-reviewer.amazonaws.com/AWSServiceRoleForAmazonCodeGuruReviewer"
          },
          {
            "Sid": "CodeCommitAccess",
            "Effect": "Allow",
            "Action": [
              "codecommit:ListRepositories"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeCommitTagManagement",
            "Effect": "Allow",
            "Action": [
              "codecommit:TagResource",
              "codecommit:UntagResource"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "codeguru-reviewer"
              }
            }
          },
          {
            "Sid": "CodeConnectTagManagement",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:TagResource",
              "codestar-connections:UntagResource",
              "codestar-connections:ListTagsForResource"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "codeguru-reviewer"
              }
            }
          },
          {
            "Sid": "CodeConnectManagedRules",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:UseConnection",
              "codestar-connections:ListConnections",
              "codestar-connections:PassConnection"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "codestar-connections:ProviderAction": [
                  "ListRepositories",
                  "ListOwners"
                ]
              }
            }
          },
          {
            "Sid": "CloudWatchEventsManagedRules",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:DeleteRule",
              "events:RemoveTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "codeguru-reviewer.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ComputeOptimizerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ComputeOptimizerFullAccess",
            "Effect": "Allow",
            "Action": [
              "compute-optimizer:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AwsOrgsAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CloudWatchAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AutoScalingAccess",
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeAutoScalingGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Ec2Access",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeGuruReviewerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonCodeGuruReviewerReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "codeguru:Get*",
              "codeguru-reviewer:List*",
              "codeguru-reviewer:Describe*",
              "codeguru-reviewer:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeGuruProfilerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "codeguru-profiler:*",
              "iam:ListRoles",
              "iam:ListUsers",
              "sns:ListTopics",
              "codeguru:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/*AWSServiceRoleForCodeGuruProfiler*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "codeguru-profiler.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeGuruProfilerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "codeguru:Get*",
              "codeguru-profiler:BatchGet*",
              "codeguru-profiler:Describe*",
              "codeguru-profiler:Get*",
              "codeguru-profiler:List*",
              "iam:ListRoles",
              "iam:ListUsers"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMCSFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget",
              "application-autoscaling:PutScheduledAction",
              "application-autoscaling:DeleteScheduledAction",
              "application-autoscaling:DescribeScheduledActions"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cassandra:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:PutMetricAlarm"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/cassandra.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_CassandraTable",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "cassandra.application-autoscaling.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMCSReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cassandra:Select"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScheduledActions",
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSNetworkManagerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "directconnect:DescribeDirectConnectGateways",
              "directconnect:DescribeConnections",
              "directconnect:DescribeDirectConnectGatewayAttachments",
              "directconnect:DescribeLocations",
              "directconnect:DescribeVirtualInterfaces",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpcs",
              "ec2:GetTransitGatewayRouteTableAssociations",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "ec2:SearchTransitGatewayRoutes",
              "ec2:DescribeTransitGatewayPeeringAttachments",
              "ec2:DescribeTransitGatewayConnects",
              "ec2:DescribeTransitGatewayConnectPeers",
              "ec2:DescribeRegions",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators",
              "ec2:DescribeTransitGatewayRouteTableAnnouncements",
              "ec2:DescribeTransitGatewayPolicyTables",
              "ec2:GetTransitGatewayPolicyTableAssociations",
              "ec2:GetTransitGatewayPolicyTableEntries"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKendraReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kendra:Describe*",
              "kendra:List*",
              "kendra:Query",
              "kendra:GetQuerySuggestions"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKendraFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "kendra.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:ListAliases",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:GetBucketLocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:DescribeSecret"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonKendra-*"
          },
          {
            "Effect": "Allow",
            "Action": "kendra:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerMechanicalTurkAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:*FlowDefinition",
              "sagemaker:*FlowDefinitions"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAugmentedAIHumanLoopFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:*HumanLoop",
              "sagemaker:*HumanLoops"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAugmentedAIFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:*HumanLoop",
              "sagemaker:*HumanLoops",
              "sagemaker:*FlowDefinition",
              "sagemaker:*FlowDefinitions",
              "sagemaker:*HumanTaskUi",
              "sagemaker:*HumanTaskUis"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "sagemaker:WorkteamType": [
                  "private-crowd",
                  "vendor-crowd"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "sagemaker.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSNetworkManagerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "networkmanager:Describe*",
              "networkmanager:Get*",
              "networkmanager:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSNetworkManagerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "networkmanager:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "networkmanager.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFraudDetectorFullAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "frauddetector:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:ListEndpoints",
              "sagemaker:DescribeEndpoint"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:GetBucketLocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "frauddetector.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceAccessManagerResourceShareParticipantAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ram:AcceptResourceShareInvitation",
              "ram:GetResourcePolicies",
              "ram:GetResourceShareInvitations",
              "ram:GetResourceShares",
              "ram:ListPendingInvitationResources",
              "ram:ListPrincipals",
              "ram:ListResources",
              "ram:RejectResourceShareInvitation"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceAccessManagerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ram:Get*",
              "ram:List*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudFormationStackSetsOrgMemberServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "iam:CreateRole",
              "iam:DeleteRole",
              "iam:GetRole"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/stacksets-exec-*"
            ]
          },
          {
            "Action": [
              "iam:DetachRolePolicy",
              "iam:AttachRolePolicy"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/stacksets-exec-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PolicyARN": "arn:aws:iam::aws:policy/AdministratorAccess"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "CloudFormationStackSetsOrgAdminServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowsAWSOrganizationsReadAPIs",
            "Effect": "Allow",
            "Action": [
              "organizations:List*",
              "organizations:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAssumeRoleInMemberAccounts",
            "Effect": "Allow",
            "Action": "sts:AssumeRole",
            "Resource": "arn:aws:iam::*:role/stacksets-exec-*"
          }
        ]
      }
    },
    {
      "PolicyName": "Health_OrganizationsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "HealthAPIOrganizationView0",
            "Effect": "Allow",
            "Action": [
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators",
              "organizations:DescribeOrganization",
              "organizations:DescribeAccount"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSImageBuilderReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "imagebuilder:Get*",
              "imagebuilder:List*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSImageBuilderFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "imagebuilder:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:*imagebuilder*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "license-manager:ListLicenseConfigurations",
              "license-manager:ListLicenseSpecificationsForResource"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetInstanceProfile"
            ],
            "Resource": "arn:aws:iam::*:instance-profile/*imagebuilder*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListInstanceProfiles",
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:instance-profile/*imagebuilder*",
              "arn:aws:iam::*:role/*imagebuilder*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:GetBucketLocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3::*:*imagebuilder*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/imagebuilder.amazonaws.com/AWSServiceRoleForImageBuilder",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "imagebuilder.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeSnapshots",
              "ec2:DescribeVpcs",
              "ec2:DescribeRegions",
              "ec2:DescribeVolumes",
              "ec2:DescribeSubnets",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeLaunchTemplates"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "EC2FleetTimeShiftableServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeSubnets",
              "ec2:DescribeInstances",
              "ec2:RunInstances",
              "ec2:CreateFleet"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:spot-instances-request/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:ec2:fleet-id": "*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRekognitionCustomLabelsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:GetObjectTagging",
              "s3:GetObjectVersion",
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::*custom-labels*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "rekognition:CreateProject",
              "rekognition:CreateProjectVersion",
              "rekognition:StartProjectVersion",
              "rekognition:StopProjectVersion",
              "rekognition:DescribeProjects",
              "rekognition:DescribeProjectVersions",
              "rekognition:DetectCustomLabels",
              "rekognition:DeleteProject",
              "rekognition:DeleteProjectVersion",
              "rekognition:TagResource",
              "rekognition:UntagResource",
              "rekognition:ListTagsForResource",
              "rekognition:CreateDataset",
              "rekognition:ListDatasetEntries",
              "rekognition:ListDatasetLabels",
              "rekognition:DescribeDataset",
              "rekognition:UpdateDatasetEntries",
              "rekognition:DistributeDatasetEntries",
              "rekognition:DeleteDataset",
              "rekognition:CopyProjectVersion",
              "rekognition:PutProjectPolicy",
              "rekognition:ListProjectPolicies",
              "rekognition:DeleteProjectPolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkDocsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "workdocs:Describe*",
              "ds:DescribeDirectories",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticFileSystemClientReadWriteAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:ClientMount",
              "elasticfilesystem:ClientWrite",
              "elasticfilesystem:DescribeMountTargets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticFileSystemClientReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:ClientMount",
              "elasticfilesystem:DescribeMountTargets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticFileSystemClientFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:ClientMount",
              "elasticfilesystem:ClientRootAccess",
              "elasticfilesystem:ClientWrite",
              "elasticfilesystem:DescribeMountTargets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightSageMakerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SageMakerTransformJobAccess",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeTransformJob",
              "sagemaker:StopTransformJob",
              "sagemaker:CreateTransformJob"
            ],
            "Resource": "arn:aws:sagemaker:*:*:transform-job/quicksight-auto-generated-*"
          },
          {
            "Sid": "SageMakerModelReadAccess",
            "Effect": "Allow",
            "Action": [
              "sagemaker:ListModels",
              "sagemaker:DescribeModel"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3ObjectReadAccess",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": [
              "arn:aws:s3:::quicksight-ml.*",
              "arn:aws:s3:::sagemaker*"
            ]
          },
          {
            "Sid": "S3ObjectUpdateAccess",
            "Effect": "Allow",
            "Action": "s3:PutObject",
            "Resource": "arn:aws:s3:::sagemaker*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "S3BucketReadAccess",
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::sagemaker*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonManagedBlockchainServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/managedblockchain/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/managedblockchain/*:log-stream:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppSyncServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingTargets",
              "xray:GetSamplingRules",
              "xray:GetSamplingStatisticSummaries"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeSDK",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "chime:CreateMeeting",
              "chime:CreateMeetingWithAttendees",
              "chime:DeleteMeeting",
              "chime:GetMeeting",
              "chime:ListMeetings",
              "chime:CreateAttendee",
              "chime:BatchCreateAttendee",
              "chime:DeleteAttendee",
              "chime:GetAttendee",
              "chime:ListAttendees",
              "chime:ListAttendeeTags",
              "chime:ListMeetingTags",
              "chime:ListTagsForResource",
              "chime:TagAttendee",
              "chime:TagMeeting",
              "chime:TagResource",
              "chime:UntagAttendee",
              "chime:UntagMeeting",
              "chime:UntagResource",
              "chime:StartMeetingTranscription",
              "chime:StopMeetingTranscription",
              "chime:CreateMediaCapturePipeline",
              "chime:CreateMediaConcatenationPipeline",
              "chime:CreateMediaLiveConnectorPipeline",
              "chime:DeleteMediaCapturePipeline",
              "chime:DeleteMediaPipeline",
              "chime:GetMediaCapturePipeline",
              "chime:GetMediaPipeline",
              "chime:ListMediaCapturePipelines",
              "chime:ListMediaPipelines"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceTesterForFreeRTOSFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/idt-*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "iot.amazonaws.com"
              }
            }
          },
          {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
              "iot:DeleteThing",
              "iot:AttachThingPrincipal",
              "iot:DeleteCertificate",
              "iot:GetRegistrationCode",
              "iot:CreatePolicy",
              "iot:UpdateCACertificate",
              "s3:ListBucket",
              "iot:DescribeEndpoint",
              "iot:CreateOTAUpdate",
              "iot:CreateStream",
              "signer:ListSigningJobs",
              "acm:ListCertificates",
              "iot:CreateKeysAndCertificate",
              "iot:UpdateCertificate",
              "iot:CreateCertificateFromCsr",
              "iot:DetachThingPrincipal",
              "iot:RegisterCACertificate",
              "iot:CreateThing",
              "iam:ListRoles",
              "iot:RegisterCertificate",
              "iot:DeleteCACertificate",
              "signer:PutSigningProfile",
              "s3:ListAllMyBuckets",
              "signer:ListSigningPlatforms",
              "iot-device-tester:SendMetrics",
              "iot-device-tester:SupportedVersion",
              "iot-device-tester:LatestIdt",
              "iot-device-tester:CheckVersion",
              "iot-device-tester:DownloadTestSuite"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "signer:StartSigningJob",
              "acm:GetCertificate",
              "signer:DescribeSigningJob",
              "s3:CreateBucket",
              "execute-api:Invoke",
              "s3:DeleteBucket",
              "s3:PutBucketVersioning",
              "signer:CancelSigningProfile"
            ],
            "Resource": [
              "arn:aws:execute-api:us-east-1:098862408343:9xpmnvs5h4/prod/POST/metrics",
              "arn:aws:signer:*:*:/signing-profiles/*",
              "arn:aws:signer:*:*:/signing-jobs/*",
              "arn:aws:iam::*:role/idt-*",
              "arn:aws:acm:*:*:certificate/*",
              "arn:aws:s3:::idt-*",
              "arn:aws:s3:::afr-ota*"
            ]
          },
          {
            "Sid": "VisualEditor3",
            "Effect": "Allow",
            "Action": [
              "iot:DeleteStream",
              "iot:DeleteCertificate",
              "iot:AttachPolicy",
              "iot:DetachPolicy",
              "iot:DeletePolicy",
              "s3:ListBucketVersions",
              "iot:UpdateCertificate",
              "iot:GetOTAUpdate",
              "iot:DeleteOTAUpdate",
              "iot:DescribeJobExecution"
            ],
            "Resource": [
              "arn:aws:s3:::afr-ota*",
              "arn:aws:iot:*:*:thinggroup/idt*",
              "arn:aws:iam::*:role/idt-*"
            ]
          },
          {
            "Sid": "VisualEditor4",
            "Effect": "Allow",
            "Action": [
              "iot:DeleteCertificate",
              "iot:AttachPolicy",
              "iot:DetachPolicy",
              "s3:DeleteObjectVersion",
              "iot:DeleteOTAUpdate",
              "s3:PutObject",
              "s3:GetObject",
              "iot:DeleteStream",
              "iot:DeletePolicy",
              "s3:DeleteObject",
              "iot:UpdateCertificate",
              "iot:GetOTAUpdate",
              "s3:GetObjectVersion",
              "iot:DescribeJobExecution"
            ],
            "Resource": [
              "arn:aws:s3:::afr-ota*/*",
              "arn:aws:s3:::idt-*/*",
              "arn:aws:iot:*:*:policy/idt*",
              "arn:aws:iam::*:role/idt-*",
              "arn:aws:iot:*:*:otaupdate/idt*",
              "arn:aws:iot:*:*:thing/idt*",
              "arn:aws:iot:*:*:cert/*",
              "arn:aws:iot:*:*:job/*",
              "arn:aws:iot:*:*:stream/*"
            ]
          },
          {
            "Sid": "VisualEditor5",
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::afr-ota*/*",
              "arn:aws:s3:::idt-*/*"
            ]
          },
          {
            "Sid": "VisualEditor6",
            "Effect": "Allow",
            "Action": [
              "iot:CancelJobExecution"
            ],
            "Resource": [
              "arn:aws:iot:*:*:job/*",
              "arn:aws:iot:*:*:thing/idt*"
            ]
          },
          {
            "Sid": "VisualEditor7",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/Owner": "IoTDeviceTester"
              }
            }
          },
          {
            "Sid": "VisualEditor8",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/Owner": "IoTDeviceTester"
              }
            }
          },
          {
            "Sid": "VisualEditor9",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/Owner": "IoTDeviceTester"
              }
            }
          },
          {
            "Sid": "VisualEditor10",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*:*:placement-group/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:subnet/*"
            ]
          },
          {
            "Sid": "VisualEditor11",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/Owner": "IoTDeviceTester"
              }
            }
          },
          {
            "Sid": "VisualEditor12",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeSecurityGroups",
              "ssm:DescribeParameters",
              "ssm:GetParameters"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor13",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "Owner"
                ]
              },
              "StringEquals": {
                "ec2:CreateAction": [
                  "RunInstances",
                  "CreateSecurityGroup"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTDeviceTesterForGreengrassFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/idt-*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "iot.amazonaws.com",
                  "lambda.amazonaws.com",
                  "greengrass.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "iot:DeleteCertificate",
              "lambda:DeleteFunction",
              "execute-api:Invoke",
              "iot:UpdateCertificate"
            ],
            "Resource": [
              "arn:aws:execute-api:us-east-1:098862408343:9xpmnvs5h4/prod/POST/metrics",
              "arn:aws:lambda:*:*:function:idt-*",
              "arn:aws:iot:*:*:cert/*"
            ]
          },
          {
            "Sid": "VisualEditor3",
            "Effect": "Allow",
            "Action": [
              "iot:CreateThing",
              "iot:DeleteThing"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/idt-*",
              "arn:aws:iot:*:*:cert/*"
            ]
          },
          {
            "Sid": "VisualEditor4",
            "Effect": "Allow",
            "Action": [
              "iot:AttachPolicy",
              "iot:DetachPolicy",
              "iot:DeletePolicy"
            ],
            "Resource": [
              "arn:aws:iot:*:*:policy/idt-*",
              "arn:aws:iot:*:*:cert/*"
            ]
          },
          {
            "Sid": "VisualEditor5",
            "Effect": "Allow",
            "Action": [
              "iot:CreateJob",
              "iot:DescribeJob",
              "iot:DescribeJobExecution",
              "iot:DeleteJob"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/idt-*",
              "arn:aws:iot:*:*:job/*"
            ]
          },
          {
            "Sid": "VisualEditor6",
            "Effect": "Allow",
            "Action": [
              "iot:DescribeEndpoint",
              "greengrass:*",
              "iam:ListAttachedRolePolicies",
              "iot:CreatePolicy",
              "iot:GetThingShadow",
              "iot:CreateKeysAndCertificate",
              "iot:ListThings",
              "iot:UpdateThingShadow",
              "iot:CreateCertificateFromCsr",
              "iot-device-tester:SendMetrics",
              "iot-device-tester:SupportedVersion",
              "iot-device-tester:LatestIdt",
              "iot-device-tester:CheckVersion",
              "iot-device-tester:DownloadTestSuite"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor7",
            "Effect": "Allow",
            "Action": [
              "iot:DetachThingPrincipal",
              "iot:AttachThingPrincipal"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/idt-*",
              "arn:aws:iot:*:*:cert/*"
            ]
          },
          {
            "Sid": "VisualEditor8",
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:DeleteObjectVersion",
              "s3:ListBucketVersions",
              "s3:CreateBucket",
              "s3:DeleteObject",
              "s3:DeleteBucket"
            ],
            "Resource": "arn:aws:s3:::idt*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DetachNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DescribeInstances",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:CreateNetworkInterfacePermission",
              "iam:ListAttachedRolePolicies",
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSecurityGroup",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupIngress"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "ec2:ResourceTag/Name": "eks-cluster-sg*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:subnet/*"
            ],
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "kubernetes.io/cluster/*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "kubernetes.io/cluster/*"
                ],
                "aws:RequestTag/Name": "eks-cluster-sg*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "route53:AssociateVPCWithHostedZone",
            "Resource": "arn:aws:route53:::hostedzone/*"
          },
          {
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
          },
          {
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "ComputeOptimizerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "computeOptimizerReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "compute-optimizer:DescribeRecommendationExportJobs",
              "compute-optimizer:GetEnrollmentStatus",
              "compute-optimizer:GetEnrollmentStatusesForOrganization",
              "compute-optimizer:GetRecommendationSummaries",
              "compute-optimizer:GetEC2InstanceRecommendations",
              "compute-optimizer:GetEC2RecommendationProjectedMetrics",
              "compute-optimizer:GetAutoScalingGroupRecommendations",
              "compute-optimizer:GetEBSVolumeRecommendations",
              "compute-optimizer:GetLambdaFunctionRecommendations",
              "compute-optimizer:GetRecommendationPreferences",
              "compute-optimizer:GetEffectiveRecommendationPreferences",
              "compute-optimizer:GetECSServiceRecommendations",
              "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
              "compute-optimizer:GetRDSDatabaseRecommendations",
              "compute-optimizer:GetRDSDatabaseRecommendationProjectedMetrics",
              "compute-optimizer:GetLicenseRecommendations",
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "ecs:ListServices",
              "ecs:ListClusters",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeAutoScalingInstances",
              "lambda:ListFunctions",
              "lambda:ListProvisionedConcurrencyConfigs",
              "cloudwatch:GetMetricData",
              "organizations:ListAccounts",
              "organizations:DescribeOrganization",
              "organizations:DescribeAccount",
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingCassandraTablePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "cassandra:Select",
            "Resource": [
              "arn:*:cassandra:*:*:/keyspace/system/table/*",
              "arn:*:cassandra:*:*:/keyspace/system_schema/table/*",
              "arn:*:cassandra:*:*:/keyspace/system_schema_mcs/table/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cassandra:Alter",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ElementalAppliancesSoftwareReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elemental-appliances-software:List*",
              "elemental-appliances-software:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "GameLiftGameServerGroupPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "ec2:TerminateInstances",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/GameLift": "GameServerGroups"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "autoscaling:CompleteLifecycleAction",
              "autoscaling:ResumeProcesses",
              "autoscaling:EnterStandby",
              "autoscaling:SetInstanceProtection",
              "autoscaling:UpdateAutoScalingGroup",
              "autoscaling:SuspendProcesses",
              "autoscaling:DetachInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/GameLift": "GameServerGroups"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "autoscaling:DescribeAutoScalingGroups",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeSubnets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "sns:Publish",
            "Resource": [
              "arn:*:sns:*:*:ActivatingLifecycleHookTopic-*",
              "arn:*:sns:*:*:TerminatingLifecycleHookTopic-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/GameLift"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSWAFConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowUseOfAWSWAF",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET",
              "apigateway:SetWebACL",
              "cloudfront:ListDistributions",
              "cloudfront:ListDistributionsByWebACLId",
              "cloudfront:UpdateDistribution",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "ec2:DescribeRegions",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:SetWebACL",
              "appsync:ListGraphqlApis",
              "appsync:SetWebACL",
              "waf-regional:*",
              "waf:*",
              "wafv2:*",
              "s3:ListAllMyBuckets",
              "logs:DescribeResourcePolicies",
              "logs:DescribeLogGroups",
              "cognito-idp:ListUserPools",
              "cognito-idp:AssociateWebACL",
              "cognito-idp:DisassociateWebACL",
              "cognito-idp:ListResourcesForWebACL",
              "cognito-idp:GetWebACLForResource",
              "apprunner:AssociateWebAcl",
              "apprunner:DisassociateWebAcl",
              "apprunner:DescribeWebAclForService",
              "apprunner:ListServices",
              "apprunner:ListAssociatedServicesForWebAcl",
              "ec2:AssociateVerifiedAccessInstanceWebAcl",
              "ec2:DisassociateVerifiedAccessInstanceWebAcl",
              "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
              "ec2:GetVerifiedAccessInstanceWebAcl",
              "ec2:DescribeVerifiedAccessInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowLogDeliverySubscription",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:DeleteLogDelivery"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Sid": "GrantLogDeliveryPermissionForS3Bucket",
            "Action": [
              "s3:PutBucketPolicy",
              "s3:GetBucketPolicy"
            ],
            "Resource": [
              "arn:aws:s3:::aws-waf-logs-*"
            ],
            "Effect": "Allow"
          },
          {
            "Sid": "GrantLogDeliveryPermissionForCloudWatchLogGroup",
            "Action": [
              "logs:PutResourcePolicy"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "wafv2.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSWAFConsoleReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "apigateway:GET",
              "cloudfront:ListDistributions",
              "cloudfront:ListDistributionsByWebACLId",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "ec2:DescribeRegions",
              "elasticloadbalancing:DescribeLoadBalancers",
              "appsync:ListGraphqlApis",
              "waf-regional:Get*",
              "waf-regional:List*",
              "waf:Get*",
              "waf:List*",
              "wafv2:Describe*",
              "wafv2:Get*",
              "wafv2:List*",
              "wafv2:CheckCapacity",
              "cognito-idp:ListUserPools",
              "cognito-idp:ListResourcesForWebACL",
              "cognito-idp:GetWebACLForResource",
              "apprunner:DescribeWebAclForService",
              "apprunner:ListServices",
              "apprunner:ListAssociatedServicesForWebAcl",
              "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
              "ec2:GetVerifiedAccessInstanceWebAcl",
              "ec2:DescribeVerifiedAccessInstances"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkDocsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "workdocs:*",
              "ds:DescribeDirectories",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAugmentedAIIntegratedAPIAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:*HumanLoop",
              "sagemaker:*HumanLoops",
              "sagemaker:*FlowDefinition",
              "sagemaker:*FlowDefinitions",
              "sagemaker:*HumanTaskUi",
              "sagemaker:*HumanTaskUis"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "sagemaker:WorkteamType": [
                  "private-crowd",
                  "vendor-crowd"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "textract:AnalyzeDocument"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "rekognition:DetectModerationLabels"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "sagemaker.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKeyspacesFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CassandraFullAccess",
            "Effect": "Allow",
            "Action": [
              "cassandra:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ApplicationAutoscalingFullAccess",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeleteScheduledAction",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScheduledActions",
              "application-autoscaling:PutScheduledAction",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget",
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudwatchAlarmsFullAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:PutMetricAlarm"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ApplicationAutoscalingServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/cassandra.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_CassandraTable",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "cassandra.application-autoscaling.amazonaws.com"
              }
            }
          },
          {
            "Sid": "KeyspacesReplicationServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/replication.cassandra.amazonaws.com/AWSServiceRoleForKeyspacesReplication",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "replication.cassandra.amazonaws.com"
              }
            }
          },
          {
            "Sid": "Ec2VpcReadAccess",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKeyspacesReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cassandra:Select"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScheduledActions",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDetectiveFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "detective:*",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "guardduty:ArchiveFindings"
            ],
            "Resource": "arn:aws:guardduty:*:*:detector/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "guardduty:GetFindings",
              "guardduty:ListDetectors"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "securityHub:GetFindings"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPurchaseOrdersServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "account:GetAccountInformation",
              "account:GetContactInformation",
              "aws-portal:*Billing",
              "consolidatedbilling:GetAccountBillingRole",
              "invoicing:GetInvoicePDF",
              "payments:GetPaymentInstrument",
              "payments:ListPaymentPreferences",
              "purchase-orders:AddPurchaseOrder",
              "purchase-orders:DeletePurchaseOrder",
              "purchase-orders:GetPurchaseOrder",
              "purchase-orders:ListPurchaseOrderInvoices",
              "purchase-orders:ListPurchaseOrders",
              "purchase-orders:ListTagsForResource",
              "purchase-orders:ModifyPurchaseOrders",
              "purchase-orders:TagResource",
              "purchase-orders:UntagResource",
              "purchase-orders:UpdatePurchaseOrder",
              "purchase-orders:UpdatePurchaseOrderStatus",
              "purchase-orders:ViewPurchaseOrders",
              "tax:ListTaxRegistrations"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ServerMigrationServiceConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sms:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "cloudformation:ListStacks",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackResources"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": "s3:ListAllMyBuckets",
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::sms-app-*/*"
          },
          {
            "Action": [
              "ec2:DescribeKeyPairs",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iam:ListRoles"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "sms.amazonaws.com"
              }
            },
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:GetInstanceProfile",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupServiceLinkedRolePolicyForBackupTest",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "elasticfilesystem:Backup",
              "elasticfilesystem:DescribeTags"
            ],
            "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
            "Effect": "Allow",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/aws:elasticfilesystem:default-backup": "enabled"
              }
            }
          },
          {
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMPatchAssociation",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "ssm:DescribeEffectivePatchesForPatchBaseline",
            "Resource": "arn:aws:ssm:*:*:patchbaseline/*"
          },
          {
            "Effect": "Allow",
            "Action": "ssm:GetPatchBaseline",
            "Resource": "arn:aws:ssm:*:*:patchbaseline/*"
          },
          {
            "Effect": "Allow",
            "Action": "tag:GetResources",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ssm:DescribePatchBaselines",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloud9SSMInstanceProfile",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel",
              "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployRoleForCloudFormation",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTSiteWiseMonitorPortalAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotsitewise:CreateProject",
              "iotsitewise:DescribeProject",
              "iotsitewise:UpdateProject",
              "iotsitewise:DeleteProject",
              "iotsitewise:ListProjects",
              "iotsitewise:BatchAssociateProjectAssets",
              "iotsitewise:BatchDisassociateProjectAssets",
              "iotsitewise:ListProjectAssets",
              "iotsitewise:CreateDashboard",
              "iotsitewise:DescribeDashboard",
              "iotsitewise:UpdateDashboard",
              "iotsitewise:DeleteDashboard",
              "iotsitewise:ListDashboards",
              "iotsitewise:CreateAccessPolicy",
              "iotsitewise:DescribeAccessPolicy",
              "iotsitewise:UpdateAccessPolicy",
              "iotsitewise:DeleteAccessPolicy",
              "iotsitewise:ListAccessPolicies",
              "iotsitewise:DescribeAsset",
              "iotsitewise:ListAssets",
              "iotsitewise:ListAssociatedAssets",
              "iotsitewise:DescribeAssetProperty",
              "iotsitewise:GetAssetPropertyValue",
              "iotsitewise:GetAssetPropertyValueHistory",
              "iotsitewise:GetAssetPropertyAggregates",
              "sso-directory:DescribeUsers"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSThinkboxAWSPortalGatewayPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/thinkbox*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-portal-cache*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "dynamodb:Scan",
            "Resource": [
              "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::stack*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::stack*/gateway_certs/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:rcs-tls-pw-stack*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSThinkboxAWSPortalWorkerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeTags"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/DeadlineRole": "DeadlineRenderNode"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-portal-cache*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::stack*/gateway_certs/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/thinkbox*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:SendMessage",
              "sqs:GetQueueUrl"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:DeadlineAWS*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSThinkboxAssetServerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/thinkbox*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-portal-cache*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSThinkboxDeadlineResourceTrackerAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:ListStreams"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:BatchWriteItem",
              "dynamodb:DeleteItem",
              "dynamodb:DescribeStream",
              "dynamodb:DescribeTable",
              "dynamodb:GetItem",
              "dynamodb:GetRecords",
              "dynamodb:GetShardIterator",
              "dynamodb:PutItem",
              "dynamodb:Scan",
              "dynamodb:UpdateItem",
              "dynamodb:UpdateTable"
            ],
            "Resource": [
              "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeHealth*",
              "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeInfo*",
              "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CancelSpotFleetRequests",
              "ec2:DeleteFleets",
              "ec2:DescribeFleetInstances",
              "ec2:DescribeFleets",
              "ec2:DescribeInstances",
              "ec2:DescribeSpotFleetInstances",
              "ec2:DescribeSpotFleetRequests"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RebootInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/DeadlineTrackedAWSResource": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:PutEvents"
            ],
            "Resource": [
              "arn:aws:events:*:*:event-bus/default"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/lambda/DeadlineResourceTracker*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:DeleteMessage",
              "sqs:GetQueueAttributes",
              "sqs:ReceiveMessage"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:DeadlineAWSComputeNodeStateMessageQueue*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSThinkboxDeadlineResourceTrackerAdminPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker1",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker2",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStacks"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker3",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:UpdateStack",
              "cloudformation:DescribeStacks",
              "cloudformation:UpdateTerminationProtection",
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/DeadlineResourceTracker*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker4",
            "Effect": "Allow",
            "Action": [
              "dynamodb:CreateTable",
              "dynamodb:DeleteTable",
              "dynamodb:DescribeTable",
              "dynamodb:ListTagsOfResource",
              "dynamodb:TagResource",
              "dynamodb:UntagResource"
            ],
            "Resource": [
              "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeHealth*",
              "arn:aws:dynamodb:*:*:table/DeadlineEC2ComputeNodeInfo*",
              "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker5",
            "Effect": "Allow",
            "Action": [
              "dynamodb:BatchWriteItem",
              "dynamodb:Scan"
            ],
            "Resource": [
              "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker6",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:DescribeRule",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/DeadlineResourceTracker*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker7",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": [
              "arn:aws:iam::*:role/DeadlineResourceTracker*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker8",
            "Effect": "Allow",
            "Action": [
              "iam:GetUser"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker9",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "dynamodb.application-autoscaling.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker10",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/DeadlineResourceTrackerAccess*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker11",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "application-autoscaling.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker12",
            "Effect": "Allow",
            "Action": [
              "lambda:GetEventSourceMapping"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker13",
            "Effect": "Allow",
            "Action": [
              "lambda:CreateEventSourceMapping",
              "lambda:DeleteEventSourceMapping"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "lambda:FunctionArn": [
                  "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
                ]
              }
            }
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker14",
            "Effect": "Allow",
            "Action": [
              "lambda:AddPermission",
              "lambda:RemovePermission"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
            ],
            "Condition": {
              "StringLike": {
                "lambda:Principal": "events.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker15",
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:DeleteFunction",
              "lambda:DeleteFunctionConcurrency",
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:ListTags",
              "lambda:PutFunctionConcurrency",
              "lambda:TagResource",
              "lambda:UntagResource",
              "lambda:UpdateFunctionCode",
              "lambda:UpdateFunctionConfiguration"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:DeadlineResourceTracker*"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker16",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*/deadline_aws_resource_tracker-*.zip",
              "arn:aws:s3:::*/DeadlineAWSResourceTrackerTemplate-*.yaml"
            ]
          },
          {
            "Sid": "AWSThinkboxDeadlineResourceTracker17",
            "Effect": "Allow",
            "Action": [
              "sqs:CreateQueue",
              "sqs:DeleteQueue",
              "sqs:GetQueueAttributes",
              "sqs:ListQueueTags",
              "sqs:TagQueue",
              "sqs:UntagQueue"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:DeadlineAWSComputeNodeState*",
              "arn:aws:sqs:*:*:DeadlineResourceTracker*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSThinkboxDeadlineSpotEventPluginWorkerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeTags"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/DeadlineTrackedAWSResource": "SpotEventPlugin"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/DeadlineResourceTracker": "SpotEventPlugin"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:GetQueueUrl",
              "sqs:SendMessage"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:DeadlineAWSComputeNodeState*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSThinkboxDeadlineSpotEventPluginAdminPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CancelSpotFleetRequests",
              "ec2:DescribeSpotFleetInstances",
              "ec2:DescribeSpotFleetRequests",
              "ec2:ModifySpotFleetRequest",
              "ec2:RequestSpotFleet"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "RunInstances"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "spot.amazonaws.com",
                  "spotfleet.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:instance-profile/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-ec2-spot-fleet-tagging-role",
              "arn:aws:iam::*:role/DeadlineSpot*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetUser"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-ec2-spot-fleet-tagging-role",
              "arn:aws:iam::*:role/DeadlineSpot*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSThinkboxAWSPortalAdminPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSThinkboxAWSPortal1",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachInternetGateway",
              "ec2:AssociateAddress",
              "ec2:AssociateRouteTable",
              "ec2:AllocateAddress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateFleet",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateInternetGateway",
              "ec2:CreateNatGateway",
              "ec2:CreatePlacementGroup",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSecurityGroup",
              "ec2:CreateSubnet",
              "ec2:CreateVpc",
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeAddresses",
              "ec2:DescribeFleets",
              "ec2:DescribeFleetHistory",
              "ec2:DescribeFleetInstances",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeRouteTables",
              "ec2:DescribeNatGateways",
              "ec2:DescribeTags",
              "ec2:DescribeKeyPairs",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeRegions",
              "ec2:DescribeSpotFleetRequestHistory",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSpotFleetInstances",
              "ec2:DescribeSpotFleetRequests",
              "ec2:DescribeSpotPriceHistory",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints",
              "ec2:GetConsoleOutput",
              "ec2:ImportKeyPair",
              "ec2:ReleaseAddress",
              "ec2:RequestSpotFleet",
              "ec2:CancelSpotFleetRequests",
              "ec2:DisassociateAddress",
              "ec2:DeleteFleets",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteVpc",
              "ec2:DeletePlacementGroup",
              "ec2:DeleteVpcEndpoints",
              "ec2:DeleteInternetGateway",
              "ec2:DeleteSecurityGroup",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:DisassociateRouteTable",
              "ec2:DeleteSubnet",
              "ec2:DeleteNatGateway",
              "ec2:DetachInternetGateway",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifyFleet",
              "ec2:ModifySpotFleetRequest",
              "ec2:ModifyVpcAttribute"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSThinkboxAWSPortal2",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*:*:launch-template/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:placement-group/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*::image/*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal3",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:InstanceProfile": "arn:aws:iam::*:instance-profile/AWSPortal*"
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal4",
            "Effect": "Allow",
            "Action": "ec2:TerminateInstances",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/aws:cloudformation:logical-id": "ReverseForwarder"
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal5",
            "Effect": "Allow",
            "Action": "ec2:TerminateInstances",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:ec2spot:fleet-request-id": "*"
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal6",
            "Effect": "Allow",
            "Action": "ec2:TerminateInstances",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:PlacementGroup": "*DeadlinePlacementGroup*"
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal7",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:PlacementGroup": "*DeadlinePlacementGroup*"
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal8",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:CreateAction": "RunInstances"
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal9",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:internet-gateway/*",
              "arn:aws:ec2:*:*:route-table/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:natgateway/*",
              "arn:aws:ec2:*:*:elastic-ip/*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal10",
            "Effect": "Allow",
            "Action": [
              "iam:GetUser"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSThinkboxAWSPortal11",
            "Effect": "Allow",
            "Action": [
              "iam:GetInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:instance-profile/AWSPortal*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal12",
            "Effect": "Allow",
            "Action": [
              "iam:GetPolicy",
              "iam:ListEntitiesForPolicy",
              "iam:ListPolicyVersions"
            ],
            "Resource": [
              "arn:aws:iam::*:policy/AWSPortal*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal13",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:GetRolePolicy"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSPortal*",
              "arn:aws:iam::*:role/DeadlineSpot*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal14",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSPortal*",
              "arn:aws:iam::*:role/DeadlineSpot*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2fleet.amazonaws.com",
                  "spot.amazonaws.com",
                  "spotfleet.amazonaws.com",
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal15",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "ec2fleet.amazonaws.com",
                  "spot.amazonaws.com",
                  "spotfleet.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal16",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:GetBucketVersioning",
              "s3:PutBucketAcl",
              "s3:PutBucketCORS",
              "s3:PutBucketVersioning",
              "s3:GetBucketAcl",
              "s3:GetObject",
              "s3:PutBucketLogging",
              "s3:PutBucketTagging",
              "s3:PutObject",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:PutEncryptionConfiguration",
              "s3:PutLifecycleConfiguration",
              "s3:DeleteBucket",
              "s3:DeleteObject",
              "s3:DeleteBucketPolicy",
              "s3:DeleteObjectVersion"
            ],
            "Resource": [
              "arn:aws:s3::*:awsportal*",
              "arn:aws:s3::*:stack*",
              "arn:aws:s3::*:aws-portal-cache*",
              "arn:aws:s3::*:logs-for-aws-portal-cache*",
              "arn:aws:s3::*:logs-for-stack*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal17",
            "Effect": "Allow",
            "Action": [
              "s3:PutBucketPolicy"
            ],
            "Resource": [
              "arn:aws:s3::*:logs-for-aws-portal-cache*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal18",
            "Effect": "Allow",
            "Action": [
              "s3:PutBucketOwnershipControls"
            ],
            "Resource": [
              "arn:aws:s3::*:logs-for-stack*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal19",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSThinkboxAWSPortal20",
            "Effect": "Allow",
            "Action": [
              "dynamodb:Scan"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/DeadlineFleetHealth*"
          },
          {
            "Sid": "AWSThinkboxAWSPortal21",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResources",
              "cloudformation:DeleteStack",
              "cloudformation:DeleteChangeSet",
              "cloudformation:ListStackResources",
              "cloudformation:CreateChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:UpdateTerminationProtection",
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/stack*/*",
              "arn:aws:cloudformation:*:*:stack/Deadline*/*"
            ]
          },
          {
            "Sid": "AWSThinkboxAWSPortal22",
            "Effect": "Allow",
            "Action": [
              "cloudformation:EstimateTemplateCost",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSThinkboxAWSPortal23",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "logs:PutRetentionPolicy",
              "logs:DeleteRetentionPolicy"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/thinkbox*"
          },
          {
            "Sid": "AWSThinkboxAWSPortal24",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups",
              "logs:CreateLogGroup"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSThinkboxAWSPortal25",
            "Effect": "Allow",
            "Action": [
              "kms:Encrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "s3.*.amazonaws.com",
                  "secretsmanager.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal26",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "secretsmanager:Name": [
                  "rcs-tls-pw*"
                ]
              }
            }
          },
          {
            "Sid": "AWSThinkboxAWSPortal27",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DeleteSecret",
              "secretsmanager:UpdateSecret",
              "secretsmanager:DescribeSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:rcs-tls-pw*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupServiceLinkedRolePolicyForBackup",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EFSResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:Backup",
              "elasticfilesystem:DescribeTags"
            ],
            "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/aws:elasticfilesystem:default-backup": "enabled"
              }
            }
          },
          {
            "Sid": "DescribePermissions",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources",
              "elasticfilesystem:DescribeFileSystems",
              "dynamodb:ListTables",
              "storagegateway:ListVolumes",
              "ec2:DescribeVolumes",
              "ec2:DescribeInstances",
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters",
              "fsx:DescribeFileSystems",
              "fsx:DescribeVolumes",
              "s3:ListAllMyBuckets",
              "s3:GetBucketTagging"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SnapshotCopyTagPermissions",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CopySnapshot"
              }
            }
          },
          {
            "Sid": "EC2CreateBackupTagPermissions",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*::snapshot/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AWSBackupManagedResource"
                ]
              }
            }
          },
          {
            "Sid": "EC2CreateTagsPermissions",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*::snapshot/*"
            ],
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSBackupManagedResource": "false"
              }
            }
          },
          {
            "Sid": "EC2RDSDescribePermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSnapshots",
              "ec2:DescribeSnapshotTierStatus",
              "ec2:DescribeImages",
              "rds:DescribeDBSnapshots",
              "rds:DescribeDBClusterSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EBSCopyPermissions",
            "Effect": "Allow",
            "Action": "ec2:CopySnapshot",
            "Resource": "arn:aws:ec2:*::snapshot/*"
          },
          {
            "Sid": "EC2CopyPermissions",
            "Effect": "Allow",
            "Action": "ec2:CopyImage",
            "Resource": "*"
          },
          {
            "Sid": "EC2ModifyPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DeregisterImage",
              "ec2:DeleteSnapshot",
              "ec2:ModifySnapshotTier"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSBackupManagedResource": "false"
              }
            }
          },
          {
            "Sid": "RDSInstanceAndSnashotPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:AddTagsToResource",
              "rds:CopyDBSnapshot",
              "rds:DeleteDBSnapshot",
              "rds:DeleteDBInstanceAutomatedBackup"
            ],
            "Resource": "arn:aws:rds:*:*:snapshot:awsbackup:*"
          },
          {
            "Sid": "RDSClusterPermissions",
            "Effect": "Allow",
            "Action": [
              "rds:AddTagsToResource",
              "rds:CopyDBClusterSnapshot",
              "rds:DeleteDBClusterSnapshot"
            ],
            "Resource": "arn:aws:rds:*:*:cluster-snapshot:awsbackup:*"
          },
          {
            "Sid": "KMSDescribePermissions",
            "Effect": "Allow",
            "Action": "kms:DescribeKey",
            "Resource": "*"
          },
          {
            "Sid": "KMSGrantPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:ListGrants",
              "kms:ReEncryptFrom",
              "kms:GenerateDataKeyWithoutPlaintext"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "ec2.*.amazonaws.com",
                  "rds.*.amazonaws.com",
                  "fsx.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "KMSCreateGrantPermissions",
            "Effect": "Allow",
            "Action": "kms:CreateGrant",
            "Resource": "*",
            "Condition": {
              "Bool": {
                "kms:GrantIsForAWSResource": "true"
              },
              "StringLike": {
                "kms:ViaService": [
                  "ec2.*.amazonaws.com",
                  "rds.*.amazonaws.com",
                  "fsx.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "FsxPermissions",
            "Effect": "Allow",
            "Action": [
              "fsx:CopyBackup",
              "fsx:TagResource",
              "fsx:DescribeBackups",
              "fsx:DeleteBackup"
            ],
            "Resource": "arn:aws:fsx:*:*:backup/*"
          },
          {
            "Sid": "DynamoDBDeletePermissions",
            "Effect": "Allow",
            "Action": "dynamodb:DeleteBackup",
            "Resource": "arn:aws:dynamodb:*:*:table/*/backup/*"
          },
          {
            "Sid": "BackupGateway",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:ListVirtualMachines"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ListTagsForBackupGateway",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:ListTagsForResource"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:vm/*"
          },
          {
            "Sid": "DynamoDBPermissions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:ListTagsOfResource",
              "dynamodb:DescribeTable"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/*"
          },
          {
            "Sid": "StorageGatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "storagegateway:DescribeCachediSCSIVolumes",
              "storagegateway:DescribeStorediSCSIVolumes"
            ],
            "Resource": "arn:aws:storagegateway:*:*:gateway/*/volume/*"
          },
          {
            "Sid": "EventBridgePermissions",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:PutTargets",
              "events:DescribeRule",
              "events:EnableRule",
              "events:PutRule",
              "events:RemoveTargets",
              "events:ListTargetsByRule",
              "events:DisableRule"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/AwsBackupManagedRule*"
            ]
          },
          {
            "Sid": "EventBridgeRulesPermissions",
            "Effect": "Allow",
            "Action": "events:ListRules",
            "Resource": "*"
          },
          {
            "Sid": "SSMSAPPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-sap:GetOperation",
              "ssm-sap:UpdateHANABackupSettings"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TimestreamResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "timestream:ListDatabases",
              "timestream:ListTables",
              "timestream:ListTagsForResource",
              "timestream:DescribeDatabase",
              "timestream:DescribeTable",
              "timestream:GetAwsBackupStatus",
              "timestream:GetAwsRestoreStatus"
            ],
            "Resource": [
              "arn:aws:timestream:*:*:database/*"
            ]
          },
          {
            "Sid": "TimestreamPermissions",
            "Effect": "Allow",
            "Action": [
              "timestream:DescribeEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RedshiftDescribePermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusterSnapshots",
              "redshift:DescribeTags"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:snapshot:*/*",
              "arn:aws:redshift:*:*:cluster:*"
            ]
          },
          {
            "Sid": "RedshiftClusterSnapshotPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DeleteClusterSnapshot"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:snapshot:*/*"
            ]
          },
          {
            "Sid": "RedshiftClusterPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:cluster:*"
            ]
          },
          {
            "Sid": "CloudformationStackPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStacks"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/*"
            ]
          },
          {
            "Sid": "RecoveryPointTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "backup:TagResource"
            ],
            "Resource": "arn:aws:backup:*:*:recovery-point:*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": "${aws:ResourceAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAppFlowReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appflow:DescribeConnector",
              "appflow:DescribeConnectors",
              "appflow:DescribeConnectorProfiles",
              "appflow:DescribeFlows",
              "appflow:DescribeFlowExecution",
              "appflow:DescribeConnectorFields",
              "appflow:ListConnectors",
              "appflow:ListConnectorFields",
              "appflow:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAppFlowFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "appflow:*",
            "Resource": "*"
          },
          {
            "Sid": "ListRolesForRedshift",
            "Effect": "Allow",
            "Action": "iam:ListRoles",
            "Resource": "*"
          },
          {
            "Sid": "KMSListAccess",
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KMSGrantAccess",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "appflow.*.amazonaws.com"
              },
              "Bool": {
                "kms:GrantIsForAWSResource": "true"
              }
            }
          },
          {
            "Sid": "KMSListGrantAccess",
            "Effect": "Allow",
            "Action": [
              "kms:ListGrants"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "appflow.*.amazonaws.com"
              }
            }
          },
          {
            "Sid": "S3ReadAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "s3:GetBucketPolicy"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3PutBucketPolicyAccess",
            "Effect": "Allow",
            "Action": [
              "s3:PutBucketPolicy"
            ],
            "Resource": "arn:aws:s3:::appflow-*"
          },
          {
            "Sid": "SecretsManagerCreateSecretAccess",
            "Effect": "Allow",
            "Action": "secretsmanager:CreateSecret",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "secretsmanager:Name": "appflow!*"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "appflow.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "SecretsManagerPutResourcePolicyAccess",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:PutResourcePolicy"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "appflow.amazonaws.com"
                ]
              },
              "StringEqualsIgnoreCase": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "appflow"
              }
            }
          },
          {
            "Sid": "LambdaListFunctions",
            "Effect": "Allow",
            "Action": [
              "lambda:ListFunctions"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AlexaForBusinessLifesizeDelegatedAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "a4b:DisassociateDeviceFromRoom",
              "a4b:DeleteDevice",
              "a4b:UpdateDevice",
              "a4b:GetDevice"
            ],
            "Resource": [
              "arn:aws:a4b:us-east-1:*:device/*/*:A2IWO7UEGWV4TL"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "a4b:RegisterAVSDevice"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "a4b:amazonId": [
                  "A2IWO7UEGWV4TL"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "a4b:SearchDevices"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAllValues:StringLike": {
                "a4b:filters_deviceType": [
                  "*A2IWO7UEGWV4TL"
                ]
              },
              "Null": {
                "a4b:filters_deviceType": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "a4b:AssociateDeviceWithRoom"
            ],
            "Resource": [
              "arn:aws:a4b:us-east-1:*:device/*/*:A2IWO7UEGWV4TL",
              "arn:aws:a4b:us-east-1:*:room/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "a4b:GetRoom",
              "a4b:GetAddressBook",
              "a4b:SearchRooms",
              "a4b:CreateContact",
              "a4b:CreateRoom",
              "a4b:UpdateContact",
              "a4b:ListConferenceProviders",
              "a4b:DeleteRoom",
              "a4b:CreateAddressBook",
              "a4b:DisassociateContactFromAddressBook",
              "a4b:CreateConferenceProvider",
              "a4b:PutConferencePreference",
              "a4b:DeleteAddressBook",
              "a4b:AssociateContactWithAddressBook",
              "a4b:DeleteContact",
              "a4b:SearchProfiles",
              "a4b:UpdateProfile",
              "a4b:GetContact"
            ],
            "Resource": "*"
          },
          {
            "Action": [
              "kms:DescribeKey"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:kms:*:*:key/*"
          }
        ]
      }
    },
    {
      "PolicyName": "ElementalActivationsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elemental-activations:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkRoleWorkerTier",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowSQS",
            "Effect": "Allow",
            "Action": [
              "sqs:TagQueue",
              "sqs:DeleteQueue",
              "sqs:GetQueueAttributes",
              "sqs:CreateQueue"
            ],
            "Resource": "arn:aws:sqs:*:*:awseb-e-*"
          },
          {
            "Sid": "AllowDDB",
            "Effect": "Allow",
            "Action": [
              "dynamodb:CreateTable",
              "dynamodb:TagResource",
              "dynamodb:DescribeTable",
              "dynamodb:DeleteTable"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/awseb-e-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkRoleSNS",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowBeanstalkManageSNS",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:SetTopicAttributes",
              "sns:DeleteTopic"
            ],
            "Resource": [
              "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
            ]
          },
          {
            "Sid": "AllowSNSPublish",
            "Effect": "Allow",
            "Action": [
              "sns:GetTopicAttributes",
              "sns:Subscribe",
              "sns:Unsubscribe",
              "sns:Publish"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkRoleRDS",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowRDS",
            "Effect": "Allow",
            "Action": [
              "rds:CreateDBSecurityGroup",
              "rds:DeleteDBSecurityGroup",
              "rds:AuthorizeDBSecurityGroupIngress",
              "rds:CreateDBInstance",
              "rds:ModifyDBInstance",
              "rds:DeleteDBInstance"
            ],
            "Resource": [
              "arn:aws:rds:*:*:secgrp:awseb-e-*",
              "arn:aws:rds:*:*:db:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkRoleECS",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowECS",
            "Effect": "Allow",
            "Action": [
              "ecs:CreateCluster",
              "ecs:DeleteCluster",
              "ecs:RegisterTaskDefinition",
              "ecs:DeRegisterTaskDefinition"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowECSTagResource",
            "Effect": "Allow",
            "Action": [
              "ecs:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:CreateAction": [
                  "CreateCluster",
                  "RegisterTaskDefinition"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkRoleCore",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "TerminateInstances",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/awseb-e-*"
              }
            }
          },
          {
            "Sid": "EC2",
            "Effect": "Allow",
            "Action": [
              "ec2:ReleaseAddress",
              "ec2:AllocateAddress",
              "ec2:DisassociateAddress",
              "ec2:AssociateAddress",
              "ec2:CreateTags",
              "ec2:DeleteTags",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteSecurityGroup",
              "ec2:AuthorizeSecurityGroup*",
              "ec2:RevokeSecurityGroup*",
              "ec2:CreateLaunchTemplate*",
              "ec2:DeleteLaunchTemplate*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LTRunInstances",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
              }
            }
          },
          {
            "Sid": "ASG",
            "Effect": "Allow",
            "Action": [
              "autoscaling:AttachInstances",
              "autoscaling:*LoadBalancer*",
              "autoscaling:*AutoScalingGroup",
              "autoscaling:*LaunchConfiguration",
              "autoscaling:DeleteScheduledAction",
              "autoscaling:DetachInstances",
              "autoscaling:PutNotificationConfiguration",
              "autoscaling:PutScalingPolicy",
              "autoscaling:PutScheduledUpdateGroupAction",
              "autoscaling:ResumeProcesses",
              "autoscaling:SuspendProcesses",
              "autoscaling:*Tags"
            ],
            "Resource": [
              "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
              "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*"
            ]
          },
          {
            "Sid": "ASGPolicy",
            "Effect": "Allow",
            "Action": [
              "autoscaling:DeletePolicy"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EBSLR",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
            ],
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "elasticbeanstalk.amazonaws.com"
              }
            }
          },
          {
            "Sid": "S3Obj",
            "Effect": "Allow",
            "Action": [
              "s3:Delete*",
              "s3:Get*",
              "s3:Put*"
            ],
            "Resource": [
              "arn:aws:s3:::elasticbeanstalk-*/*",
              "arn:aws:s3:::elasticbeanstalk-env-resources-*/*"
            ]
          },
          {
            "Sid": "S3Bucket",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucket*",
              "s3:ListBucket",
              "s3:PutBucketPolicy"
            ],
            "Resource": "arn:aws:s3:::elasticbeanstalk-*"
          },
          {
            "Sid": "CFN",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:GetTemplate",
              "cloudformation:ListStackResources",
              "cloudformation:UpdateStack",
              "cloudformation:ContinueUpdateRollback",
              "cloudformation:CancelUpdateStack",
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/awseb-e-*"
          },
          {
            "Sid": "CloudWatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:awseb-*"
          },
          {
            "Sid": "ELB",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:Create*",
              "elasticloadbalancing:Delete*",
              "elasticloadbalancing:Modify*",
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:DeRegisterTargets",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:*Tags",
              "elasticloadbalancing:ConfigureHealthCheck",
              "elasticloadbalancing:SetRulePriorities",
              "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/awseb-*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/awseb-*/*",
              "arn:aws:elasticloadbalancing:*:*:listener/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:listener/app/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:listener/net/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:listener-rule/app/awseb-*/*/*/*"
            ]
          },
          {
            "Sid": "ListAPIs",
            "Effect": "Allow",
            "Action": [
              "autoscaling:Describe*",
              "cloudformation:Describe*",
              "logs:Describe*",
              "ec2:Describe*",
              "ecs:Describe*",
              "ecs:List*",
              "elasticloadbalancing:Describe*",
              "rds:Describe*",
              "sns:List*",
              "iam:List*",
              "acm:Describe*",
              "acm:List*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowPassRole",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/aws-elasticbeanstalk-*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "elasticbeanstalk.amazonaws.com",
                  "ec2.amazonaws.com",
                  "autoscaling.amazonaws.com",
                  "elasticloadbalancing.amazonaws.com",
                  "ecs.amazonaws.com",
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkRoleCWL",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowCWL",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:DeleteLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeArtifactAdminAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "codeartifact:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "sts:GetServiceBearerToken",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "sts:AWSServiceName": "codeartifact.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupOrganizationAdminAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DisableAWSServiceAccess",
              "organizations:EnableAWSServiceAccess",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator"
            ],
            "Resource": "arn:aws:organizations::*:account/*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "backup.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:AttachPolicy",
              "organizations:ListPoliciesForTarget",
              "organizations:ListTargetsForPolicy",
              "organizations:DetachPolicy",
              "organizations:DisablePolicyType",
              "organizations:DescribePolicy",
              "organizations:DescribeEffectivePolicy",
              "organizations:ListPolicies",
              "organizations:EnablePolicyType",
              "organizations:CreatePolicy",
              "organizations:UpdatePolicy",
              "organizations:DeletePolicy"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "organizations:PolicyType": [
                  "BACKUP_POLICY"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListRoots",
              "organizations:ListParents",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListAccountsForParent",
              "organizations:ListAccounts",
              "organizations:DescribeOrganization",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListChildren",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganizationalUnit"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMachineLearningRoleforRedshiftDataSourceV3",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateSecurityGroup",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeSecurityGroups",
              "ec2:RevokeSecurityGroupIngress",
              "redshift:AuthorizeClusterSecurityGroupIngress",
              "redshift:CreateClusterSecurityGroup",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSecurityGroups",
              "redshift:ModifyCluster",
              "redshift:RevokeClusterSecurityGroupIngress"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutBucketPolicy",
              "s3:GetBucketLocation",
              "s3:GetBucketPolicy",
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::amazon-machine-learning*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHoneycodeTeamAssociationReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "honeycode:ListTeamAssociations"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHoneycodeWorkbookReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "honeycode:GetScreenData",
              "honeycode:DescribeTableDataImportJob",
              "honeycode:ListTableColumns",
              "honeycode:ListTableRows",
              "honeycode:ListTables",
              "honeycode:QueryTableRows"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHoneycodeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "honeycode:*"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHoneycodeReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "honeycode:List*",
              "honeycode:Get*",
              "honeycode:Describe*",
              "honeycode:Query*"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHoneycodeTeamAssociationFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "honeycode:ListTeamAssociations",
              "honeycode:ApproveTeamAssociation",
              "honeycode:RejectTeamAssociation"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHoneycodeWorkbookFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "honeycode:GetScreenData",
              "honeycode:InvokeScreenAutomation",
              "honeycode:BatchCreateTableRows",
              "honeycode:BatchDeleteTableRows",
              "honeycode:BatchUpdateTableRows",
              "honeycode:BatchUpsertTableRows",
              "honeycode:DescribeTableDataImportJob",
              "honeycode:ListTableColumns",
              "honeycode:ListTableRows",
              "honeycode:ListTables",
              "honeycode:QueryTableRows",
              "honeycode:StartTableDataImportJob"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "CertificateManagerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:IssueCertificate",
              "acm-pca:GetCertificate"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeArtifactReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "codeartifact:Describe*",
              "codeartifact:Get*",
              "codeartifact:List*",
              "codeartifact:ReadFromRepository"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "sts:GetServiceBearerToken",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "sts:AWSServiceName": "codeartifact.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForCodeGuru-Profiler",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowSNSPublishToSendNotifications",
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCognitoIdpServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-idp:Describe*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElementalMediaLiveReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSElementalMediaLiveReadOnly",
            "Effect": "Allow",
            "Action": [
              "medialive:Get*",
              "medialive:List*",
              "medialive:Describe*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElementalMediaLiveFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": "medialive:*",
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AmazonSageMakerGroundTruthExecution",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CustomLabelingJobs",
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*GtRecipe*",
              "arn:aws:lambda:*:*:function:*LabelingFunction*",
              "arn:aws:lambda:*:*:function:*SageMaker*",
              "arn:aws:lambda:*:*:function:*sagemaker*",
              "arn:aws:lambda:*:*:function:*Sagemaker*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::*GroundTruth*",
              "arn:aws:s3:::*Groundtruth*",
              "arn:aws:s3:::*groundtruth*",
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/SageMaker": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListBucket"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          },
          {
            "Sid": "StreamingQueue",
            "Effect": "Allow",
            "Action": [
              "sqs:CreateQueue",
              "sqs:DeleteMessage",
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "sqs:ReceiveMessage",
              "sqs:SendMessage",
              "sqs:SetQueueAttributes"
            ],
            "Resource": "arn:aws:sqs:*:*:*GroundTruth*"
          },
          {
            "Sid": "StreamingTopicSubscribe",
            "Effect": "Allow",
            "Action": "sns:Subscribe",
            "Resource": [
              "arn:aws:sns:*:*:*GroundTruth*",
              "arn:aws:sns:*:*:*Groundtruth*",
              "arn:aws:sns:*:*:*groundTruth*",
              "arn:aws:sns:*:*:*groundtruth*",
              "arn:aws:sns:*:*:*SageMaker*",
              "arn:aws:sns:*:*:*Sagemaker*",
              "arn:aws:sns:*:*:*sageMaker*",
              "arn:aws:sns:*:*:*sagemaker*"
            ],
            "Condition": {
              "StringEquals": {
                "sns:Protocol": "sqs"
              },
              "StringLike": {
                "sns:Endpoint": "arn:aws:sqs:*:*:*GroundTruth*"
              }
            }
          },
          {
            "Sid": "StreamingTopic",
            "Effect": "Allow",
            "Action": [
              "sns:Publish"
            ],
            "Resource": [
              "arn:aws:sns:*:*:*GroundTruth*",
              "arn:aws:sns:*:*:*Groundtruth*",
              "arn:aws:sns:*:*:*groundTruth*",
              "arn:aws:sns:*:*:*groundtruth*",
              "arn:aws:sns:*:*:*SageMaker*",
              "arn:aws:sns:*:*:*Sagemaker*",
              "arn:aws:sns:*:*:*sageMaker*",
              "arn:aws:sns:*:*:*sagemaker*"
            ]
          },
          {
            "Sid": "StreamingTopicUnsubscribe",
            "Effect": "Allow",
            "Action": [
              "sns:Unsubscribe"
            ],
            "Resource": "*"
          },
          {
            "Sid": "WorkforceVPC",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeVpcEndpoints",
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "ec2:VpceServiceName": [
                  "*sagemaker-task-resources*",
                  "aws.sagemaker*labeling*"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ServerMigrationServiceRoleForInstanceValidation",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::sms-app-*/*"
          },
          {
            "Effect": "Allow",
            "Action": "sms:NotifyAppValidationOutput",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodePipeline_ReadOnlyAccess",
      "PolicyDocument": {
        "Statement": [
          {
            "Action": [
              "codepipeline:GetPipeline",
              "codepipeline:GetPipelineState",
              "codepipeline:GetPipelineExecution",
              "codepipeline:ListPipelineExecutions",
              "codepipeline:ListActionExecutions",
              "codepipeline:ListActionTypes",
              "codepipeline:ListPipelines",
              "codepipeline:ListTagsForResource",
              "s3:ListAllMyBuckets",
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListEventTypes",
              "codestar-notifications:ListTargets"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Action": [
              "s3:GetObject",
              "s3:ListBucket",
              "s3:GetBucketPolicy"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:s3::*:codepipeline-*"
          },
          {
            "Sid": "CodeStarNotificationsReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:DescribeNotificationRule"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codepipeline:*"
              }
            }
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AWSCodePipeline_FullAccess",
      "PolicyDocument": {
        "Statement": [
          {
            "Action": [
              "codepipeline:*",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks",
              "cloudformation:ListChangeSets",
              "cloudtrail:DescribeTrails",
              "codebuild:BatchGetProjects",
              "codebuild:CreateProject",
              "codebuild:ListCuratedEnvironmentImages",
              "codebuild:ListProjects",
              "codecommit:ListBranches",
              "codecommit:GetReferences",
              "codecommit:ListRepositories",
              "codedeploy:BatchGetDeploymentGroups",
              "codedeploy:ListApplications",
              "codedeploy:ListDeploymentGroups",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ecr:DescribeRepositories",
              "ecr:ListImages",
              "ecs:ListClusters",
              "ecs:ListServices",
              "elasticbeanstalk:DescribeApplications",
              "elasticbeanstalk:DescribeEnvironments",
              "iam:ListRoles",
              "iam:GetRole",
              "lambda:ListFunctions",
              "events:ListRules",
              "events:ListTargetsByRule",
              "events:DescribeRule",
              "opsworks:DescribeApps",
              "opsworks:DescribeLayers",
              "opsworks:DescribeStacks",
              "s3:ListAllMyBuckets",
              "sns:ListTopics",
              "codestar-notifications:ListNotificationRules",
              "codestar-notifications:ListTargets",
              "codestar-notifications:ListTagsforResource",
              "codestar-notifications:ListEventTypes",
              "states:ListStateMachines"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Sid": "CodePipelineAuthoringAccess"
          },
          {
            "Action": [
              "s3:GetObject",
              "s3:ListBucket",
              "s3:GetBucketPolicy",
              "s3:GetBucketVersioning",
              "s3:GetObjectVersion",
              "s3:CreateBucket",
              "s3:PutBucketPolicy"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:s3::*:codepipeline-*",
            "Sid": "CodePipelineArtifactsReadWriteAccess"
          },
          {
            "Action": [
              "cloudtrail:PutEventSelectors",
              "cloudtrail:CreateTrail",
              "cloudtrail:GetEventSelectors",
              "cloudtrail:StartLogging"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:cloudtrail:*:*:trail/codepipeline-source-trail",
            "Sid": "CodePipelineSourceTrailReadWriteAccess"
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/service-role/cwe-role-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "events.amazonaws.com"
                ]
              }
            },
            "Sid": "EventsIAMPassRole"
          },
          {
            "Action": [
              "iam:PassRole"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "codepipeline.amazonaws.com"
                ]
              }
            },
            "Sid": "CodePipelineIAMPassRole"
          },
          {
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:DeleteRule",
              "events:DisableRule",
              "events:RemoveTargets"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:events:*:*:rule/codepipeline-*"
            ],
            "Sid": "CodePipelineEventsReadWriteAccess"
          },
          {
            "Sid": "CodeStarNotificationsReadWriteAccess",
            "Effect": "Allow",
            "Action": [
              "codestar-notifications:CreateNotificationRule",
              "codestar-notifications:DescribeNotificationRule",
              "codestar-notifications:UpdateNotificationRule",
              "codestar-notifications:DeleteNotificationRule",
              "codestar-notifications:Subscribe",
              "codestar-notifications:Unsubscribe"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "codestar-notifications:NotificationsForResource": "arn:aws:codepipeline:*"
              }
            }
          },
          {
            "Sid": "CodeStarNotificationsSNSTopicCreateAccess",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:SetTopicAttributes"
            ],
            "Resource": "arn:aws:sns:*:*:codestar-notifications*"
          },
          {
            "Sid": "CodeStarNotificationsChatbotAccess",
            "Effect": "Allow",
            "Action": [
              "chatbot:DescribeSlackChannelConfigurations",
              "chatbot:ListMicrosoftTeamsChannelConfigurations"
            ],
            "Resource": "*"
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AmazonBraketServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetObject",
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::amazon-braket-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/braket:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLakeFormationCrossAccountManager",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowCreateResourceShare",
            "Effect": "Allow",
            "Action": [
              "ram:CreateResourceShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "ram:RequestedResourceType": [
                  "glue:Table",
                  "glue:Database",
                  "glue:Catalog"
                ]
              }
            }
          },
          {
            "Sid": "AllowManageResourceShare",
            "Effect": "Allow",
            "Action": [
              "ram:UpdateResourceShare",
              "ram:DeleteResourceShare",
              "ram:AssociateResourceShare",
              "ram:DisassociateResourceShare",
              "ram:GetResourceShares"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ram:ResourceShareName": [
                  "LakeFormation*"
                ]
              }
            }
          },
          {
            "Sid": "AllowManageResourceSharePermissions",
            "Effect": "Allow",
            "Action": [
              "ram:AssociateResourceSharePermission"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ram:PermissionArn": [
                  "arn:aws:ram::aws:permission/AWSRAMLFEnabled*"
                ]
              }
            }
          },
          {
            "Sid": "AllowXAcctManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "glue:PutResourcePolicy",
              "glue:DeleteResourcePolicy",
              "organizations:DescribeOrganization",
              "organizations:DescribeAccount",
              "ram:Get*",
              "ram:List*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowOrganizationsPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:ListRoots",
              "organizations:ListAccountsForParent",
              "organizations:ListOrganizationalUnitsForParent"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonBraketFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListBucket",
              "s3:CreateBucket",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketPolicy"
            ],
            "Resource": "arn:aws:s3:::amazon-braket-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "servicequotas:GetServiceQuota",
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetDownloadUrlForLayer",
              "ecr:BatchGetImage",
              "ecr:BatchCheckLayerAvailability"
            ],
            "Resource": "arn:aws:ecr:*:*:repository/amazon-braket*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:Describe*",
              "logs:Get*",
              "logs:List*",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:TestMetricFilter",
              "logs:FilterLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/braket*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "iam:ListRolePolicies",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:ListNotebookInstances"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreatePresignedNotebookInstanceUrl",
              "sagemaker:CreateNotebookInstance",
              "sagemaker:DeleteNotebookInstance",
              "sagemaker:DescribeNotebookInstance",
              "sagemaker:StartNotebookInstance",
              "sagemaker:StopNotebookInstance",
              "sagemaker:UpdateNotebookInstance",
              "sagemaker:ListTags",
              "sagemaker:AddTags",
              "sagemaker:DeleteTags"
            ],
            "Resource": "arn:aws:sagemaker:*:*:notebook-instance/amazon-braket-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeNotebookInstanceLifecycleConfig",
              "sagemaker:CreateNotebookInstanceLifecycleConfig",
              "sagemaker:DeleteNotebookInstanceLifecycleConfig",
              "sagemaker:ListNotebookInstanceLifecycleConfigs",
              "sagemaker:UpdateNotebookInstanceLifecycleConfig"
            ],
            "Resource": "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/amazon-braket-*"
          },
          {
            "Effect": "Allow",
            "Action": "braket:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/braket.amazonaws.com/AWSServiceRoleForAmazonBraket*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "braket.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/AmazonBraketServiceSageMakerNotebookRole*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "sagemaker.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/AmazonBraketJobsExecutionRole*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "braket.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:GetQueryResults"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/braket*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "/aws/braket"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambdaMSKExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kafka:DescribeCluster",
              "kafka:DescribeClusterV2",
              "kafka:GetBootstrapBrokers",
              "ec2:CreateNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcs",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCompromisedKeyQuarantine",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Deny",
            "Action": [
              "iam:AttachGroupPolicy",
              "iam:AttachRolePolicy",
              "iam:AttachUserPolicy",
              "iam:ChangePassword",
              "iam:CreateAccessKey",
              "iam:CreateInstanceProfile",
              "iam:CreateLoginProfile",
              "iam:CreateRole",
              "iam:CreateUser",
              "iam:DetachUserPolicy",
              "iam:PutUserPermissionsBoundary",
              "iam:PutUserPolicy",
              "iam:UpdateAccessKey",
              "iam:UpdateAccountPasswordPolicy",
              "iam:UpdateUser",
              "ec2:RequestSpotInstances",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "organizations:CreateAccount",
              "organizations:CreateOrganization",
              "organizations:InviteAccountToOrganization",
              "lambda:CreateFunction",
              "lightsail:Create*",
              "lightsail:Start*",
              "lightsail:Delete*",
              "lightsail:Update*",
              "lightsail:GetInstanceAccessDetails",
              "lightsail:DownloadDefaultKeyPair"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ServerMigration_ServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateChangeSet",
              "cloudformation:CreateStack"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*",
            "Condition": {
              "Null": {
                "cloudformation:ResourceTypes": "false"
              },
              "ForAllValues:StringEquals": {
                "cloudformation:ResourceTypes": [
                  "AWS::EC2::Instance",
                  "AWS::ApplicationInsights::Application",
                  "AWS::ResourceGroups::Group"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DeleteStack",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStackResources",
              "cloudformation:GetTemplate"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:ValidateTemplate",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteObject",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:PutLifecycleConfiguration"
            ],
            "Resource": "arn:aws:s3:::sms-app-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sms:CreateReplicationJob",
              "sms:DeleteReplicationJob",
              "sms:GetReplicationJobs",
              "sms:GetReplicationRuns",
              "sms:GetServers",
              "sms:ImportServerCatalog",
              "sms:StartOnDemandReplicationRun",
              "sms:UpdateReplicationJob"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ssm:*::document/AWS-RunRemoteScript",
              "arn:aws:s3:::sms-app-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "ssm:resourceTag/UseForSMSApplicationValidation": [
                  "true"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:CancelCommand",
              "ssm:GetCommandInvocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CopySnapshot"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CopySnapshot",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/SMSJobId": [
                  "sms-*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifySnapshotAttribute",
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/SMSJobId": [
                  "sms-*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CopyImage",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSnapshotAttribute",
              "ec2:DeregisterImage",
              "ec2:ImportImage",
              "ec2:DescribeImportImageTasks",
              "ec2:GetEbsEncryptionByDefault"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:GetInstanceProfile"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateIamInstanceProfile",
              "ec2:AssociateIamInstanceProfile",
              "ec2:ReplaceIamInstanceProfileAssociation"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": "cloudformation.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceArn": "arn:aws:cloudformation:*:*:stack/sms-app-*/*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSVPCResourceController",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterfacePermission",
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "ec2:ResourceTag/eks:eni:owner": "eks-vpc-resource-controller"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DetachNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface",
              "ec2:AttachNetworkInterface",
              "ec2:UnassignPrivateIpAddresses",
              "ec2:AssignPrivateIpAddresses"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "Route53ResolverServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "logs:CreateLogDelivery",
              "logs:GetLogDelivery",
              "logs:UpdateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:ListLogDeliveries",
              "logs:DescribeResourcePolicies",
              "logs:DescribeLogGroups",
              "s3:GetBucketPolicy"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ClientVPNServiceConnectionsRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:*:*:function:AWSClientVPN-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCodeDeployRoleForLambdaLimited",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudwatch:DescribeAlarms",
              "lambda:UpdateAlias",
              "lambda:GetAlias",
              "lambda:GetProvisionedConcurrencyConfig"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "arn:aws:s3:::*/CodeDeploy/*",
            "Effect": "Allow"
          },
          {
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
              }
            },
            "Effect": "Allow"
          },
          {
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:*:*:function:CodeDeployHook_*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEC2RoleforAWSCodeDeployLimited",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::*/CodeDeploy/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "s3:ExistingObjectTag/UseWithCodeDeploy": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingKafkaClusterPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kafka:DescribeCluster",
              "kafka:DescribeClusterOperation",
              "kafka:UpdateBrokerStorage",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSTransferReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "transfer:DescribeUser",
              "transfer:DescribeServer",
              "transfer:ListUsers",
              "transfer:ListServers",
              "transfer:TestIdentityProvider",
              "transfer:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBillingReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
              "account:GetAccountInformation",
              "aws-portal:ViewBilling",
              "billing:GetBillingData",
              "billing:GetBillingDetails",
              "billing:GetBillingNotifications",
              "billing:GetBillingPreferences",
              "billing:GetCredits",
              "billing:GetContractInformation",
              "billing:GetIAMAccessPreference",
              "billing:GetSellerOfRecord",
              "billing:ListBillingViews",
              "budgets:ViewBudget",
              "budgets:DescribeBudgetActionsForBudget",
              "budgets:DescribeBudgetAction",
              "budgets:DescribeBudgetActionsForAccount",
              "budgets:DescribeBudgetActionHistories",
              "ce:DescribeCostCategoryDefinition",
              "ce:GetCostAndUsage",
              "ce:ListCostCategoryDefinitions",
              "ce:ListTagsForResource",
              "ce:ListCostAllocationTags",
              "ce:ListCostAllocationTagBackfillHistory",
              "ce:GetTags",
              "ce:GetDimensionValues",
              "consolidatedbilling:ListLinkedAccounts",
              "consolidatedbilling:GetAccountBillingRole",
              "cur:GetClassicReport",
              "cur:GetClassicReportPreferences",
              "cur:GetUsageReport",
              "cur:DescribeReportDefinitions",
              "freetier:GetFreeTierAlertPreference",
              "freetier:GetFreeTierUsage",
              "invoicing:GetInvoiceEmailDeliveryPreferences",
              "invoicing:GetInvoicePDF",
              "invoicing:ListInvoiceSummaries",
              "payments:GetPaymentInstrument",
              "payments:GetPaymentStatus",
              "payments:ListPaymentPreferences",
              "payments:ListTagsForResource",
              "payments:ListPaymentInstruments",
              "purchase-orders:GetPurchaseOrder",
              "purchase-orders:ViewPurchaseOrders",
              "purchase-orders:ListPurchaseOrderInvoices",
              "purchase-orders:ListPurchaseOrders",
              "purchase-orders:ListTagsForResource",
              "sustainability:GetCarbonFootprintSummary",
              "tax:GetTaxRegistrationDocument",
              "tax:GetTaxInheritance",
              "tax:ListTaxRegistrations"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ElementalActivationsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elemental-activations:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ElementalActivationsGenerateLicenses",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elemental-activations:Get*",
              "elemental-activations:GenerateLicenses",
              "elemental-activations:StartFileUpload",
              "elemental-activations:CompleteFileUpload"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ElementalActivationsDownloadSoftwareAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elemental-activations:Get*",
              "elemental-activations:Download*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightElasticsearchPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "es:ESHttpGet"
            ],
            "Resource": [
              "arn:aws:es:*:*:domain/*/",
              "arn:aws:es:*:*:domain/*/_cluster/settings",
              "arn:aws:es:*:*:domain/*/_cat/indices"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "es:ListDomainNames",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "es:DescribeElasticsearchDomain",
              "es:DescribeDomain"
            ],
            "Resource": [
              "arn:aws:es:*:*:domain/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "es:ESHttpPost",
              "es:ESHttpGet"
            ],
            "Resource": [
              "arn:aws:es:*:*:domain/*/_opendistro/_sql",
              "arn:aws:es:*:*:domain/*/_plugin/_sql"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftDataFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DataAPIPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift-data:BatchExecuteStatement",
              "redshift-data:ExecuteStatement",
              "redshift-data:CancelStatement",
              "redshift-data:ListStatements",
              "redshift-data:GetStatementResult",
              "redshift-data:DescribeStatement",
              "redshift-data:ListDatabases",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables",
              "redshift-data:DescribeTable"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:*",
            "Condition": {
              "StringLike": {
                "secretsmanager:ResourceTag/RedshiftDataFullAccess": "*"
              }
            }
          },
          {
            "Sid": "GetCredentialsForAPIUser",
            "Effect": "Allow",
            "Action": "redshift:GetClusterCredentials",
            "Resource": [
              "arn:aws:redshift:*:*:dbname:*/*",
              "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
            ]
          },
          {
            "Sid": "GetCredentialsWithFederatedIAMCredentials",
            "Effect": "Allow",
            "Action": "redshift:GetClusterCredentialsWithIAM",
            "Resource": "arn:aws:redshift:*:*:dbname:*/*"
          },
          {
            "Sid": "GetCredentialsForServerless",
            "Effect": "Allow",
            "Action": "redshift-serverless:GetCredentials",
            "Resource": "arn:aws:redshift-serverless:*:*:workgroup/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/RedshiftDataFullAccess": "*"
              }
            }
          },
          {
            "Sid": "DenyCreateAPIUser",
            "Effect": "Deny",
            "Action": "redshift:CreateClusterUser",
            "Resource": [
              "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
            ]
          },
          {
            "Sid": "ServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/redshift-data.amazonaws.com/AWSServiceRoleForRedshift",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "redshift-data.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSRoboMaker_FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "robomaker:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": "robomaker.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ecr:BatchGetImage",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": "robomaker.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ecr-public:DescribeImages",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": "robomaker.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "robomaker.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWS_ConfigRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSConfigRoleStatementID",
            "Effect": "Allow",
            "Action": [
              "access-analyzer:GetAnalyzer",
              "access-analyzer:GetArchiveRule",
              "access-analyzer:ListAnalyzers",
              "access-analyzer:ListArchiveRules",
              "access-analyzer:ListTagsForResource",
              "account:GetAlternateContact",
              "acm-pca:DescribeCertificateAuthority",
              "acm-pca:GetCertificateAuthorityCertificate",
              "acm-pca:GetCertificateAuthorityCsr",
              "acm-pca:ListCertificateAuthorities",
              "acm-pca:ListTags",
              "acm:DescribeCertificate",
              "acm:ListCertificates",
              "acm:ListTagsForCertificate",
              "airflow:GetEnvironment",
              "airflow:ListEnvironments",
              "airflow:ListTagsForResource",
              "amplify:GetApp",
              "amplify:GetBranch",
              "amplify:ListApps",
              "amplify:ListBranches",
              "amplifyuibuilder:ExportThemes",
              "amplifyuibuilder:GetTheme",
              "amplifyuibuilder:ListThemes",
              "apigateway:GET",
              "app-integrations:GetEventIntegration",
              "app-integrations:ListEventIntegrationAssociations",
              "app-integrations:ListEventIntegrations",
              "appconfig:GetApplication",
              "appconfig:GetConfigurationProfile",
              "appconfig:GetDeployment",
              "appconfig:GetDeploymentStrategy",
              "appconfig:GetEnvironment",
              "appconfig:GetExtensionAssociation",
              "appconfig:GetHostedConfigurationVersion",
              "appconfig:ListApplications",
              "appconfig:ListConfigurationProfiles",
              "appconfig:ListDeployments",
              "appconfig:ListDeploymentStrategies",
              "appconfig:ListEnvironments",
              "appconfig:ListExtensionAssociations",
              "appconfig:ListHostedConfigurationVersions",
              "appconfig:ListTagsForResource",
              "appflow:DescribeConnectorProfiles",
              "appflow:DescribeFlow",
              "appflow:ListFlows",
              "appflow:ListTagsForResource",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingPolicies",
              "appmesh:DescribeGatewayRoute",
              "appmesh:DescribeMesh",
              "appmesh:DescribeRoute",
              "appmesh:DescribeVirtualGateway",
              "appmesh:DescribeVirtualNode",
              "appmesh:DescribeVirtualRouter",
              "appmesh:DescribeVirtualService",
              "appmesh:ListGatewayRoutes",
              "appmesh:ListMeshes",
              "appmesh:ListRoutes",
              "appmesh:ListTagsForResource",
              "appmesh:ListVirtualGateways",
              "appmesh:ListVirtualNodes",
              "appmesh:ListVirtualRouters",
              "appmesh:ListVirtualServices",
              "apprunner:DescribeService",
              "apprunner:DescribeVpcConnector",
              "apprunner:ListServices",
              "apprunner:ListTagsForResource",
              "apprunner:ListVpcConnectors",
              "appstream:DescribeApplications",
              "appstream:DescribeDirectoryConfigs",
              "appstream:DescribeFleets",
              "appstream:DescribeStacks",
              "appstream:ListTagsForResource",
              "appsync:GetApiCache",
              "appsync:GetGraphqlApi",
              "appsync:ListGraphqlApis",
              "aps:DescribeAlertManagerDefinition",
              "aps:DescribeLoggingConfiguration",
              "APS:DescribeRuleGroupsNamespace",
              "APS:DescribeWorkspace",
              "aps:ListRuleGroupsNamespaces",
              "aps:ListTagsForResource",
              "APS:ListWorkspaces",
              "athena:GetDataCatalog",
              "athena:GetPreparedStatement",
              "athena:GetWorkGroup",
              "athena:ListDataCatalogs",
              "athena:ListPreparedStatements",
              "athena:ListTagsForResource",
              "athena:ListWorkGroups",
              "auditmanager:GetAccountStatus",
              "auditmanager:GetAssessment",
              "auditmanager:ListAssessments",
              "autoscaling-plans:DescribeScalingPlanResources",
              "autoscaling-plans:DescribeScalingPlans",
              "autoscaling-plans:GetScalingPlanResourceForecastData",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribeLifecycleHooks",
              "autoscaling:DescribePolicies",
              "autoscaling:DescribeScheduledActions",
              "autoscaling:DescribeTags",
              "autoscaling:DescribeWarmPool",
              "backup-gateway:ListTagsForResource",
              "backup-gateway:ListVirtualMachines",
              "backup:DescribeBackupVault",
              "backup:DescribeFramework",
              "backup:DescribeProtectedResource",
              "backup:DescribeRecoveryPoint",
              "backup:DescribeReportPlan",
              "backup:GetBackupPlan",
              "backup:GetBackupSelection",
              "backup:GetBackupVaultAccessPolicy",
              "backup:GetBackupVaultNotifications",
              "backup:ListBackupPlans",
              "backup:ListBackupSelections",
              "backup:ListBackupVaults",
              "backup:ListFrameworks",
              "backup:ListRecoveryPointsByBackupVault",
              "backup:ListReportPlans",
              "backup:ListTags",
              "batch:DescribeComputeEnvironments",
              "batch:DescribeJobQueues",
              "batch:DescribeSchedulingPolicies",
              "batch:ListSchedulingPolicies",
              "batch:ListTagsForResource",
              "billingconductor:ListAccountAssociations",
              "billingconductor:ListBillingGroups",
              "billingconductor:ListCustomLineItems",
              "billingconductor:ListPricingPlans",
              "billingconductor:ListPricingRules",
              "billingconductor:ListPricingRulesAssociatedToPricingPlan",
              "billingconductor:ListTagsForResource",
              "budgets:DescribeBudgetAction",
              "budgets:DescribeBudgetActionsForAccount",
              "budgets:DescribeBudgetActionsForBudget",
              "budgets:ViewBudget",
              "cassandra:Select",
              "ce:GetAnomalyMonitors",
              "ce:GetAnomalySubscriptions",
              "cloud9:DescribeEnvironmentMemberships",
              "cloud9:DescribeEnvironments",
              "cloud9:ListEnvironments",
              "cloud9:ListTagsForResource",
              "cloudformation:DescribeType",
              "cloudformation:GetResource",
              "cloudformation:ListResources",
              "cloudformation:ListStackResources",
              "cloudformation:ListStacks",
              "cloudformation:ListTypes",
              "cloudfront:GetFunction",
              "cloudfront:GetOriginAccessControl",
              "cloudfront:GetResponseHeadersPolicy",
              "cloudfront:ListDistributions",
              "cloudfront:ListFunctions",
              "cloudfront:ListOriginAccessControls",
              "cloudfront:ListResponseHeadersPolicies",
              "cloudfront:ListTagsForResource",
              "cloudtrail:DescribeTrails",
              "cloudtrail:GetEventDataStore",
              "cloudtrail:GetEventSelectors",
              "cloudtrail:GetTrailStatus",
              "cloudtrail:ListEventDataStores",
              "cloudtrail:ListTags",
              "cloudtrail:ListTrails",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:DescribeAnomalyDetectors",
              "cloudwatch:GetDashboard",
              "cloudwatch:GetMetricStream",
              "cloudwatch:ListDashboards",
              "cloudwatch:ListMetricStreams",
              "cloudwatch:ListTagsForResource",
              "codeartifact:DescribeRepository",
              "codeartifact:GetRepositoryPermissionsPolicy",
              "codeartifact:ListDomains",
              "codeartifact:ListPackages",
              "codeartifact:ListPackageVersions",
              "codeartifact:ListRepositories",
              "codeartifact:ListTagsForResource",
              "codebuild:BatchGetReportGroups",
              "codebuild:ListReportGroups",
              "codecommit:GetRepository",
              "codecommit:GetRepositoryTriggers",
              "codecommit:ListRepositories",
              "codecommit:ListTagsForResource",
              "codedeploy:GetDeploymentConfig",
              "codeguru-profiler:DescribeProfilingGroup",
              "codeguru-profiler:GetNotificationConfiguration",
              "codeguru-profiler:GetPolicy",
              "codeguru-profiler:ListProfilingGroups",
              "codeguru-reviewer:DescribeRepositoryAssociation",
              "codeguru-reviewer:ListRepositoryAssociations",
              "codepipeline:GetPipeline",
              "codepipeline:GetPipelineState",
              "codepipeline:ListPipelines",
              "cognito-identity:DescribeIdentityPool",
              "cognito-identity:GetIdentityPoolRoles",
              "cognito-identity:GetPrincipalTagAttributeMap",
              "cognito-identity:ListIdentityPools",
              "cognito-identity:ListTagsForResource",
              "cognito-idp:DescribeIdentityProvider",
              "cognito-idp:DescribeResourceServer",
              "cognito-idp:DescribeUserPool",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:DescribeUserPoolDomain",
              "cognito-idp:GetGroup",
              "cognito-idp:GetUserPoolMfaConfig",
              "cognito-idp:ListGroups",
              "cognito-idp:ListIdentityProviders",
              "cognito-idp:ListResourceServers",
              "cognito-idp:ListTagsForResource",
              "cognito-idp:ListUserPoolClients",
              "cognito-idp:ListUserPools",
              "config:BatchGet*",
              "config:Describe*",
              "config:Get*",
              "config:List*",
              "config:Put*",
              "config:Select*",
              "connect:DescribeEvaluationForm",
              "connect:DescribeInstance",
              "connect:DescribeInstanceStorageConfig",
              "connect:DescribePhoneNumber",
              "connect:DescribePrompt",
              "connect:DescribeQuickConnect",
              "connect:DescribeRule",
              "connect:DescribeUser",
              "connect:GetTaskTemplate",
              "connect:ListApprovedOrigins",
              "connect:ListEvaluationForms",
              "connect:ListInstanceAttributes",
              "connect:ListInstances",
              "connect:ListInstanceStorageConfigs",
              "connect:ListIntegrationAssociations",
              "connect:ListPhoneNumbers",
              "connect:ListPhoneNumbersV2",
              "connect:ListPrompts",
              "connect:ListQuickConnects",
              "connect:ListRules",
              "connect:ListSecurityKeys",
              "connect:ListTagsForResource",
              "connect:ListTaskTemplates",
              "connect:ListUsers",
              "connect:SearchAvailablePhoneNumbers",
              "databrew:DescribeDataset",
              "databrew:DescribeJob",
              "databrew:DescribeProject",
              "databrew:DescribeRecipe",
              "databrew:DescribeRuleset",
              "databrew:DescribeSchedule",
              "databrew:ListDatasets",
              "databrew:ListJobs",
              "databrew:ListProjects",
              "databrew:ListRecipes",
              "databrew:ListRecipeVersions",
              "databrew:ListRulesets",
              "databrew:ListSchedules",
              "datasync:DescribeAgent",
              "datasync:DescribeLocationEfs",
              "datasync:DescribeLocationFsxLustre",
              "datasync:DescribeLocationFsxWindows",
              "datasync:DescribeLocationHdfs",
              "datasync:DescribeLocationNfs",
              "datasync:DescribeLocationObjectStorage",
              "datasync:DescribeLocationS3",
              "datasync:DescribeLocationSmb",
              "datasync:DescribeTask",
              "datasync:ListAgents",
              "datasync:ListLocations",
              "datasync:ListTagsForResource",
              "datasync:ListTasks",
              "dax:DescribeClusters",
              "dax:DescribeParameterGroups",
              "dax:DescribeParameters",
              "dax:DescribeSubnetGroups",
              "dax:ListTags",
              "detective:ListGraphs",
              "detective:ListTagsForResource",
              "devicefarm:GetInstanceProfile",
              "devicefarm:GetNetworkProfile",
              "devicefarm:GetProject",
              "devicefarm:GetTestGridProject",
              "devicefarm:ListInstanceProfiles",
              "devicefarm:ListNetworkProfiles",
              "devicefarm:ListProjects",
              "devicefarm:ListTagsForResource",
              "devicefarm:ListTestGridProjects",
              "devops-guru:GetResourceCollection",
              "dms:DescribeCertificates",
              "dms:DescribeEndpoints",
              "dms:DescribeEventSubscriptions",
              "dms:DescribeReplicationInstances",
              "dms:DescribeReplicationSubnetGroups",
              "dms:DescribeReplicationTaskAssessmentRuns",
              "dms:DescribeReplicationTasks",
              "dms:ListTagsForResource",
              "ds:DescribeDirectories",
              "ds:DescribeDomainControllers",
              "ds:DescribeEventTopics",
              "ds:ListLogSubscriptions",
              "ds:ListTagsForResource",
              "dynamodb:DescribeContinuousBackups",
              "dynamodb:DescribeGlobalTable",
              "dynamodb:DescribeGlobalTableSettings",
              "dynamodb:DescribeLimits",
              "dynamodb:DescribeTable",
              "dynamodb:DescribeTableReplicaAutoScaling",
              "dynamodb:DescribeTimeToLive",
              "dynamodb:ListTables",
              "dynamodb:ListTagsOfResource",
              "ec2:Describe*",
              "ec2:DescribeClientVpnAuthorizationRules",
              "ec2:DescribeClientVpnEndpoints",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeFleets",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSpotFleetRequests",
              "ec2:DescribeTags",
              "ec2:DescribeTrafficMirrorFilters",
              "ec2:DescribeTrafficMirrorSessions",
              "ec2:DescribeTrafficMirrorTargets",
              "ec2:DescribeVolumeAttribute",
              "ec2:DescribeVolumes",
              "ec2:GetEbsEncryptionByDefault",
              "ec2:GetInstanceTypesFromInstanceRequirements",
              "ec2:GetIpamPoolAllocations",
              "ec2:GetIpamPoolCidrs",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
              "ec2:GetNetworkInsightsAccessScopeContent",
              "ecr-public:DescribeRepositories",
              "ecr-public:GetRepositoryCatalogData",
              "ecr-public:GetRepositoryPolicy",
              "ecr-public:ListTagsForResource",
              "ecr:BatchGetRepositoryScanningConfiguration",
              "ecr:DescribePullThroughCacheRules",
              "ecr:DescribeRegistry",
              "ecr:DescribeRepositories",
              "ecr:GetLifecyclePolicy",
              "ecr:GetRegistryPolicy",
              "ecr:GetRepositoryPolicy",
              "ecr:ListTagsForResource",
              "ecs:DescribeCapacityProviders",
              "ecs:DescribeClusters",
              "ecs:DescribeServices",
              "ecs:DescribeTaskDefinition",
              "ecs:DescribeTaskSets",
              "ecs:ListClusters",
              "ecs:ListServices",
              "ecs:ListTagsForResource",
              "ecs:ListTaskDefinitionFamilies",
              "ecs:ListTaskDefinitions",
              "eks:DescribeAddon",
              "eks:DescribeCluster",
              "eks:DescribeFargateProfile",
              "eks:DescribeIdentityProviderConfig",
              "eks:DescribeNodegroup",
              "eks:ListAddons",
              "eks:ListClusters",
              "eks:ListFargateProfiles",
              "eks:ListIdentityProviderConfigs",
              "eks:ListNodegroups",
              "eks:ListTagsForResource",
              "elasticache:DescribeCacheClusters",
              "elasticache:DescribeCacheParameterGroups",
              "elasticache:DescribeCacheParameters",
              "elasticache:DescribeCacheSecurityGroups",
              "elasticache:DescribeCacheSubnetGroups",
              "elasticache:DescribeGlobalReplicationGroups",
              "elasticache:DescribeReplicationGroups",
              "elasticache:DescribeSnapshots",
              "elasticache:DescribeUserGroups",
              "elasticache:DescribeUsers",
              "elasticache:ListTagsForResource",
              "elasticbeanstalk:DescribeConfigurationSettings",
              "elasticbeanstalk:DescribeEnvironments",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeBackupPolicy",
              "elasticfilesystem:DescribeFileSystemPolicy",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeLifecycleConfiguration",
              "elasticfilesystem:DescribeMountTargets",
              "elasticfilesystem:DescribeMountTargetSecurityGroups",
              "elasticfilesystem:DescribeTags",
              "elasticloadbalancing:DescribeListenerCertificates",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancerPolicies",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:DescribeSecurityConfiguration",
              "elasticmapreduce:DescribeStep",
              "elasticmapreduce:DescribeStudio",
              "elasticmapreduce:GetBlockPublicAccessConfiguration",
              "elasticmapreduce:GetManagedScalingPolicy",
              "elasticmapreduce:GetStudioSessionMapping",
              "elasticmapreduce:ListClusters",
              "elasticmapreduce:ListInstanceFleets",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ListInstances",
              "elasticmapreduce:ListSecurityConfigurations",
              "elasticmapreduce:ListSteps",
              "elasticmapreduce:ListStudios",
              "elasticmapreduce:ListStudioSessionMappings",
              "emr-containers:DescribeVirtualCluster",
              "emr-containers:ListVirtualClusters",
              "emr-serverless:GetApplication",
              "emr-serverless:ListApplications",
              "es:DescribeDomain",
              "es:DescribeDomains",
              "es:DescribeElasticsearchDomain",
              "es:DescribeElasticsearchDomains",
              "es:GetCompatibleElasticsearchVersions",
              "es:GetCompatibleVersions",
              "es:ListDomainNames",
              "es:ListTags",
              "events:DescribeApiDestination",
              "events:DescribeArchive",
              "events:DescribeConnection",
              "events:DescribeEndpoint",
              "events:DescribeEventBus",
              "events:DescribeRule",
              "events:ListApiDestinations",
              "events:ListArchives",
              "events:ListConnections",
              "events:ListEndpoints",
              "events:ListEventBuses",
              "events:ListRules",
              "events:ListTagsForResource",
              "events:ListTargetsByRule",
              "evidently:GetLaunch",
              "evidently:GetProject",
              "evidently:GetSegment",
              "evidently:ListLaunches",
              "evidently:ListProjects",
              "evidently:ListSegments",
              "evidently:ListTagsForResource",
              "finspace:GetEnvironment",
              "finspace:ListEnvironments",
              "firehose:DescribeDeliveryStream",
              "firehose:ListDeliveryStreams",
              "firehose:ListTagsForDeliveryStream",
              "fis:GetExperimentTemplate",
              "fis:ListExperimentTemplates",
              "fms:GetNotificationChannel",
              "fms:GetPolicy",
              "fms:ListPolicies",
              "fms:ListTagsForResource",
              "forecast:DescribeDataset",
              "forecast:DescribeDatasetGroup",
              "forecast:ListDatasetGroups",
              "forecast:ListDatasets",
              "forecast:ListTagsForResource",
              "frauddetector:GetDetectors",
              "frauddetector:GetDetectorVersion",
              "frauddetector:GetEntityTypes",
              "frauddetector:GetEventTypes",
              "frauddetector:GetExternalModels",
              "frauddetector:GetLabels",
              "frauddetector:GetModels",
              "frauddetector:GetOutcomes",
              "frauddetector:GetRules",
              "frauddetector:GetVariables",
              "frauddetector:ListTagsForResource",
              "fsx:DescribeBackups",
              "fsx:DescribeDataRepositoryAssociations",
              "fsx:DescribeFileSystems",
              "fsx:DescribeSnapshots",
              "fsx:DescribeStorageVirtualMachines",
              "fsx:DescribeVolumes",
              "fsx:ListTagsForResource",
              "gamelift:DescribeAlias",
              "gamelift:DescribeBuild",
              "gamelift:DescribeFleetAttributes",
              "gamelift:DescribeFleetCapacity",
              "gamelift:DescribeFleetLocationAttributes",
              "gamelift:DescribeFleetLocationCapacity",
              "gamelift:DescribeFleetPortSettings",
              "gamelift:DescribeGameServerGroup",
              "gamelift:DescribeGameSessionQueues",
              "gamelift:DescribeMatchmakingConfigurations",
              "gamelift:DescribeMatchmakingRuleSets",
              "gamelift:DescribeRuntimeConfiguration",
              "gamelift:DescribeScript",
              "gamelift:DescribeVpcPeeringAuthorizations",
              "gamelift:DescribeVpcPeeringConnections",
              "gamelift:ListAliases",
              "gamelift:ListBuilds",
              "gamelift:ListFleets",
              "gamelift:ListGameServerGroups",
              "gamelift:ListScripts",
              "gamelift:ListTagsForResource",
              "geo:DescribeGeofenceCollection",
              "geo:DescribeMap",
              "geo:DescribePlaceIndex",
              "geo:DescribeRouteCalculator",
              "geo:DescribeTracker",
              "geo:ListGeofenceCollections",
              "geo:ListMaps",
              "geo:ListPlaceIndexes",
              "geo:ListRouteCalculators",
              "geo:ListTrackerConsumers",
              "geo:ListTrackers",
              "globalaccelerator:DescribeAccelerator",
              "globalaccelerator:DescribeEndpointGroup",
              "globalaccelerator:DescribeListener",
              "globalaccelerator:ListAccelerators",
              "globalaccelerator:ListEndpointGroups",
              "globalaccelerator:ListListeners",
              "globalaccelerator:ListTagsForResource",
              "glue:BatchGetDevEndpoints",
              "glue:BatchGetJobs",
              "glue:BatchGetWorkflows",
              "glue:GetClassifier",
              "glue:GetClassifiers",
              "glue:GetCrawler",
              "glue:GetCrawlers",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetDevEndpoint",
              "glue:GetDevEndpoints",
              "glue:GetJob",
              "glue:GetJobs",
              "glue:GetMLTransform",
              "glue:GetMLTransforms",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetSecurityConfiguration",
              "glue:GetSecurityConfigurations",
              "glue:GetTable",
              "glue:GetTags",
              "glue:GetWorkflow",
              "glue:ListCrawlers",
              "glue:ListDevEndpoints",
              "glue:ListJobs",
              "glue:ListMLTransforms",
              "glue:ListWorkflows",
              "grafana:DescribeWorkspace",
              "grafana:DescribeWorkspaceAuthentication",
              "grafana:DescribeWorkspaceConfiguration",
              "grafana:ListWorkspaces",
              "greengrass:DescribeComponent",
              "greengrass:GetComponent",
              "greengrass:ListComponents",
              "greengrass:ListComponentVersions",
              "groundstation:GetConfig",
              "groundstation:GetDataflowEndpointGroup",
              "groundstation:GetMissionProfile",
              "groundstation:ListConfigs",
              "groundstation:ListDataflowEndpointGroups",
              "groundstation:ListMissionProfiles",
              "groundstation:ListTagsForResource",
              "guardduty:DescribePublishingDestination",
              "guardduty:GetAdministratorAccount",
              "guardduty:GetDetector",
              "guardduty:GetFilter",
              "guardduty:GetFindings",
              "guardduty:GetIPSet",
              "guardduty:GetMasterAccount",
              "guardduty:GetMemberDetectors",
              "guardduty:GetMembers",
              "guardduty:GetThreatIntelSet",
              "guardduty:ListDetectors",
              "guardduty:ListFilters",
              "guardduty:ListFindings",
              "guardduty:ListIPSets",
              "guardduty:ListMembers",
              "guardduty:ListOrganizationAdminAccounts",
              "guardduty:ListPublishingDestinations",
              "guardduty:ListTagsForResource",
              "guardduty:ListThreatIntelSets",
              "healthlake:DescribeFHIRDatastore",
              "healthlake:ListFHIRDatastores",
              "healthlake:ListTagsForResource",
              "iam:GenerateCredentialReport",
              "iam:GetAccountAuthorizationDetails",
              "iam:GetAccountPasswordPolicy",
              "iam:GetAccountSummary",
              "iam:GetCredentialReport",
              "iam:GetGroup",
              "iam:GetGroupPolicy",
              "iam:GetInstanceProfile",
              "iam:GetOpenIDConnectProvider",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:GetSAMLProvider",
              "iam:GetServerCertificate",
              "iam:GetUser",
              "iam:GetUserPolicy",
              "iam:ListAccessKeys",
              "iam:ListAttachedGroupPolicies",
              "iam:ListAttachedRolePolicies",
              "iam:ListAttachedUserPolicies",
              "iam:ListEntitiesForPolicy",
              "iam:ListGroupPolicies",
              "iam:ListGroups",
              "iam:ListGroupsForUser",
              "iam:ListInstanceProfiles",
              "iam:ListInstanceProfilesForRole",
              "iam:ListInstanceProfileTags",
              "iam:ListMFADevices",
              "iam:ListMFADeviceTags",
              "iam:ListOpenIDConnectProviders",
              "iam:ListPolicyVersions",
              "iam:ListRolePolicies",
              "iam:ListRoles",
              "iam:ListSAMLProviders",
              "iam:ListServerCertificates",
              "iam:ListUserPolicies",
              "iam:ListUsers",
              "iam:ListVirtualMFADevices",
              "imagebuilder:GetComponent",
              "imagebuilder:GetContainerRecipe",
              "imagebuilder:GetDistributionConfiguration",
              "imagebuilder:GetImage",
              "imagebuilder:GetImagePipeline",
              "imagebuilder:GetImageRecipe",
              "imagebuilder:GetInfrastructureConfiguration",
              "imagebuilder:ListComponentBuildVersions",
              "imagebuilder:ListComponents",
              "imagebuilder:ListContainerRecipes",
              "imagebuilder:ListDistributionConfigurations",
              "imagebuilder:ListImageBuildVersions",
              "imagebuilder:ListImagePipelines",
              "imagebuilder:ListImageRecipes",
              "imagebuilder:ListImages",
              "imagebuilder:ListInfrastructureConfigurations",
              "inspector2:BatchGetAccountStatus",
              "inspector2:GetDelegatedAdminAccount",
              "inspector2:ListFilters",
              "inspector2:ListMembers",
              "iot:DescribeAccountAuditConfiguration",
              "iot:DescribeAuthorizer",
              "iot:DescribeCACertificate",
              "iot:DescribeCertificate",
              "iot:DescribeCustomMetric",
              "iot:DescribeDimension",
              "iot:DescribeDomainConfiguration",
              "iot:DescribeFleetMetric",
              "iot:DescribeJobTemplate",
              "iot:DescribeMitigationAction",
              "iot:DescribeProvisioningTemplate",
              "iot:DescribeRoleAlias",
              "iot:DescribeScheduledAudit",
              "iot:DescribeSecurityProfile",
              "iot:GetPolicy",
              "iot:GetTopicRule",
              "iot:GetTopicRuleDestination",
              "iot:ListAuthorizers",
              "iot:ListCACertificates",
              "iot:ListCertificates",
              "iot:ListCustomMetrics",
              "iot:ListDimensions",
              "iot:ListDomainConfigurations",
              "iot:ListFleetMetrics",
              "iot:ListJobTemplates",
              "iot:ListMitigationActions",
              "iot:ListPolicies",
              "iot:ListProvisioningTemplates",
              "iot:ListRoleAliases",
              "iot:ListScheduledAudits",
              "iot:ListSecurityProfiles",
              "iot:ListSecurityProfilesForTarget",
              "iot:ListTagsForResource",
              "iot:ListTargetsForSecurityProfile",
              "iot:ListTopicRuleDestinations",
              "iot:ListTopicRules",
              "iot:ListV2LoggingLevels",
              "iot:ValidateSecurityProfileBehaviors",
              "iotanalytics:DescribeChannel",
              "iotanalytics:DescribeDataset",
              "iotanalytics:DescribeDatastore",
              "iotanalytics:DescribePipeline",
              "iotanalytics:ListChannels",
              "iotanalytics:ListDatasets",
              "iotanalytics:ListDatastores",
              "iotanalytics:ListPipelines",
              "iotanalytics:ListTagsForResource",
              "iotevents:DescribeAlarmModel",
              "iotevents:DescribeDetectorModel",
              "iotevents:DescribeInput",
              "iotevents:ListAlarmModels",
              "iotevents:ListDetectorModels",
              "iotevents:ListInputs",
              "iotevents:ListTagsForResource",
              "iotsitewise:DescribeAccessPolicy",
              "iotsitewise:DescribeAsset",
              "iotsitewise:DescribeAssetModel",
              "iotsitewise:DescribeDashboard",
              "iotsitewise:DescribeGateway",
              "iotsitewise:DescribePortal",
              "iotsitewise:DescribeProject",
              "iotsitewise:ListAccessPolicies",
              "iotsitewise:ListAssetModels",
              "iotsitewise:ListAssets",
              "iotsitewise:ListDashboards",
              "iotsitewise:ListGateways",
              "iotsitewise:ListPortals",
              "iotsitewise:ListProjectAssets",
              "iotsitewise:ListProjects",
              "iotsitewise:ListTagsForResource",
              "iottwinmaker:GetComponentType",
              "iottwinmaker:GetEntity",
              "iottwinmaker:GetScene",
              "iottwinmaker:GetSyncJob",
              "iottwinmaker:GetWorkspace",
              "iottwinmaker:ListComponentTypes",
              "iottwinmaker:ListEntities",
              "iottwinmaker:ListScenes",
              "iottwinmaker:ListSyncJobs",
              "iottwinmaker:ListTagsForResource",
              "iottwinmaker:ListWorkspaces",
              "iotwireless:GetFuotaTask",
              "iotwireless:GetMulticastGroup",
              "iotwireless:GetServiceProfile",
              "iotwireless:GetWirelessDevice",
              "iotwireless:GetWirelessGatewayTaskDefinition",
              "iotwireless:ListFuotaTasks",
              "iotwireless:ListMulticastGroups",
              "iotwireless:ListServiceProfiles",
              "iotwireless:ListTagsForResource",
              "iotwireless:ListWirelessDevices",
              "iotwireless:ListWirelessGatewayTaskDefinitions",
              "ivs:GetChannel",
              "ivs:GetPlaybackKeyPair",
              "ivs:GetRecordingConfiguration",
              "ivs:GetStreamKey",
              "ivs:ListChannels",
              "ivs:ListPlaybackKeyPairs",
              "ivs:ListRecordingConfigurations",
              "ivs:ListStreamKeys",
              "ivs:ListTagsForResource",
              "kafka:DescribeCluster",
              "kafka:DescribeClusterV2",
              "kafka:DescribeConfiguration",
              "kafka:DescribeConfigurationRevision",
              "kafka:DescribeVpcConnection",
              "kafka:GetClusterPolicy",
              "kafka:ListClusters",
              "kafka:ListClustersV2",
              "kafka:ListConfigurations",
              "kafka:ListScramSecrets",
              "kafka:ListTagsForResource",
              "kafka:ListVpcConnections",
              "kafkaconnect:DescribeConnector",
              "kafkaconnect:ListConnectors",
              "kendra:DescribeIndex",
              "kendra:ListIndices",
              "kendra:ListTagsForResource",
              "kinesis:DescribeStreamConsumer",
              "kinesis:DescribeStreamSummary",
              "kinesis:ListStreamConsumers",
              "kinesis:ListStreams",
              "kinesis:ListTagsForStream",
              "kinesisanalytics:DescribeApplication",
              "kinesisanalytics:ListApplications",
              "kinesisanalytics:ListTagsForResource",
              "kinesisvideo:DescribeSignalingChannel",
              "kinesisvideo:DescribeStream",
              "kinesisvideo:ListSignalingChannels",
              "kinesisvideo:ListStreams",
              "kinesisvideo:ListTagsForResource",
              "kinesisvideo:ListTagsForStream",
              "kms:DescribeKey",
              "kms:GetKeyPolicy",
              "kms:GetKeyRotationStatus",
              "kms:ListAliases",
              "kms:ListKeys",
              "kms:ListResourceTags",
              "lakeformation:DescribeResource",
              "lakeformation:GetDataLakeSettings",
              "lakeformation:ListPermissions",
              "lakeformation:ListResources",
              "lambda:GetAlias",
              "lambda:GetCodeSigningConfig",
              "lambda:GetFunction",
              "lambda:GetFunctionCodeSigningConfig",
              "lambda:GetLayerVersion",
              "lambda:GetPolicy",
              "lambda:ListAliases",
              "lambda:ListCodeSigningConfigs",
              "lambda:ListFunctions",
              "lambda:ListLayers",
              "lambda:ListLayerVersions",
              "lambda:ListTags",
              "lambda:ListVersionsByFunction",
              "lex:DescribeBot",
              "lex:DescribeBotAlias",
              "lex:DescribeBotVersion",
              "lex:DescribeResourcePolicy",
              "lex:ListBotAliases",
              "lex:ListBotLocales",
              "lex:ListBots",
              "lex:ListBotVersions",
              "lex:ListTagsForResource",
              "license-manager:GetGrant",
              "license-manager:GetLicense",
              "license-manager:ListDistributedGrants",
              "license-manager:ListLicenses",
              "license-manager:ListReceivedGrants",
              "lightsail:GetAlarms",
              "lightsail:GetBuckets",
              "lightsail:GetCertificates",
              "lightsail:GetContainerServices",
              "lightsail:GetDisk",
              "lightsail:GetDisks",
              "lightsail:GetDistributions",
              "lightsail:GetInstance",
              "lightsail:GetInstances",
              "lightsail:GetKeyPair",
              "lightsail:GetLoadBalancer",
              "lightsail:GetLoadBalancers",
              "lightsail:GetLoadBalancerTlsCertificates",
              "lightsail:GetRelationalDatabase",
              "lightsail:GetRelationalDatabaseParameters",
              "lightsail:GetRelationalDatabases",
              "lightsail:GetStaticIp",
              "lightsail:GetStaticIps",
              "logs:DescribeDestinations",
              "logs:DescribeLogGroups",
              "logs:DescribeMetricFilters",
              "logs:GetDataProtectionPolicy",
              "logs:GetLogDelivery",
              "logs:ListLogDeliveries",
              "logs:ListTagsLogGroup",
              "lookoutequipment:DescribeInferenceScheduler",
              "lookoutequipment:ListTagsForResource",
              "lookoutmetrics:DescribeAlert",
              "lookoutmetrics:DescribeAnomalyDetector",
              "lookoutmetrics:ListAlerts",
              "lookoutmetrics:ListAnomalyDetectors",
              "lookoutmetrics:ListMetricSets",
              "lookoutmetrics:ListTagsForResource",
              "lookoutvision:DescribeProject",
              "lookoutvision:ListProjects",
              "m2:GetEnvironment",
              "m2:ListEnvironments",
              "m2:ListTagsForResource",
              "macie2:DescribeOrganizationConfiguration",
              "macie2:GetAutomatedDiscoveryConfiguration",
              "macie2:GetClassificationExportConfiguration",
              "macie2:GetCustomDataIdentifier",
              "macie2:GetFindingsPublicationConfiguration",
              "macie2:GetMacieSession",
              "macie2:ListCustomDataIdentifiers",
              "macie2:ListTagsForResource",
              "managedblockchain:GetMember",
              "managedblockchain:GetNetwork",
              "managedblockchain:GetNode",
              "managedblockchain:ListInvitations",
              "managedblockchain:ListMembers",
              "managedblockchain:ListNodes",
              "mediaconnect:DescribeFlow",
              "mediaconnect:ListFlows",
              "mediaconnect:ListTagsForResource",
              "mediapackage-vod:DescribePackagingConfiguration",
              "mediapackage-vod:DescribePackagingGroup",
              "mediapackage-vod:ListPackagingConfigurations",
              "mediapackage-vod:ListPackagingGroups",
              "mediapackage-vod:ListTagsForResource",
              "mediatailor:GetPlaybackConfiguration",
              "mediatailor:ListPlaybackConfigurations",
              "memorydb:DescribeAcls",
              "memorydb:DescribeClusters",
              "memorydb:DescribeParameterGroups",
              "memorydb:DescribeParameters",
              "memorydb:DescribeSubnetGroups",
              "memorydb:DescribeUsers",
              "memorydb:ListTags",
              "mobiletargeting:GetApp",
              "mobiletargeting:GetApplicationSettings",
              "mobiletargeting:GetApps",
              "mobiletargeting:GetCampaign",
              "mobiletargeting:GetCampaigns",
              "mobiletargeting:GetEmailChannel",
              "mobiletargeting:GetEmailTemplate",
              "mobiletargeting:GetEventStream",
              "mobiletargeting:GetInAppTemplate",
              "mobiletargeting:GetSegment",
              "mobiletargeting:GetSegments",
              "mobiletargeting:ListTagsForResource",
              "mobiletargeting:ListTemplates",
              "mq:DescribeBroker",
              "mq:ListBrokers",
              "network-firewall:DescribeLoggingConfiguration",
              "network-firewall:ListFirewalls",
              "networkmanager:DescribeGlobalNetworks",
              "networkmanager:GetConnectPeer",
              "networkmanager:GetCustomerGatewayAssociations",
              "networkmanager:GetDevices",
              "networkmanager:GetLinkAssociations",
              "networkmanager:GetLinks",
              "networkmanager:GetSites",
              "networkmanager:GetTransitGatewayRegistrations",
              "networkmanager:ListConnectPeers",
              "networkmanager:ListTagsForResource",
              "nimble:GetLaunchProfile",
              "nimble:GetLaunchProfileDetails",
              "nimble:GetStreamingImage",
              "nimble:GetStudio",
              "nimble:GetStudioComponent",
              "nimble:ListLaunchProfiles",
              "nimble:ListStreamingImages",
              "nimble:ListStudioComponents",
              "nimble:ListStudios",
              "opsworks:DescribeInstances",
              "opsworks:DescribeLayers",
              "opsworks:DescribeTimeBasedAutoScaling",
              "opsworks:DescribeVolumes",
              "opsworks:ListTags",
              "organizations:DescribeAccount",
              "organizations:DescribeEffectivePolicy",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribePolicy",
              "organizations:DescribeResourcePolicy",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListParents",
              "organizations:ListPolicies",
              "organizations:ListPoliciesForTarget",
              "organizations:ListRoots",
              "organizations:ListTagsForResource",
              "organizations:ListTargetsForPolicy",
              "panorama:DescribeApplicationInstance",
              "panorama:DescribeApplicationInstanceDetails",
              "panorama:DescribePackage",
              "panorama:DescribePackageVersion",
              "panorama:ListApplicationInstances",
              "panorama:ListNodes",
              "panorama:ListPackages",
              "personalize:DescribeDataset",
              "personalize:DescribeDatasetGroup",
              "personalize:DescribeSchema",
              "personalize:DescribeSolution",
              "personalize:ListDatasetGroups",
              "personalize:ListDatasetImportJobs",
              "personalize:ListDatasets",
              "personalize:ListSchemas",
              "personalize:ListSolutions",
              "personalize:ListTagsForResource",
              "profile:GetDomain",
              "profile:GetIntegration",
              "profile:GetProfileObjectType",
              "profile:ListDomains",
              "profile:ListIntegrations",
              "profile:ListProfileObjectTypes",
              "profile:ListTagsForResource",
              "quicksight:DescribeAccountSubscription",
              "quicksight:DescribeAnalysis",
              "quicksight:DescribeAnalysisPermissions",
              "quicksight:DescribeDashboard",
              "quicksight:DescribeDashboardPermissions",
              "quicksight:DescribeDataSet",
              "quicksight:DescribeDataSetPermissions",
              "quicksight:DescribeDataSetRefreshProperties",
              "quicksight:DescribeDataSource",
              "quicksight:DescribeDataSourcePermissions",
              "quicksight:DescribeTemplate",
              "quicksight:DescribeTemplatePermissions",
              "quicksight:DescribeTheme",
              "quicksight:DescribeThemePermissions",
              "quicksight:ListAnalyses",
              "quicksight:ListDashboards",
              "quicksight:ListDataSets",
              "quicksight:ListDataSources",
              "quicksight:ListTagsForResource",
              "quicksight:ListTemplates",
              "quicksight:ListThemes",
              "ram:GetPermission",
              "ram:GetResourceShareAssociations",
              "ram:GetResourceShares",
              "ram:ListPermissionAssociations",
              "ram:ListPermissions",
              "ram:ListPermissionVersions",
              "ram:ListResources",
              "ram:ListResourceSharePermissions",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBClusters",
              "rds:DescribeDBClusterSnapshotAttributes",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBParameters",
              "rds:DescribeDBProxies",
              "rds:DescribeDBProxyEndpoints",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBSnapshotAttributes",
              "rds:DescribeDBSnapshots",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEngineDefaultClusterParameters",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeGlobalClusters",
              "rds:DescribeOptionGroups",
              "rds:ListTagsForResource",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:GetWorkgroup",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListTagsForResource",
              "redshift-serverless:ListWorkgroups",
              "redshift:DescribeClusterParameterGroups",
              "redshift:DescribeClusterParameters",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSecurityGroups",
              "redshift:DescribeClusterSnapshots",
              "redshift:DescribeClusterSubnetGroups",
              "redshift:DescribeEndpointAccess",
              "redshift:DescribeEndpointAuthorization",
              "redshift:DescribeEventSubscriptions",
              "redshift:DescribeLoggingStatus",
              "redshift:DescribeScheduledActions",
              "redshift:DescribeTags",
              "refactor-spaces:GetEnvironment",
              "refactor-spaces:GetService",
              "refactor-spaces:ListApplications",
              "refactor-spaces:ListEnvironments",
              "refactor-spaces:ListServices",
              "rekognition:DescribeStreamProcessor",
              "rekognition:ListStreamProcessors",
              "rekognition:ListTagsForResource",
              "resiliencehub:DescribeApp",
              "resiliencehub:DescribeAppVersionTemplate",
              "resiliencehub:DescribeResiliencyPolicy",
              "resiliencehub:ListApps",
              "resiliencehub:ListAppVersionResourceMappings",
              "resiliencehub:ListResiliencyPolicies",
              "resiliencehub:ListTagsForResource",
              "resource-explorer-2:GetIndex",
              "resource-explorer-2:ListIndexes",
              "resource-explorer-2:ListTagsForResource",
              "resource-groups:GetGroup",
              "resource-groups:GetGroupConfiguration",
              "resource-groups:GetGroupQuery",
              "resource-groups:GetTags",
              "resource-groups:ListGroupResources",
              "resource-groups:ListGroups",
              "robomaker:DescribeRobotApplication",
              "robomaker:DescribeSimulationApplication",
              "robomaker:ListRobotApplications",
              "robomaker:ListSimulationApplications",
              "route53-recovery-control-config:DescribeCluster",
              "route53-recovery-control-config:DescribeControlPanel",
              "route53-recovery-control-config:DescribeRoutingControl",
              "route53-recovery-control-config:DescribeSafetyRule",
              "route53-recovery-control-config:ListClusters",
              "route53-recovery-control-config:ListControlPanels",
              "route53-recovery-control-config:ListRoutingControls",
              "route53-recovery-control-config:ListSafetyRules",
              "route53-recovery-control-config:ListTagsForResource",
              "route53-recovery-readiness:GetCell",
              "route53-recovery-readiness:GetReadinessCheck",
              "route53-recovery-readiness:GetRecoveryGroup",
              "route53-recovery-readiness:GetResourceSet",
              "route53-recovery-readiness:ListCells",
              "route53-recovery-readiness:ListReadinessChecks",
              "route53-recovery-readiness:ListRecoveryGroups",
              "route53-recovery-readiness:ListResourceSets",
              "route53:GetChange",
              "route53:GetDNSSEC",
              "route53:GetHealthCheck",
              "route53:GetHostedZone",
              "route53:ListCidrBlocks",
              "route53:ListCidrCollections",
              "route53:ListCidrLocations",
              "route53:ListHealthChecks",
              "route53:ListHostedZones",
              "route53:ListHostedZonesByName",
              "route53:ListQueryLoggingConfigs",
              "route53:ListResourceRecordSets",
              "route53:ListTagsForResource",
              "route53resolver:GetFirewallDomainList",
              "route53resolver:GetFirewallRuleGroup",
              "route53resolver:GetFirewallRuleGroupAssociation",
              "route53resolver:GetResolverDnssecConfig",
              "route53resolver:GetResolverEndpoint",
              "route53resolver:GetResolverQueryLogConfig",
              "route53resolver:GetResolverQueryLogConfigAssociation",
              "route53resolver:GetResolverRule",
              "route53resolver:GetResolverRuleAssociation",
              "route53resolver:ListFirewallDomainLists",
              "route53resolver:ListFirewallDomains",
              "route53resolver:ListFirewallRuleGroupAssociations",
              "route53resolver:ListFirewallRuleGroups",
              "route53resolver:ListFirewallRules",
              "route53resolver:ListResolverDnssecConfigs",
              "route53resolver:ListResolverEndpointIpAddresses",
              "route53resolver:ListResolverEndpoints",
              "route53resolver:ListResolverQueryLogConfigAssociations",
              "route53resolver:ListResolverQueryLogConfigs",
              "route53resolver:ListResolverRuleAssociations",
              "route53resolver:ListResolverRules",
              "route53resolver:ListTagsForResource",
              "rum:GetAppMonitor",
              "rum:GetAppMonitorData",
              "rum:ListAppMonitors",
              "rum:ListTagsForResource",
              "s3-outposts:GetAccessPoint",
              "s3-outposts:GetAccessPointPolicy",
              "s3-outposts:GetBucket",
              "s3-outposts:GetBucketPolicy",
              "s3-outposts:GetBucketTagging",
              "s3-outposts:GetLifecycleConfiguration",
              "s3-outposts:ListAccessPoints",
              "s3-outposts:ListEndpoints",
              "s3-outposts:ListRegionalBuckets",
              "s3:GetAccelerateConfiguration",
              "s3:GetAccessPoint",
              "s3:GetAccessPointForObjectLambda",
              "s3:GetAccessPointPolicy",
              "s3:GetAccessPointPolicyForObjectLambda",
              "s3:GetAccessPointPolicyStatus",
              "s3:GetAccessPointPolicyStatusForObjectLambda",
              "s3:GetAccountPublicAccessBlock",
              "s3:GetBucketAcl",
              "s3:GetBucketCORS",
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:GetBucketNotification",
              "s3:GetBucketObjectLockConfiguration",
              "s3:GetBucketPolicy",
              "s3:GetBucketPolicyStatus",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetBucketRequestPayment",
              "s3:GetBucketTagging",
              "s3:GetBucketVersioning",
              "s3:GetBucketWebsite",
              "s3:GetEncryptionConfiguration",
              "s3:GetLifecycleConfiguration",
              "s3:GetMultiRegionAccessPoint",
              "s3:GetMultiRegionAccessPointPolicy",
              "s3:GetMultiRegionAccessPointPolicyStatus",
              "s3:GetReplicationConfiguration",
              "s3:GetStorageLensConfiguration",
              "s3:GetStorageLensConfigurationTagging",
              "s3:ListAccessPoints",
              "s3:ListAccessPointsForObjectLambda",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListMultiRegionAccessPoints",
              "s3:ListStorageLensConfigurations",
              "s3express:GetBucketPolicy",
              "s3express:ListAllMyDirectoryBuckets",
              "sagemaker:DescribeAppImageConfig",
              "sagemaker:DescribeCodeRepository",
              "sagemaker:DescribeDataQualityJobDefinition",
              "sagemaker:DescribeDeviceFleet",
              "sagemaker:DescribeDomain",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeFeatureGroup",
              "sagemaker:DescribeImage",
              "sagemaker:DescribeImageVersion",
              "sagemaker:DescribeInferenceExperiment",
              "sagemaker:DescribeModel",
              "sagemaker:DescribeModelBiasJobDefinition",
              "sagemaker:DescribeModelExplainabilityJobDefinition",
              "sagemaker:DescribeModelQualityJobDefinition",
              "sagemaker:DescribeMonitoringSchedule",
              "sagemaker:DescribeNotebookInstance",
              "sagemaker:DescribeNotebookInstanceLifecycleConfig",
              "sagemaker:DescribePipeline",
              "sagemaker:DescribeProject",
              "sagemaker:DescribeWorkteam",
              "sagemaker:ListAppImageConfigs",
              "sagemaker:ListCodeRepositories",
              "sagemaker:ListDataQualityJobDefinitions",
              "sagemaker:ListDeviceFleets",
              "sagemaker:ListDomains",
              "sagemaker:ListEndpointConfigs",
              "sagemaker:ListEndpoints",
              "sagemaker:ListFeatureGroups",
              "sagemaker:ListImages",
              "sagemaker:ListImageVersions",
              "sagemaker:ListInferenceExperiments",
              "sagemaker:ListModelBiasJobDefinitions",
              "sagemaker:ListModelExplainabilityJobDefinitions",
              "sagemaker:ListModelQualityJobDefinitions",
              "sagemaker:ListModels",
              "sagemaker:ListMonitoringSchedules",
              "sagemaker:ListNotebookInstanceLifecycleConfigs",
              "sagemaker:ListNotebookInstances",
              "sagemaker:ListPipelines",
              "sagemaker:ListProjects",
              "sagemaker:ListTags",
              "sagemaker:ListWorkteams",
              "schemas:DescribeDiscoverer",
              "schemas:DescribeRegistry",
              "schemas:DescribeSchema",
              "schemas:GetResourcePolicy",
              "schemas:ListDiscoverers",
              "schemas:ListRegistries",
              "schemas:ListSchemas",
              "sdb:GetAttributes",
              "sdb:ListDomains",
              "secretsmanager:ListSecrets",
              "secretsmanager:ListSecretVersionIds",
              "securityhub:DescribeHub",
              "serviceCatalog:DescribePortfolioShares",
              "servicediscovery:GetInstance",
              "servicediscovery:GetNamespace",
              "servicediscovery:GetService",
              "servicediscovery:ListInstances",
              "servicediscovery:ListNamespaces",
              "servicediscovery:ListServices",
              "servicediscovery:ListTagsForResource",
              "ses:DescribeReceiptRule",
              "ses:DescribeReceiptRuleSet",
              "ses:GetConfigurationSet",
              "ses:GetConfigurationSetEventDestinations",
              "ses:GetContactList",
              "ses:GetEmailTemplate",
              "ses:GetTemplate",
              "ses:ListConfigurationSets",
              "ses:ListContactLists",
              "ses:ListEmailTemplates",
              "ses:ListReceiptFilters",
              "ses:ListReceiptRuleSets",
              "ses:ListTemplates",
              "shield:DescribeDRTAccess",
              "shield:DescribeProtection",
              "shield:DescribeSubscription",
              "signer:GetSigningProfile",
              "signer:ListProfilePermissions",
              "signer:ListSigningProfiles",
              "sns:GetDataProtectionPolicy",
              "sns:GetSMSSandboxAccountStatus",
              "sns:GetSubscriptionAttributes",
              "sns:GetTopicAttributes",
              "sns:ListSubscriptions",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTagsForResource",
              "sns:ListTopics",
              "sqs:GetQueueAttributes",
              "sqs:ListQueues",
              "sqs:ListQueueTags",
              "ssm:DescribeAutomationExecutions",
              "ssm:DescribeDocument",
              "ssm:DescribeDocumentPermission",
              "ssm:DescribeParameters",
              "ssm:GetAutomationExecution",
              "ssm:GetDocument",
              "ssm:ListDocuments",
              "ssm:ListTagsForResource",
              "ssm-sap:ListTagsForResource",
              "sso:DescribeInstanceAccessControlAttributeConfiguration",
              "sso:DescribePermissionSet",
              "sso:GetInlinePolicyForPermissionSet",
              "sso:ListManagedPoliciesInPermissionSet",
              "sso:ListPermissionSets",
              "sso:ListTagsForResource",
              "states:DescribeActivity",
              "states:DescribeStateMachine",
              "states:ListActivities",
              "states:ListStateMachines",
              "states:ListTagsForResource",
              "storagegateway:ListGateways",
              "storagegateway:ListTagsForResource",
              "storagegateway:ListVolumes",
              "sts:GetCallerIdentity",
              "support:DescribeCases",
              "synthetics:DescribeCanaries",
              "synthetics:DescribeCanariesLastRun",
              "synthetics:DescribeRuntimeVersions",
              "synthetics:GetCanary",
              "synthetics:GetCanaryRuns",
              "synthetics:GetGroup",
              "synthetics:ListAssociatedGroups",
              "synthetics:ListGroupResources",
              "synthetics:ListGroups",
              "synthetics:ListTagsForResource",
              "tag:GetResources",
              "timestream:DescribeDatabase",
              "timestream:DescribeEndpoints",
              "timestream:DescribeTable",
              "timestream:ListDatabases",
              "timestream:ListTables",
              "timestream:ListTagsForResource",
              "transfer:DescribeAgreement",
              "transfer:DescribeCertificate",
              "transfer:DescribeConnector",
              "transfer:DescribeProfile",
              "transfer:DescribeServer",
              "transfer:DescribeUser",
              "transfer:DescribeWorkflow",
              "transfer:ListAgreements",
              "transfer:ListCertificates",
              "transfer:ListConnectors",
              "transfer:ListProfiles",
              "transfer:ListServers",
              "transfer:ListTagsForResource",
              "transfer:ListUsers",
              "transfer:ListWorkflows",
              "voiceid:DescribeDomain",
              "voiceid:ListTagsForResource",
              "waf-regional:GetLoggingConfiguration",
              "waf-regional:GetWebACL",
              "waf-regional:GetWebACLForResource",
              "waf-regional:ListLoggingConfigurations",
              "waf:GetLoggingConfiguration",
              "waf:GetWebACL",
              "wafv2:GetLoggingConfiguration",
              "wafv2:GetRuleGroup",
              "wafv2:ListRuleGroups",
              "wafv2:ListTagsForResource",
              "workspaces:DescribeConnectionAliases",
              "workspaces:DescribeTags",
              "workspaces:DescribeWorkspaces"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConfigLogStreamStatementID",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/config/*"
          },
          {
            "Sid": "ConfigLogEventsStatementID",
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/config/*:log-stream:config-rule-evaluation/*"
          }
        ]
      }
    },
    {
      "PolicyName": "MediaPackageServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/MediaPackage/*:log-stream:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/MediaPackage/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceAmiIngestion",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ec2:ModifySnapshotAttribute"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:ec2:us-east-1::snapshot/snap-*"
          },
          {
            "Action": [
              "ec2:DescribeImageAttribute",
              "ec2:DescribeImages",
              "ec2:DescribeSnapshotAttribute",
              "ec2:ModifyImageAttribute"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticMapReducePlacementGroupPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Resource": "*",
            "Effect": "Allow",
            "Action": [
              "ec2:DeletePlacementGroup",
              "ec2:DescribePlacementGroups"
            ]
          },
          {
            "Resource": "arn:aws:ec2:*:*:placement-group/EMR_*",
            "Effect": "Allow",
            "Action": [
              "ec2:CreatePlacementGroup"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticFileSystemsUtils",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAssociation",
              "ssm:GetDeployablePatchSnapshotForInstance",
              "ssm:GetDocument",
              "ssm:DescribeDocument",
              "ssm:GetManifest",
              "ssm:GetParameter",
              "ssm:GetParameters",
              "ssm:ListAssociations",
              "ssm:ListInstanceAssociations",
              "ssm:PutInventory",
              "ssm:PutComplianceItems",
              "ssm:PutConfigurePackageResult",
              "ssm:UpdateAssociationStatus",
              "ssm:UpdateInstanceAssociationStatus",
              "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2messages:AcknowledgeMessage",
              "ec2messages:DeleteMessage",
              "ec2messages:FailMessage",
              "ec2messages:GetEndpoint",
              "ec2messages:GetMessages",
              "ec2messages:SendReply"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DescribeMountTargets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAvailabilityZones"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "Ec2ImageBuilderCrossAccountDistributionAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*::image/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:CopyImage",
              "ec2:ModifyImageAttribute"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightTimestreamPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "timestream:Select",
              "timestream:CancelQuery",
              "timestream:ListTables",
              "timestream:ListDatabases",
              "timestream:ListMeasures",
              "timestream:DescribeTable",
              "timestream:DescribeDatabase",
              "timestream:SelectValues",
              "timestream:DescribeEndpoints"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTimestreamReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonTimestreamReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "timestream:CancelQuery",
              "timestream:DescribeDatabase",
              "timestream:DescribeEndpoints",
              "timestream:DescribeTable",
              "timestream:ListDatabases",
              "timestream:ListMeasures",
              "timestream:ListTables",
              "timestream:ListTagsForResource",
              "timestream:Select",
              "timestream:SelectValues",
              "timestream:DescribeScheduledQuery",
              "timestream:ListScheduledQueries",
              "timestream:DescribeBatchLoadTask",
              "timestream:ListBatchLoadTasks",
              "timestream:DescribeAccountSettings"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTimestreamFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "timestream:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "kms:EncryptionContextKeys": "aws:timestream:database-name"
              },
              "Bool": {
                "kms:GrantIsForAWSResource": true
              },
              "StringLike": {
                "kms:ViaService": "timestream.*.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTimestreamConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "timestream:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListKeys",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "kms:EncryptionContextKeys": "aws:timestream:database-name"
              },
              "Bool": {
                "kms:GrantIsForAWSResource": true
              },
              "StringLike": {
                "kms:ViaService": "timestream.*.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "dbqms:CreateFavoriteQuery",
              "dbqms:DescribeFavoriteQueries",
              "dbqms:UpdateFavoriteQuery",
              "dbqms:DeleteFavoriteQueries",
              "dbqms:GetQueryString",
              "dbqms:CreateQueryHistory",
              "dbqms:DescribeQueryHistory",
              "dbqms:UpdateQueryHistory",
              "dbqms:DeleteQueryHistory"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics",
              "iam:ListRoles"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForCloudWatchAlarmsActionSSMServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ssm:CreateOpsItem"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonS3OutpostsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "s3-outposts:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "datasync:ListTasks",
              "datasync:ListLocations",
              "datasync:DescribeTask",
              "datasync:DescribeLocation*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeNetworkInterfaces"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "outposts:ListOutposts",
              "outposts:GetOutpost"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonS3OutpostsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3-outposts:Get*",
              "s3-outposts:List*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "datasync:ListTasks",
              "datasync:ListLocations",
              "datasync:DescribeTask",
              "datasync:DescribeLocation*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeNetworkInterfaces"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "outposts:ListOutposts",
              "outposts:GetOutpost"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeepRacerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:GetBucketPolicy",
              "s3:PutBucketPolicy",
              "s3:ListBucket",
              "s3:GetBucketAcl",
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:GetObjectAcl",
              "s3:GetBucketLocation"
            ],
            "Resource": [
              "arn:aws:s3:::*DeepRacer*",
              "arn:aws:s3:::*Deepracer*",
              "arn:aws:s3:::*deepracer*",
              "arn:aws:s3:::dr-*",
              "arn:aws:s3:::*DeepRacer*/*",
              "arn:aws:s3:::*Deepracer*/*",
              "arn:aws:s3:::*deepracer*/*",
              "arn:aws:s3:::dr-*/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchLambdaInsightsExecutionRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda-insights:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudTrail_FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sns:AddPermission",
              "sns:CreateTopic",
              "sns:SetTopicAttributes",
              "sns:GetTopicAttributes"
            ],
            "Resource": [
              "arn:aws:sns:*:*:aws-cloudtrail-logs*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:PutBucketPolicy",
              "s3:PutBucketPublicAccessBlock"
            ],
            "Resource": [
              "arn:aws:s3:::aws-cloudtrail-logs*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:GetBucketLocation",
              "s3:GetBucketPolicy"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudtrail:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:aws-cloudtrail-logs*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "iam:GetRolePolicy",
              "iam:GetUser"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "cloudtrail.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:CreateKey",
              "kms:CreateAlias",
              "kms:ListKeys",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:ListFunctions"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:ListGlobalTables",
              "dynamodb:ListTables"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSupportServiceRolePolicy",
      "PolicyDocument": {
        "Statement": [
          {
            "Sid": "AWSSupportAPIGatewayAccess",
            "Action": [
              "apigateway:GET"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:apigateway:*::/account",
              "arn:aws:apigateway:*::/apis",
              "arn:aws:apigateway:*::/apis/*",
              "arn:aws:apigateway:*::/apis/*/authorizers",
              "arn:aws:apigateway:*::/apis/*/authorizers/*",
              "arn:aws:apigateway:*::/apis/*/deployments",
              "arn:aws:apigateway:*::/apis/*/deployments/*",
              "arn:aws:apigateway:*::/apis/*/integrations",
              "arn:aws:apigateway:*::/apis/*/integrations/*",
              "arn:aws:apigateway:*::/apis/*/integrations/*/integrationresponses",
              "arn:aws:apigateway:*::/apis/*/integrations/*/integrationresponses/*",
              "arn:aws:apigateway:*::/apis/*/models",
              "arn:aws:apigateway:*::/apis/*/models/*",
              "arn:aws:apigateway:*::/apis/*/routes",
              "arn:aws:apigateway:*::/apis/*/routes/*",
              "arn:aws:apigateway:*::/apis/*/routes/*/routeresponses",
              "arn:aws:apigateway:*::/apis/*/routes/*/routeresponses/*",
              "arn:aws:apigateway:*::/apis/*/stages",
              "arn:aws:apigateway:*::/apis/*/stages/*",
              "arn:aws:apigateway:*::/clientcertificates",
              "arn:aws:apigateway:*::/clientcertificates/*",
              "arn:aws:apigateway:*::/domainnames",
              "arn:aws:apigateway:*::/domainnames/*",
              "arn:aws:apigateway:*::/domainnames/*/apimappings",
              "arn:aws:apigateway:*::/domainnames/*/apimappings/*",
              "arn:aws:apigateway:*::/domainnames/*/basepathmappings",
              "arn:aws:apigateway:*::/domainnames/*/basepathmappings/*",
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*",
              "arn:aws:apigateway:*::/restapis/*/authorizers",
              "arn:aws:apigateway:*::/restapis/*/authorizers/*",
              "arn:aws:apigateway:*::/restapis/*/deployments",
              "arn:aws:apigateway:*::/restapis/*/deployments/*",
              "arn:aws:apigateway:*::/restapis/*/models",
              "arn:aws:apigateway:*::/restapis/*/models/*",
              "arn:aws:apigateway:*::/restapis/*/models/*/default_template",
              "arn:aws:apigateway:*::/restapis/*/resources",
              "arn:aws:apigateway:*::/restapis/*/resources/*",
              "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration/responses/*",
              "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/responses/*",
              "arn:aws:apigateway:*::/restapis/*/stages/*/sdks/*",
              "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*",
              "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration",
              "arn:aws:apigateway:*::/restapis/*/stages",
              "arn:aws:apigateway:*::/restapis/*/stages/*",
              "arn:aws:apigateway:*::/usageplans",
              "arn:aws:apigateway:*::/usageplans/*",
              "arn:aws:apigateway:*::/vpclinks",
              "arn:aws:apigateway:*::/vpclinks/*"
            ]
          },
          {
            "Sid": "AWSSupportDeleteRoleAccess",
            "Action": [
              "iam:DeleteRole"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"
            ]
          },
          {
            "Sid": "AWSSupportActions",
            "Action": [
              "access-analyzer:getAccessPreview",
              "access-analyzer:getAnalyzedResource",
              "access-analyzer:getAnalyzer",
              "access-analyzer:getArchiveRule",
              "access-analyzer:getFinding",
              "access-analyzer:getGeneratedPolicy",
              "access-analyzer:listAccessPreviewFindings",
              "access-analyzer:listAccessPreviews",
              "access-analyzer:listAnalyzedResources",
              "access-analyzer:listAnalyzers",
              "access-analyzer:listArchiveRules",
              "access-analyzer:listFindings",
              "access-analyzer:listPolicyGenerations",
              "account:getRegionOptStatus",
              "account:listRegions",
              "acm-pca:describeCertificateAuthority",
              "acm-pca:describeCertificateAuthorityAuditReport",
              "acm-pca:getCertificate",
              "acm-pca:getCertificateAuthorityCertificate",
              "acm-pca:getCertificateAuthorityCsr",
              "acm-pca:listCertificateAuthorities",
              "acm-pca:listTags",
              "acm:describeCertificate",
              "acm:getAccountConfiguration",
              "acm:getCertificate",
              "acm:listCertificates",
              "acm:listTagsForCertificate",
              "airflow:getEnvironment",
              "airflow:listEnvironments",
              "airflow:listTagsForResource",
              "amplify:getApp",
              "amplify:getBackendEnvironment",
              "amplify:getBranch",
              "amplify:getDomainAssociation",
              "amplify:getJob",
              "amplify:getWebhook",
              "amplify:listApps",
              "amplify:listBackendEnvironments",
              "amplify:listBranches",
              "amplify:listDomainAssociations",
              "amplify:listWebhooks",
              "amplifyuibuilder:exportComponents",
              "amplifyuibuilder:exportThemes",
              "appflow:describeConnectorEntity",
              "appflow:describeConnectorProfiles",
              "appflow:describeConnectors",
              "appflow:describeFlow",
              "appflow:describeFlowExecutionRecords",
              "appflow:listConnectorEntities",
              "appflow:listFlows",
              "application-autoscaling:describeScalableTargets",
              "application-autoscaling:describeScalingActivities",
              "application-autoscaling:describeScalingPolicies",
              "application-autoscaling:describeScheduledActions",
              "applicationinsights:describeApplication",
              "applicationinsights:describeComponent",
              "applicationinsights:describeComponentConfiguration",
              "applicationinsights:describeComponentConfigurationRecommendation",
              "applicationinsights:describeLogPattern",
              "applicationinsights:describeObservation",
              "applicationinsights:describeProblem",
              "applicationinsights:describeProblemObservations",
              "applicationinsights:listApplications",
              "applicationinsights:listComponents",
              "applicationinsights:listConfigurationHistory",
              "applicationinsights:listLogPatterns",
              "applicationinsights:listLogPatternSets",
              "applicationinsights:listProblems",
              "appmesh:describeGatewayRoute",
              "appmesh:describeMesh",
              "appmesh:describeRoute",
              "appmesh:describeVirtualGateway",
              "appmesh:describeVirtualNode",
              "appmesh:describeVirtualRouter",
              "appmesh:describeVirtualService",
              "appmesh:listGatewayRoutes",
              "appmesh:listMeshes",
              "appmesh:listRoutes",
              "appmesh:listTagsForResource",
              "appmesh:listVirtualGateways",
              "appmesh:listVirtualNodes",
              "appmesh:listVirtualRouters",
              "appmesh:listVirtualServices",
              "apprunner:describeAutoScalingConfiguration",
              "apprunner:describeCustomDomains",
              "apprunner:describeOperation",
              "apprunner:describeService",
              "apprunner:listAutoScalingConfigurations",
              "apprunner:listConnections",
              "apprunner:listOperations",
              "apprunner:listServices",
              "apprunner:listTagsForResource",
              "appstream:describeAppBlockBuilderAppBlockAssociations",
              "appstream:describeAppBlockBuilders",
              "appstream:describeAppBlocks",
              "appstream:describeApplicationFleetAssociations",
              "appstream:describeApplications",
              "appstream:describeDirectoryConfigs",
              "appstream:describeEntitlements",
              "appstream:describeFleets",
              "appstream:describeImageBuilders",
              "appstream:describeImagePermissions",
              "appstream:describeImages",
              "appstream:describeSessions",
              "appstream:describeStacks",
              "appstream:describeUsageReportSubscriptions",
              "appstream:describeUsers",
              "appstream:describeUserStackAssociations",
              "appstream:listAssociatedFleets",
              "appstream:listAssociatedStacks",
              "appstream:listEntitledApplications",
              "appstream:listTagsForResource",
              "appsync:getApiAssociation",
              "appsync:getApiCache",
              "appsync:getDomainName",
              "appsync:getFunction",
              "appsync:getGraphqlApi",
              "appsync:getIntrospectionSchema",
              "appsync:getResolver",
              "appsync:getSchemaCreationStatus",
              "appsync:getSourceApiAssociation",
              "appsync:getType",
              "appsync:listDataSources",
              "appsync:listDomainNames",
              "appsync:listFunctions",
              "appsync:listGraphqlApis",
              "appsync:listResolvers",
              "appsync:listResolversByFunction",
              "appsync:listSourceApiAssociations",
              "appsync:listTypes",
              "appsync:listTypesByAssociation",
              "aps:describeAlertManagerDefinition",
              "aps:describeRuleGroupsNamespace",
              "aps:describeScraper",
              "aps:describeWorkspace",
              "aps:listRuleGroupsNamespaces",
              "aps:listScrapers",
              "aps:listWorkspaces",
              "athena:batchGetNamedQuery",
              "athena:batchGetQueryExecution",
              "athena:getCalculationExecution",
              "athena:getCalculationExecutionStatus",
              "athena:getDataCatalog",
              "athena:getNamedQuery",
              "athena:getNotebookMetadata",
              "athena:getQueryExecution",
              "athena:getQueryRuntimeStatistics",
              "athena:getSession",
              "athena:getSessionStatus",
              "athena:getWorkGroup",
              "athena:listApplicationDPUSizes",
              "athena:listCalculationExecutions",
              "athena:listDataCatalogs",
              "athena:listEngineVersions",
              "athena:listExecutors",
              "athena:listNamedQueries",
              "athena:listNotebookMetadata",
              "athena:listNotebookSessions",
              "athena:listQueryExecutions",
              "athena:listSessions",
              "athena:listTagsForResource",
              "athena:listWorkGroups",
              "auditmanager:getAccountStatus",
              "auditmanager:getDelegations",
              "auditmanager:listAssessmentFrameworks",
              "auditmanager:listAssessmentReports",
              "auditmanager:listAssessments",
              "auditmanager:listControls",
              "auditmanager:listKeywordsForDataSource",
              "auditmanager:listNotifications",
              "autoscaling-plans:describeScalingPlanResources",
              "autoscaling-plans:describeScalingPlans",
              "autoscaling-plans:getScalingPlanResourceForecastData",
              "autoscaling:describeAccountLimits",
              "autoscaling:describeAdjustmentTypes",
              "autoscaling:describeAutoScalingGroups",
              "autoscaling:describeAutoScalingInstances",
              "autoscaling:describeAutoScalingNotificationTypes",
              "autoscaling:describeInstanceRefreshes",
              "autoscaling:describeLaunchConfigurations",
              "autoscaling:describeLifecycleHooks",
              "autoscaling:describeLifecycleHookTypes",
              "autoscaling:describeLoadBalancers",
              "autoscaling:describeLoadBalancerTargetGroups",
              "autoscaling:describeMetricCollectionTypes",
              "autoscaling:describeNotificationConfigurations",
              "autoscaling:describePolicies",
              "autoscaling:describeScalingActivities",
              "autoscaling:describeScalingProcessTypes",
              "autoscaling:describeScheduledActions",
              "autoscaling:describeTrafficSources",
              "autoscaling:describeTags",
              "autoscaling:describeTerminationPolicyTypes",
              "autoscaling:describeWarmPool",
              "backup:describeBackupJob",
              "backup:describeBackupVault",
              "backup:describeCopyJob",
              "backup:describeFramework",
              "backup:describeGlobalSettings",
              "backup:describeProtectedResource",
              "backup:describeRecoveryPoint",
              "backup:describeRegionSettings",
              "backup:describeReportJob",
              "backup:describeReportPlan",
              "backup:describeRestoreJob",
              "backup:getBackupPlan",
              "backup:getBackupPlanFromJSON",
              "backup:getBackupPlanFromTemplate",
              "backup:getBackupSelection",
              "backup:getBackupVaultAccessPolicy",
              "backup:getBackupVaultNotifications",
              "backup:getLegalHold",
              "backup:getRecoveryPointRestoreMetadata",
              "backup:getRestoreJobMetadata",
              "backup:getRestoreTestingInferredMetadata",
              "backup:getRestoreTestingPlan",
              "backup:getRestoreTestingSelection",
              "backup:getSupportedResourceTypes",
              "backup:listBackupJobs",
              "backup:listBackupPlans",
              "backup:listBackupPlanTemplates",
              "backup:listBackupPlanVersions",
              "backup:listBackupSelections",
              "backup:listBackupVaults",
              "backup:listCopyJobs",
              "backup:listFrameworks",
              "backup:listLegalHolds",
              "backup:listProtectedResources",
              "backup:listRecoveryPointsByBackupVault",
              "backup:listRecoveryPointsByLegalHold",
              "backup:listRecoveryPointsByResource",
              "backup:listReportJobs",
              "backup:listReportPlans",
              "backup:listRestoreJobs",
              "backup:listRestoreJobsByProtectedResource",
              "backup:listRestoreTestingPlans",
              "backup:listRestoreTestingSelections",
              "backup:listTags",
              "backup-gateway:getGateway",
              "backup-gateway:getHypervisor",
              "backup-gateway:getHypervisorPropertyMappings",
              "backup-gateway:getVirtualMachine",
              "backup-gateway:listGateways",
              "backup-gateway:listHypervisors",
              "backup-gateway:listVirtualMachines",
              "batch:describeComputeEnvironments",
              "batch:describeJobDefinitions",
              "batch:describeJobQueues",
              "batch:describeJobs",
              "batch:listJobs",
              "bedrock:getAgent",
              "bedrock:getAgentActionGroup",
              "bedrock:getAgentAlias",
              "bedrock:getAgentKnowledgeBase",
              "bedrock:getAgentVersion",
              "bedrock:getCustomModel",
              "bedrock:getDataSource",
              "bedrock:getIngestionJob",
              "bedrock:getKnowledgeBase",
              "bedrock:getModelCustomizationJob",
              "bedrock:getModelInvocationLoggingConfiguration",
              "bedrock:listAgentActionGroups",
              "bedrock:listAgentAliases",
              "bedrock:listAgentKnowledgeBases",
              "bedrock:listAgents",
              "bedrock:listAgentVersions",
              "bedrock:listCustomModels",
              "bedrock:listDataSources",
              "bedrock:listIngestionJobs",
              "bedrock:listKnowledgeBases",
              "bedrock:listModelCustomizationJobs",
              "bedrock:listProvisionedModelThroughputs",
              "braket:getDevice",
              "braket:getQuantumTask",
              "braket:searchDevices",
              "braket:searchQuantumTasks",
              "budgets:viewBudget",
              "ce:getCostAndUsage",
              "ce:getCostAndUsageWithResources",
              "ce:getCostForecast",
              "ce:getDimensionValues",
              "ce:getReservationCoverage",
              "ce:getReservationPurchaseRecommendation",
              "ce:getReservationUtilization",
              "ce:getRightsizingRecommendation",
              "ce:getSavingsPlansCoverage",
              "ce:getSavingsPlansPurchaseRecommendation",
              "ce:getSavingsPlansUtilization",
              "ce:getSavingsPlansUtilizationDetails",
              "ce:getTags",
              "chime:describeAppInstance",
              "chime:getAttendee",
              "chime:getGlobalSettings",
              "chime:getMediaCapturePipeline",
              "chime:getMediaPipeline",
              "chime:getMeeting",
              "chime:getProxySession",
              "chime:getSipMediaApplication",
              "chime:getSipRule",
              "chime:getVoiceConnector",
              "chime:getVoiceConnectorGroup",
              "chime:getVoiceConnectorLoggingConfiguration",
              "chime:listAppInstances",
              "chime:listAttendees",
              "chime:listChannelBans",
              "chime:listChannels",
              "chime:listChannelsModeratedByAppInstanceUser",
              "chime:listMediaCapturePipelines",
              "chime:listMediaPipelines",
              "chime:listMeetings",
              "chime:listSipMediaApplications",
              "chime:listSipRules",
              "chime:listVoiceConnectorGroups",
              "chime:listVoiceConnectors",
              "cleanrooms:batchGetCollaborationAnalysisTemplate",
              "cleanrooms:batchGetSchema",
              "cleanrooms:getAnalysisTemplate",
              "cleanrooms:getCollaboration",
              "cleanrooms:getCollaborationAnalysisTemplate",
              "cleanrooms:getConfiguredTable",
              "cleanrooms:getConfiguredTableAssociation",
              "cleanrooms:getMembership",
              "cleanrooms:getSchema",
              "cleanrooms:listAnalysisTemplates",
              "cleanrooms:listCollaborationAnalysisTemplates",
              "cleanrooms:listCollaborations",
              "cleanrooms:listConfiguredTableAssociations",
              "cleanrooms:listConfiguredTables",
              "cleanrooms:listMembers",
              "cleanrooms:listMemberships",
              "cleanrooms:listSchemas",
              "cloud9:describeEnvironmentMemberships",
              "cloud9:describeEnvironments",
              "cloud9:listEnvironments",
              "clouddirectory:getDirectory",
              "clouddirectory:listDirectories",
              "cloudformation:batchDescribeTypeConfigurations",
              "cloudformation:describeAccountLimits",
              "cloudformation:describeChangeSet",
              "cloudformation:describeChangeSetHooks",
              "cloudformation:describePublisher",
              "cloudformation:describeStackEvents",
              "cloudformation:describeStackInstance",
              "cloudformation:describeStackResource",
              "cloudformation:describeStackResources",
              "cloudformation:describeStacks",
              "cloudformation:describeStackSet",
              "cloudformation:describeStackSetOperation",
              "cloudformation:describeType",
              "cloudformation:describeTypeRegistration",
              "cloudformation:estimateTemplateCost",
              "cloudformation:getStackPolicy",
              "cloudformation:getTemplate",
              "cloudformation:getTemplateSummary",
              "cloudformation:listChangeSets",
              "cloudformation:listExports",
              "cloudformation:listImports",
              "cloudformation:listStackInstances",
              "cloudformation:listStackResources",
              "cloudformation:listStacks",
              "cloudformation:listStackSetOperationResults",
              "cloudformation:listStackSetOperations",
              "cloudformation:listStackSets",
              "cloudformation:listTypeRegistrations",
              "cloudformation:listTypes",
              "cloudformation:listTypeVersions",
              "cloudfront:describeFunction",
              "cloudfront:getCachePolicy",
              "cloudfront:getCachePolicyConfig",
              "cloudfront:getCloudFrontOriginAccessIdentity",
              "cloudfront:getCloudFrontOriginAccessIdentityConfig",
              "cloudfront:getContinuousDeploymentPolicy",
              "cloudfront:getContinuousDeploymentPolicyConfig",
              "cloudfront:getDistribution",
              "cloudfront:getDistributionConfig",
              "cloudfront:getInvalidation",
              "cloudfront:getKeyGroup",
              "cloudfront:getKeyGroupConfig",
              "cloudfront:getMonitoringSubscription",
              "cloudfront:getOriginAccessControl",
              "cloudfront:getOriginAccessControlConfig",
              "cloudfront:getOriginRequestPolicy",
              "cloudfront:getOriginRequestPolicyConfig",
              "cloudfront:getPublicKey",
              "cloudfront:getPublicKeyConfig",
              "cloudfront:getRealtimeLogConfig",
              "cloudfront:getResponseHeadersPolicy",
              "cloudfront:getResponseHeadersPolicyConfig",
              "cloudfront:getStreamingDistribution",
              "cloudfront:getStreamingDistributionConfig",
              "cloudfront:listCachePolicies",
              "cloudfront:listCloudFrontOriginAccessIdentities",
              "cloudfront:listContinuousDeploymentPolicies",
              "cloudfront:listDistributions",
              "cloudfront:listDistributionsByCachePolicyId",
              "cloudfront:listDistributionsByKeyGroup",
              "cloudfront:listDistributionsByOriginRequestPolicyId",
              "cloudfront:listDistributionsByRealtimeLogConfig",
              "cloudfront:listDistributionsByResponseHeadersPolicyId",
              "cloudfront:listDistributionsByWebACLId",
              "cloudfront:listFunctions",
              "cloudfront:listInvalidations",
              "cloudfront:listKeyGroups",
              "cloudfront:listOriginAccessControls",
              "cloudfront:listOriginRequestPolicies",
              "cloudfront:listPublicKeys",
              "cloudfront:listRealtimeLogConfigs",
              "cloudfront:listResponseHeadersPolicies",
              "cloudfront:listStreamingDistributions",
              "cloudhsm:describeBackups",
              "cloudhsm:describeClusters",
              "cloudsearch:describeAnalysisSchemes",
              "cloudsearch:describeAvailabilityOptions",
              "cloudsearch:describeDomains",
              "cloudsearch:describeExpressions",
              "cloudsearch:describeIndexFields",
              "cloudsearch:describeScalingParameters",
              "cloudsearch:describeServiceAccessPolicies",
              "cloudsearch:describeSuggesters",
              "cloudsearch:listDomainNames",
              "cloudtrail:describeTrails",
              "cloudtrail:getEventSelectors",
              "cloudtrail:getInsightSelectors",
              "cloudtrail:getTrail",
              "cloudtrail:getTrailStatus",
              "cloudtrail:listPublicKeys",
              "cloudtrail:listTags",
              "cloudtrail:listTrails",
              "cloudtrail:lookupEvents",
              "cloudwatch:describeAlarmHistory",
              "cloudwatch:describeAlarms",
              "cloudwatch:describeAlarmsForMetric",
              "cloudwatch:describeAnomalyDetectors",
              "cloudwatch:describeInsightRules",
              "cloudwatch:getDashboard",
              "cloudwatch:getInsightRuleReport",
              "cloudwatch:getMetricData",
              "cloudwatch:getMetricStatistics",
              "cloudwatch:getMetricStream",
              "cloudwatch:listDashboards",
              "cloudwatch:listManagedInsightRules",
              "cloudwatch:listMetrics",
              "cloudwatch:listMetricStreams",
              "codeartifact:describeDomain",
              "codeartifact:describePackageVersion",
              "codeartifact:describeRepository",
              "codeartifact:getDomainPermissionsPolicy",
              "codeartifact:getRepositoryEndpoint",
              "codeartifact:getRepositoryPermissionsPolicy",
              "codeartifact:listDomains",
              "codeartifact:listPackages",
              "codeartifact:listPackageVersionAssets",
              "codeartifact:listPackageVersions",
              "codeartifact:listRepositories",
              "codeartifact:listRepositoriesInDomain",
              "codebuild:batchGetBuildBatches",
              "codebuild:batchGetBuilds",
              "codebuild:batchGetFleets",
              "codebuild:batchGetProjects",
              "codebuild:listBuildBatches",
              "codebuild:listBuildBatchesForProject",
              "codebuild:listBuilds",
              "codebuild:listBuildsForProject",
              "codebuild:listCuratedEnvironmentImages",
              "codebuild:listFleets",
              "codebuild:listProjects",
              "codebuild:listSourceCredentials",
              "codecommit:batchGetRepositories",
              "codecommit:getBranch",
              "codecommit:getRepository",
              "codecommit:getRepositoryTriggers",
              "codecommit:listBranches",
              "codecommit:listRepositories",
              "codeconnections:getConnection",
              "codeconnections:getHost",
              "codeconnections:getRepositoryLink",
              "codeconnections:getRepositorySyncStatus",
              "codeconnections:getResourceSyncStatus",
              "codeconnections:getSyncBlockerSummary",
              "codeconnections:getSyncConfiguration",
              "codeconnections:listConnections",
              "codeconnections:listHosts",
              "codeconnections:listRepositoryLinks",
              "codeconnections:listRepositorySyncDefinitions",
              "codeconnections:listSyncConfigurations",
              "codedeploy:batchGetApplicationRevisions",
              "codedeploy:batchGetApplications",
              "codedeploy:batchGetDeploymentGroups",
              "codedeploy:batchGetDeploymentInstances",
              "codedeploy:batchGetDeployments",
              "codedeploy:batchGetDeploymentTargets",
              "codedeploy:batchGetOnPremisesInstances",
              "codedeploy:getApplication",
              "codedeploy:getApplicationRevision",
              "codedeploy:getDeployment",
              "codedeploy:getDeploymentConfig",
              "codedeploy:getDeploymentGroup",
              "codedeploy:getDeploymentInstance",
              "codedeploy:getDeploymentTarget",
              "codedeploy:getOnPremisesInstance",
              "codedeploy:listApplicationRevisions",
              "codedeploy:listApplications",
              "codedeploy:listDeploymentConfigs",
              "codedeploy:listDeploymentGroups",
              "codedeploy:listDeploymentInstances",
              "codedeploy:listDeployments",
              "codedeploy:listDeploymentTargets",
              "codedeploy:listGitHubAccountTokenNames",
              "codedeploy:listOnPremisesInstances",
              "codepipeline:getJobDetails",
              "codepipeline:getPipeline",
              "codepipeline:getPipelineExecution",
              "codepipeline:getPipelineState",
              "codepipeline:listActionExecutions",
              "codepipeline:listActionTypes",
              "codepipeline:listPipelineExecutions",
              "codepipeline:listPipelines",
              "codepipeline:listWebhooks",
              "codestar:describeProject",
              "codestar:listProjects",
              "codestar:listResources",
              "codestar:listTeamMembers",
              "codestar:listUserProfiles",
              "codestar-connections:getConnection",
              "codestar-connections:getHost",
              "codestar-connections:listConnections",
              "codestar-connections:listHosts",
              "cognito-identity:describeIdentityPool",
              "cognito-identity:getIdentityPoolRoles",
              "cognito-identity:listIdentities",
              "cognito-identity:listIdentityPools",
              "cognito-idp:describeIdentityProvider",
              "cognito-idp:describeResourceServer",
              "cognito-idp:describeRiskConfiguration",
              "cognito-idp:describeUserImportJob",
              "cognito-idp:describeUserPool",
              "cognito-idp:describeUserPoolClient",
              "cognito-idp:describeUserPoolDomain",
              "cognito-idp:getGroup",
              "cognito-idp:getUICustomization",
              "cognito-idp:getUserPoolMfaConfig",
              "cognito-idp:listGroups",
              "cognito-idp:listIdentityProviders",
              "cognito-idp:listResourceServers",
              "cognito-idp:listUserImportJobs",
              "cognito-idp:listUserPoolClients",
              "cognito-idp:listUserPools",
              "cognito-sync:describeDataset",
              "cognito-sync:describeIdentityPoolUsage",
              "cognito-sync:describeIdentityUsage",
              "cognito-sync:getCognitoEvents",
              "cognito-sync:getIdentityPoolConfiguration",
              "cognito-sync:listDatasets",
              "cognito-sync:listIdentityPoolUsage",
              "comprehend:describeDocumentClassificationJob",
              "comprehend:describeDocumentClassifier",
              "comprehend:describeDominantLanguageDetectionJob",
              "comprehend:describeEndpoint",
              "comprehend:describeEntitiesDetectionJob",
              "comprehend:describeEntityRecognizer",
              "comprehend:describeEventsDetectionJob",
              "comprehend:describeFlywheel",
              "comprehend:describeFlywheelIteration",
              "comprehend:describeKeyPhrasesDetectionJob",
              "comprehend:describePiiEntitiesDetectionJob",
              "comprehend:describeSentimentDetectionJob",
              "comprehend:describeTargetedSentimentDetectionJob",
              "comprehend:describeTopicsDetectionJob",
              "comprehend:listDocumentClassificationJobs",
              "comprehend:listDocumentClassifiers",
              "comprehend:listDominantLanguageDetectionJobs",
              "comprehend:listEndpoints",
              "comprehend:listEntitiesDetectionJobs",
              "comprehend:listEntityRecognizers",
              "comprehend:listEventsDetectionJobs",
              "comprehend:listFlywheelIterationHistory",
              "comprehend:listFlywheels",
              "comprehend:listKeyPhrasesDetectionJobs",
              "comprehend:listPiiEntitiesDetectionJobs",
              "comprehend:listSentimentDetectionJobs",
              "comprehend:listTargetedSentimentDetectionJobs",
              "comprehend:listTopicsDetectionJobs",
              "compute-optimizer:getAutoScalingGroupRecommendations",
              "compute-optimizer:getEBSVolumeRecommendations",
              "compute-optimizer:getEC2InstanceRecommendations",
              "compute-optimizer:getEC2RecommendationProjectedMetrics",
              "compute-optimizer:getECSServiceRecommendations",
              "compute-optimizer:getECSServiceRecommendationProjectedMetrics",
              "compute-optimizer:getEnrollmentStatus",
              "compute-optimizer:getRecommendationSummaries",
              "config:batchGetAggregateResourceConfig",
              "config:batchGetResourceConfig",
              "config:describeAggregateComplianceByConfigRules",
              "config:describeAggregationAuthorizations",
              "config:describeComplianceByConfigRule",
              "config:describeComplianceByResource",
              "config:describeConfigRuleEvaluationStatus",
              "config:describeConfigRules",
              "config:describeConfigurationAggregators",
              "config:describeConfigurationAggregatorSourcesStatus",
              "config:describeConfigurationRecorders",
              "config:describeConfigurationRecorderStatus",
              "config:describeConformancePackCompliance",
              "config:describeConformancePacks",
              "config:describeConformancePackStatus",
              "config:describeDeliveryChannels",
              "config:describeDeliveryChannelStatus",
              "config:describeOrganizationConfigRules",
              "config:describeOrganizationConfigRuleStatuses",
              "config:describeOrganizationConformancePacks",
              "config:describeOrganizationConformancePackStatuses",
              "config:describePendingAggregationRequests",
              "config:describeRemediationConfigurations",
              "config:describeRemediationExceptions",
              "config:describeRemediationExecutionStatus",
              "config:describeRetentionConfigurations",
              "config:getAggregateComplianceDetailsByConfigRule",
              "config:getAggregateConfigRuleComplianceSummary",
              "config:getAggregateDiscoveredResourceCounts",
              "config:getAggregateResourceConfig",
              "config:getComplianceDetailsByConfigRule",
              "config:getComplianceDetailsByResource",
              "config:getComplianceSummaryByConfigRule",
              "config:getComplianceSummaryByResourceType",
              "config:getConformancePackComplianceDetails",
              "config:getConformancePackComplianceSummary",
              "config:getDiscoveredResourceCounts",
              "config:getOrganizationConfigRuleDetailedStatus",
              "config:getOrganizationConformancePackDetailedStatus",
              "config:getResourceConfigHistory",
              "config:listAggregateDiscoveredResources",
              "config:listDiscoveredResources",
              "config:listTagsForResource",
              "connect:describeContact",
              "connect:describePhoneNumber",
              "connect:describeQuickConnect",
              "connect:describeUser",
              "connect:getCurrentMetricData",
              "connect:getMetricData",
              "connect:listContactEvaluations",
              "connect:listEvaluationForms",
              "connect:listEvaluationFormVersions",
              "connect:listPhoneNumbersV2",
              "connect:listQuickConnects",
              "connect:listRoutingProfiles",
              "connect:listSecurityProfiles",
              "connect:listUsers",
              "connect:listViews",
              "connect:listViewVersions",
              "controltower:describeAccountFactoryConfig",
              "controltower:describeCoreService",
              "controltower:describeGuardrail",
              "controltower:describeGuardrailForTarget",
              "controltower:describeManagedAccount",
              "controltower:describeSingleSignOn",
              "controltower:getAvailableUpdates",
              "controltower:getHomeRegion",
              "controltower:getLandingZone",
              "controltower:getLandingZoneStatus",
              "controltower:listDirectoryGroups",
              "controltower:listEnabledControls",
              "controltower:listGuardrailsForTarget",
              "controltower:listGuardrailViolations",
              "controltower:listLandingZones",
              "controltower:listManagedAccounts",
              "controltower:listManagedAccountsForGuardrail",
              "controltower:listManagedAccountsForParent",
              "controltower:listManagedOrganizationalUnits",
              "controltower:listManagedOrganizationalUnitsForGuardrail",
              "cost-optimization-hub:getPreferences",
              "cost-optimization-hub:getRecommendation",
              "cost-optimization-hub:listEnrollmentStatuses",
              "cost-optimization-hub:listRecommendations",
              "cost-optimization-hub:listRecommendationSummaries",
              "databrew:describeDataset",
              "databrew:describeJob",
              "databrew:describeProject",
              "databrew:describeRecipe",
              "databrew:listDatasets",
              "databrew:listJobRuns",
              "databrew:listJobs",
              "databrew:listProjects",
              "databrew:listRecipes",
              "databrew:listRecipeVersions",
              "databrew:listTagsForResource",
              "datapipeline:describeObjects",
              "datapipeline:describePipelines",
              "datapipeline:getPipelineDefinition",
              "datapipeline:listPipelines",
              "datapipeline:queryObjects",
              "datasync:describeAgent",
              "datasync:describeLocationEfs",
              "datasync:describeLocationFsxLustre",
              "datasync:describeLocationFsxOpenZfs",
              "datasync:describeLocationFsxWindows",
              "datasync:describeLocationHdfs",
              "datasync:describeLocationNfs",
              "datasync:describeLocationObjectStorage",
              "datasync:describeLocationS3",
              "datasync:describeLocationSmb",
              "datasync:describeTask",
              "datasync:describeTaskExecution",
              "datasync:listAgents",
              "datasync:listLocations",
              "datasync:listTaskExecutions",
              "datasync:listTasks",
              "dax:describeClusters",
              "dax:describeDefaultParameters",
              "dax:describeEvents",
              "dax:describeParameterGroups",
              "dax:describeParameters",
              "dax:describeSubnetGroups",
              "deadline:listAvailableMeteredProducts",
              "deadline:listBudgets",
              "deadline:listFarmMembers",
              "deadline:listFarms",
              "deadline:listFleetMembers",
              "deadline:listFleets",
              "deadline:listJobMembers",
              "deadline:listJobs",
              "deadline:listLicenseEndpoints",
              "deadline:listMeteredProducts",
              "deadline:listMonitors",
              "deadline:listQueueEnvironments",
              "deadline:listQueueFleetAssociations",
              "deadline:listQueueMembers",
              "deadline:listQueues",
              "deadline:listStorageProfiles",
              "deadline:listWorkers",
              "detective:getMembers",
              "detective:listGraphs",
              "detective:listInvitations",
              "detective:listMembers",
              "devicefarm:getAccountSettings",
              "devicefarm:getDevice",
              "devicefarm:getDevicePool",
              "devicefarm:getDevicePoolCompatibility",
              "devicefarm:getJob",
              "devicefarm:getProject",
              "devicefarm:getRemoteAccessSession",
              "devicefarm:getRun",
              "devicefarm:getSuite",
              "devicefarm:getTest",
              "devicefarm:getTestGridProject",
              "devicefarm:getTestGridSession",
              "devicefarm:getUpload",
              "devicefarm:listArtifacts",
              "devicefarm:listDevicePools",
              "devicefarm:listDevices",
              "devicefarm:listJobs",
              "devicefarm:listProjects",
              "devicefarm:listRemoteAccessSessions",
              "devicefarm:listRuns",
              "devicefarm:listSamples",
              "devicefarm:listSuites",
              "devicefarm:listTestGridProjects",
              "devicefarm:listTestGridSessionActions",
              "devicefarm:listTestGridSessionArtifacts",
              "devicefarm:listTestGridSessions",
              "devicefarm:listTests",
              "devicefarm:listUniqueProblems",
              "devicefarm:listUploads",
              "directconnect:describeConnectionLoa",
              "directconnect:describeConnections",
              "directconnect:describeConnectionsOnInterconnect",
              "directconnect:describeCustomerMetadata",
              "directconnect:describeDirectConnectGatewayAssociationProposals",
              "directconnect:describeDirectConnectGatewayAssociations",
              "directconnect:describeDirectConnectGatewayAttachments",
              "directconnect:describeDirectConnectGateways",
              "directconnect:describeHostedConnections",
              "directconnect:describeInterconnectLoa",
              "directconnect:describeInterconnects",
              "directconnect:describeLags",
              "directconnect:describeLoa",
              "directconnect:describeLocations",
              "directconnect:describeRouterConfiguration",
              "directconnect:describeVirtualGateways",
              "directconnect:describeVirtualInterfaces",
              "dlm:getLifecyclePolicies",
              "dlm:getLifecyclePolicy",
              "dms:describeAccountAttributes",
              "dms:describeApplicableIndividualAssessments",
              "dms:describeConnections",
              "dms:describeEndpoints",
              "dms:describeEndpointSettings",
              "dms:describeEndpointTypes",
              "dms:describeEventCategories",
              "dms:describeEvents",
              "dms:describeEventSubscriptions",
              "dms:describeFleetAdvisorCollectors",
              "dms:describeFleetAdvisorDatabases",
              "dms:describeFleetAdvisorLsaAnalysis",
              "dms:describeFleetAdvisorSchemaObjectSummary",
              "dms:describeFleetAdvisorSchemas",
              "dms:describeOrderableReplicationInstances",
              "dms:describePendingMaintenanceActions",
              "dms:describeRefreshSchemasStatus",
              "dms:describeReplicationInstances",
              "dms:describeReplicationInstanceTaskLogs",
              "dms:describeReplicationSubnetGroups",
              "dms:describeReplicationTaskAssessmentResults",
              "dms:describeReplicationTaskAssessmentRuns",
              "dms:describeReplicationTaskIndividualAssessments",
              "dms:describeReplicationTasks",
              "dms:describeSchemas",
              "dms:describeTableStatistics",
              "docdb-elastic:getCluster",
              "docdb-elastic:getClusterSnapshot",
              "docdb-elastic:listClusters",
              "docdb-elastic:listClusterSnapshots",
              "drs:describeJobLogItems",
              "drs:describeJobs",
              "drs:describeLaunchConfigurationTemplates",
              "drs:describeRecoveryInstances",
              "drs:describeRecoverySnapshots",
              "drs:describeReplicationConfigurationTemplates",
              "drs:describeSourceNetworks",
              "drs:describeSourceServers",
              "drs:getLaunchConfiguration",
              "drs:getReplicationConfiguration",
              "drs:listExtensibleSourceServers",
              "drs:listLaunchActions",
              "drs:listStagingAccounts",
              "ds:describeClientAuthenticationSettings",
              "ds:describeConditionalForwarders",
              "ds:describeDirectories",
              "ds:describeDomainControllers",
              "ds:describeEventTopics",
              "ds:describeLDAPSSettings",
              "ds:describeSharedDirectories",
              "ds:describeSnapshots",
              "ds:describeTrusts",
              "ds:getDirectoryLimits",
              "ds:getSnapshotLimits",
              "ds:listIpRoutes",
              "ds:listSchemaExtensions",
              "ds:listTagsForResource",
              "dynamodb:describeBackup",
              "dynamodb:describeContinuousBackups",
              "dynamodb:describeContributorInsights",
              "dynamodb:describeExport",
              "dynamodb:describeGlobalTable",
              "dynamodb:describeImport",
              "dynamodb:describeKinesisStreamingDestination",
              "dynamodb:describeLimits",
              "dynamodb:describeStream",
              "dynamodb:describeTable",
              "dynamodb:describeTimeToLive",
              "dynamodb:listBackups",
              "dynamodb:listContributorInsights",
              "dynamodb:listExports",
              "dynamodb:listGlobalTables",
              "dynamodb:listImports",
              "dynamodb:listStreams",
              "dynamodb:listTables",
              "dynamodb:listTagsOfResource",
              "ec2:describeAccountAttributes",
              "ec2:describeAddresses",
              "ec2:describeAddressesAttribute",
              "ec2:describeAddressTransfers",
              "ec2:describeAggregateIdFormat",
              "ec2:describeAvailabilityZones",
              "ec2:describeBundleTasks",
              "ec2:describeByoipCidrs",
              "ec2:describeCapacityReservationFleets",
              "ec2:describeCapacityReservations",
              "ec2:describeCarrierGateways",
              "ec2:describeClassicLinkInstances",
              "ec2:describeClientVpnAuthorizationRules",
              "ec2:describeClientVpnConnections",
              "ec2:describeClientVpnEndpoints",
              "ec2:describeClientVpnRoutes",
              "ec2:describeClientVpnTargetNetworks",
              "ec2:describeCoipPools",
              "ec2:describeConversionTasks",
              "ec2:describeCustomerGateways",
              "ec2:describeDhcpOptions",
              "ec2:describeEgressOnlyInternetGateways",
              "ec2:describeExportImageTasks",
              "ec2:describeExportTasks",
              "ec2:describeFastLaunchImages",
              "ec2:describeFastSnapshotRestores",
              "ec2:describeFleetHistory",
              "ec2:describeFleetInstances",
              "ec2:describeFleets",
              "ec2:describeFlowLogs",
              "ec2:describeFpgaImageAttribute",
              "ec2:describeFpgaImages",
              "ec2:describeHostReservationOfferings",
              "ec2:describeHostReservations",
              "ec2:describeHosts",
              "ec2:describeIamInstanceProfileAssociations",
              "ec2:describeIdentityIdFormat",
              "ec2:describeIdFormat",
              "ec2:describeImageAttribute",
              "ec2:describeImages",
              "ec2:describeImportImageTasks",
              "ec2:describeImportSnapshotTasks",
              "ec2:describeInstanceAttribute",
              "ec2:describeInstanceCreditSpecifications",
              "ec2:describeInstanceEventNotificationAttributes",
              "ec2:describeInstanceEventWindows",
              "ec2:describeInstances",
              "ec2:describeInstanceStatus",
              "ec2:describeInstanceTypeOfferings",
              "ec2:describeInstanceTypes",
              "ec2:describeInternetGateways",
              "ec2:describeIpamPools",
              "ec2:describeIpams",
              "ec2:describeIpamScopes",
              "ec2:describeIpv6Pools",
              "ec2:describeKeyPairs",
              "ec2:describeLaunchTemplates",
              "ec2:describeLaunchTemplateVersions",
              "ec2:describeLocalGatewayRouteTables",
              "ec2:describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
              "ec2:describeLocalGatewayRouteTableVpcAssociations",
              "ec2:describeLocalGateways",
              "ec2:describeLocalGatewayVirtualInterfaceGroups",
              "ec2:describeLocalGatewayVirtualInterfaces",
              "ec2:describeManagedPrefixLists",
              "ec2:describeMovingAddresses",
              "ec2:describeNatGateways",
              "ec2:describeNetworkAcls",
              "ec2:describeNetworkInterfaceAttribute",
              "ec2:describeNetworkInterfaces",
              "ec2:describePlacementGroups",
              "ec2:describePrefixLists",
              "ec2:describePrincipalIdFormat",
              "ec2:describePublicIpv4Pools",
              "ec2:describeRegions",
              "ec2:describeReservedInstances",
              "ec2:describeReservedInstancesListings",
              "ec2:describeReservedInstancesModifications",
              "ec2:describeReservedInstancesOfferings",
              "ec2:describeRouteTables",
              "ec2:describeScheduledInstanceAvailability",
              "ec2:describeScheduledInstances",
              "ec2:describeSecurityGroupReferences",
              "ec2:describeSecurityGroupRules",
              "ec2:describeSecurityGroups",
              "ec2:describeSnapshotAttribute",
              "ec2:describeSnapshots",
              "ec2:describeSnapshotTierStatus",
              "ec2:describeSpotDatafeedSubscription",
              "ec2:describeSpotFleetInstances",
              "ec2:describeSpotFleetRequestHistory",
              "ec2:describeSpotFleetRequests",
              "ec2:describeSpotInstanceRequests",
              "ec2:describeSpotPriceHistory",
              "ec2:describeStaleSecurityGroups",
              "ec2:describeStoreImageTasks",
              "ec2:describeSubnets",
              "ec2:describeTags",
              "ec2:describeTrafficMirrorFilters",
              "ec2:describeTrafficMirrorSessions",
              "ec2:describeTrafficMirrorTargets",
              "ec2:describeTransitGatewayAttachments",
              "ec2:describeTransitGatewayConnectPeers",
              "ec2:describeTransitGatewayMulticastDomains",
              "ec2:describeTransitGatewayPeeringAttachments",
              "ec2:describeTransitGatewayPolicyTables",
              "ec2:describeTransitGatewayRouteTableAnnouncements",
              "ec2:describeTransitGatewayRouteTables",
              "ec2:describeTransitGateways",
              "ec2:describeTransitGatewayVpcAttachments",
              "ec2:describeVerifiedAccessEndpoints",
              "ec2:describeVerifiedAccessGroups",
              "ec2:describeVerifiedAccessInstances",
              "ec2:describeVerifiedAccessTrustProviders",
              "ec2:describeVolumeAttribute",
              "ec2:describeVolumes",
              "ec2:describeVolumesModifications",
              "ec2:describeVolumeStatus",
              "ec2:describeVpcAttribute",
              "ec2:describeVpcClassicLink",
              "ec2:describeVpcClassicLinkDnsSupport",
              "ec2:describeVpcEndpointConnectionNotifications",
              "ec2:describeVpcEndpointConnections",
              "ec2:describeVpcEndpoints",
              "ec2:describeVpcEndpointServiceConfigurations",
              "ec2:describeVpcEndpointServicePermissions",
              "ec2:describeVpcEndpointServices",
              "ec2:describeVpcPeeringConnections",
              "ec2:describeVpcs",
              "ec2:describeVpnConnections",
              "ec2:describeVpnGateways",
              "ec2:getAssociatedIpv6PoolCidrs",
              "ec2:getCapacityReservationUsage",
              "ec2:getSubnetCidrReservations",
              "ec2:getCoipPoolUsage",
              "ec2:getConsoleOutput",
              "ec2:getConsoleScreenshot",
              "ec2:getDefaultCreditSpecification",
              "ec2:getEbsDefaultKmsKeyId",
              "ec2:getEbsEncryptionByDefault",
              "ec2:getGroupsForCapacityReservation",
              "ec2:getHostReservationPurchasePreview",
              "ec2:getInstanceTypesFromInstanceRequirements",
              "ec2:getIpamAddressHistory",
              "ec2:getIpamPoolAllocations",
              "ec2:getIpamPoolCidrs",
              "ec2:getIpamResourceCidrs",
              "ec2:getLaunchTemplateData",
              "ec2:getManagedPrefixListAssociations",
              "ec2:getManagedPrefixListEntries",
              "ec2:getReservedInstancesExchangeQuote",
              "ec2:getSerialConsoleAccessStatus",
              "ec2:getSpotPlacementScores",
              "ec2:getTransitGatewayMulticastDomainAssociations",
              "ec2:getTransitGatewayPrefixListReferences",
              "ec2:getVerifiedAccessEndpointPolicy",
              "ec2:getVerifiedAccessGroupPolicy",
              "ec2:listImagesInRecycleBin",
              "ec2:listSnapshotsInRecycleBin",
              "ec2:searchLocalGatewayRoutes",
              "ec2:searchTransitGatewayMulticastGroups",
              "ec2:searchTransitGatewayRoutes",
              "ecr-public:describeImages",
              "ecr-public:describeImageTags",
              "ecr-public:describeRegistries",
              "ecr-public:describeRepositories",
              "ecr-public:getRegistryCatalogData",
              "ecr-public:getRepositoryCatalogData",
              "ecr-public:getRepositoryPolicy",
              "ecr-public:listTagsForResource",
              "ecr:batchCheckLayerAvailability",
              "ecr:batchGetRepositoryScanningConfiguration",
              "ecr:describeImages",
              "ecr:describeImageReplicationStatus",
              "ecr:describeImageScanFindings",
              "ecr:describePullThroughCacheRules",
              "ecr:describeRegistry",
              "ecr:describeRepositories",
              "ecr:getLifecyclePolicy",
              "ecr:getLifecyclePolicyPreview",
              "ecr:getRegistryPolicy",
              "ecr:getRegistryScanningConfiguration",
              "ecr:getRepositoryPolicy",
              "ecr:listImages",
              "ecr:listTagsForResource",
              "ecs:describeCapacityProviders",
              "ecs:describeClusters",
              "ecs:describeContainerInstances",
              "ecs:describeServices",
              "ecs:describeTaskDefinition",
              "ecs:describeTasks",
              "ecs:describeTaskSets",
              "ecs:getTaskProtection",
              "ecs:listAccountSettings",
              "ecs:listAttributes",
              "ecs:listClusters",
              "ecs:listContainerInstances",
              "ecs:listServices",
              "ecs:listServicesByNamespace",
              "ecs:listTagsForResource",
              "ecs:listTaskDefinitionFamilies",
              "ecs:listTaskDefinitions",
              "ecs:listTasks",
              "eks:describeAccessEntry",
              "eks:describeAddon",
              "eks:describeAddonConfiguration",
              "eks:describeAddonVersions",
              "eks:describeCluster",
              "eks:describeEksAnywhereSubscription",
              "eks:describeFargateProfile",
              "eks:describeIdentityProviderConfig",
              "eks:describeNodegroup",
              "eks:describePodIdentityAssociation",
              "eks:listPodIdentityAssociations",
              "eks:describeUpdate",
              "eks:listAccessEntries",
              "eks:listAccessPolicies",
              "eks:listAddons",
              "eks:listAssociatedAccessPolicies",
              "eks:listClusters",
              "eks:listEksAnywhereSubscriptions",
              "eks:listFargateProfiles",
              "eks:listIdentityProviderConfigs",
              "eks:listNodegroups",
              "eks:listUpdates",
              "elasticache:describeCacheClusters",
              "elasticache:describeCacheEngineVersions",
              "elasticache:describeCacheParameterGroups",
              "elasticache:describeCacheParameters",
              "elasticache:describeCacheSecurityGroups",
              "elasticache:describeCacheSubnetGroups",
              "elasticache:describeEngineDefaultParameters",
              "elasticache:describeEvents",
              "elasticache:describeGlobalReplicationGroups",
              "elasticache:describeReplicationGroups",
              "elasticache:describeReservedCacheNodes",
              "elasticache:describeReservedCacheNodesOfferings",
              "elasticache:describeServerlessCaches",
              "elasticache:describeServerlessCacheSnapshots",
              "elasticache:describeServiceUpdates",
              "elasticache:describeSnapshots",
              "elasticache:describeUpdateActions",
              "elasticache:describeUserGroups",
              "elasticache:describeUsers",
              "elasticache:listAllowedNodeTypeModifications",
              "elasticache:listTagsForResource",
              "elasticbeanstalk:checkDNSAvailability",
              "elasticbeanstalk:describeAccountAttributes",
              "elasticbeanstalk:describeApplicationVersions",
              "elasticbeanstalk:describeApplications",
              "elasticbeanstalk:describeConfigurationOptions",
              "elasticbeanstalk:describeEnvironmentHealth",
              "elasticbeanstalk:describeEnvironmentManagedActionHistory",
              "elasticbeanstalk:describeEnvironmentManagedActions",
              "elasticbeanstalk:describeEnvironmentResources",
              "elasticbeanstalk:describeEnvironments",
              "elasticbeanstalk:describeEvents",
              "elasticbeanstalk:describeInstancesHealth",
              "elasticbeanstalk:describePlatformVersion",
              "elasticbeanstalk:listAvailableSolutionStacks",
              "elasticbeanstalk:listPlatformBranches",
              "elasticbeanstalk:listPlatformVersions",
              "elasticbeanstalk:validateConfigurationSettings",
              "elasticfilesystem:describeAccessPoints",
              "elasticfilesystem:describeFileSystemPolicy",
              "elasticfilesystem:describeFileSystems",
              "elasticfilesystem:describeLifecycleConfiguration",
              "elasticfilesystem:describeMountTargets",
              "elasticfilesystem:describeMountTargetSecurityGroups",
              "elasticfilesystem:describeTags",
              "elasticfilesystem:listTagsForResource",
              "elasticloadbalancing:describeAccountLimits",
              "elasticloadbalancing:describeInstanceHealth",
              "elasticloadbalancing:describeListenerCertificates",
              "elasticloadbalancing:describeListeners",
              "elasticloadbalancing:describeLoadBalancerAttributes",
              "elasticloadbalancing:describeLoadBalancerPolicies",
              "elasticloadbalancing:describeLoadBalancerPolicyTypes",
              "elasticloadbalancing:describeLoadBalancers",
              "elasticloadbalancing:describeTrustStores",
              "elasticloadbalancing:describeTrustStoreAssociations",
              "elasticloadbalancing:describeTrustStoreRevocations",
              "elasticloadbalancing:describeRules",
              "elasticloadbalancing:describeSSLPolicies",
              "elasticloadbalancing:describeTags",
              "elasticloadbalancing:describeTargetGroupAttributes",
              "elasticloadbalancing:describeTargetGroups",
              "elasticloadbalancing:describeTargetHealth",
              "elasticmapreduce:describeCluster",
              "elasticmapreduce:describeNotebookExecution",
              "elasticmapreduce:describeReleaseLabel",
              "elasticmapreduce:describeSecurityConfiguration",
              "elasticmapreduce:describeStep",
              "elasticmapreduce:describeStudio",
              "elasticmapreduce:getAutoTerminationPolicy",
              "elasticmapreduce:getBlockPublicAccessConfiguration",
              "elasticmapreduce:getManagedScalingPolicy",
              "elasticmapreduce:getStudioSessionMapping",
              "elasticmapreduce:listBootstrapActions",
              "elasticmapreduce:listClusters",
              "elasticmapreduce:listInstanceFleets",
              "elasticmapreduce:listInstanceGroups",
              "elasticmapreduce:listInstances",
              "elasticmapreduce:listNotebookExecutions",
              "elasticmapreduce:listReleaseLabels",
              "elasticmapreduce:listSecurityConfigurations",
              "elasticmapreduce:listSteps",
              "elasticmapreduce:listStudios",
              "elasticmapreduce:listStudioSessionMappings",
              "elastictranscoder:listJobsByPipeline",
              "elastictranscoder:listJobsByStatus",
              "elastictranscoder:listPipelines",
              "elastictranscoder:listPresets",
              "elastictranscoder:readPipeline",
              "elastictranscoder:readPreset",
              "emr-containers:describeJobRun",
              "emr-containers:describeJobTemplate",
              "emr-containers:describeManagedEndpoint",
              "emr-containers:describeVirtualCluster",
              "emr-containers:listJobRuns",
              "emr-containers:listJobTemplates",
              "emr-containers:listManagedEndpoints",
              "emr-containers:listVirtualClusters",
              "emr-serverless:getApplication",
              "emr-serverless:getJobRun",
              "emr-serverless:listApplications",
              "es:describeDomain",
              "es:describeDomainAutoTunes",
              "es:describeDomainChangeProgress",
              "es:describeDomainConfig",
              "es:describeDomains",
              "es:describeDryRunProgress",
              "es:describeElasticsearchDomain",
              "es:describeElasticsearchDomainConfig",
              "es:describeElasticsearchDomains",
              "es:describeInboundConnections",
              "es:describeInstanceTypeLimits",
              "es:describeOutboundConnections",
              "es:describePackages",
              "es:describeReservedInstanceOfferings",
              "es:describeReservedInstances",
              "es:describeVpcEndpoints",
              "es:getCompatibleVersions",
              "es:getPackageVersionHistory",
              "es:getUpgradeHistory",
              "es:getUpgradeStatus",
              "es:listDomainNames",
              "es:listDomainsForPackage",
              "es:listInstanceTypeDetails",
              "es:listPackagesForDomain",
              "es:listScheduledActions",
              "es:listTags",
              "es:listVersions",
              "es:listVpcEndpointAccess",
              "es:listVpcEndpoints",
              "es:listVpcEndpointsForDomain",
              "evidently:getExperiment",
              "evidently:getFeature",
              "evidently:getLaunch",
              "evidently:getProject",
              "evidently:getSegment",
              "evidently:listExperiments",
              "evidently:listFeatures",
              "evidently:listLaunches",
              "evidently:listProjects",
              "evidently:listSegments",
              "evidently:listSegmentReferences",
              "events:describeApiDestination",
              "events:describeArchive",
              "events:describeConnection",
              "events:describeEndpoint",
              "events:describeEventBus",
              "events:describeEventSource",
              "events:describePartnerEventSource",
              "events:describeReplay",
              "events:describeRule",
              "events:listArchives",
              "events:listApiDestinations",
              "events:listConnections",
              "events:listEndpoints",
              "events:listEventBuses",
              "events:listEventSources",
              "events:listPartnerEventSourceAccounts",
              "events:listPartnerEventSources",
              "events:listReplays",
              "events:listRuleNamesByTarget",
              "events:listRules",
              "events:listTargetsByRule",
              "events:testEventPattern",
              "firehose:describeDeliveryStream",
              "firehose:listDeliveryStreams",
              "fms:getAdminAccount",
              "fms:getComplianceDetail",
              "fms:getNotificationChannel",
              "fms:getPolicy",
              "fms:getProtectionStatus",
              "fms:listComplianceStatus",
              "fms:listMemberAccounts",
              "fms:listPolicies",
              "forecast:describeDataset",
              "forecast:describeDatasetGroup",
              "forecast:describeDatasetImportJob",
              "forecast:describeForecast",
              "forecast:describeForecastExportJob",
              "forecast:describePredictor",
              "forecast:getAccuracyMetrics",
              "forecast:listDatasetGroups",
              "forecast:listDatasetImportJobs",
              "forecast:listDatasets",
              "forecast:listForecastExportJobs",
              "forecast:listForecasts",
              "forecast:listPredictors",
              "freetier:getFreeTierUsage",
              "fsx:describeBackups",
              "fsx:describeDataRepositoryAssociations",
              "fsx:describeDataRepositoryTasks",
              "fsx:describeFileCaches",
              "fsx:describeFileSystems",
              "fsx:describeSnapshots",
              "fsx:describeStorageVirtualMachines",
              "fsx:describeVolumes",
              "fsx:listTagsForResource",
              "gamelift:describeAlias",
              "gamelift:describeBuild",
              "gamelift:describeEC2InstanceLimits",
              "gamelift:describeFleetAttributes",
              "gamelift:describeFleetCapacity",
              "gamelift:describeFleetEvents",
              "gamelift:describeFleetLocationAttributes",
              "gamelift:describeFleetLocationCapacity",
              "gamelift:describeFleetLocationUtilization",
              "gamelift:describeFleetPortSettings",
              "gamelift:describeFleetUtilization",
              "gamelift:describeGameServer",
              "gamelift:describeGameServerGroup",
              "gamelift:describeGameSessionDetails",
              "gamelift:describeGameSessionPlacement",
              "gamelift:describeGameSessionQueues",
              "gamelift:describeGameSessions",
              "gamelift:describeInstances",
              "gamelift:describeMatchmaking",
              "gamelift:describeMatchmakingConfigurations",
              "gamelift:describeMatchmakingRuleSets",
              "gamelift:describePlayerSessions",
              "gamelift:describeRuntimeConfiguration",
              "gamelift:describeScalingPolicies",
              "gamelift:describeScript",
              "gamelift:listAliases",
              "gamelift:listBuilds",
              "gamelift:listFleets",
              "gamelift:listGameServerGroups",
              "gamelift:listGameServers",
              "gamelift:listScripts",
              "gamelift:resolveAlias",
              "glacier:describeJob",
              "glacier:describeVault",
              "glacier:getDataRetrievalPolicy",
              "glacier:getVaultAccessPolicy",
              "glacier:getVaultLock",
              "glacier:getVaultNotifications",
              "glacier:listJobs",
              "glacier:listTagsForVault",
              "glacier:listVaults",
              "globalaccelerator:describeAccelerator",
              "globalaccelerator:describeAcceleratorAttributes",
              "globalaccelerator:describeEndpointGroup",
              "globalaccelerator:describeListener",
              "globalaccelerator:listAccelerators",
              "globalaccelerator:listEndpointGroups",
              "globalaccelerator:listListeners",
              "glue:batchGetBlueprints",
              "glue:batchGetCrawlers",
              "glue:batchGetDevEndpoints",
              "glue:batchGetJobs",
              "glue:batchGetPartition",
              "glue:batchGetTriggers",
              "glue:batchGetWorkflows",
              "glue:checkSchemaVersionValidity",
              "glue:getBlueprint",
              "glue:getBlueprintRun",
              "glue:getBlueprintRuns",
              "glue:getCatalogImportStatus",
              "glue:getClassifier",
              "glue:getClassifiers",
              "glue:getColumnStatisticsForPartition",
              "glue:getColumnStatisticsForTable",
              "glue:getCrawler",
              "glue:getCrawlerMetrics",
              "glue:getCrawlers",
              "glue:getCustomEntityType",
              "glue:getDatabase",
              "glue:getDatabases",
              "glue:getDataflowGraph",
              "glue:getDataQualityResult",
              "glue:getDataQualityRuleRecommendationRun",
              "glue:getDataQualityRuleset",
              "glue:getDataQualityRulesetEvaluationRun",
              "glue:getDevEndpoint",
              "glue:getDevEndpoints",
              "glue:getJob",
              "glue:getJobRun",
              "glue:getJobRuns",
              "glue:getJobs",
              "glue:getMapping",
              "glue:getMLTaskRun",
              "glue:getMLTaskRuns",
              "glue:getMLTransform",
              "glue:getMLTransforms",
              "glue:getPartition",
              "glue:getPartitionIndexes",
              "glue:getPartitions",
              "glue:getRegistry",
              "glue:getResourcePolicies",
              "glue:getResourcePolicy",
              "glue:getSchema",
              "glue:getSchemaByDefinition",
              "glue:getSchemaVersion",
              "glue:getSchemaVersionsDiff",
              "glue:getSession",
              "glue:getStatement",
              "glue:getTable",
              "glue:getTables",
              "glue:getTableVersions",
              "glue:getTrigger",
              "glue:getTriggers",
              "glue:getUserDefinedFunction",
              "glue:getUserDefinedFunctions",
              "glue:getWorkflow",
              "glue:getWorkflowRun",
              "glue:getWorkflowRuns",
              "glue:listCrawlers",
              "glue:listCrawls",
              "glue:listDataQualityResults",
              "glue:listDataQualityRuleRecommendationRuns",
              "glue:listDataQualityRulesetEvaluationRuns",
              "glue:listDataQualityRulesets",
              "glue:listDevEndpoints",
              "glue:listMLTransforms",
              "glue:listRegistries",
              "glue:listSchemas",
              "glue:listSchemaVersions",
              "glue:listSessions",
              "glue:listStatements",
              "glue:querySchemaVersionMetadata",
              "grafana:describeWorkspace",
              "grafana:describeWorkspaceAuthentication",
              "grafana:listPermissions",
              "grafana:listVersions",
              "grafana:listWorkspaces",
              "greengrass:getConnectivityInfo",
              "greengrass:getCoreDefinition",
              "greengrass:getCoreDefinitionVersion",
              "greengrass:getDeploymentStatus",
              "greengrass:getDeviceDefinition",
              "greengrass:getDeviceDefinitionVersion",
              "greengrass:getFunctionDefinition",
              "greengrass:getFunctionDefinitionVersion",
              "greengrass:getGroup",
              "greengrass:getGroupCertificateAuthority",
              "greengrass:getGroupVersion",
              "greengrass:getLoggerDefinition",
              "greengrass:getLoggerDefinitionVersion",
              "greengrass:getResourceDefinitionVersion",
              "greengrass:getServiceRoleForAccount",
              "greengrass:getSubscriptionDefinition",
              "greengrass:getSubscriptionDefinitionVersion",
              "greengrass:listCoreDefinitions",
              "greengrass:listCoreDefinitionVersions",
              "greengrass:listDeployments",
              "greengrass:listDeviceDefinitions",
              "greengrass:listDeviceDefinitionVersions",
              "greengrass:listFunctionDefinitions",
              "greengrass:listFunctionDefinitionVersions",
              "greengrass:listGroups",
              "greengrass:listGroupVersions",
              "greengrass:listLoggerDefinitions",
              "greengrass:listLoggerDefinitionVersions",
              "greengrass:listResourceDefinitions",
              "greengrass:listResourceDefinitionVersions",
              "greengrass:listSubscriptionDefinitions",
              "greengrass:listSubscriptionDefinitionVersions",
              "guardduty:getDetector",
              "guardduty:getFindings",
              "guardduty:getFindingsStatistics",
              "guardduty:getInvitationsCount",
              "guardduty:getIPSet",
              "guardduty:getMasterAccount",
              "guardduty:getMembers",
              "guardduty:getThreatIntelSet",
              "guardduty:listDetectors",
              "guardduty:listFindings",
              "guardduty:listInvitations",
              "guardduty:listIPSets",
              "guardduty:listMembers",
              "guardduty:listThreatIntelSets",
              "health:describeAffectedAccountsForOrganization",
              "health:describeAffectedEntities",
              "health:describeAffectedEntitiesForOrganization",
              "health:describeEntityAggregates",
              "health:describeEntityAggregatesForOrganization",
              "health:describeEventAggregates",
              "health:describeEventDetails",
              "health:describeEventDetailsForOrganization",
              "health:describeEvents",
              "health:describeEventsForOrganization",
              "health:describeEventTypes",
              "health:describeHealthServiceStatusForOrganization",
              "iam:getAccessKeyLastUsed",
              "iam:getAccountAuthorizationDetails",
              "iam:getAccountPasswordPolicy",
              "iam:getAccountSummary",
              "iam:getContextKeysForCustomPolicy",
              "iam:getContextKeysForPrincipalPolicy",
              "iam:getCredentialReport",
              "iam:getGroup",
              "iam:getGroupPolicy",
              "iam:getInstanceProfile",
              "iam:getLoginProfile",
              "iam:getOpenIDConnectProvider",
              "iam:getPolicy",
              "iam:getPolicyVersion",
              "iam:getRole",
              "iam:getRolePolicy",
              "iam:getSAMLProvider",
              "iam:getServerCertificate",
              "iam:getServiceLinkedRoleDeletionStatus",
              "iam:getSSHPublicKey",
              "iam:getUser",
              "iam:getUserPolicy",
              "iam:listAccessKeys",
              "iam:listAccountAliases",
              "iam:listAttachedGroupPolicies",
              "iam:listAttachedRolePolicies",
              "iam:listAttachedUserPolicies",
              "iam:listEntitiesForPolicy",
              "iam:listGroupPolicies",
              "iam:listGroups",
              "iam:listGroupsForUser",
              "iam:listInstanceProfiles",
              "iam:listInstanceProfilesForRole",
              "iam:listMFADevices",
              "iam:listOpenIDConnectProviders",
              "iam:listPolicies",
              "iam:listPolicyVersions",
              "iam:listRolePolicies",
              "iam:listRoles",
              "iam:listSAMLProviders",
              "iam:listServerCertificates",
              "iam:listSigningCertificates",
              "iam:listSSHPublicKeys",
              "iam:listUserPolicies",
              "iam:listUsers",
              "iam:listVirtualMFADevices",
              "iam:simulateCustomPolicy",
              "iam:simulatePrincipalPolicy",
              "imagebuilder:getComponent",
              "imagebuilder:getComponentPolicy",
              "imagebuilder:getContainerRecipe",
              "imagebuilder:getDistributionConfiguration",
              "imagebuilder:getImage",
              "imagebuilder:getImagePipeline",
              "imagebuilder:getImagePolicy",
              "imagebuilder:getImageRecipe",
              "imagebuilder:getImageRecipePolicy",
              "imagebuilder:getInfrastructureConfiguration",
              "imagebuilder:getLifecycleExecution",
              "imagebuilder:getLifecyclePolicy",
              "imagebuilder:getWorkflow",
              "imagebuilder:getWorkflowExecution",
              "imagebuilder:getWorkflowStepExecution",
              "imagebuilder:listComponentBuildVersions",
              "imagebuilder:listComponents",
              "imagebuilder:listContainerRecipes",
              "imagebuilder:listDistributionConfigurations",
              "imagebuilder:listImageBuildVersions",
              "imagebuilder:listImagePipelineImages",
              "imagebuilder:listImagePipelines",
              "imagebuilder:listImageRecipes",
              "imagebuilder:listImages",
              "imagebuilder:listImageScanFindingAggregations",
              "imagebuilder:listInfrastructureConfigurations",
              "imagebuilder:listLifecycleExecutions",
              "imagebuilder:listLifecycleExecutionResources",
              "imagebuilder:listLifecyclePolicies",
              "imagebuilder:listWorkflowBuildVersions",
              "imagebuilder:listWorkflowExecutions",
              "imagebuilder:listWorkflows",
              "imagebuilder:listWorkflowStepExecutions",
              "imagebuilder:listTagsForResource",
              "inspector:describeAssessmentRuns",
              "inspector:describeAssessmentTargets",
              "inspector:describeAssessmentTemplates",
              "inspector:describeCrossAccountAccessRole",
              "inspector:describeResourceGroups",
              "inspector:describeRulesPackages",
              "inspector:getTelemetryMetadata",
              "inspector:listAssessmentRunAgents",
              "inspector:listAssessmentRuns",
              "inspector:listAssessmentTargets",
              "inspector:listAssessmentTemplates",
              "inspector:listEventSubscriptions",
              "inspector:listRulesPackages",
              "inspector:listTagsForResource",
              "inspector2:batchGetAccountStatus",
              "inspector2:batchGetFreeTrialInfo",
              "inspector2:describeOrganizationConfiguration",
              "inspector2:getConfiguration",
              "inspector2:getEc2DeepInspectionConfiguration",
              "inspector2:getDelegatedAdminAccount",
              "inspector2:getMember",
              "inspector2:getSbomExport",
              "inspector2:listCisScanConfigurations",
              "inspector2:listCisScanResultsAggregatedByChecks",
              "inspector2:listCisScanResultsAggregatedByTargetResource",
              "inspector2:listCisScans",
              "inspector2:listCoverage",
              "inspector2:listDelegatedAdminAccounts",
              "inspector2:listFilters",
              "inspector2:listFindings",
              "inspector2:listMembers",
              "inspector2:listUsageTotals",
              "inspector-scan:scanSbom",
              "internetmonitor:getMonitor",
              "internetmonitor:listMonitors",
              "internetmonitor:getHealthEvent",
              "internetmonitor:listHealthEvents",
              "iot:describeAuthorizer",
              "iot:describeCACertificate",
              "iot:describeCertificate",
              "iot:describeDefaultAuthorizer",
              "iot:describeDomainConfiguration",
              "iot:describeEndpoint",
              "iot:describeIndex",
              "iot:describeJobExecution",
              "iot:describeThing",
              "iot:describeThingGroup",
              "iot:describeTunnel",
              "iot:getEffectivePolicies",
              "iot:getIndexingConfiguration",
              "iot:getLoggingOptions",
              "iot:getPolicy",
              "iot:getPolicyVersion",
              "iot:getTopicRule",
              "iot:getV2LoggingOptions",
              "iot:listAttachedPolicies",
              "iot:listAuthorizers",
              "iot:listCACertificates",
              "iot:listCertificates",
              "iot:listCertificatesByCA",
              "iot:listDomainConfigurations",
              "iot:listJobExecutionsForJob",
              "iot:listJobExecutionsForThing",
              "iot:listJobs",
              "iot:listNamedShadowsForThing",
              "iot:listOutgoingCertificates",
              "iot:listPackages",
              "iot:listPackageVersions",
              "iot:listPolicies",
              "iot:listPolicyPrincipals",
              "iot:listPolicyVersions",
              "iot:listPrincipalPolicies",
              "iot:listPrincipalThings",
              "iot:listRoleAliases",
              "iot:listTargetsForPolicy",
              "iot:listThingGroups",
              "iot:listThingGroupsForThing",
              "iot:listThingPrincipals",
              "iot:listThingRegistrationTasks",
              "iot:listThings",
              "iot:listThingsInThingGroup",
              "iot:listThingTypes",
              "iot:listTopicRules",
              "iot:listTunnels",
              "iot:listV2LoggingLevels",
              "iotevents:describeDetector",
              "iotevents:describeDetectorModel",
              "iotevents:describeInput",
              "iotevents:describeLoggingOptions",
              "iotevents:listDetectorModels",
              "iotevents:listDetectorModelVersions",
              "iotevents:listDetectors",
              "iotevents:listInputs",
              "iotfleetwise:getCampaign",
              "iotfleetwise:getDecoderManifest",
              "iotfleetwise:getFleet",
              "iotfleetwise:getModelManifest",
              "iotfleetwise:getSignalCatalog",
              "iotfleetwise:getVehicle",
              "iotfleetwise:getVehicleStatus",
              "iotfleetwise:listCampaigns",
              "iotfleetwise:listDecoderManifests",
              "iotfleetwise:listDecoderManifestNetworkInterfaces",
              "iotfleetwise:listDecoderManifestSignals",
              "iotfleetwise:listFleets",
              "iotfleetwise:listFleetsForVehicle",
              "iotfleetwise:listModelManifests",
              "iotfleetwise:listModelManifestNodes",
              "iotfleetwise:listSignalCatalogs",
              "iotfleetwise:listSignalCatalogNodes",
              "iotfleetwise:listVehicles",
              "iotsitewise:describeAccessPolicy",
              "iotsitewise:describeAsset",
              "iotsitewise:describeAssetModel",
              "iotsitewise:describeAssetProperty",
              "iotsitewise:describeDashboard",
              "iotsitewise:describeGateway",
              "iotsitewise:describeGatewayCapabilityConfiguration",
              "iotsitewise:describeLoggingOptions",
              "iotsitewise:describePortal",
              "iotsitewise:describeProject",
              "iotsitewise:listAccessPolicies",
              "iotsitewise:listAssetModels",
              "iotsitewise:listAssets",
              "iotsitewise:listAssociatedAssets",
              "iotsitewise:listDashboards",
              "iotsitewise:listGateways",
              "iotsitewise:listPortals",
              "iotsitewise:listProjectAssets",
              "iotsitewise:listProjects",
              "iottwinmaker:getComponentType",
              "iottwinmaker:getEntity",
              "iottwinmaker:getPricingPlan",
              "iottwinmaker:getScene",
              "iottwinmaker:getWorkspace",
              "iottwinmaker:listComponentTypes",
              "iottwinmaker:listEntities",
              "iottwinmaker:listScenes",
              "iottwinmaker:getSyncJob",
              "iottwinmaker:listSyncJobs",
              "iottwinmaker:listSyncResources",
              "iottwinmaker:listWorkspaces",
              "iotwireless:getDestination",
              "iotwireless:getDeviceProfile",
              "iotwireless:getPartnerAccount",
              "iotwireless:getServiceEndpoint",
              "iotwireless:getServiceProfile",
              "iotwireless:getWirelessDevice",
              "iotwireless:getWirelessDeviceStatistics",
              "iotwireless:getWirelessGateway",
              "iotwireless:getWirelessGatewayCertificate",
              "iotwireless:getWirelessGatewayFirmwareInformation",
              "iotwireless:getWirelessGatewayStatistics",
              "iotwireless:getWirelessGatewayTask",
              "iotwireless:getWirelessGatewayTaskDefinition",
              "iotwireless:listDestinations",
              "iotwireless:listDeviceProfiles",
              "iotwireless:listPartnerAccounts",
              "iotwireless:listServiceProfiles",
              "iotwireless:listTagsForResource",
              "iotwireless:listWirelessDevices",
              "iotwireless:listWirelessGateways",
              "iotwireless:listWirelessGatewayTaskDefinitions",
              "ivs:getChannel",
              "ivs:getRecordingConfiguration",
              "ivs:getStream",
              "ivs:getStreamSession",
              "ivs:listChannels",
              "ivs:listPlaybackKeyPairs",
              "ivs:listRecordingConfigurations",
              "ivs:listStreamKeys",
              "ivs:listStreams",
              "ivs:listStreamSessions",
              "kafka:describeCluster",
              "kafka:describeClusterOperation",
              "kafka:describeClusterOperationV2",
              "kafka:describeClusterV2",
              "kafka:describeConfiguration",
              "kafka:describeConfigurationRevision",
              "kafka:describeReplicator",
              "kafka:describeVpcConnection",
              "kafka:getBootstrapBrokers",
              "kafka:getClusterPolicy",
              "kafka:listConfigurations",
              "kafka:listConfigurationRevisions",
              "kafka:listClientVpcConnections",
              "kafka:listClusterOperations",
              "kafka:listClusterOperationsV2",
              "kafka:listClusters",
              "kafka:listClustersV2",
              "kafka:listNodes",
              "kafka:listReplicators",
              "kafka:listScramSecrets",
              "kafka:listVpcConnections",
              "kafkaconnect:describeConnector",
              "kafkaconnect:describeCustomPlugin",
              "kafkaconnect:describeWorkerConfiguration",
              "kafkaconnect:listConnectors",
              "kafkaconnect:listCustomPlugins",
              "kafkaconnect:listWorkerConfigurations",
              "kendra:describeDataSource",
              "kendra:describeFaq",
              "kendra:describeIndex",
              "kendra:listDataSources",
              "kendra:listFaqs",
              "kendra:listIndices",
              "kinesis:describeStream",
              "kinesis:describeStreamConsumer",
              "kinesis:describeStreamSummary",
              "kinesis:listShards",
              "kinesis:listStreams",
              "kinesis:listStreamConsumers",
              "kinesis:listTagsForStream",
              "kinesisanalytics:describeApplication",
              "kinesisanalytics:describeApplicationSnapshot",
              "kinesisanalytics:listApplications",
              "kinesisanalytics:listApplicationSnapshots",
              "kinesisvideo:describeImageGenerationConfiguration",
              "kinesisvideo:describeNotificationConfiguration",
              "kinesisvideo:describeSignalingChannel",
              "kinesisvideo:describeStream",
              "kinesisvideo:getDataEndpoint",
              "kinesisvideo:getIceServerConfig",
              "kinesisvideo:getSignalingChannelEndpoint",
              "kinesisvideo:listSignalingChannels",
              "kinesisvideo:listStreams",
              "kms:describeKey",
              "kms:getKeyPolicy",
              "kms:getKeyRotationStatus",
              "kms:listAliases",
              "kms:listGrants",
              "kms:listKeyPolicies",
              "kms:listKeys",
              "kms:listResourceTags",
              "kms:listRetirableGrants",
              "lambda:getAccountSettings",
              "lambda:getAlias",
              "lambda:getCodeSigningConfig",
              "lambda:getEventSourceMapping",
              "lambda:getFunction",
              "lambda:getFunctionCodeSigningConfig",
              "lambda:getFunctionConcurrency",
              "lambda:getFunctionConfiguration",
              "lambda:getFunctionEventInvokeConfig",
              "lambda:getFunctionUrlConfig",
              "lambda:getLayerVersion",
              "lambda:getLayerVersionPolicy",
              "lambda:getPolicy",
              "lambda:getProvisionedConcurrencyConfig",
              "lambda:getRuntimeManagementConfig",
              "lambda:listAliases",
              "lambda:listCodeSigningConfigs",
              "lambda:listEventSourceMappings",
              "lambda:listFunctionEventInvokeConfigs",
              "lambda:listFunctions",
              "lambda:listFunctionsByCodeSigningConfig",
              "lambda:listFunctionUrlConfigs",
              "lambda:listLayers",
              "lambda:listLayerVersions",
              "lambda:listProvisionedConcurrencyConfigs",
              "lambda:listVersionsByFunction",
              "launchwizard:describeProvisionedApp",
              "launchwizard:describeProvisioningEvents",
              "launchwizard:listProvisionedApps",
              "lex:describeBot",
              "lex:describeBotAlias",
              "lex:describeBotLocale",
              "lex:describeBotRecommendation",
              "lex:describeBotVersion",
              "lex:describeCustomVocabularyMetadata",
              "lex:describeExport",
              "lex:describeImport",
              "lex:describeIntent",
              "lex:describeResourcePolicy",
              "lex:describeSlot",
              "lex:describeSlotType",
              "lex:getBot",
              "lex:getBotAlias",
              "lex:getBotAliases",
              "lex:getBotChannelAssociation",
              "lex:getBotChannelAssociations",
              "lex:getBots",
              "lex:getBotVersions",
              "lex:getBuiltinIntent",
              "lex:getBuiltinIntents",
              "lex:getBuiltinSlotTypes",
              "lex:getIntent",
              "lex:getIntents",
              "lex:getIntentVersions",
              "lex:getSlotType",
              "lex:getSlotTypes",
              "lex:getSlotTypeVersions",
              "lex:listBotAliases",
              "lex:listBotLocales",
              "lex:listBotRecommendations",
              "lex:listBots",
              "lex:listBotVersions",
              "lex:listExports",
              "lex:listImports",
              "lex:listIntents",
              "lex:listRecommendedIntents",
              "lex:listSlots",
              "lex:listSlotTypes",
              "license-manager:getLicenseConfiguration",
              "license-manager:getServiceSettings",
              "license-manager:listAssociationsForLicenseConfiguration",
              "license-manager:listFailuresForLicenseConfigurationOperations",
              "license-manager:listLicenseConfigurations",
              "license-manager:listLicenseSpecificationsForResource",
              "license-manager:listResourceInventory",
              "license-manager:listUsageForLicenseConfiguration",
              "lightsail:getActiveNames",
              "lightsail:getAlarms",
              "lightsail:getAutoSnapshots",
              "lightsail:getBlueprints",
              "lightsail:getBucketBundles",
              "lightsail:getBucketMetricData",
              "lightsail:getBuckets",
              "lightsail:getBundles",
              "lightsail:getCertificates",
              "lightsail:getContainerImages",
              "lightsail:getContainerServiceDeployments",
              "lightsail:getContainerServiceMetricData",
              "lightsail:getContainerServicePowers",
              "lightsail:getContainerServices",
              "lightsail:getDisk",
              "lightsail:getDisks",
              "lightsail:getDiskSnapshot",
              "lightsail:getDiskSnapshots",
              "lightsail:getDistributionBundles",
              "lightsail:getDistributionMetricData",
              "lightsail:getDistributions",
              "lightsail:getDomain",
              "lightsail:getDomains",
              "lightsail:getExportSnapshotRecords",
              "lightsail:getInstance",
              "lightsail:getInstanceMetricData",
              "lightsail:getInstancePortStates",
              "lightsail:getInstances",
              "lightsail:getInstanceSnapshot",
              "lightsail:getInstanceSnapshots",
              "lightsail:getInstanceState",
              "lightsail:getKeyPair",
              "lightsail:getKeyPairs",
              "lightsail:getLoadBalancer",
              "lightsail:getLoadBalancerMetricData",
              "lightsail:getLoadBalancers",
              "lightsail:getLoadBalancerTlsCertificates",
              "lightsail:getOperation",
              "lightsail:getOperations",
              "lightsail:getOperationsForResource",
              "lightsail:getRegions",
              "lightsail:getRelationalDatabase",
              "lightsail:getRelationalDatabaseMetricData",
              "lightsail:getRelationalDatabases",
              "lightsail:getRelationalDatabaseSnapshot",
              "lightsail:getRelationalDatabaseSnapshots",
              "lightsail:getStaticIp",
              "lightsail:getStaticIps",
              "lightsail:isVpcPeered",
              "logs:describeAccountPolicies",
              "logs:describeDeliveries",
              "logs:describeDeliveryDestinations",
              "logs:describeDeliverySources",
              "logs:describeDestinations",
              "logs:describeExportTasks",
              "logs:describeLogGroups",
              "logs:describeLogStreams",
              "logs:describeMetricFilters",
              "logs:describeQueries",
              "logs:describeQueryDefinitions",
              "logs:describeResourcePolicies",
              "logs:describeSubscriptionFilters",
              "logs:getDataProtectionPolicy",
              "logs:getDelivery",
              "logs:getDeliveryDestination",
              "logs:getDeliveryDestinationPolicy",
              "logs:getDeliverySource",
              "logs:getLogAnomalyDetector",
              "logs:getLogDelivery",
              "logs:getLogGroupFields",
              "logs:listAnomalies",
              "logs:listLogAnomalyDetectors",
              "logs:listLogDeliveries",
              "logs:testMetricFilter",
              "lookoutequipment:describeDataIngestionJob",
              "lookoutequipment:describeDataset",
              "lookoutequipment:describeInferenceScheduler",
              "lookoutequipment:describeModel",
              "lookoutequipment:listDataIngestionJobs",
              "lookoutequipment:listDatasets",
              "lookoutequipment:listInferenceExecutions",
              "lookoutequipment:listInferenceSchedulers",
              "lookoutequipment:listModels",
              "lookoutmetrics:describeAlert",
              "lookoutmetrics:describeAnomalyDetectionExecutions",
              "lookoutmetrics:describeAnomalyDetector",
              "lookoutmetrics:describeMetricSet",
              "lookoutmetrics:getAnomalyGroup",
              "lookoutmetrics:getDataQualityMetrics",
              "lookoutmetrics:getFeedback",
              "lookoutmetrics:getSampleData",
              "lookoutmetrics:listAlerts",
              "lookoutmetrics:listAnomalyDetectors",
              "lookoutmetrics:listAnomalyGroupSummaries",
              "lookoutmetrics:listAnomalyGroupTimeSeries",
              "lookoutmetrics:listMetricSets",
              "lookoutmetrics:listTagsForResource",
              "machinelearning:describeBatchPredictions",
              "machinelearning:describeDataSources",
              "machinelearning:describeEvaluations",
              "machinelearning:describeMLModels",
              "machinelearning:getBatchPrediction",
              "machinelearning:getDataSource",
              "machinelearning:getEvaluation",
              "machinelearning:getMLModel",
              "macie2:getClassificationExportConfiguration",
              "macie2:getCustomDataIdentifier",
              "macie2:getFindings",
              "macie2:getFindingStatistics",
              "macie2:listClassificationJobs",
              "macie2:listCustomDataIdentifiers",
              "macie2:listFindings",
              "managedblockchain:getMember",
              "managedblockchain:getNetwork",
              "managedblockchain:getNode",
              "managedblockchain:listMembers",
              "managedblockchain:listNetworks",
              "managedblockchain:listNodes",
              "mediaconnect:describeFlow",
              "mediaconnect:listEntitlements",
              "mediaconnect:listFlows",
              "mediaconvert:describeEndpoints",
              "mediaconvert:getJob",
              "mediaconvert:getJobTemplate",
              "mediaconvert:getPreset",
              "mediaconvert:getQueue",
              "mediaconvert:listJobs",
              "mediaconvert:listJobTemplates",
              "medialive:describeChannel",
              "medialive:describeInput",
              "medialive:describeInputDevice",
              "medialive:describeInputSecurityGroup",
              "medialive:describeMultiplex",
              "medialive:describeOffering",
              "medialive:describeReservation",
              "medialive:describeSchedule",
              "medialive:listChannels",
              "medialive:listInputDevices",
              "medialive:listInputs",
              "medialive:listInputSecurityGroups",
              "medialive:listMultiplexes",
              "medialive:listOfferings",
              "medialive:listReservations",
              "mediapackage:describeChannel",
              "mediapackage:describeOriginEndpoint",
              "mediapackage:listChannels",
              "mediapackage:listOriginEndpoints",
              "mediastore:describeContainer",
              "mediastore:getContainerPolicy",
              "mediastore:getCorsPolicy",
              "mediastore:listContainers",
              "mediatailor:getPlaybackConfiguration",
              "mediatailor:listPlaybackConfigurations",
              "medical-imaging:getDatastore",
              "medical-imaging:listDatastores",
              "mgn:describeJobLogItems",
              "mgn:describeJobs",
              "mgn:describeLaunchConfigurationTemplates",
              "mgn:describeReplicationConfigurationTemplates",
              "mgn:describeSourceServers",
              "mgn:describeVcenterClients",
              "mgn:getLaunchConfiguration",
              "mgn:getReplicationConfiguration",
              "mgn:listApplications",
              "mgn:listSourceServerActions",
              "mgn:listTemplateActions",
              "mgn:listWaves",
              "mobiletargeting:getAdmChannel",
              "mobiletargeting:getApnsChannel",
              "mobiletargeting:getApnsSandboxChannel",
              "mobiletargeting:getApnsVoipChannel",
              "mobiletargeting:getApnsVoipSandboxChannel",
              "mobiletargeting:getApp",
              "mobiletargeting:getApplicationSettings",
              "mobiletargeting:getApps",
              "mobiletargeting:getBaiduChannel",
              "mobiletargeting:getCampaign",
              "mobiletargeting:getCampaignActivities",
              "mobiletargeting:getCampaigns",
              "mobiletargeting:getCampaignVersion",
              "mobiletargeting:getCampaignVersions",
              "mobiletargeting:getEmailChannel",
              "mobiletargeting:getEndpoint",
              "mobiletargeting:getEventStream",
              "mobiletargeting:getExportJob",
              "mobiletargeting:getExportJobs",
              "mobiletargeting:getGcmChannel",
              "mobiletargeting:getImportJob",
              "mobiletargeting:getImportJobs",
              "mobiletargeting:getJourney",
              "mobiletargeting:getJourneyExecutionMetrics",
              "mobiletargeting:getJourneyExecutionActivityMetrics",
              "mobiletargeting:getJourneyRunExecutionActivityMetrics",
              "mobiletargeting:getJourneyRunExecutionMetrics",
              "mobiletargeting:getJourneyRuns",
              "mobiletargeting:getSegment",
              "mobiletargeting:getSegmentImportJobs",
              "mobiletargeting:getSegments",
              "mobiletargeting:getSegmentVersion",
              "mobiletargeting:getSegmentVersions",
              "mobiletargeting:getSmsChannel",
              "mobiletargeting:listJourneys",
              "mq:describeBroker",
              "mq:describeConfiguration",
              "mq:describeConfigurationRevision",
              "mq:describeUser",
              "mq:listBrokers",
              "mq:listConfigurationRevisions",
              "mq:listConfigurations",
              "mq:listUsers",
              "m2:getApplication",
              "m2:getApplicationVersion",
              "m2:getBatchJobExecution",
              "m2:getDataSetDetails",
              "m2:getDataSetImportTask",
              "m2:getDeployment",
              "m2:getEnvironment",
              "m2:listApplications",
              "m2:listApplicationVersions",
              "m2:listBatchJobDefinitions",
              "m2:listBatchJobExecutions",
              "m2:listDataSetImportHistory",
              "m2:listDataSets",
              "m2:listDeployments",
              "m2:listEngineVersions",
              "m2:listEnvironments",
              "network-firewall:describeFirewall",
              "network-firewall:describeFirewallPolicy",
              "network-firewall:describeLoggingConfiguration",
              "network-firewall:describeRuleGroup",
              "network-firewall:describeTlsInspectionConfiguration",
              "network-firewall:listFirewallPolicies",
              "network-firewall:listFirewalls",
              "network-firewall:listRuleGroups",
              "network-firewall:listTlsInspectionConfigurations",
              "networkmanager:describeGlobalNetworks",
              "networkmanager:getConnectAttachment",
              "networkmanager:getConnections",
              "networkmanager:getConnectPeer",
              "networkmanager:getConnectPeerAssociations",
              "networkmanager:getCoreNetwork",
              "networkmanager:getCoreNetworkChangeEvents",
              "networkmanager:getCoreNetworkChangeSet",
              "networkmanager:getCoreNetworkPolicy",
              "networkmanager:getCustomerGatewayAssociations",
              "networkmanager:getDevices",
              "networkmanager:getLinkAssociations",
              "networkmanager:getLinks",
              "networkmanager:getNetworkResourceCounts",
              "networkmanager:getNetworkResourceRelationships",
              "networkmanager:getNetworkResources",
              "networkmanager:getNetworkRoutes",
              "networkmanager:getNetworkTelemetry",
              "networkmanager:getResourcePolicy",
              "networkmanager:getRouteAnalysis",
              "networkmanager:getSites",
              "networkmanager:getSiteToSiteVpnAttachment",
              "networkmanager:getTransitGatewayConnectPeerAssociations",
              "networkmanager:getTransitGatewayPeering",
              "networkmanager:getTransitGatewayRegistrations",
              "networkmanager:getTransitGatewayRouteTableAttachment",
              "networkmanager:getVpcAttachment",
              "networkmanager:listAttachments",
              "networkmanager:listConnectPeers",
              "networkmanager:listCoreNetworkPolicyVersions",
              "networkmanager:listCoreNetworks",
              "networkmanager:listOrganizationServiceAccessStatus",
              "networkmanager:listPeerings",
              "networkmanager:listTagsForResource",
              "networkmonitor:getMonitor",
              "networkmonitor:getProbe",
              "networkmonitor:listMonitors",
              "nimble:getEula",
              "nimble:getLaunchProfile",
              "nimble:getLaunchProfileDetails",
              "nimble:getLaunchProfileInitialization",
              "nimble:getLaunchProfileMember",
              "nimble:getStreamingImage",
              "nimble:getStreamingSession",
              "nimble:getStreamingSessionStream",
              "nimble:getStudio",
              "nimble:getStudioComponent",
              "nimble:listEulaAcceptances",
              "nimble:listEulas",
              "nimble:listLaunchProfiles",
              "nimble:listStreamingImages",
              "nimble:listStreamingSessions",
              "nimble:listStudioComponents",
              "nimble:listStudios",
              "notifications:getEventRule",
              "notifications:getNotificationConfiguration",
              "notifications:getNotificationEvent",
              "notifications:listChannels",
              "notifications:listEventRules",
              "notifications:listNotificationConfigurations",
              "notifications:listNotificationEvents",
              "notifications:listNotificationHubs",
              "notifications-contacts:getEmailContact",
              "notifications-contacts:listEmailContacts",
              "oam:getLink",
              "oam:getSink",
              "oam:getSinkPolicy",
              "oam:listAttachedLinks",
              "oam:listLinks",
              "oam:listSinks",
              "omics:getAnnotationImportJob",
              "omics:getAnnotationStore",
              "omics:getReadSetImportJob",
              "omics:getReadSetMetadata",
              "omics:getReference",
              "omics:getReferenceImportJob",
              "omics:getReferenceMetadata",
              "omics:getReferenceStore",
              "omics:getRun",
              "omics:getRunGroup",
              "omics:getSequenceStore",
              "omics:getVariantImportJob",
              "omics:getVariantStore",
              "omics:getWorkflow",
              "omics:listAnnotationImportJobs",
              "omics:listAnnotationStores",
              "omics:listMultipartReadSetUploads",
              "omics:listReadSetImportJobs",
              "omics:listReadSets",
              "omics:listReadSetUploadParts",
              "omics:listReferenceImportJobs",
              "omics:listReferenceStores",
              "omics:listReferences",
              "omics:listRunGroups",
              "omics:listRunTasks",
              "omics:listRuns",
              "omics:listSequenceStores",
              "omics:listVariantImportJobs",
              "omics:listVariantStores",
              "omics:listWorkflows",
              "opsworks-cm:describeAccountAttributes",
              "opsworks-cm:describeBackups",
              "opsworks-cm:describeEvents",
              "opsworks-cm:describeNodeAssociationStatus",
              "opsworks-cm:describeServers",
              "opsworks:describeAgentVersions",
              "opsworks:describeApps",
              "opsworks:describeCommands",
              "opsworks:describeDeployments",
              "opsworks:describeEcsClusters",
              "opsworks:describeElasticIps",
              "opsworks:describeElasticLoadBalancers",
              "opsworks:describeInstances",
              "opsworks:describeLayers",
              "opsworks:describeLoadBasedAutoScaling",
              "opsworks:describeMyUserProfile",
              "opsworks:describePermissions",
              "opsworks:describeRaidArrays",
              "opsworks:describeRdsDbInstances",
              "opsworks:describeServiceErrors",
              "opsworks:describeStackProvisioningParameters",
              "opsworks:describeStacks",
              "opsworks:describeStackSummary",
              "opsworks:describeTimeBasedAutoScaling",
              "opsworks:describeUserProfiles",
              "opsworks:describeVolumes",
              "opsworks:getHostnameSuggestion",
              "organizations:listAccounts",
              "organizations:listTagsForResource",
              "osis:getPipeline",
              "osis:getPipelineBlueprint",
              "osis:getPipelineChangeProgress",
              "osis:listPipelineBlueprints",
              "osis:listPipelines",
              "osis:validatePipeline",
              "outposts:getCatalogItem",
              "outposts:getConnection",
              "outposts:getOrder",
              "outposts:getOutpost",
              "outposts:getOutpostInstanceTypes",
              "outposts:getSite",
              "outposts:listAssets",
              "outposts:listCatalogItems",
              "outposts:listOrders",
              "outposts:listOutposts",
              "outposts:listSites",
              "personalize:describeAlgorithm",
              "personalize:describeBatchInferenceJob",
              "personalize:describeBatchSegmentJob",
              "personalize:describeCampaign",
              "personalize:describeDataset",
              "personalize:describeDatasetExportJob",
              "personalize:describeDatasetGroup",
              "personalize:describeDatasetImportJob",
              "personalize:describeEventTracker",
              "personalize:describeFeatureTransformation",
              "personalize:describeFilter",
              "personalize:describeRecipe",
              "personalize:describeRecommender",
              "personalize:describeSchema",
              "personalize:describeSolution",
              "personalize:describeSolutionVersion",
              "personalize:getPersonalizedRanking",
              "personalize:getRecommendations",
              "personalize:getSolutionMetrics",
              "personalize:listBatchInferenceJobs",
              "personalize:listBatchSegmentJobs",
              "personalize:listCampaigns",
              "personalize:listDatasetExportJobs",
              "personalize:listDatasetGroups",
              "personalize:listDatasetImportJobs",
              "personalize:listDatasets",
              "personalize:listEventTrackers",
              "personalize:listRecipes",
              "personalize:listRecommenders",
              "personalize:listSchemas",
              "personalize:listSolutions",
              "personalize:listSolutionVersions",
              "pipes:describePipe",
              "pipes:listPipes",
              "pipes:listTagsForResource",
              "polly:describeVoices",
              "polly:getLexicon",
              "polly:listLexicons",
              "pricing:describeServices",
              "pricing:getAttributeValues",
              "pricing:getProducts",
              "private-networks:getDeviceIdentifier",
              "private-networks:getNetwork",
              "private-networks:getNetworkResource",
              "private-networks:listDeviceIdentifiers",
              "private-networks:listNetworks",
              "private-networks:listNetworkResources",
              "qbusiness:getApplication",
              "qbusiness:getDataSource",
              "qbusiness:getIndex",
              "qbusiness:getRetriever",
              "qbusiness:getWebExperience",
              "qbusiness:listApplications",
              "qbusiness:listDataSources",
              "qbusiness:listDataSourceSyncJobs",
              "qbusiness:listIndices",
              "qbusiness:listRetrievers",
              "qbusiness:listWebExperiences",
              "quicksight:describeAccountCustomization",
              "quicksight:describeAccountSettings",
              "quicksight:describeAccountSubscription",
              "quicksight:describeAnalysis",
              "quicksight:describeAnalysisPermissions",
              "quicksight:describeDashboard",
              "quicksight:describeDashboardPermissions",
              "quicksight:describeDataSet",
              "quicksight:describeDataSetPermissions",
              "quicksight:describeDataSetRefreshProperties",
              "quicksight:describeDataSource",
              "quicksight:describeDataSourcePermissions",
              "quicksight:describeFolder",
              "quicksight:describeFolderPermissions",
              "quicksight:describeFolderResolvedPermissions",
              "quicksight:describeGroup",
              "quicksight:describeGroupMembership",
              "quicksight:describeIAMPolicyAssignment",
              "quicksight:describeIngestion",
              "quicksight:describeIpRestriction",
              "quicksight:describeNamespace",
              "quicksight:describeRefreshSchedule",
              "quicksight:describeTemplate",
              "quicksight:describeTemplateAlias",
              "quicksight:describeTemplatePermissions",
              "quicksight:describeTheme",
              "quicksight:describeThemeAlias",
              "quicksight:describeThemePermissions",
              "quicksight:describeTopic",
              "quicksight:describeTopicPermissions",
              "quicksight:describeTopicRefresh",
              "quicksight:describeTopicRefreshSchedule",
              "quicksight:describeUser",
              "quicksight:describeVPCConnection",
              "quicksight:listAnalyses",
              "quicksight:listDashboards",
              "quicksight:listDashboardVersions",
              "quicksight:listDataSets",
              "quicksight:listDataSources",
              "quicksight:listFolderMembers",
              "quicksight:listFolders",
              "quicksight:listGroupMemberships",
              "quicksight:listGroups",
              "quicksight:listIAMPolicyAssignments",
              "quicksight:listIAMPolicyAssignmentsForUser",
              "quicksight:listIngestions",
              "quicksight:listNamespaces",
              "quicksight:listRefreshSchedules",
              "quicksight:listTemplateAliases",
              "quicksight:listTemplates",
              "quicksight:listTemplateVersions",
              "quicksight:listThemeAliases",
              "quicksight:listThemes",
              "quicksight:listThemeVersions",
              "quicksight:listTopicRefreshSchedules",
              "quicksight:listTopics",
              "quicksight:listUserGroups",
              "quicksight:listUsers",
              "quicksight:listVPCConnections",
              "quicksight:searchAnalyses",
              "quicksight:searchDashboards",
              "quicksight:searchDataSets",
              "quicksight:searchDataSources",
              "quicksight:searchFolders",
              "quicksight:searchGroups",
              "ram:getPermission",
              "ram:getResourceShareAssociations",
              "ram:getResourceShareInvitations",
              "ram:getResourceShares",
              "ram:listPendingInvitationResources",
              "ram:listPrincipals",
              "ram:listResources",
              "ram:listResourceSharePermissions",
              "rbin:getRule",
              "rbin:listRules",
              "rds:describeAccountAttributes",
              "rds:describeBlueGreenDeployments",
              "rds:describeCertificates",
              "rds:describeDBClusterEndpoints",
              "rds:describeDBClusterParameterGroups",
              "rds:describeDBClusterParameters",
              "rds:describeDBClusters",
              "rds:describeDBClusterSnapshots",
              "rds:describeDBEngineVersions",
              "rds:describeDBInstanceAutomatedBackups",
              "rds:describeDBInstances",
              "rds:describeDBLogFiles",
              "rds:describeDBParameterGroups",
              "rds:describeDBParameters",
              "rds:describeDBSecurityGroups",
              "rds:describeDBSnapshotAttributes",
              "rds:describeDBSnapshots",
              "rds:describeDBSubnetGroups",
              "rds:describeEngineDefaultClusterParameters",
              "rds:describeEngineDefaultParameters",
              "rds:describeEventCategories",
              "rds:describeEvents",
              "rds:describeEventSubscriptions",
              "rds:describeExportTasks",
              "rds:describeGlobalClusters",
              "rds:describeIntegrations",
              "rds:describeOptionGroupOptions",
              "rds:describeOptionGroups",
              "rds:describeOrderableDBInstanceOptions",
              "rds:describePendingMaintenanceActions",
              "rds:describeReservedDBInstances",
              "rds:describeReservedDBInstancesOfferings",
              "rds:describeSourceRegions",
              "rds:describeValidDBInstanceModifications",
              "rds:listTagsForResource",
              "redshift-data:describeStatement",
              "redshift-data:listStatements",
              "redshift:describeClusterParameterGroups",
              "redshift:describeClusterParameters",
              "redshift:describeClusters",
              "redshift:describeClusterSecurityGroups",
              "redshift:describeClusterSnapshots",
              "redshift:describeClusterSubnetGroups",
              "redshift:describeClusterVersions",
              "redshift:describeDataShares",
              "redshift:describeDataSharesForConsumer",
              "redshift:describeDataSharesForProducer",
              "redshift:describeDefaultClusterParameters",
              "redshift:describeEventCategories",
              "redshift:describeEvents",
              "redshift:describeEventSubscriptions",
              "redshift:describeHsmClientCertificates",
              "redshift:describeHsmConfigurations",
              "redshift:describeLoggingStatus",
              "redshift:describeOrderableClusterOptions",
              "redshift:describeReservedNodeOfferings",
              "redshift:describeReservedNodes",
              "redshift:describeResize",
              "redshift:describeSnapshotCopyGrants",
              "redshift:describeStorage",
              "redshift:describeTableRestoreStatus",
              "redshift:describeTags",
              "redshift-serverless:getEndpointAccess",
              "redshift-serverless:getNamespace",
              "redshift-serverless:getRecoveryPoint",
              "redshift-serverless:getSnapshot",
              "redshift-serverless:getTableRestoreStatus",
              "redshift-serverless:getUsageLimit",
              "redshift-serverless:getWorkgroup",
              "redshift-serverless:listEndpointAccess",
              "redshift-serverless:listNamespaces",
              "redshift-serverless:listRecoveryPoints",
              "redshift-serverless:listSnapshots",
              "redshift-serverless:listTableRestoreStatus",
              "redshift-serverless:listUsageLimits",
              "redshift-serverless:listWorkgroups",
              "rekognition:listCollections",
              "rekognition:listFaces",
              "resource-explorer-2:getAccountLevelServiceConfiguration",
              "resource-explorer-2:getIndex",
              "resource-explorer-2:getView",
              "resource-explorer-2:listIndexes",
              "resource-explorer-2:listViews",
              "resource-explorer-2:search",
              "resource-groups:getGroup",
              "resource-groups:getGroupQuery",
              "resource-groups:getTags",
              "resource-groups:listGroupResources",
              "resource-groups:listGroups",
              "resource-groups:searchResources",
              "robomaker:batchDescribeSimulationJob",
              "robomaker:describeDeploymentJob",
              "robomaker:describeFleet",
              "robomaker:describeRobot",
              "robomaker:describeRobotApplication",
              "robomaker:describeSimulationApplication",
              "robomaker:describeSimulationJob",
              "robomaker:listDeploymentJobs",
              "robomaker:listFleets",
              "robomaker:listRobotApplications",
              "robomaker:listRobots",
              "robomaker:listSimulationApplications",
              "robomaker:listSimulationJobs",
              "route53-recovery-cluster:getRoutingControlState",
              "route53-recovery-cluster:listRoutingControls",
              "route53-recovery-control-config:describeControlPanel",
              "route53-recovery-control-config:describeRoutingControl",
              "route53-recovery-control-config:describeSafetyRule",
              "route53-recovery-control-config:listControlPanels",
              "route53-recovery-control-config:listRoutingControls",
              "route53-recovery-control-config:listSafetyRules",
              "route53-recovery-readiness:getCell",
              "route53-recovery-readiness:getCellReadinessSummary",
              "route53-recovery-readiness:getReadinessCheck",
              "route53-recovery-readiness:getReadinessCheckResourceStatus",
              "route53-recovery-readiness:getReadinessCheckStatus",
              "route53-recovery-readiness:getRecoveryGroup",
              "route53-recovery-readiness:getRecoveryGroupReadinessSummary",
              "route53-recovery-readiness:listCells",
              "route53-recovery-readiness:listReadinessChecks",
              "route53-recovery-readiness:listRecoveryGroups",
              "route53-recovery-readiness:listResourceSets",
              "route53:getAccountLimit",
              "route53:getChange",
              "route53:getCheckerIpRanges",
              "route53:getDNSSEC",
              "route53:getGeoLocation",
              "route53:getHealthCheck",
              "route53:getHealthCheckCount",
              "route53:getHealthCheckLastFailureReason",
              "route53:getHealthCheckStatus",
              "route53:getHostedZone",
              "route53:getHostedZoneCount",
              "route53:getHostedZoneLimit",
              "route53:getQueryLoggingConfig",
              "route53:getReusableDelegationSet",
              "route53:getTrafficPolicy",
              "route53:getTrafficPolicyInstance",
              "route53:getTrafficPolicyInstanceCount",
              "route53:listCidrBlocks",
              "route53:listCidrCollections",
              "route53:listCidrLocations",
              "route53:listGeoLocations",
              "route53:listHealthChecks",
              "route53:listHostedZones",
              "route53:listHostedZonesByName",
              "route53:listHostedZonesByVpc",
              "route53:listQueryLoggingConfigs",
              "route53:listResourceRecordSets",
              "route53:listReusableDelegationSets",
              "route53:listTrafficPolicies",
              "route53:listTrafficPolicyInstances",
              "route53:listTrafficPolicyInstancesByHostedZone",
              "route53:listTrafficPolicyInstancesByPolicy",
              "route53:listTrafficPolicyVersions",
              "route53:listVPCAssociationAuthorizations",
              "route53domains:checkDomainAvailability",
              "route53domains:getContactReachabilityStatus",
              "route53domains:getDomainDetail",
              "route53domains:getOperationDetail",
              "route53domains:listDomains",
              "route53domains:listOperations",
              "route53domains:listPrices",
              "route53domains:listTagsForDomain",
              "route53domains:viewBilling",
              "route53resolver:getFirewallConfig",
              "route53resolver:getFirewallDomainList",
              "route53resolver:getFirewallRuleGroup",
              "route53resolver:getFirewallRuleGroupAssociation",
              "route53resolver:getFirewallRuleGroupPolicy",
              "route53resolver:getOutpostResolver",
              "route53resolver:getResolverDnssecConfig",
              "route53resolver:getResolverQueryLogConfig",
              "route53resolver:getResolverQueryLogConfigAssociation",
              "route53resolver:getResolverQueryLogConfigPolicy",
              "route53resolver:getResolverRule",
              "route53resolver:getResolverRuleAssociation",
              "route53resolver:getResolverRulePolicy",
              "route53resolver:listFirewallConfigs",
              "route53resolver:listFirewallDomainLists",
              "route53resolver:listFirewallDomains",
              "route53resolver:listFirewallRuleGroupAssociations",
              "route53resolver:listFirewallRuleGroups",
              "route53resolver:listFirewallRules",
              "route53resolver:listOutpostResolvers",
              "route53resolver:listResolverConfigs",
              "route53resolver:listResolverDnssecConfigs",
              "route53resolver:listResolverEndpointIpAddresses",
              "route53resolver:listResolverEndpoints",
              "route53resolver:listResolverQueryLogConfigAssociations",
              "route53resolver:listResolverQueryLogConfigs",
              "route53resolver:listResolverRuleAssociations",
              "route53resolver:listResolverRules",
              "route53resolver:listTagsForResource",
              "rum:batchGetRumMetricDefinitions",
              "rum:getAppMonitor",
              "rum:listAppMonitors",
              "rum:listRumMetricsDestinations",
              "s3:describeJob",
              "s3:describeMultiRegionAccessPointOperation",
              "s3:getAccelerateConfiguration",
              "s3:getAccessPoint",
              "s3:getAccessPointConfigurationForObjectLambda",
              "s3:getAccessPointForObjectLambda",
              "s3:getAccessPointPolicy",
              "s3:getAccessPointPolicyForObjectLambda",
              "s3:getAccessPointPolicyStatus",
              "s3:getAccessPointPolicyStatusForObjectLambda",
              "s3:getAccountPublicAccessBlock",
              "s3:getAnalyticsConfiguration",
              "s3:getBucketAcl",
              "s3:getBucketCORS",
              "s3:getBucketLocation",
              "s3:getBucketLogging",
              "s3:getBucketNotification",
              "s3:getBucketObjectLockConfiguration",
              "s3:getBucketOwnershipControls",
              "s3:getBucketPolicy",
              "s3:getBucketPolicyStatus",
              "s3:getBucketPublicAccessBlock",
              "s3:getBucketRequestPayment",
              "s3:getBucketVersioning",
              "s3:getBucketWebsite",
              "s3:getEncryptionConfiguration",
              "s3:getIntelligentTieringConfiguration",
              "s3:getInventoryConfiguration",
              "s3:getLifecycleConfiguration",
              "s3:getMetricsConfiguration",
              "s3:getMultiRegionAccessPoint",
              "s3:getMultiRegionAccessPointPolicy",
              "s3:getMultiRegionAccessPointPolicyStatus",
              "s3:getMultiRegionAccessPointRoutes",
              "s3:getObjectLegalHold",
              "s3:getObjectRetention",
              "s3:getReplicationConfiguration",
              "s3:getStorageLensConfiguration",
              "s3:listAccessPoints",
              "s3:listAccessPointsForObjectLambda",
              "s3:listAllMyBuckets",
              "s3:listBucket",
              "s3:listBucketMultipartUploads",
              "s3:listBucketVersions",
              "s3:listJobs",
              "s3:listMultipartUploadParts",
              "s3:listMultiRegionAccessPoints",
              "s3:listStorageLensConfigurations",
              "s3express:getBucketPolicy",
              "s3express:listAllMyDirectoryBuckets",
              "sagemaker:describeAction",
              "sagemaker:describeAlgorithm",
              "sagemaker:describeApp",
              "sagemaker:describeAppImageConfig",
              "sagemaker:describeArtifact",
              "sagemaker:describeAutoMLJob",
              "sagemaker:describeCluster",
              "sagemaker:describeClusterNode",
              "sagemaker:describeCodeRepository",
              "sagemaker:describeCompilationJob",
              "sagemaker:describeContext",
              "sagemaker:describeDataQualityJobDefinition",
              "sagemaker:describeDevice",
              "sagemaker:describeDeviceFleet",
              "sagemaker:describeDomain",
              "sagemaker:describeEdgeDeploymentPlan",
              "sagemaker:describeEdgePackagingJob",
              "sagemaker:describeEndpoint",
              "sagemaker:describeEndpointConfig",
              "sagemaker:describeExperiment",
              "sagemaker:describeFeatureGroup",
              "sagemaker:describeFeatureMetadata",
              "sagemaker:describeFlowDefinition",
              "sagemaker:describeHub",
              "sagemaker:describeHubContent",
              "sagemaker:describeHumanTaskUi",
              "sagemaker:describeHyperParameterTuningJob",
              "sagemaker:describeImage",
              "sagemaker:describeImageVersion",
              "sagemaker:describeInferenceComponent",
              "sagemaker:describeInferenceExperiment",
              "sagemaker:describeInferenceRecommendationsJob",
              "sagemaker:describeLabelingJob",
              "sagemaker:describeModel",
              "sagemaker:describeModelBiasJobDefinition",
              "sagemaker:describeModelCard",
              "sagemaker:describeModelCardExportJob",
              "sagemaker:describeModelExplainabilityJobDefinition",
              "sagemaker:describeModelPackage",
              "sagemaker:describeModelPackageGroup",
              "sagemaker:describeModelQualityJobDefinition",
              "sagemaker:describeMonitoringSchedule",
              "sagemaker:describeNotebookInstance",
              "sagemaker:describeNotebookInstanceLifecycleConfig",
              "sagemaker:describePipeline",
              "sagemaker:describePipelineDefinitionForExecution",
              "sagemaker:describePipelineExecution",
              "sagemaker:describeProcessingJob",
              "sagemaker:describeProject",
              "sagemaker:describeSpace",
              "sagemaker:describeStudioLifecycleConfig",
              "sagemaker:describeSubscribedWorkteam",
              "sagemaker:describeTrainingJob",
              "sagemaker:describeTransformJob",
              "sagemaker:describeTrial",
              "sagemaker:describeTrialComponent",
              "sagemaker:describeUserProfile",
              "sagemaker:describeWorkforce",
              "sagemaker:describeWorkteam",
              "sagemaker:getDeviceFleetReport",
              "sagemaker:getModelPackageGroupPolicy",
              "sagemaker:getSagemakerServicecatalogPortfolioStatus",
              "sagemaker:listActions",
              "sagemaker:listAlgorithms",
              "sagemaker:listAliases",
              "sagemaker:listAppImageConfigs",
              "sagemaker:listApps",
              "sagemaker:listArtifacts",
              "sagemaker:listAssociations",
              "sagemaker:listAutoMLJobs",
              "sagemaker:listCandidatesForAutoMLJob",
              "sagemaker:listClusterNodes",
              "sagemaker:listClusters",
              "sagemaker:listCodeRepositories",
              "sagemaker:listCompilationJobs",
              "sagemaker:listContexts",
              "sagemaker:listDataQualityJobDefinitions",
              "sagemaker:listDeviceFleets",
              "sagemaker:listDevices",
              "sagemaker:listDomains",
              "sagemaker:listEdgeDeploymentPlans",
              "sagemaker:listEdgePackagingJobs",
              "sagemaker:listEndpointConfigs",
              "sagemaker:listEndpoints",
              "sagemaker:listExperiments",
              "sagemaker:listFeatureGroups",
              "sagemaker:listFlowDefinitions",
              "sagemaker:listHubContents",
              "sagemaker:listHubContentVersions",
              "sagemaker:listHubs",
              "sagemaker:listHumanTaskUis",
              "sagemaker:listHyperParameterTuningJobs",
              "sagemaker:listImages",
              "sagemaker:listImageVersions",
              "sagemaker:listInferenceComponents",
              "sagemaker:listInferenceExperiments",
              "sagemaker:listInferenceRecommendationsJobs",
              "sagemaker:listInferenceRecommendationsJobSteps",
              "sagemaker:listLabelingJobs",
              "sagemaker:listLabelingJobsForWorkteam",
              "sagemaker:listLineageGroups",
              "sagemaker:listModelBiasJobDefinitions",
              "sagemaker:listModelCardExportJobs",
              "sagemaker:listModelCards",
              "sagemaker:listModelCardVersions",
              "sagemaker:listModelExplainabilityJobDefinitions",
              "sagemaker:listModelMetadata",
              "sagemaker:listModelPackageGroups",
              "sagemaker:listModelPackages",
              "sagemaker:listModelQualityJobDefinitions",
              "sagemaker:listModels",
              "sagemaker:listMonitoringAlertHistory",
              "sagemaker:listMonitoringAlerts",
              "sagemaker:listMonitoringExecutions",
              "sagemaker:listMonitoringSchedules",
              "sagemaker:listNotebookInstanceLifecycleConfigs",
              "sagemaker:listNotebookInstances",
              "sagemaker:listPipelineExecutions",
              "sagemaker:listPipelineExecutionSteps",
              "sagemaker:listPipelineParametersForExecution",
              "sagemaker:listPipelines",
              "sagemaker:listProcessingJobs",
              "sagemaker:listProjects",
              "sagemaker:listSpaces",
              "sagemaker:listStageDevices",
              "sagemaker:listStudioLifecycleConfigs",
              "sagemaker:listSubscribedWorkteams",
              "sagemaker:listTags",
              "sagemaker:listTrainingJobs",
              "sagemaker:listTrainingJobsForHyperParameterTuningJob",
              "sagemaker:listTransformJobs",
              "sagemaker:listTrialComponents",
              "sagemaker:listTrials",
              "sagemaker:listUserProfiles",
              "sagemaker:listWorkforces",
              "sagemaker:listWorkteams",
              "savingsplans:describeSavingsPlans",
              "scheduler:getSchedule",
              "scheduler:getScheduleGroup",
              "scheduler:listScheduleGroups",
              "scheduler:listSchedules",
              "schemas:describeCodeBinding",
              "schemas:describeDiscoverer",
              "schemas:describeRegistry",
              "schemas:describeSchema",
              "schemas:getCodeBindingSource",
              "schemas:getDiscoveredSchema",
              "schemas:getResourcePolicy",
              "schemas:listDiscoverers",
              "schemas:listRegistries",
              "schemas:listSchemas",
              "schemas:listSchemaVersions",
              "sdb:domainMetadata",
              "sdb:listDomains",
              "secretsmanager:describeSecret",
              "secretsmanager:getResourcePolicy",
              "secretsmanager:listSecrets",
              "secretsmanager:listSecretVersionIds",
              "securityhub:getEnabledStandards",
              "securityhub:getFindings",
              "securityhub:getInsightResults",
              "securityhub:getInsights",
              "securityhub:getMasterAccount",
              "securityhub:getMembers",
              "securityhub:listEnabledProductsForImport",
              "securityhub:listInvitations",
              "securityhub:listMembers",
              "securitylake:getDataLakeExceptionSubscription",
              "securitylake:getDataLakeOrganizationConfiguration",
              "securitylake:getDataLakeSources",
              "securitylake:getSubscriber",
              "securitylake:listDataLakeExceptions",
              "securitylake:listDataLakes",
              "securitylake:listLogSources",
              "securitylake:listSubscribers",
              "serverlessrepo:getApplication",
              "serverlessrepo:getApplicationPolicy",
              "serverlessrepo:getCloudFormationTemplate",
              "serverlessrepo:listApplicationDependencies",
              "serverlessrepo:listApplications",
              "serverlessrepo:listApplicationVersions",
              "servicecatalog:describeConstraint",
              "servicecatalog:describePortfolio",
              "servicecatalog:describeProduct",
              "servicecatalog:describeProductAsAdmin",
              "servicecatalog:describeProductView",
              "servicecatalog:describeProvisioningArtifact",
              "servicecatalog:describeProvisioningParameters",
              "servicecatalog:describeRecord",
              "servicecatalog:listAcceptedPortfolioShares",
              "servicecatalog:listConstraintsForPortfolio",
              "servicecatalog:listLaunchPaths",
              "servicecatalog:listPortfolioAccess",
              "servicecatalog:listPortfolios",
              "servicecatalog:listPortfoliosForProduct",
              "servicecatalog:listPrincipalsForPortfolio",
              "servicecatalog:listProvisioningArtifacts",
              "servicecatalog:listRecordHistory",
              "servicecatalog:scanProvisionedProducts",
              "servicecatalog:searchProducts",
              "servicequotas:getAssociationForServiceQuotaTemplate",
              "servicequotas:getAWSDefaultServiceQuota",
              "servicequotas:getRequestedServiceQuotaChange",
              "servicequotas:getServiceQuota",
              "servicequotas:getServiceQuotaIncreaseRequestFromTemplate",
              "servicequotas:listAWSDefaultServiceQuotas",
              "servicequotas:listRequestedServiceQuotaChangeHistory",
              "servicequotas:listRequestedServiceQuotaChangeHistoryByQuota",
              "servicequotas:listServiceQuotaIncreaseRequestsInTemplate",
              "servicequotas:listServiceQuotas",
              "servicequotas:listServices",
              "ses:describeActiveReceiptRuleSet",
              "ses:describeConfigurationSet",
              "ses:describeReceiptRule",
              "ses:describeReceiptRuleSet",
              "ses:getAccount",
              "ses:getAccountSendingEnabled",
              "ses:getBlacklistReports",
              "ses:getConfigurationSet",
              "ses:getConfigurationSetEventDestinations",
              "ses:getContactList",
              "ses:getDedicatedIp",
              "ses:getDedicatedIpPool",
              "ses:getDedicatedIps",
              "ses:getDeliverabilityDashboardOptions",
              "ses:getDeliverabilityTestReport",
              "ses:getDomainDeliverabilityCampaign",
              "ses:getDomainStatisticsReport",
              "ses:getEmailIdentity",
              "ses:getIdentityDkimAttributes",
              "ses:getIdentityMailFromDomainAttributes",
              "ses:getIdentityNotificationAttributes",
              "ses:getIdentityPolicies",
              "ses:getIdentityVerificationAttributes",
              "ses:getImportJob",
              "ses:getSendQuota",
              "ses:getSendStatistics",
              "ses:listConfigurationSets",
              "ses:listContactLists",
              "ses:listContacts",
              "ses:listCustomVerificationEmailTemplates",
              "ses:listDedicatedIpPools",
              "ses:listDeliverabilityTestReports",
              "ses:listDomainDeliverabilityCampaigns",
              "ses:listEmailIdentities",
              "ses:listEmailTemplates",
              "ses:listIdentities",
              "ses:listIdentityPolicies",
              "ses:listImportJobs",
              "ses:listReceiptFilters",
              "ses:listReceiptRuleSets",
              "ses:listRecommendations",
              "ses:listTagsForResource",
              "ses:listTemplates",
              "ses:listVerifiedEmailAddresses",
              "shield:describeAttack",
              "shield:describeProtection",
              "shield:describeSubscription",
              "shield:listAttacks",
              "shield:listProtections",
              "sms-voice:getConfigurationSetEventDestinations",
              "sms:getConnectors",
              "sms:getReplicationJobs",
              "sms:getReplicationRuns",
              "sms:getServers",
              "snowball:describeAddress",
              "snowball:describeAddresses",
              "snowball:describeJob",
              "snowball:getSnowballUsage",
              "snowball:listJobs",
              "snowball:listServiceVersions",
              "sns:checkIfPhoneNumberIsOptedOut",
              "sns:getDataProtectionPolicy",
              "sns:getEndpointAttributes",
              "sns:getPlatformApplicationAttributes",
              "sns:getSMSAttributes",
              "sns:getSMSSandboxAccountStatus",
              "sns:getSubscriptionAttributes",
              "sns:getTopicAttributes",
              "sns:listEndpointsByPlatformApplication",
              "sns:listOriginationNumbers",
              "sns:listPhoneNumbersOptedOut",
              "sns:listPlatformApplications",
              "sns:listSMSSandboxPhoneNumbers",
              "sns:listSubscriptions",
              "sns:listSubscriptionsByTopic",
              "sns:listTopics",
              "sqs:getQueueAttributes",
              "sqs:getQueueUrl",
              "sqs:listDeadLetterSourceQueues",
              "sqs:listQueues",
              "ssm-contacts:describeEngagement",
              "ssm-contacts:describePage",
              "ssm-contacts:getContact",
              "ssm-contacts:getContactChannel",
              "ssm-contacts:getContactPolicy",
              "ssm-contacts:getRotation",
              "ssm-contacts:getRotationOverride",
              "ssm-contacts:listContactChannels",
              "ssm-contacts:listContacts",
              "ssm-contacts:listEngagements",
              "ssm-contacts:listPageReceipts",
              "ssm-contacts:listPageResolutions",
              "ssm-contacts:listPagesByContact",
              "ssm-contacts:listPagesByEngagement",
              "ssm-contacts:listPreviewRotationShifts",
              "ssm-contacts:listRotationOverrides",
              "ssm-contacts:listRotations",
              "ssm-contacts:listRotationShifts",
              "ssm-incidents:getIncidentRecord",
              "ssm-incidents:getReplicationSet",
              "ssm-incidents:getResourcePolicies",
              "ssm-incidents:getResponsePlan",
              "ssm-incidents:getTimelineEvent",
              "ssm-incidents:listIncidentRecords",
              "ssm-incidents:listRelatedItems",
              "ssm-incidents:listReplicationSets",
              "ssm-incidents:listResponsePlans",
              "ssm-incidents:listTimelineEvents",
              "ssm-sap:getApplication",
              "ssm-sap:getComponent",
              "ssm-sap:getDatabase",
              "ssm-sap:getOperation",
              "ssm-sap:getResourcePermission",
              "ssm-sap:listApplications",
              "ssm-sap:listComponents",
              "ssm-sap:listDatabases",
              "ssm-sap:listOperations",
              "ssm:describeActivations",
              "ssm:describeAssociation",
              "ssm:describeAssociationExecutions",
              "ssm:describeAssociationExecutionTargets",
              "ssm:describeAutomationExecutions",
              "ssm:describeAutomationStepExecutions",
              "ssm:describeAvailablePatches",
              "ssm:describeDocument",
              "ssm:describeDocumentPermission",
              "ssm:describeEffectiveInstanceAssociations",
              "ssm:describeEffectivePatchesForPatchBaseline",
              "ssm:describeInstanceAssociationsStatus",
              "ssm:describeInstanceInformation",
              "ssm:describeInstancePatches",
              "ssm:describeInstancePatchStates",
              "ssm:describeInstancePatchStatesForPatchGroup",
              "ssm:describeInventoryDeletions",
              "ssm:describeMaintenanceWindowExecutions",
              "ssm:describeMaintenanceWindowExecutionTaskInvocations",
              "ssm:describeMaintenanceWindowExecutionTasks",
              "ssm:describeMaintenanceWindows",
              "ssm:describeMaintenanceWindowSchedule",
              "ssm:describeMaintenanceWindowsForTarget",
              "ssm:describeMaintenanceWindowTargets",
              "ssm:describeMaintenanceWindowTasks",
              "ssm:describeOpsItems",
              "ssm:describeParameters",
              "ssm:describePatchBaselines",
              "ssm:describePatchGroups",
              "ssm:describePatchGroupState",
              "ssm:describePatchProperties",
              "ssm:describeSessions",
              "ssm:getAutomationExecution",
              "ssm:getCalendarState",
              "ssm:getCommandInvocation",
              "ssm:getConnectionStatus",
              "ssm:getDefaultPatchBaseline",
              "ssm:getDeployablePatchSnapshotForInstance",
              "ssm:getInventorySchema",
              "ssm:getMaintenanceWindow",
              "ssm:getMaintenanceWindowExecution",
              "ssm:getMaintenanceWindowExecutionTask",
              "ssm:getMaintenanceWindowExecutionTaskInvocation",
              "ssm:getMaintenanceWindowTask",
              "ssm:getOpsItem",
              "ssm:getOpsMetadata",
              "ssm:getOpsSummary",
              "ssm:getPatchBaseline",
              "ssm:getPatchBaselineForPatchGroup",
              "ssm:getResourcePolicies",
              "ssm:getServiceSetting",
              "ssm:listAssociations",
              "ssm:listAssociationVersions",
              "ssm:listCommandInvocations",
              "ssm:listCommands",
              "ssm:listComplianceItems",
              "ssm:listComplianceSummaries",
              "ssm:listDocuments",
              "ssm:listDocumentMetadataHistory",
              "ssm:listDocumentVersions",
              "ssm:listOpsItemEvents",
              "ssm:listOpsItemRelatedItems",
              "ssm:listOpsMetadata",
              "ssm:listResourceComplianceSummaries",
              "ssm:listResourceDataSync",
              "ssm:listTagsForResource",
              "sso:describeApplicationAssignment",
              "sso:describeApplicationProvider",
              "sso:describeApplication",
              "sso:describeInstance",
              "sso:describeTrustedTokenIssuer",
              "sso:getApplicationAccessScope",
              "sso:getApplicationAssignmentConfiguration",
              "sso:getApplicationAuthenticationMethod",
              "sso:getApplicationGrant",
              "sso:getApplicationInstance",
              "sso:getApplicationTemplate",
              "sso:getManagedApplicationInstance",
              "sso:getSharedSsoConfiguration",
              "sso:listApplicationAccessScopes",
              "sso:listApplicationAssignments",
              "sso:listApplicationAuthenticationMethods",
              "sso:listApplicationGrants",
              "sso:listApplicationInstances",
              "sso:listApplicationProviders",
              "sso:listApplications",
              "sso:listApplicationTemplates",
              "sso:listDirectoryAssociations",
              "sso:listInstances",
              "sso:listProfileAssociations",
              "sso:listTrustedTokenIssuers",
              "states:describeActivity",
              "states:describeExecution",
              "states:describeMapRun",
              "states:describeStateMachine",
              "states:describeStateMachineAlias",
              "states:describeStateMachineForExecution",
              "states:getExecutionHistory",
              "states:listActivities",
              "states:listExecutions",
              "states:listMapRuns",
              "states:listStateMachineAliases",
              "states:listStateMachines",
              "states:listStateMachineVersions",
              "storagegateway:describeBandwidthRateLimit",
              "storagegateway:describeCache",
              "storagegateway:describeCachediSCSIVolumes",
              "storagegateway:describeFileSystemAssociations",
              "storagegateway:describeGatewayInformation",
              "storagegateway:describeMaintenanceStartTime",
              "storagegateway:describeNFSFileShares",
              "storagegateway:describeSMBFileShares",
              "storagegateway:describeSMBSettings",
              "storagegateway:describeSnapshotSchedule",
              "storagegateway:describeStorediSCSIVolumes",
              "storagegateway:describeTapeArchives",
              "storagegateway:describeTapeRecoveryPoints",
              "storagegateway:describeTapes",
              "storagegateway:describeUploadBuffer",
              "storagegateway:describeVTLDevices",
              "storagegateway:describeWorkingStorage",
              "storagegateway:listAutomaticTapeCreationPolicies",
              "storagegateway:listFileShares",
              "storagegateway:listFileSystemAssociations",
              "storagegateway:listGateways",
              "storagegateway:listLocalDisks",
              "storagegateway:listTagsForResource",
              "storagegateway:listTapes",
              "storagegateway:listVolumeInitiators",
              "storagegateway:listVolumeRecoveryPoints",
              "storagegateway:listVolumes",
              "swf:countClosedWorkflowExecutions",
              "swf:countOpenWorkflowExecutions",
              "swf:countPendingActivityTasks",
              "swf:countPendingDecisionTasks",
              "swf:describeActivityType",
              "swf:describeDomain",
              "swf:describeWorkflowExecution",
              "swf:describeWorkflowType",
              "swf:getWorkflowExecutionHistory",
              "swf:listActivityTypes",
              "swf:listClosedWorkflowExecutions",
              "swf:listDomains",
              "swf:listOpenWorkflowExecutions",
              "swf:listWorkflowTypes",
              "synthetics:describeCanaries",
              "synthetics:describeCanariesLastRun",
              "synthetics:describeRuntimeVersions",
              "synthetics:getCanary",
              "synthetics:getCanaryRuns",
              "synthetics:getGroup",
              "synthetics:listAssociatedGroups",
              "synthetics:listGroupResources",
              "synthetics:listGroups",
              "tiros:createQuery",
              "tiros:getQueryAnswer",
              "tiros:getQueryExplanation",
              "transcribe:describeLanguageModel",
              "transcribe:getCallAnalyticsCategory",
              "transcribe:getCallAnalyticsJob",
              "transcribe:getMedicalTranscriptionJob",
              "transcribe:getMedicalVocabulary",
              "transcribe:getTranscriptionJob",
              "transcribe:getVocabulary",
              "transcribe:getVocabularyFilter",
              "transcribe:listCallAnalyticsCategories",
              "transcribe:listCallAnalyticsJobs",
              "transcribe:listLanguageModels",
              "transcribe:listMedicalTranscriptionJobs",
              "transcribe:listMedicalVocabularies",
              "transcribe:listTranscriptionJobs",
              "transcribe:listVocabularies",
              "transcribe:listVocabularyFilters",
              "transfer:describeAccess",
              "transfer:describeAgreement",
              "transfer:describeConnector",
              "transfer:describeExecution",
              "transfer:describeProfile",
              "transfer:describeServer",
              "transfer:describeUser",
              "transfer:describeWorkflow",
              "transfer:listAccesses",
              "transfer:listAgreements",
              "transfer:listConnectors",
              "transfer:listExecutions",
              "transfer:listHostKeys",
              "transfer:listProfiles",
              "transfer:listServers",
              "transfer:listTagsForResource",
              "transfer:listUsers",
              "transfer:listWorkflows",
              "transfer:sendWorkflowStepState",
              "trustedadvisor:getOrganizationRecommendation",
              "trustedadvisor:getRecommendation",
              "trustedadvisor:listChecks",
              "trustedadvisor:listOrganizationRecommendationAccounts",
              "trustedadvisor:listOrganizationRecommendationResources",
              "trustedadvisor:listOrganizationRecommendations",
              "trustedadvisor:listRecommendationResources",
              "trustedadvisor:listRecommendations",
              "verifiedpermissions:getIdentitySource",
              "verifiedpermissions:getPolicy",
              "verifiedpermissions:getPolicyStore",
              "verifiedpermissions:getPolicyTemplate",
              "verifiedpermissions:getSchema",
              "verifiedpermissions:listIdentitySources",
              "verifiedpermissions:listPolicies",
              "verifiedpermissions:listPolicyStores",
              "verifiedpermissions:listPolicyTemplates",
              "vpc-lattice:getAccessLogSubscription",
              "vpc-lattice:getAuthPolicy",
              "vpc-lattice:getListener",
              "vpc-lattice:getResourcePolicy",
              "vpc-lattice:getRule",
              "vpc-lattice:getService",
              "vpc-lattice:getServiceNetwork",
              "vpc-lattice:getServiceNetworkServiceAssociation",
              "vpc-lattice:getServiceNetworkVpcAssociation",
              "vpc-lattice:getTargetGroup",
              "vpc-lattice:listAccessLogSubscriptions",
              "vpc-lattice:listListeners",
              "vpc-lattice:listRules",
              "vpc-lattice:listServiceNetworks",
              "vpc-lattice:listServiceNetworkServiceAssociations",
              "vpc-lattice:listServiceNetworkVpcAssociations",
              "vpc-lattice:listServices",
              "vpc-lattice:listTargetGroups",
              "vpc-lattice:listTargets",
              "waf-regional:getByteMatchSet",
              "waf-regional:getChangeTokenStatus",
              "waf-regional:getGeoMatchSet",
              "waf-regional:getIPSet",
              "waf-regional:getLoggingConfiguration",
              "waf-regional:getRateBasedRule",
              "waf-regional:getRegexMatchSet",
              "waf-regional:getRegexPatternSet",
              "waf-regional:getRule",
              "waf-regional:getRuleGroup",
              "waf-regional:getSqlInjectionMatchSet",
              "waf-regional:getWebACL",
              "waf-regional:getWebACLForResource",
              "waf-regional:listActivatedRulesInRuleGroup",
              "waf-regional:listByteMatchSets",
              "waf-regional:listGeoMatchSets",
              "waf-regional:listIPSets",
              "waf-regional:listLoggingConfigurations",
              "waf-regional:listRateBasedRules",
              "waf-regional:listRegexMatchSets",
              "waf-regional:listRegexPatternSets",
              "waf-regional:listResourcesForWebACL",
              "waf-regional:listRuleGroups",
              "waf-regional:listRules",
              "waf-regional:listSqlInjectionMatchSets",
              "waf-regional:listWebACLs",
              "waf:getByteMatchSet",
              "waf:getChangeTokenStatus",
              "waf:getGeoMatchSet",
              "waf:getIPSet",
              "waf:getLoggingConfiguration",
              "waf:getRateBasedRule",
              "waf:getRegexMatchSet",
              "waf:getRegexPatternSet",
              "waf:getRule",
              "waf:getRuleGroup",
              "waf:getSampledRequests",
              "waf:getSizeConstraintSet",
              "waf:getSqlInjectionMatchSet",
              "waf:getWebACL",
              "waf:getXssMatchSet",
              "waf:listActivatedRulesInRuleGroup",
              "waf:listByteMatchSets",
              "waf:listGeoMatchSets",
              "waf:listIPSets",
              "waf:listLoggingConfigurations",
              "waf:listRateBasedRules",
              "waf:listRegexMatchSets",
              "waf:listRegexPatternSets",
              "waf:listRuleGroups",
              "waf:listRules",
              "waf:listSizeConstraintSets",
              "waf:listSqlInjectionMatchSets",
              "waf:listWebACLs",
              "waf:listXssMatchSets",
              "wafv2:checkCapacity",
              "wafv2:describeManagedRuleGroup",
              "wafv2:getIPSet",
              "wafv2:getLoggingConfiguration",
              "wafv2:getPermissionPolicy",
              "wafv2:getRateBasedStatementManagedKeys",
              "wafv2:getRegexPatternSet",
              "wafv2:getRuleGroup",
              "wafv2:getSampledRequests",
              "wafv2:getWebACL",
              "wafv2:getWebACLForResource",
              "wafv2:listAvailableManagedRuleGroups",
              "wafv2:listIPSets",
              "wafv2:listLoggingConfigurations",
              "wafv2:listRegexPatternSets",
              "wafv2:listResourcesForWebACL",
              "wafv2:listRuleGroups",
              "wafv2:listTagsForResource",
              "wafv2:listWebACLs",
              "workdocs:checkAlias",
              "workdocs:describeAvailableDirectories",
              "workdocs:describeInstances",
              "workmail:describeGroup",
              "workmail:describeOrganization",
              "workmail:describeResource",
              "workmail:describeUser",
              "workmail:listAliases",
              "workmail:listGroupMembers",
              "workmail:listGroups",
              "workmail:listMailboxPermissions",
              "workmail:listOrganizations",
              "workmail:listResourceDelegates",
              "workmail:listResources",
              "workmail:listUsers",
              "workspaces-web:getBrowserSettings",
              "workspaces-web:getIdentityProvider",
              "workspaces-web:getNetworkSettings",
              "workspaces-web:getPortal",
              "workspaces-web:getPortalServiceProviderMetadata",
              "workspaces-web:getTrustStoreCertificate",
              "workspaces-web:getUserSettings",
              "workspaces-web:listBrowserSettings",
              "workspaces-web:listIdentityProviders",
              "workspaces-web:listNetworkSettings",
              "workspaces-web:listPortals",
              "workspaces-web:listTagsForResource",
              "workspaces-web:listTrustStoreCertificates",
              "workspaces-web:listTrustStores",
              "workspaces-web:listUserSettings",
              "workspaces:describeAccount",
              "workspaces:describeAccountModifications",
              "workspaces:describeApplicationAssociations",
              "workspaces:describeWorkspaceAssociations",
              "workspaces:describeIpGroups",
              "workspaces:describeTags",
              "workspaces:describeWorkspaceBundles",
              "workspaces:describeWorkspaceDirectories",
              "workspaces:describeWorkspaceImages",
              "workspaces:describeWorkspaces",
              "workspaces:describeWorkspacesConnectionStatus",
              "xray:getEncryptionConfig",
              "xray:getGroup",
              "xray:getGroups",
              "xray:getSamplingRules",
              "xray:listResourcePolicies",
              "xray:getInsightImpactGraph",
              "xray:getSamplingStatisticSummaries",
              "xray:getSamplingTargets",
              "xray:getServiceGraph",
              "xray:getTimeSeriesServiceStatistics",
              "xray:getTraceGraph"
            ],
            "Effect": "Allow",
            "Resource": [
              "*"
            ]
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AWSBudgetsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSBudgetsReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "aws-portal:ViewBilling",
              "budgets:ViewBudget",
              "budgets:Describe*",
              "budgets:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBudgetsActionsWithAWSResourceControlAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "budgets:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-portal:ViewBilling"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "budgets.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-portal:ModifyBilling",
              "ec2:DescribeInstances",
              "iam:ListGroups",
              "iam:ListPolicies",
              "iam:ListRoles",
              "iam:ListUsers",
              "organizations:ListAccounts",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListPolicies",
              "organizations:ListRoots",
              "rds:DescribeDBInstances",
              "sns:ListTopics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataLifecycleManagerServiceRoleForAMIManagement",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*::image/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeImageAttribute",
              "ec2:DescribeVolumes",
              "ec2:DescribeSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:DeleteSnapshot",
            "Resource": "arn:aws:ec2:*::snapshot/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ResetImageAttribute",
              "ec2:DeregisterImage",
              "ec2:CreateImage",
              "ec2:CopyImage",
              "ec2:ModifyImageAttribute"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:EnableImageDeprecation",
              "ec2:DisableImageDeprecation"
            ],
            "Resource": "arn:aws:ec2:*::image/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMQServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/AMQManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AMQManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/amazonmq/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOutpostsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:CreateNetworkInterface",
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AwsGlueDataBrewFullAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "databrew:CreateDataset",
              "databrew:DescribeDataset",
              "databrew:ListDatasets",
              "databrew:UpdateDataset",
              "databrew:DeleteDataset",
              "databrew:CreateProject",
              "databrew:DescribeProject",
              "databrew:ListProjects",
              "databrew:StartProjectSession",
              "databrew:SendProjectSessionAction",
              "databrew:UpdateProject",
              "databrew:DeleteProject",
              "databrew:CreateRecipe",
              "databrew:DescribeRecipe",
              "databrew:ListRecipes",
              "databrew:ListRecipeVersions",
              "databrew:PublishRecipe",
              "databrew:UpdateRecipe",
              "databrew:BatchDeleteRecipeVersion",
              "databrew:DeleteRecipeVersion",
              "databrew:CreateRecipeJob",
              "databrew:CreateProfileJob",
              "databrew:DescribeJob",
              "databrew:DescribeJobRun",
              "databrew:ListJobRuns",
              "databrew:ListJobs",
              "databrew:StartJobRun",
              "databrew:StopJobRun",
              "databrew:UpdateProfileJob",
              "databrew:UpdateRecipeJob",
              "databrew:DeleteJob",
              "databrew:CreateSchedule",
              "databrew:DescribeSchedule",
              "databrew:ListSchedules",
              "databrew:UpdateSchedule",
              "databrew:DeleteSchedule",
              "databrew:CreateRuleset",
              "databrew:DeleteRuleset",
              "databrew:DescribeRuleset",
              "databrew:ListRulesets",
              "databrew:UpdateRuleset",
              "databrew:ListTagsForResource",
              "databrew:TagResource",
              "databrew:UntagResource"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "appflow:DescribeFlow",
              "appflow:DescribeFlowExecutionRecords",
              "appflow:ListFlows",
              "glue:GetConnection",
              "glue:GetConnections",
              "glue:GetDatabases",
              "glue:GetPartitions",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetDataCatalogEncryptionSettings",
              "dataexchange:ListDataSets",
              "dataexchange:ListDataSetRevisions",
              "dataexchange:ListRevisionAssets",
              "dataexchange:CreateJob",
              "dataexchange:StartJob",
              "dataexchange:GetJob",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "kms:DescribeKey",
              "kms:ListKeys",
              "kms:ListAliases",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSubnetGroups",
              "redshift-data:DescribeStatement",
              "redshift-data:ListDatabases",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables",
              "s3:ListAllMyBuckets",
              "s3:GetBucketCORS",
              "s3:GetBucketLocation",
              "s3:GetEncryptionConfiguration",
              "s3:GetLifecycleConfiguration",
              "secretsmanager:ListSecrets",
              "secretsmanager:DescribeSecret",
              "sts:GetCallerIdentity",
              "cloudtrail:LookupEvents",
              "iam:ListRoles",
              "iam:GetRole"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:CreateConnection"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:connection/AwsGlueDataBrew-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabases"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:CreateTable"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*",
              "arn:aws:glue:*:*:table/*/awsgluedatabrew*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::databrew-public-datasets-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:GenerateDataKey"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "kms:ViaService": "s3.*.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:AwsGlueDataBrew-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:GenerateRandom"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:databrew!default-*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "databrew.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:databrew!default-*",
            "Condition": {
              "StringLike": {
                "secretsmanager:Name": "databrew!default"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "databrew.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "databrew.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "DynamoDBKinesisReplicationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "kms:GenerateDataKey",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "kinesis.*.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:PutRecord",
              "kinesis:PutRecords",
              "kinesis:DescribeStream"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogAppRegistryFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AppRegistryUpdateStackAndResourceGroupTagging",
            "Effect": "Allow",
            "Action": [
              "cloudformation:UpdateStack",
              "tag:GetResources"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "servicecatalog-appregistry.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AppRegistryResourceGroupsIntegration",
            "Effect": "Allow",
            "Action": [
              "resource-groups:CreateGroup",
              "resource-groups:DeleteGroup",
              "resource-groups:GetGroup",
              "resource-groups:GetTags",
              "resource-groups:Tag",
              "resource-groups:Untag",
              "resource-groups:GetGroupConfiguration",
              "resource-groups:AssociateResource",
              "resource-groups:DisassociateResource"
            ],
            "Resource": "arn:aws:resource-groups:*:*:group/AWS_*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "servicecatalog-appregistry.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AppRegistryServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/servicecatalog-appregistry.amazonaws.com/AWSServiceRoleForAWSServiceCatalogAppRegistry*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "servicecatalog-appregistry.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AppRegistryOperations",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "servicecatalog:CreateApplication",
              "servicecatalog:GetApplication",
              "servicecatalog:UpdateApplication",
              "servicecatalog:DeleteApplication",
              "servicecatalog:ListApplications",
              "servicecatalog:AssociateResource",
              "servicecatalog:DisassociateResource",
              "servicecatalog:GetAssociatedResource",
              "servicecatalog:ListAssociatedResources",
              "servicecatalog:AssociateAttributeGroup",
              "servicecatalog:DisassociateAttributeGroup",
              "servicecatalog:ListAssociatedAttributeGroups",
              "servicecatalog:CreateAttributeGroup",
              "servicecatalog:UpdateAttributeGroup",
              "servicecatalog:DeleteAttributeGroup",
              "servicecatalog:GetAttributeGroup",
              "servicecatalog:ListAttributeGroups",
              "servicecatalog:SyncResource",
              "servicecatalog:ListAttributeGroupsForApplication",
              "servicecatalog:GetConfiguration",
              "servicecatalog:PutConfiguration"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AppRegistryResourceTagging",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:ListTagsForResource",
              "servicecatalog:UntagResource",
              "servicecatalog:TagResource"
            ],
            "Resource": "arn:aws:servicecatalog:*:*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogAppRegistryReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "servicecatalog:GetApplication",
              "servicecatalog:ListApplications",
              "servicecatalog:GetAssociatedResource",
              "servicecatalog:ListAssociatedResources",
              "servicecatalog:ListAssociatedAttributeGroups",
              "servicecatalog:GetAttributeGroup",
              "servicecatalog:ListAttributeGroups",
              "servicecatalog:ListTagsForResource",
              "servicecatalog:ListAttributeGroupsForApplication",
              "servicecatalog:GetConfiguration"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSNetworkFirewallServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeInstances",
              "ec2:DescribeNetworkInterfaces"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "acm:DescribeCertificate",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "resource-groups:ListGroupResources",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "tag:GetResources",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "resource-groups.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint",
                "aws:RequestTag/AWSNetworkFirewallManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSNetworkFirewallManaged": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambda_ReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks",
              "cloudformation:ListStackResources",
              "cloudwatch:GetMetricData",
              "cloudwatch:ListMetrics",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "kms:ListAliases",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "iam:ListRolePolicies",
              "iam:ListRoles",
              "logs:DescribeLogGroups",
              "lambda:Get*",
              "lambda:List*",
              "states:DescribeStateMachine",
              "states:ListStateMachines",
              "tag:GetResources",
              "xray:GetTraceSummaries",
              "xray:BatchGetTraces"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "logs:FilterLogEvents",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:DescribeQueries",
              "logs:GetLogGroupFields",
              "logs:GetLogRecord",
              "logs:GetQueryResults"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLambda_FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricData",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "kms:ListAliases",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "iam:ListRolePolicies",
              "iam:ListRoles",
              "lambda:*",
              "logs:DescribeLogGroups",
              "states:DescribeStateMachine",
              "states:ListStateMachines",
              "tag:GetResources",
              "xray:GetTraceSummaries",
              "xray:BatchGetTraces"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "lambda.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "logs:FilterLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHoneycodeServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "sso:GetManagedApplicationInstance"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "S3StorageLensServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AwsOrgsAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGlueSchemaRegistryFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSGlueSchemaRegistryFullAccess",
            "Effect": "Allow",
            "Action": [
              "glue:CreateRegistry",
              "glue:UpdateRegistry",
              "glue:DeleteRegistry",
              "glue:GetRegistry",
              "glue:ListRegistries",
              "glue:CreateSchema",
              "glue:UpdateSchema",
              "glue:DeleteSchema",
              "glue:GetSchema",
              "glue:ListSchemas",
              "glue:RegisterSchemaVersion",
              "glue:DeleteSchemaVersions",
              "glue:GetSchemaByDefinition",
              "glue:GetSchemaVersion",
              "glue:GetSchemaVersionsDiff",
              "glue:ListSchemaVersions",
              "glue:CheckSchemaVersionValidity",
              "glue:PutSchemaVersionMetadata",
              "glue:RemoveSchemaVersionMetadata",
              "glue:QuerySchemaVersionMetadata"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AWSGlueSchemaRegistryTagsFullAccess",
            "Effect": "Allow",
            "Action": [
              "glue:GetTags",
              "glue:TagResource",
              "glue:UnTagResource"
            ],
            "Resource": [
              "arn:aws:glue:*:*:schema/*",
              "arn:aws:glue:*:*:registry/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGlueSchemaRegistryReadonlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSGlueSchemaRegistryReadonlyAccess",
            "Effect": "Allow",
            "Action": [
              "glue:GetRegistry",
              "glue:ListRegistries",
              "glue:GetSchema",
              "glue:ListSchemas",
              "glue:GetSchemaByDefinition",
              "glue:GetSchemaVersion",
              "glue:ListSchemaVersions",
              "glue:GetSchemaVersionsDiff",
              "glue:CheckSchemaVersionValidity",
              "glue:QuerySchemaVersionMetadata",
              "glue:GetTags"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonConnect_FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "connect:*",
              "ds:CreateAlias",
              "ds:AuthorizeApplication",
              "ds:CreateIdentityPoolDirectory",
              "ds:DeleteDirectory",
              "ds:DescribeDirectories",
              "ds:UnauthorizeApplication",
              "firehose:DescribeDeliveryStream",
              "firehose:ListDeliveryStreams",
              "kinesis:DescribeStream",
              "kinesis:ListStreams",
              "kms:DescribeKey",
              "kms:ListAliases",
              "lex:GetBots",
              "lex:ListBots",
              "lex:ListBotAliases",
              "logs:CreateLogGroup",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets",
              "lambda:ListFunctions",
              "ds:CheckAlias",
              "profile:ListAccountIntegrations",
              "profile:GetDomain",
              "profile:ListDomains",
              "profile:GetProfileObjectType",
              "profile:ListProfileObjectTypeTemplates"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "profile:AddProfileKey",
              "profile:CreateDomain",
              "profile:CreateProfile",
              "profile:DeleteDomain",
              "profile:DeleteIntegration",
              "profile:DeleteProfile",
              "profile:DeleteProfileKey",
              "profile:DeleteProfileObject",
              "profile:DeleteProfileObjectType",
              "profile:GetIntegration",
              "profile:GetMatches",
              "profile:GetProfileObjectType",
              "profile:ListIntegrations",
              "profile:ListProfileObjects",
              "profile:ListProfileObjectTypes",
              "profile:ListTagsForResource",
              "profile:MergeProfiles",
              "profile:PutIntegration",
              "profile:PutProfileObject",
              "profile:PutProfileObjectType",
              "profile:SearchProfiles",
              "profile:TagResource",
              "profile:UntagResource",
              "profile:UpdateDomain",
              "profile:UpdateProfile"
            ],
            "Resource": "arn:aws:profile:*:*:domains/amazon-connect-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:GetBucketAcl"
            ],
            "Resource": "arn:aws:s3:::amazon-connect-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicequotas:GetServiceQuota"
            ],
            "Resource": "arn:aws:servicequotas:*:*:connect/*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "connect.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:DeleteServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/connect.amazonaws.com/AWSServiceRoleForAmazonConnect*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/profile.amazonaws.com/*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "profile.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMWAAServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:airflow-*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AttachNetworkInterface",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcs",
              "ec2:DetachNetworkInterface"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateVpcEndpoint",
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "AmazonMWAAManaged"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVpcEndpoint",
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonMWAAManaged": false
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:subnet/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "AmazonMWAAManaged"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/MWAA"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchApplicationInsightsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "applicationinsights:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters",
              "sqs:ListQueues",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "autoscaling:DescribeAutoScalingGroups",
              "lambda:ListFunctions",
              "dynamodb:ListTables",
              "s3:ListAllMyBuckets",
              "sns:ListTopics",
              "states:ListStateMachines",
              "apigateway:GET",
              "ecs:ListClusters",
              "ecs:DescribeTaskDefinition",
              "ecs:ListServices",
              "ecs:ListTasks",
              "eks:ListClusters",
              "eks:ListNodegroups",
              "fsx:DescribeFileSystems",
              "logs:DescribeLogGroups"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/application-insights.amazonaws.com/AWSServiceRoleForApplicationInsights"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "application-insights.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchApplicationInsightsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "applicationinsights:Describe*",
              "applicationinsights:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ElementalSupportCenterFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elemental-support-cases:*",
              "elemental-support-content:*",
              "elemental-activations:CompleteAccountRegistration"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerAdmin-ServiceCatalogProductsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonSageMakerServiceCatalogAPIGatewayPermission",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET",
              "apigateway:POST",
              "apigateway:PUT",
              "apigateway:PATCH",
              "apigateway:DELETE"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/sagemaker:launch-source": "*"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogAPIGatewayPostPermission",
            "Effect": "Allow",
            "Action": [
              "apigateway:POST"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "sagemaker:launch-source"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogAPIGatewayPatchPermission",
            "Effect": "Allow",
            "Action": [
              "apigateway:PATCH"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/account"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCFnMutatePermission",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:UpdateStack",
              "cloudformation:DeleteStack"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/SC-*",
            "Condition": {
              "ArnLikeIfExists": {
                "cloudformation:RoleArn": [
                  "arn:aws:sts::*:assumed-role/AmazonSageMakerServiceCatalog*"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCFnTagPermission",
            "Effect": "Allow",
            "Action": [
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/SC-*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/sagemaker:project-name": "false"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCFnReadPermission",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStacks"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/SC-*"
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCFnTemplatePermission",
            "Effect": "Allow",
            "Action": [
              "cloudformation:GetTemplateSummary",
              "cloudformation:ValidateTemplate"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCodeBuildPermission",
            "Effect": "Allow",
            "Action": [
              "codebuild:CreateProject",
              "codebuild:DeleteProject",
              "codebuild:UpdateProject"
            ],
            "Resource": [
              "arn:aws:codebuild:*:*:project/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCodeCommitPermission",
            "Effect": "Allow",
            "Action": [
              "codecommit:CreateCommit",
              "codecommit:CreateRepository",
              "codecommit:DeleteRepository",
              "codecommit:GetRepository",
              "codecommit:TagResource"
            ],
            "Resource": [
              "arn:aws:codecommit:*:*:sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCodeCommitListPermission",
            "Effect": "Allow",
            "Action": [
              "codecommit:ListRepositories"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCodePipelinePermission",
            "Effect": "Allow",
            "Action": [
              "codepipeline:CreatePipeline",
              "codepipeline:DeletePipeline",
              "codepipeline:GetPipeline",
              "codepipeline:GetPipelineState",
              "codepipeline:StartPipelineExecution",
              "codepipeline:TagResource",
              "codepipeline:UpdatePipeline"
            ],
            "Resource": [
              "arn:aws:codepipeline:*:*:sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCIAMUserPermission",
            "Effect": "Allow",
            "Action": [
              "cognito-idp:CreateUserPool",
              "cognito-idp:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "sagemaker:launch-source"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCIAMPermission",
            "Effect": "Allow",
            "Action": [
              "cognito-idp:CreateGroup",
              "cognito-idp:CreateUserPoolDomain",
              "cognito-idp:CreateUserPoolClient",
              "cognito-idp:DeleteGroup",
              "cognito-idp:DeleteUserPool",
              "cognito-idp:DeleteUserPoolClient",
              "cognito-idp:DeleteUserPoolDomain",
              "cognito-idp:DescribeUserPool",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:UpdateUserPool",
              "cognito-idp:UpdateUserPoolClient"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/sagemaker:launch-source": "*"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogECRPermission",
            "Effect": "Allow",
            "Action": [
              "ecr:CreateRepository",
              "ecr:DeleteRepository",
              "ecr:TagResource"
            ],
            "Resource": [
              "arn:aws:ecr:*:*:repository/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogEventBridgePermission",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:DeleteRule",
              "events:DisableRule",
              "events:EnableRule",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogFirehosePermission",
            "Effect": "Allow",
            "Action": [
              "firehose:CreateDeliveryStream",
              "firehose:DeleteDeliveryStream",
              "firehose:DescribeDeliveryStream",
              "firehose:StartDeliveryStreamEncryption",
              "firehose:StopDeliveryStreamEncryption",
              "firehose:UpdateDestination"
            ],
            "Resource": "arn:aws:firehose:*:*:deliverystream/sagemaker-*"
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogGluePermission",
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase",
              "glue:DeleteDatabase"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/sagemaker-*",
              "arn:aws:glue:*:*:table/sagemaker-*",
              "arn:aws:glue:*:*:userDefinedFunction/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogGlueClassiferPermission",
            "Effect": "Allow",
            "Action": [
              "glue:CreateClassifier",
              "glue:DeleteClassifier",
              "glue:DeleteCrawler",
              "glue:DeleteJob",
              "glue:DeleteTrigger",
              "glue:DeleteWorkflow",
              "glue:StopCrawler"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogGlueWorkflowPermission",
            "Effect": "Allow",
            "Action": [
              "glue:CreateWorkflow"
            ],
            "Resource": [
              "arn:aws:glue:*:*:workflow/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogGlueJobPermission",
            "Effect": "Allow",
            "Action": [
              "glue:CreateJob"
            ],
            "Resource": [
              "arn:aws:glue:*:*:job/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogGlueCrawlerPermission",
            "Effect": "Allow",
            "Action": [
              "glue:CreateCrawler",
              "glue:GetCrawler"
            ],
            "Resource": [
              "arn:aws:glue:*:*:crawler/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogGlueTriggerPermission",
            "Effect": "Allow",
            "Action": [
              "glue:CreateTrigger",
              "glue:GetTrigger"
            ],
            "Resource": [
              "arn:aws:glue:*:*:trigger/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogPassRolePermission",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalog*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogLambdaPermission",
            "Effect": "Allow",
            "Action": [
              "lambda:AddPermission",
              "lambda:CreateFunction",
              "lambda:DeleteFunction",
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:InvokeFunction",
              "lambda:RemovePermission"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogLambdaTagPermission",
            "Effect": "Allow",
            "Action": "lambda:TagResource",
            "Resource": [
              "arn:aws:lambda:*:*:function:sagemaker-*"
            ],
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": [
                  "sagemaker:*"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogLogGroupPermission",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DeleteLogGroup",
              "logs:DeleteLogStream",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:PutRetentionPolicy"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/apigateway/AccessLogs/*",
              "arn:aws:logs:*:*:log-group::log-stream:*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogS3ReadPermission",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "s3:ExistingObjectTag/servicecatalog:provisioning": "true"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogS3ReadSagemakerResourcePermission",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": [
              "arn:aws:s3:::sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogS3MutatePermission",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteBucketPolicy",
              "s3:GetBucketPolicy",
              "s3:PutBucketAcl",
              "s3:PutBucketNotification",
              "s3:PutBucketPolicy",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketLogging",
              "s3:PutEncryptionConfiguration",
              "s3:PutBucketCORS",
              "s3:PutBucketTagging",
              "s3:PutObjectTagging"
            ],
            "Resource": "arn:aws:s3:::sagemaker-*"
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogSageMakerPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateEndpoint",
              "sagemaker:CreateEndpointConfig",
              "sagemaker:CreateModel",
              "sagemaker:CreateWorkteam",
              "sagemaker:DeleteEndpoint",
              "sagemaker:DeleteEndpointConfig",
              "sagemaker:DeleteModel",
              "sagemaker:DeleteWorkteam",
              "sagemaker:DescribeModel",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeWorkteam",
              "sagemaker:CreateCodeRepository",
              "sagemaker:DescribeCodeRepository",
              "sagemaker:UpdateCodeRepository",
              "sagemaker:DeleteCodeRepository"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogSageMakerTagPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddTags"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:endpoint/*",
              "arn:aws:sagemaker:*:*:endpoint-config/*",
              "arn:aws:sagemaker:*:*:model/*",
              "arn:aws:sagemaker:*:*:pipeline/*",
              "arn:aws:sagemaker:*:*:project/*",
              "arn:aws:sagemaker:*:*:model-package/*"
            ],
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": [
                  "sagemaker:*"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogSageMakerImagePermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateImage",
              "sagemaker:DeleteImage",
              "sagemaker:DescribeImage",
              "sagemaker:UpdateImage",
              "sagemaker:ListTags"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:image/*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogStepFunctionPermission",
            "Effect": "Allow",
            "Action": [
              "states:CreateStateMachine",
              "states:DeleteStateMachine",
              "states:UpdateStateMachine"
            ],
            "Resource": [
              "arn:aws:states:*:*:stateMachine:sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCodeStarPermission",
            "Effect": "Allow",
            "Action": "codestar-connections:PassConnection",
            "Resource": "arn:aws:codestar-connections:*:*:connection/*",
            "Condition": {
              "StringEquals": {
                "codestar-connections:PassedToService": "codepipeline.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerServiceCatalogCodeConnectionPermission",
            "Effect": "Allow",
            "Action": "codeconnections:PassConnection",
            "Resource": "arn:aws:codeconnections:*:*:connection/*",
            "Condition": {
              "StringEquals": {
                "codeconnections:PassedToService": "codepipeline.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDevOpsGuruServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAutoScalingGroups",
              "cloudtrail:LookupEvents",
              "cloudwatch:GetMetricData",
              "cloudwatch:ListMetrics",
              "cloudwatch:DescribeAnomalyDetectors",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:ListDashboards",
              "cloudwatch:GetDashboard",
              "cloudformation:GetTemplate",
              "cloudformation:ListStacks",
              "cloudformation:ListStackResources",
              "cloudformation:DescribeStacks",
              "cloudformation:ListImports",
              "codedeploy:BatchGetDeployments",
              "codedeploy:GetDeploymentGroup",
              "codedeploy:ListDeployments",
              "config:DescribeConfigurationRecorderStatus",
              "config:GetResourceConfigHistory",
              "events:ListRuleNamesByTarget",
              "xray:GetServiceGraph",
              "organizations:ListRoots",
              "organizations:ListChildren",
              "organizations:ListDelegatedAdministrators",
              "pi:GetResourceMetrics",
              "tag:GetResources",
              "lambda:GetFunction",
              "lambda:GetFunctionConcurrency",
              "lambda:GetAccountSettings",
              "lambda:ListProvisionedConcurrencyConfigs",
              "lambda:ListAliases",
              "lambda:ListEventSourceMappings",
              "lambda:GetPolicy",
              "ec2:DescribeSubnets",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingPolicies",
              "sqs:GetQueueAttributes",
              "kinesis:DescribeStream",
              "kinesis:DescribeLimits",
              "dynamodb:DescribeTable",
              "dynamodb:DescribeLimits",
              "dynamodb:DescribeContinuousBackups",
              "dynamodb:DescribeStream",
              "dynamodb:ListStreams",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters",
              "rds:DescribeOptionGroups",
              "rds:DescribeDBClusterParameters",
              "rds:DescribeDBInstanceAutomatedBackups",
              "rds:DescribeAccountAttributes",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "s3:GetBucketNotification",
              "s3:GetBucketPolicy",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetBucketTagging",
              "s3:GetBucketWebsite",
              "s3:GetIntelligentTieringConfiguration",
              "s3:GetLifecycleConfiguration",
              "s3:GetReplicationConfiguration",
              "s3:ListAllMyBuckets",
              "s3:ListStorageLensConfigurations",
              "servicequotas:GetServiceQuota",
              "servicequotas:ListRequestedServiceQuotaChangeHistory",
              "servicequotas:ListServiceQuotas"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowPutTargetsOnASpecificRule",
            "Effect": "Allow",
            "Action": [
              "events:PutTargets",
              "events:PutRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/DevOps-Guru-managed-*"
          },
          {
            "Sid": "AllowCreateOpsItem",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateOpsItem"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAddTagsToOpsItem",
            "Effect": "Allow",
            "Action": [
              "ssm:AddTagsToResource"
            ],
            "Resource": "arn:aws:ssm:*:*:opsitem/*"
          },
          {
            "Sid": "AllowAccessOpsItem",
            "Effect": "Allow",
            "Action": [
              "ssm:GetOpsItem",
              "ssm:UpdateOpsItem"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/DevOps-GuruInsightSsmOpsItemRelated": "true"
              }
            }
          },
          {
            "Sid": "AllowCreateManagedRule",
            "Effect": "Allow",
            "Action": "events:PutRule",
            "Resource": "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*"
          },
          {
            "Sid": "AllowAccessManagedRule",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*"
          },
          {
            "Sid": "AllowOtherOperationsOnManagedRule",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:EnableRule",
              "events:DisableRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": "arn:aws:events:*:*:rule/DevOpsGuruManagedRule*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "devops-guru.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowTagBasedFilterLogEvents",
            "Effect": "Allow",
            "Action": [
              "logs:FilterLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/DevOps-Guru-Analysis": "true"
              }
            }
          },
          {
            "Sid": "AllowAPIGatewayGetIntegrations",
            "Effect": "Allow",
            "Action": "apigateway:GET",
            "Resource": [
              "arn:aws:apigateway:*::/restapis/??????????",
              "arn:aws:apigateway:*::/restapis/*/resources",
              "arn:aws:apigateway:*::/restapis/*/resources/*/methods/*/integration"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPanoramaGreengrassGroupRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PanoramaS3Access",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucket*",
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::*aws-panorama*"
            ]
          },
          {
            "Sid": "PanoramaCLoudWatchPutDashboard",
            "Effect": "Allow",
            "Action": "cloudwatch:PutDashboard",
            "Resource": [
              "arn:aws:cloudwatch::*:dashboard/panorama*"
            ]
          },
          {
            "Sid": "PanoramaCloudWatchPutMetricData",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*"
          },
          {
            "Sid": "PanoramaGreenGrassCloudWatchAccess",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents",
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/greengrass/*"
          },
          {
            "Sid": "PanoramaAccess",
            "Effect": "Allow",
            "Action": [
              "panorama:*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPanoramaFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "panorama:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:ListBucket"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "s3:DataAccessPointArn": "arn:aws:s3:*:*:accesspoint/panorama*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue",
              "secretsmanager:DescribeSecret",
              "secretsmanager:ListSecretVersionIds",
              "secretsmanager:PutSecretValue",
              "secretsmanager:UpdateSecret"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:panorama*",
              "arn:aws:secretsmanager:*:*:secret:Panorama*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "panorama.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:Describe*",
              "logs:Get*",
              "logs:List*",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:TestMetricFilter",
              "logs:FilterLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*",
              "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:ListRoles",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "panorama.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPanoramaApplianceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PanoramaDeviceCreateLogStream",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*"
          },
          {
            "Sid": "PanoramaDeviceCreateLogGroup",
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/panorama_device*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPanoramaSageMakerRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PanoramaSageMakerS3Access",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:GetBucket*"
            ],
            "Resource": [
              "arn:aws:s3:::*aws-panorama*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPanoramaServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PanoramaIoTThingAccess",
            "Effect": "Allow",
            "Action": [
              "iot:CreateThing",
              "iot:DeleteThing",
              "iot:DeleteThingShadow",
              "iot:DescribeThing",
              "iot:GetThingShadow",
              "iot:UpdateThing",
              "iot:UpdateThingShadow"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/panorama*"
            ]
          },
          {
            "Sid": "PanoramaIoTCertificateAccess",
            "Effect": "Allow",
            "Action": [
              "iot:AttachThingPrincipal",
              "iot:DetachThingPrincipal",
              "iot:UpdateCertificate",
              "iot:DeleteCertificate",
              "iot:AttachPrincipalPolicy",
              "iot:DetachPrincipalPolicy"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/panorama*",
              "arn:aws:iot:*:*:cert/*"
            ]
          },
          {
            "Sid": "PanoramaIoTCreateCertificateAndPolicyAccess",
            "Effect": "Allow",
            "Action": [
              "iot:CreateKeysAndCertificate",
              "iot:CreatePolicy"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PanoramaIoTCreatePolicyVersionAccess",
            "Effect": "Allow",
            "Action": [
              "iot:CreatePolicyVersion"
            ],
            "Resource": [
              "arn:aws:iot:*:*:policy/panorama*"
            ]
          },
          {
            "Sid": "PanoramaIoTJobAccess",
            "Effect": "Allow",
            "Action": [
              "iot:DescribeJobExecution",
              "iot:CreateJob",
              "iot:DeleteJob"
            ],
            "Resource": [
              "arn:aws:iot:*:*:job/panorama*",
              "arn:aws:iot:*:*:thing/panorama*"
            ]
          },
          {
            "Sid": "PanoramaIoTEndpointAccess",
            "Effect": "Allow",
            "Action": [
              "iot:DescribeEndpoint"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PanoramaAccess",
            "Effect": "Allow",
            "Action": [
              "panorama:Describe*",
              "panorama:List*",
              "panorama:Get*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PanoramaS3Access",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:DeleteBucket",
              "s3:ListBucket",
              "s3:GetBucket*",
              "s3:CreateBucket"
            ],
            "Resource": [
              "arn:aws:s3:::*aws-panorama*"
            ]
          },
          {
            "Sid": "PanoramaIAMPassSageMakerRoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSPanoramaSageMakerRole",
              "arn:aws:iam::*:role/service-role/AWSPanoramaSageMakerRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "sagemaker.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "PanoramaIAMPassGreengrassRoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSPanoramaGreengrassGroupRole",
              "arn:aws:iam::*:role/service-role/AWSPanoramaGreengrassGroupRole",
              "arn:aws:iam::*:role/AWSPanoramaGreengrassRole",
              "arn:aws:iam::*:role/service-role/AWSPanoramaGreengrassRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "greengrass.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "PanoramaIAMPassIoTRoleAccess",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWSPanoramaApplianceRole",
              "arn:aws:iam::*:role/service-role/AWSPanoramaApplianceRole"
            ],
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": "iot.amazonaws.com"
              }
            }
          },
          {
            "Sid": "PanoramaGreenGrassAccess",
            "Effect": "Allow",
            "Action": [
              "greengrass:AssociateRoleToGroup",
              "greengrass:AssociateServiceRoleToAccount",
              "greengrass:CreateResourceDefinition",
              "greengrass:CreateResourceDefinitionVersion",
              "greengrass:CreateCoreDefinition",
              "greengrass:CreateCoreDefinitionVersion",
              "greengrass:CreateDeployment",
              "greengrass:CreateFunctionDefinition",
              "greengrass:CreateFunctionDefinitionVersion",
              "greengrass:CreateGroup",
              "greengrass:CreateGroupCertificateAuthority",
              "greengrass:CreateGroupVersion",
              "greengrass:CreateLoggerDefinition",
              "greengrass:CreateLoggerDefinitionVersion",
              "greengrass:CreateSubscriptionDefinition",
              "greengrass:CreateSubscriptionDefinitionVersion",
              "greengrass:DeleteCoreDefinition",
              "greengrass:DeleteFunctionDefinition",
              "greengrass:DeleteResourceDefinition",
              "greengrass:DeleteGroup",
              "greengrass:DeleteLoggerDefinition",
              "greengrass:DeleteSubscriptionDefinition",
              "greengrass:DisassociateRoleFromGroup",
              "greengrass:DisassociateServiceRoleFromAccount",
              "greengrass:GetAssociatedRole",
              "greengrass:GetConnectivityInfo",
              "greengrass:GetCoreDefinition",
              "greengrass:GetCoreDefinitionVersion",
              "greengrass:GetDeploymentStatus",
              "greengrass:GetDeviceDefinition",
              "greengrass:GetDeviceDefinitionVersion",
              "greengrass:GetFunctionDefinition",
              "greengrass:GetFunctionDefinitionVersion",
              "greengrass:GetGroup",
              "greengrass:GetGroupCertificateAuthority",
              "greengrass:GetGroupCertificateConfiguration",
              "greengrass:GetGroupVersion",
              "greengrass:GetLoggerDefinition",
              "greengrass:GetLoggerDefinitionVersion",
              "greengrass:GetResourceDefinition",
              "greengrass:GetServiceRoleForAccount",
              "greengrass:GetSubscriptionDefinition",
              "greengrass:GetSubscriptionDefinitionVersion",
              "greengrass:ListCoreDefinitionVersions",
              "greengrass:ListCoreDefinitions",
              "greengrass:ListDeployments",
              "greengrass:ListDeviceDefinitionVersions",
              "greengrass:ListDeviceDefinitions",
              "greengrass:ListFunctionDefinitionVersions",
              "greengrass:ListFunctionDefinitions",
              "greengrass:ListGroupCertificateAuthorities",
              "greengrass:ListGroupVersions",
              "greengrass:ListGroups",
              "greengrass:ListLoggerDefinitionVersions",
              "greengrass:ListLoggerDefinitions",
              "greengrass:ListSubscriptionDefinitionVersions",
              "greengrass:ListSubscriptionDefinitions",
              "greengrass:ResetDeployments",
              "greengrass:UpdateConnectivityInfo",
              "greengrass:UpdateCoreDefinition",
              "greengrass:UpdateDeviceDefinition",
              "greengrass:UpdateFunctionDefinition",
              "greengrass:UpdateGroup",
              "greengrass:UpdateGroupCertificateConfiguration",
              "greengrass:UpdateLoggerDefinition",
              "greengrass:UpdateSubscriptionDefinition",
              "greengrass:UpdateResourceDefinition"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PanoramaLambdaUsersFunctionAccess",
            "Effect": "Allow",
            "Action": [
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:ListFunctions",
              "lambda:ListVersionsByFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*"
            ]
          },
          {
            "Sid": "PanoramaSageMakerWriteAccess",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateTrainingJob",
              "sagemaker:StopTrainingJob",
              "sagemaker:CreateCompilationJob",
              "sagemaker:DescribeCompilationJob",
              "sagemaker:StopCompilationJob"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:training-job/panorama*",
              "arn:aws:sagemaker:*:*:compilation-job/panorama*"
            ]
          },
          {
            "Sid": "PanoramaSageMakerListAccess",
            "Effect": "Allow",
            "Action": [
              "sagemaker:ListCompilationJobs"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PanoramaSageMakerReadAccess",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeTrainingJob"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:training-job/*"
            ]
          },
          {
            "Sid": "PanoramaCWLogsAccess",
            "Effect": "Allow",
            "Action": [
              "iot:AttachPolicy",
              "iot:CreateRoleAlias"
            ],
            "Resource": [
              "arn:aws:iot:*:*:policy/panorama*",
              "arn:aws:iot:*:*:rolealias/panorama*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticContainerRegistryPublicPowerUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr-public:GetAuthorizationToken",
              "sts:GetServiceBearerToken",
              "ecr-public:BatchCheckLayerAvailability",
              "ecr-public:GetRepositoryPolicy",
              "ecr-public:DescribeRepositories",
              "ecr-public:DescribeRegistries",
              "ecr-public:DescribeImages",
              "ecr-public:DescribeImageTags",
              "ecr-public:GetRepositoryCatalogData",
              "ecr-public:GetRegistryCatalogData",
              "ecr-public:InitiateLayerUpload",
              "ecr-public:UploadLayerPart",
              "ecr-public:CompleteLayerUpload",
              "ecr-public:PutImage"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerFeatureStoreAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetBucketAcl",
              "s3:PutObjectAcl"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*/metadata/*",
              "arn:aws:s3:::*Sagemaker*/metadata/*",
              "arn:aws:s3:::*sagemaker*/metadata/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:GetTable",
              "glue:UpdateTable"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/sagemaker_featurestore",
              "arn:aws:glue:*:*:table/sagemaker_featurestore/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDevOpsGuruReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DevOpsGuruReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "devops-guru:DescribeAccountHealth",
              "devops-guru:DescribeAccountOverview",
              "devops-guru:DescribeAnomaly",
              "devops-guru:DescribeEventSourcesConfig",
              "devops-guru:DescribeFeedback",
              "devops-guru:DescribeInsight",
              "devops-guru:DescribeResourceCollectionHealth",
              "devops-guru:DescribeServiceIntegration",
              "devops-guru:GetCostEstimation",
              "devops-guru:GetResourceCollection",
              "devops-guru:ListAnomaliesForInsight",
              "devops-guru:ListEvents",
              "devops-guru:ListInsights",
              "devops-guru:ListAnomalousLogGroups",
              "devops-guru:ListMonitoredResources",
              "devops-guru:ListNotificationChannels",
              "devops-guru:ListRecommendations",
              "devops-guru:SearchInsights",
              "devops-guru:StartCostEstimation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudFormationListStacksAccess",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
          },
          {
            "Sid": "CloudWatchGetMetricDataAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RDSDescribeDBInstancesAccess",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchLogsFilterLogEventsAccess",
            "Effect": "Allow",
            "Action": [
              "logs:FilterLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/DevOps-Guru-Analysis": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDevOpsGuruFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DevOpsGuruFullAccess",
            "Effect": "Allow",
            "Action": [
              "devops-guru:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudFormationListStacksAccess",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchGetMetricDataAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SnsListTopicsAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SnsTopicOperations",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:GetTopicAttributes",
              "sns:SetTopicAttributes",
              "sns:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:DevOps-Guru-*"
          },
          {
            "Sid": "DevOpsGuruSlrCreation",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "devops-guru.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DevOpsGuruSlrDeletion",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
          },
          {
            "Sid": "RDSDescribeDBInstancesAccess",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchLogsFilterLogEventsAccess",
            "Effect": "Allow",
            "Action": [
              "logs:FilterLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/DevOps-Guru-Analysis": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticContainerRegistryPublicFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr-public:*",
              "sts:GetServiceBearerToken"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonElasticContainerRegistryPublicReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr-public:GetAuthorizationToken",
              "sts:GetServiceBearerToken",
              "ecr-public:BatchCheckLayerAvailability",
              "ecr-public:GetRepositoryPolicy",
              "ecr-public:DescribeRepositories",
              "ecr-public:DescribeRegistries",
              "ecr-public:DescribeImages",
              "ecr-public:DescribeImageTags",
              "ecr-public:GetRepositoryCatalogData",
              "ecr-public:GetRegistryCatalogData"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AdministratorAccess-Amplify",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CLICloudformationPolicy",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateChangeSet",
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStackResources",
              "cloudformation:DescribeStacks",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:GetTemplate",
              "cloudformation:UpdateStack",
              "cloudformation:ListStacks",
              "cloudformation:ListStackResources",
              "cloudformation:DeleteStackSet",
              "cloudformation:DescribeStackSet",
              "cloudformation:UpdateStackSet",
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/amplify-*"
            ]
          },
          {
            "Sid": "CLIManageviaCFNPolicy",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoleTags",
              "iam:TagRole",
              "iam:AttachRolePolicy",
              "iam:CreatePolicy",
              "iam:DeletePolicy",
              "iam:DeleteRole",
              "iam:DeleteRolePolicy",
              "iam:DetachRolePolicy",
              "iam:PutRolePolicy",
              "iam:UntagRole",
              "iam:UpdateRole",
              "iam:GetRole",
              "iam:GetPolicy",
              "iam:GetRolePolicy",
              "iam:PassRole",
              "iam:ListPolicyVersions",
              "iam:CreatePolicyVersion",
              "iam:DeletePolicyVersion",
              "iam:CreateRole",
              "iam:ListRolePolicies",
              "iam:PutRolePermissionsBoundary",
              "iam:DeleteRolePermissionsBoundary",
              "appsync:CreateApiKey",
              "appsync:CreateDataSource",
              "appsync:CreateFunction",
              "appsync:CreateResolver",
              "appsync:CreateType",
              "appsync:DeleteApiKey",
              "appsync:DeleteDataSource",
              "appsync:DeleteFunction",
              "appsync:DeleteResolver",
              "appsync:DeleteType",
              "appsync:GetDataSource",
              "appsync:GetFunction",
              "appsync:GetIntrospectionSchema",
              "appsync:GetResolver",
              "appsync:GetSchemaCreationStatus",
              "appsync:GetType",
              "appsync:GraphQL",
              "appsync:ListApiKeys",
              "appsync:ListDataSources",
              "appsync:ListFunctions",
              "appsync:ListGraphqlApis",
              "appsync:ListResolvers",
              "appsync:ListResolversByFunction",
              "appsync:ListTypes",
              "appsync:StartSchemaCreation",
              "appsync:UntagResource",
              "appsync:UpdateApiKey",
              "appsync:UpdateDataSource",
              "appsync:UpdateFunction",
              "appsync:UpdateResolver",
              "appsync:UpdateType",
              "appsync:TagResource",
              "appsync:CreateGraphqlApi",
              "appsync:DeleteGraphqlApi",
              "appsync:GetGraphqlApi",
              "appsync:ListTagsForResource",
              "appsync:UpdateGraphqlApi",
              "apigateway:DELETE",
              "apigateway:GET",
              "apigateway:PATCH",
              "apigateway:POST",
              "apigateway:PUT",
              "cognito-idp:CreateUserPool",
              "cognito-identity:CreateIdentityPool",
              "cognito-identity:DeleteIdentityPool",
              "cognito-identity:DescribeIdentity",
              "cognito-identity:DescribeIdentityPool",
              "cognito-identity:SetIdentityPoolRoles",
              "cognito-identity:GetIdentityPoolRoles",
              "cognito-identity:UpdateIdentityPool",
              "cognito-idp:CreateUserPoolClient",
              "cognito-idp:DeleteUserPool",
              "cognito-idp:DeleteUserPoolClient",
              "cognito-idp:DescribeUserPool",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:ListTagsForResource",
              "cognito-idp:ListUserPoolClients",
              "cognito-idp:UpdateUserPoolClient",
              "cognito-idp:CreateGroup",
              "cognito-idp:DeleteGroup",
              "cognito-identity:TagResource",
              "cognito-idp:TagResource",
              "cognito-idp:UpdateUserPool",
              "cognito-idp:SetUserPoolMfaConfig",
              "lambda:AddPermission",
              "lambda:CreateFunction",
              "lambda:DeleteFunction",
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:InvokeAsync",
              "lambda:InvokeFunction",
              "lambda:RemovePermission",
              "lambda:UpdateFunctionCode",
              "lambda:UpdateFunctionConfiguration",
              "lambda:ListTags",
              "lambda:TagResource",
              "lambda:UntagResource",
              "lambda:AddLayerVersionPermission",
              "lambda:CreateEventSourceMapping",
              "lambda:DeleteEventSourceMapping",
              "lambda:DeleteLayerVersion",
              "lambda:GetEventSourceMapping",
              "lambda:GetLayerVersion",
              "lambda:ListEventSourceMappings",
              "lambda:ListLayerVersions",
              "lambda:PublishLayerVersion",
              "lambda:RemoveLayerVersionPermission",
              "lambda:UpdateEventSourceMapping",
              "dynamodb:CreateTable",
              "dynamodb:DeleteItem",
              "dynamodb:DeleteTable",
              "dynamodb:DescribeContinuousBackups",
              "dynamodb:DescribeTable",
              "dynamodb:DescribeTimeToLive",
              "dynamodb:ListStreams",
              "dynamodb:PutItem",
              "dynamodb:TagResource",
              "dynamodb:ListTagsOfResource",
              "dynamodb:UntagResource",
              "dynamodb:UpdateContinuousBackups",
              "dynamodb:UpdateItem",
              "dynamodb:UpdateTable",
              "dynamodb:UpdateTimeToLive",
              "s3:CreateBucket",
              "s3:ListBucket",
              "s3:PutBucketAcl",
              "s3:PutBucketCORS",
              "s3:PutBucketNotification",
              "s3:PutBucketPolicy",
              "s3:PutBucketWebsite",
              "s3:PutObjectAcl",
              "cloudfront:CreateCloudFrontOriginAccessIdentity",
              "cloudfront:CreateDistribution",
              "cloudfront:DeleteCloudFrontOriginAccessIdentity",
              "cloudfront:DeleteDistribution",
              "cloudfront:GetCloudFrontOriginAccessIdentity",
              "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
              "cloudfront:GetDistribution",
              "cloudfront:GetDistributionConfig",
              "cloudfront:TagResource",
              "cloudfront:UntagResource",
              "cloudfront:UpdateCloudFrontOriginAccessIdentity",
              "cloudfront:UpdateDistribution",
              "events:DeleteRule",
              "events:DescribeRule",
              "events:ListRuleNamesByTarget",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets",
              "mobiletargeting:GetApp",
              "kinesis:AddTagsToStream",
              "kinesis:CreateStream",
              "kinesis:DeleteStream",
              "kinesis:DescribeStream",
              "kinesis:DescribeStreamSummary",
              "kinesis:ListTagsForStream",
              "kinesis:PutRecords",
              "es:AddTags",
              "es:CreateElasticsearchDomain",
              "es:DeleteElasticsearchDomain",
              "es:DescribeElasticsearchDomain",
              "es:UpdateElasticsearchDomainConfig",
              "s3:PutEncryptionConfiguration",
              "s3:PutBucketPublicAccessBlock"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CLISDKCalls",
            "Effect": "Allow",
            "Action": [
              "appsync:GetIntrospectionSchema",
              "appsync:GraphQL",
              "appsync:UpdateApiKey",
              "appsync:ListApiKeys",
              "amplify:*",
              "amplifybackend:*",
              "amplifyuibuilder:*",
              "sts:AssumeRole",
              "mobiletargeting:*",
              "cognito-idp:AdminAddUserToGroup",
              "cognito-idp:AdminCreateUser",
              "cognito-idp:CreateGroup",
              "cognito-idp:DeleteGroup",
              "cognito-idp:DeleteUser",
              "cognito-idp:ListUsers",
              "cognito-idp:AdminGetUser",
              "cognito-idp:ListUsersInGroup",
              "cognito-idp:AdminDisableUser",
              "cognito-idp:AdminRemoveUserFromGroup",
              "cognito-idp:AdminResetUserPassword",
              "cognito-idp:AdminListGroupsForUser",
              "cognito-idp:ListGroups",
              "cognito-idp:AdminListUserAuthEvents",
              "cognito-idp:AdminDeleteUser",
              "cognito-idp:AdminConfirmSignUp",
              "cognito-idp:AdminEnableUser",
              "cognito-idp:AdminUpdateUserAttributes",
              "cognito-idp:DescribeIdentityProvider",
              "cognito-idp:DescribeUserPool",
              "cognito-idp:DeleteUserPool",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:CreateUserPool",
              "cognito-idp:CreateUserPoolClient",
              "cognito-idp:UpdateUserPool",
              "cognito-idp:AdminSetUserPassword",
              "cognito-idp:ListUserPools",
              "cognito-idp:ListUserPoolClients",
              "cognito-idp:ListIdentityProviders",
              "cognito-idp:GetUserPoolMfaConfig",
              "cognito-identity:GetIdentityPoolRoles",
              "cognito-identity:SetIdentityPoolRoles",
              "cognito-identity:CreateIdentityPool",
              "cognito-identity:DeleteIdentityPool",
              "cognito-identity:ListIdentityPools",
              "cognito-identity:DescribeIdentityPool",
              "dynamodb:DescribeTable",
              "dynamodb:ListTables",
              "lambda:GetFunction",
              "lambda:CreateFunction",
              "lambda:AddPermission",
              "lambda:DeleteFunction",
              "lambda:DeleteLayerVersion",
              "lambda:InvokeFunction",
              "lambda:ListLayerVersions",
              "iam:PutRolePolicy",
              "iam:CreatePolicy",
              "iam:AttachRolePolicy",
              "iam:ListPolicyVersions",
              "iam:ListAttachedRolePolicies",
              "iam:CreateRole",
              "iam:PassRole",
              "iam:ListRolePolicies",
              "iam:DeleteRolePolicy",
              "iam:CreatePolicyVersion",
              "iam:DeletePolicyVersion",
              "iam:DeleteRole",
              "iam:DetachRolePolicy",
              "cloudformation:ListStacks",
              "cloudformation:DescribeStacks",
              "sns:CreateSMSSandboxPhoneNumber",
              "sns:GetSMSSandboxAccountStatus",
              "sns:VerifySMSSandboxPhoneNumber",
              "sns:DeleteSMSSandboxPhoneNumber",
              "sns:ListSMSSandboxPhoneNumbers",
              "sns:ListOriginationNumbers",
              "rekognition:DescribeCollection",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "lex:GetBot",
              "lex:GetBuiltinIntent",
              "lex:GetBuiltinIntents",
              "lex:GetBuiltinSlotTypes",
              "cloudformation:GetTemplateSummary",
              "codecommit:GitPull",
              "cloudfront:GetCloudFrontOriginAccessIdentity",
              "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
              "polly:DescribeVoices"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmplifySSMCalls",
            "Effect": "Allow",
            "Action": [
              "ssm:PutParameter",
              "ssm:DeleteParameter",
              "ssm:GetParametersByPath",
              "ssm:GetParameters",
              "ssm:GetParameter",
              "ssm:DeleteParameters"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/amplify/*"
          },
          {
            "Sid": "GeoPowerUser",
            "Effect": "Allow",
            "Action": [
              "geo:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmplifyEcrSDKCalls",
            "Effect": "Allow",
            "Action": [
              "ecr:DescribeRepositories"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmplifyStorageSDKCalls",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteBucketPolicy",
              "s3:DeleteBucketWebsite",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:PutBucketAcl",
              "s3:PutBucketCORS",
              "s3:PutBucketNotification",
              "s3:PutBucketPolicy",
              "s3:PutBucketVersioning",
              "s3:PutBucketWebsite",
              "s3:PutEncryptionConfiguration",
              "s3:PutLifecycleConfiguration",
              "s3:PutObject",
              "s3:PutObjectAcl"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmplifySSRCalls",
            "Effect": "Allow",
            "Action": [
              "cloudfront:CreateCloudFrontOriginAccessIdentity",
              "cloudfront:CreateDistribution",
              "cloudfront:CreateInvalidation",
              "cloudfront:GetDistribution",
              "cloudfront:GetDistributionConfig",
              "cloudfront:ListCloudFrontOriginAccessIdentities",
              "cloudfront:ListDistributions",
              "cloudfront:ListDistributionsByLambdaFunction",
              "cloudfront:ListDistributionsByWebACLId",
              "cloudfront:ListFieldLevelEncryptionConfigs",
              "cloudfront:ListFieldLevelEncryptionProfiles",
              "cloudfront:ListInvalidations",
              "cloudfront:ListPublicKeys",
              "cloudfront:ListStreamingDistributions",
              "cloudfront:UpdateDistribution",
              "cloudfront:TagResource",
              "cloudfront:UntagResource",
              "cloudfront:ListTagsForResource",
              "cloudfront:DeleteDistribution",
              "iam:AttachRolePolicy",
              "iam:CreateRole",
              "iam:CreateServiceLinkedRole",
              "iam:GetRole",
              "iam:PutRolePolicy",
              "iam:PassRole",
              "lambda:CreateFunction",
              "lambda:EnableReplication",
              "lambda:DeleteFunction",
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:PublishVersion",
              "lambda:UpdateFunctionCode",
              "lambda:UpdateFunctionConfiguration",
              "lambda:ListTags",
              "lambda:TagResource",
              "lambda:UntagResource",
              "route53:ChangeResourceRecordSets",
              "route53:ListHostedZonesByName",
              "route53:ListResourceRecordSets",
              "s3:CreateBucket",
              "s3:GetAccelerateConfiguration",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutAccelerateConfiguration",
              "s3:PutBucketPolicy",
              "s3:PutObject",
              "s3:PutBucketTagging",
              "s3:GetBucketTagging",
              "lambda:ListEventSourceMappings",
              "lambda:CreateEventSourceMapping",
              "iam:UpdateAssumeRolePolicy",
              "iam:DeleteRolePolicy",
              "sqs:CreateQueue",
              "sqs:DeleteQueue",
              "sqs:GetQueueAttributes",
              "sqs:SetQueueAttributes",
              "amplify:GetApp",
              "amplify:GetBranch",
              "amplify:UpdateApp",
              "amplify:UpdateBranch"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmplifySSRViewLogGroups",
            "Effect": "Allow",
            "Action": "logs:DescribeLogGroups",
            "Resource": "arn:aws:logs:*:*:log-group:*"
          },
          {
            "Sid": "AmplifySSRCreateLogGroup",
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/amplify/*"
          },
          {
            "Sid": "AmplifySSRPushLogs",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/amplify/*:log-stream:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForMonitronPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sso:GetManagedApplicationInstance",
              "sso:GetProfile",
              "sso:ListProfiles",
              "sso:ListProfileAssociations",
              "sso:AssociateProfile",
              "sso:ListDirectoryAssociations",
              "sso-directory:DescribeUsers",
              "sso-directory:SearchUsers"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMonitronFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "monitron.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "monitron:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "kms:CreateGrant",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "monitron.*.amazonaws.com"
                ]
              },
              "Bool": {
                "kms:GrantIsForAWSResource": true
              }
            }
          },
          {
            "Sid": "AWSSSOPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "ds:DescribeDirectories",
              "ds:DescribeTrusts"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:DescribeStream",
              "kinesis:ListStreams"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:GetLogEvents",
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/monitron/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceLicenseManagementServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowLicenseManagerActions",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "license-manager:ListReceivedGrants",
              "license-manager:ListDistributedGrants",
              "license-manager:GetGrant",
              "license-manager:CreateGrant",
              "license-manager:CreateGrantVersion",
              "license-manager:DeleteGrant",
              "license-manager:AcceptGrant"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGlueDataBrewServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "GlueDataPermissions",
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabases",
              "glue:GetPartitions",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetConnection"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "GluePIIPermissions",
            "Effect": "Allow",
            "Action": [
              "glue:BatchGetCustomEntityTypes",
              "glue:GetCustomEntityType"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "S3PublicDatasetAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::databrew-public-datasets-*"
            ]
          },
          {
            "Sid": "EC2NetworkingPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeRouteTables",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EC2DeleteGlueNetworkInterfacePermissions",
            "Effect": "Allow",
            "Action": "ec2:DeleteNetworkInterface",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/aws-glue-service-resource": "*"
              }
            },
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EC2GlueTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws-glue-service-resource"
                ]
              }
            },
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "GlueDatabrewLogGroupPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws-glue-databrew/*"
            ]
          },
          {
            "Sid": "LakeFormationPermissions",
            "Effect": "Allow",
            "Action": [
              "lakeformation:GetDataAccess"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:databrew!default-*"
          }
        ]
      }
    },
    {
      "PolicyName": "ECRReplicationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:CreateRepository",
              "ecr:ReplicateImage"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "IVSRecordToS3",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::AWSIVS_*/ivs/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSystemsManagerChangeManagementServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:CreateAssociation",
              "ssm:DeleteAssociation",
              "ssm:CreateOpsItem",
              "ssm:GetOpsItem",
              "ssm:UpdateOpsItem",
              "ssm:StartAutomationExecution",
              "ssm:StopAutomationExecution",
              "ssm:GetAutomationExecution",
              "ssm:GetCalendarState",
              "ssm:GetDocument"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sso:ListDirectoryAssociations"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sso-directory:DescribeUsers",
              "sso-directory:IsMemberInGroup"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:GetGroup",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAuditManagerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm:GetAccountConfiguration",
              "acm:ListCertificates",
              "autoscaling:DescribeAutoScalingGroups",
              "backup:ListBackupPlans",
              "backup:ListRecoveryPointsByResource",
              "bedrock:GetCustomModel",
              "bedrock:GetFoundationModel",
              "bedrock:GetModelCustomizationJob",
              "bedrock:GetModelInvocationLoggingConfiguration",
              "bedrock:ListCustomModels",
              "bedrock:ListFoundationModels",
              "bedrock:ListModelCustomizationJobs",
              "cloudfront:GetDistribution",
              "cloudfront:GetDistributionConfig",
              "cloudfront:ListDistributions",
              "cloudtrail:GetTrail",
              "cloudtrail:ListTrails",
              "cloudtrail:DescribeTrails",
              "cloudtrail:LookupEvents",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cognito-idp:DescribeUserPool",
              "config:DescribeConfigRules",
              "config:DescribeDeliveryChannels",
              "config:ListDiscoveredResources",
              "directconnect:DescribeDirectConnectGateways",
              "directconnect:DescribeVirtualGateways",
              "dynamodb:DescribeContinuousBackups",
              "dynamodb:DescribeBackup",
              "dynamodb:DescribeTableReplicaAutoScaling",
              "dynamodb:DescribeTable",
              "dynamodb:ListBackups",
              "dynamodb:ListGlobalTables",
              "dynamodb:ListTables",
              "ec2:DescribeInstanceCreditSpecifications",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeVpcEndpointConnections",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:GetLaunchTemplateData",
              "ec2:DescribeAddresses",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeEgressOnlyInternetGateways",
              "ec2:DescribeFlowLogs",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
              "ec2:DescribeLocalGateways",
              "ec2:DescribeLocalGatewayVirtualInterfaces",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeVolumes",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:GetEbsDefaultKmsKeyId",
              "ec2:GetEbsEncryptionByDefault",
              "ecs:DescribeClusters",
              "eks:DescribeAddonVersions",
              "elasticache:DescribeCacheClusters",
              "elasticache:DescribeServiceUpdates",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeFileSystems",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeSslPolicies",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticmapreduce:ListClusters",
              "elasticmapreduce:ListSecurityConfigurations",
              "events:DescribeRule",
              "events:ListConnections",
              "events:ListEventBuses",
              "events:ListEventSources",
              "events:ListRules",
              "firehose:ListDeliveryStreams",
              "fsx:DescribeFileSystems",
              "guardduty:ListDetectors",
              "iam:GenerateCredentialReport",
              "iam:GetAccountAuthorizationDetails",
              "iam:GetAccessKeyLastUsed",
              "iam:GetCredentialReport",
              "iam:GetGroupPolicy",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:GetRolePolicy",
              "iam:GetUser",
              "iam:GetUserPolicy",
              "iam:GetAccountPasswordPolicy",
              "iam:GetAccountSummary",
              "iam:ListAttachedGroupPolicies",
              "iam:ListAttachedUserPolicies",
              "iam:ListEntitiesForPolicy",
              "iam:ListGroupsForUser",
              "iam:ListGroupPolicies",
              "iam:ListGroups",
              "iam:ListOpenIdConnectProviders",
              "iam:ListPolicies",
              "iam:ListRolePolicies",
              "iam:ListRoles",
              "iam:ListSamlProviders",
              "iam:ListUserPolicies",
              "iam:ListUsers",
              "iam:ListVirtualMFADevices",
              "iam:ListPolicyVersions",
              "iam:ListAccessKeys",
              "iam:ListAttachedRolePolicies",
              "iam:ListMfaDeviceTags",
              "iam:ListMfaDevices",
              "kafka:ListClusters",
              "kafka:ListKafkaVersions",
              "kinesis:ListStreams",
              "kms:DescribeKey",
              "kms:GetKeyPolicy",
              "kms:GetKeyRotationStatus",
              "kms:ListGrants",
              "kms:ListKeyPolicies",
              "kms:ListKeys",
              "lambda:ListFunctions",
              "license-manager:ListAssociationsForLicenseConfiguration",
              "license-manager:ListLicenseConfigurations",
              "license-manager:ListUsageForLicenseConfiguration",
              "logs:DescribeDestinations",
              "logs:DescribeExportTasks",
              "logs:DescribeLogGroups",
              "logs:DescribeMetricFilters",
              "logs:DescribeResourcePolicies",
              "logs:FilterLogEvents",
              "logs:GetDataProtectionPolicy",
              "es:DescribeDomains",
              "es:DescribeDomain",
              "es:DescribeDomainConfig",
              "es:ListDomainNames",
              "organizations:DescribeOrganization",
              "organizations:DescribePolicy",
              "rds:DescribeCertificates",
              "rds:DescribeDBClusterEndpoints",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBInstances",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstanceAutomatedBackups",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSnapshots",
              "redshift:DescribeLoggingStatus",
              "route53:GetQueryLoggingConfig",
              "sagemaker:DescribeAlgorithm",
              "sagemaker:DescribeFlowDefinition",
              "sagemaker:DescribeHumanTaskUi",
              "sagemaker:DescribeModelBiasJobDefinition",
              "sagemaker:DescribeModelCard",
              "sagemaker:DescribeModelQualityJobDefinition",
              "sagemaker:DescribeDomain",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeLabelingJob",
              "sagemaker:DescribeModel",
              "sagemaker:DescribeTrainingJob",
              "sagemaker:DescribeUserProfile",
              "sagemaker:ListAlgorithms",
              "sagemaker:ListDomains",
              "sagemaker:ListEndpoints",
              "sagemaker:ListEndpointConfigs",
              "sagemaker:ListFlowDefinitions",
              "sagemaker:ListHumanTaskUis",
              "sagemaker:ListLabelingJobs",
              "sagemaker:ListModels",
              "sagemaker:ListModelBiasJobDefinitions",
              "sagemaker:ListModelCards",
              "sagemaker:ListModelQualityJobDefinitions",
              "sagemaker:ListMonitoringAlerts",
              "sagemaker:ListMonitoringSchedules",
              "sagemaker:ListTrainingJobs",
              "sagemaker:ListUserProfiles",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetBucketVersioning",
              "s3:GetEncryptionConfiguration",
              "s3:GetLifecycleConfiguration",
              "s3:ListAllMyBuckets",
              "secretsmanager:DescribeSecret",
              "secretsmanager:ListSecrets",
              "securityhub:DescribeStandards",
              "sns:ListTagsForResource",
              "sns:ListTopics",
              "sqs:ListQueues",
              "waf-regional:GetRule",
              "waf-regional:GetWebAcl",
              "waf:GetRule",
              "waf:GetRuleGroup",
              "waf:ListActivatedRulesInRuleGroup",
              "waf:ListWebAcls",
              "wafv2:ListWebAcls",
              "waf-regional:GetLoggingConfiguration",
              "waf-regional:ListRuleGroups",
              "waf-regional:ListSubscribedRuleGroups",
              "waf-regional:ListWebACLs",
              "waf-regional:ListRules",
              "waf:ListRuleGroups",
              "waf:ListRules"
            ],
            "Resource": "*",
            "Sid": "APIsAccess"
          },
          {
            "Sid": "S3Access",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketAcl",
              "s3:GetBucketLogging",
              "s3:GetBucketOwnershipControls",
              "s3:GetBucketPolicy",
              "s3:GetBucketTagging"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": [
                  "${aws:PrincipalAccount}"
                ]
              }
            }
          },
          {
            "Sid": "APIGatewayAccess",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*/stages/*",
              "arn:aws:apigateway:*::/restapis/*/stages"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": [
                  "${aws:PrincipalAccount}"
                ]
              }
            }
          },
          {
            "Sid": "CreateEventsAccess",
            "Effect": "Allow",
            "Action": [
              "events:PutRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver",
            "Condition": {
              "StringEquals": {
                "events:detail-type": "Security Hub Findings - Imported"
              },
              "Null": {
                "events:source": "false"
              },
              "ForAllValues:StringEquals": {
                "events:source": [
                  "aws.securityhub"
                ]
              }
            }
          },
          {
            "Sid": "EventsAccess",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:DescribeRule",
              "events:EnableRule",
              "events:DisableRule",
              "events:ListTargetsByRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerEdgeDeviceFleetPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DeviceS3Access",
            "Effect": "Allow",
            "Action": [
              "s3:PutObject",
              "s3:GetBucketLocation"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Sid": "SageMakerEdgeApis",
            "Effect": "Allow",
            "Action": [
              "sagemaker:SendHeartbeat",
              "sagemaker:GetDeviceRegistration"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateIoTRoleAlias",
            "Effect": "Allow",
            "Action": [
              "iot:CreateRoleAlias",
              "iot:DescribeRoleAlias",
              "iot:UpdateRoleAlias",
              "iot:ListTagsForResource",
              "iot:TagResource"
            ],
            "Resource": [
              "arn:aws:iot:*:*:rolealias/SageMakerEdge*"
            ]
          },
          {
            "Sid": "CreateIoTRoleAliasIamPermissionsGetRole",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/*SageMaker*",
              "arn:aws:iam::*:role/*Sagemaker*",
              "arn:aws:iam::*:role/*sagemaker*"
            ]
          },
          {
            "Sid": "CreateIoTRoleAliasIamPermissionsPassRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/*SageMaker*",
              "arn:aws:iam::*:role/*Sagemaker*",
              "arn:aws:iam::*:role/*sagemaker*"
            ],
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": [
                  "iot.amazonaws.com",
                  "credentials.iot.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEMRContainersServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "eks:DescribeCluster",
              "eks:ListNodeGroups",
              "eks:DescribeNodeGroup",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm:ImportCertificate",
              "acm:AddTagsToCertificate"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/emr-container:endpoint:managed-certificate": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm:DeleteCertificate"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/emr-container:endpoint:managed-certificate": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "EC2InstanceProfileForImageBuilderECRContainerBuilds",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "imagebuilder:GetComponent",
              "imagebuilder:GetContainerRecipe",
              "ecr:GetAuthorizationToken",
              "ecr:BatchGetImage",
              "ecr:InitiateLayerUpload",
              "ecr:UploadLayerPart",
              "ecr:CompleteLayerUpload",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer",
              "ecr:PutImage"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "kms:EncryptionContextKeys": "aws:imagebuilder:arn",
                "aws:CalledVia": [
                  "imagebuilder.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::ec2imagebuilder*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/imagebuilder/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAuditManagerAdministratorAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AuditManagerAccess",
            "Effect": "Allow",
            "Action": [
              "auditmanager:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "OrganizationsAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:ListAccountsForParent",
              "organizations:ListAccounts",
              "organizations:DescribeOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribeAccount",
              "organizations:ListParents",
              "organizations:ListChildren"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowOnlyAuditManagerIntegration",
            "Effect": "Allow",
            "Action": [
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator",
              "organizations:EnableAWSServiceAccess"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "organizations:ServicePrincipal": [
                  "auditmanager.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "IAMAccess",
            "Effect": "Allow",
            "Action": [
              "iam:GetUser",
              "iam:ListUsers",
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMAccessCreateSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/auditmanager.amazonaws.com/AWSServiceRoleForAuditManager*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "auditmanager.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMAccessManageSLR",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:UpdateRoleDescription",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/auditmanager.amazonaws.com/AWSServiceRoleForAuditManager*"
          },
          {
            "Sid": "S3Access",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KmsAccess",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListKeys",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KmsCreateGrantAccess",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "Bool": {
                "kms:GrantIsForAWSResource": "true"
              },
              "StringLike": {
                "kms:ViaService": "auditmanager.*.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SNSAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateEventsAccess",
            "Effect": "Allow",
            "Action": [
              "events:PutRule"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:detail-type": "Security Hub Findings - Imported"
              },
              "ForAllValues:StringEquals": {
                "events:source": [
                  "aws.securityhub"
                ]
              }
            }
          },
          {
            "Sid": "EventsAccess",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:DescribeRule",
              "events:EnableRule",
              "events:DisableRule",
              "events:ListTargetsByRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": "arn:aws:events:*:*:rule/AuditManagerSecurityHubFindingsReceiver"
          },
          {
            "Sid": "TagAccess",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ControlCatalogAccess",
            "Effect": "Allow",
            "Action": [
              "controlcatalog:ListCommonControls",
              "controlcatalog:ListDomains",
              "controlcatalog:ListObjectives"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSTransferConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "transfer.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm:ListCertificates",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints",
              "health:DescribeEventAggregates",
              "iam:GetPolicyVersion",
              "iam:ListPolicies",
              "iam:ListRoles",
              "route53:ListHostedZones",
              "s3:ListAllMyBuckets",
              "transfer:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSTransferFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "transfer:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "transfer.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeAddresses"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTFleetHubFederationAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:DescribeIndex",
              "iot:DescribeThingGroup",
              "iot:GetBucketsAggregation",
              "iot:GetCardinality",
              "iot:GetIndexingConfiguration",
              "iot:GetPercentiles",
              "iot:GetStatistics",
              "iot:SearchIndex",
              "iot:CreateFleetMetric",
              "iot:ListFleetMetrics",
              "iot:DeleteFleetMetric",
              "iot:DescribeFleetMetric",
              "iot:UpdateFleetMetric",
              "iot:DescribeCustomMetric",
              "iot:ListCustomMetrics",
              "iot:ListDimensions",
              "iot:ListMetricValues",
              "iot:ListThingGroups",
              "iot:ListThingsInThingGroup",
              "iot:ListJobTemplates",
              "iot:DescribeJobTemplate",
              "iot:ListJobs",
              "iot:CreateJob",
              "iot:CancelJob",
              "iot:DescribeJob",
              "iot:ListJobExecutionsForJob",
              "iot:ListJobExecutionsForThing",
              "iot:DescribeJobExecution",
              "iot:ListSecurityProfiles",
              "iot:DescribeSecurityProfile",
              "iot:ListActiveViolations",
              "iot:GetThingShadow",
              "iot:ListNamedShadowsForThing",
              "iot:CancelJobExecution",
              "iot:DescribeEndpoint",
              "iotfleethub:DescribeApplication",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:ListMetrics",
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:DeleteTopic",
              "sns:ListSubscriptionsByTopic",
              "sns:Subscribe",
              "sns:Unsubscribe"
            ],
            "Resource": "arn:aws:sns:*:*:iotfleethub*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarmHistory"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:iotfleethub*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTWirelessFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotwireless:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTWirelessReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotwireless:List*",
              "iotwireless:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTWirelessFullPublishAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iot:DescribeEndpoint",
              "iot:Publish"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTWirelessGatewayCertManager",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "IoTWirelessGatewayCertManager",
            "Effect": "Allow",
            "Action": [
              "iot:CreateKeysAndCertificate",
              "iot:DescribeCertificate",
              "iot:ListCertificates"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTWirelessDataAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iotwireless:SendDataToWirelessDevice"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTWirelessLogging",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/iotwireless*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudShellFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "cloudshell:*"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonPrometheusFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllPrometheusActions",
            "Effect": "Allow",
            "Action": [
              "aps:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeCluster",
            "Effect": "Allow",
            "Action": [
              "eks:DescribeCluster",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "aps.amazonaws.com"
                ]
              }
            },
            "Resource": "*"
          },
          {
            "Sid": "CreateServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/scraper.aps.amazonaws.com/AWSServiceRoleForAmazonPrometheusScraper*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "scraper.aps.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonPrometheusConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "tag:GetTagValues",
              "tag:GetTagKeys"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aps:CreateWorkspace",
              "aps:DescribeWorkspace",
              "aps:UpdateWorkspaceAlias",
              "aps:DeleteWorkspace",
              "aps:ListWorkspaces",
              "aps:DescribeAlertManagerDefinition",
              "aps:DescribeRuleGroupsNamespace",
              "aps:CreateAlertManagerDefinition",
              "aps:CreateRuleGroupsNamespace",
              "aps:DeleteAlertManagerDefinition",
              "aps:DeleteRuleGroupsNamespace",
              "aps:ListRuleGroupsNamespaces",
              "aps:PutAlertManagerDefinition",
              "aps:PutRuleGroupsNamespace",
              "aps:TagResource",
              "aps:UntagResource",
              "aps:CreateLoggingConfiguration",
              "aps:UpdateLoggingConfiguration",
              "aps:DeleteLoggingConfiguration",
              "aps:DescribeLoggingConfiguration"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonPrometheusQueryAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "aps:GetLabels",
              "aps:GetMetricMetadata",
              "aps:GetSeries",
              "aps:QueryMetrics"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonPrometheusRemoteWriteAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "aps:RemoteWrite"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonFISServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EventBridge",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:DeleteRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "fis.amazonaws.com"
              }
            }
          },
          {
            "Sid": "EventBridgeDescribe",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Tagging",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeAlarmHistory"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeUserResources",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeSubnets",
              "iam:GetUser",
              "iam:GetRole",
              "iam:ListUsers",
              "iam:ListRoles",
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstances",
              "ecs:DescribeClusters",
              "ecs:DescribeTasks",
              "ecs:ListTasks",
              "eks:DescribeNodegroup",
              "eks:DescribeCluster"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerCoreServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterfacePermission"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:AuthorizedService": "sagemaker.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLexV2BotPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "polly:SynthesizeSpeech"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLexChannelsAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "lex:ListBots"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDirectConnectServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:ListSecretVersionIds",
              "secretsmanager:GetSecretValue"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:*directconnect*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOpsWorks_FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancers",
              "iam:GetRolePolicy",
              "iam:ListInstanceProfiles",
              "iam:ListRoles",
              "iam:ListUsers",
              "opsworks:*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "opsworks.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowAPIs",
            "Effect": "Allow",
            "Action": [
              "acm:ListCertificates",
              "autoscaling:DescribeAccountLimits",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribePolicies",
              "autoscaling:DescribeLoadBalancers",
              "autoscaling:DescribeNotificationConfigurations",
              "autoscaling:DescribeScalingActivities",
              "autoscaling:DescribeScheduledActions",
              "cloudformation:DescribeStackResource",
              "cloudformation:DescribeStackResources",
              "cloudformation:DescribeStacks",
              "cloudformation:GetTemplate",
              "cloudformation:ListStackResources",
              "cloudformation:ListStacks",
              "cloudformation:ValidateTemplate",
              "cloudtrail:LookupEvents",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeImages",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "elasticbeanstalk:Check*",
              "elasticbeanstalk:Describe*",
              "elasticbeanstalk:List*",
              "elasticbeanstalk:RequestEnvironmentInfo",
              "elasticbeanstalk:RetrieveEnvironmentInfo",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeSSLPolicies",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "iam:GetRole",
              "iam:ListAttachedRolePolicies",
              "iam:ListInstanceProfiles",
              "iam:ListRolePolicies",
              "iam:ListRoles",
              "iam:ListServerCertificates",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeOrderableDBInstanceOptions",
              "rds:DescribeDBSnapshots",
              "s3:ListAllMyBuckets",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics",
              "sqs:ListQueues"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowS3",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:GetObjectVersion",
              "s3:GetObjectVersionAcl",
              "s3:GetBucketLocation",
              "s3:GetBucketPolicy",
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::elasticbeanstalk-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AdministratorAccess-AWSElasticBeanstalk",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm:Describe*",
              "acm:List*",
              "autoscaling:Describe*",
              "cloudformation:Describe*",
              "cloudformation:Estimate*",
              "cloudformation:Get*",
              "cloudformation:List*",
              "cloudformation:Validate*",
              "cloudtrail:LookupEvents",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "codecommit:Get*",
              "codecommit:UploadArchive",
              "ec2:AllocateAddress",
              "ec2:AssociateAddress",
              "ec2:AuthorizeSecurityGroup*",
              "ec2:CreateLaunchTemplate*",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTags",
              "ec2:DeleteLaunchTemplate*",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteTags",
              "ec2:Describe*",
              "ec2:DisassociateAddress",
              "ec2:ReleaseAddress",
              "ec2:RevokeSecurityGroup*",
              "ecs:CreateCluster",
              "ecs:DeRegisterTaskDefinition",
              "ecs:Describe*",
              "ecs:List*",
              "ecs:RegisterTaskDefinition",
              "elasticbeanstalk:*",
              "elasticloadbalancing:Describe*",
              "iam:GetRole",
              "iam:ListAttachedRolePolicies",
              "iam:ListInstanceProfiles",
              "iam:ListRolePolicies",
              "iam:ListRoles",
              "iam:ListServerCertificates",
              "logs:Describe*",
              "rds:Describe*",
              "s3:ListAllMyBuckets",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics",
              "sqs:ListQueues"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "autoscaling:*"
            ],
            "Resource": [
              "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
              "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
              "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
              "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CancelUpdateStack",
              "cloudformation:ContinueUpdateRollback",
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:GetTemplate",
              "cloudformation:ListStackResources",
              "cloudformation:SignalResource",
              "cloudformation:TagResource",
              "cloudformation:UntagResource",
              "cloudformation:UpdateStack"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/awseb-*",
              "arn:aws:cloudformation:*:*:stack/eb-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DeleteAlarms",
              "cloudwatch:PutMetricAlarm"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:awseb-*",
              "arn:aws:cloudwatch:*:*:alarm:eb-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "codebuild:BatchGetBuilds",
              "codebuild:CreateProject",
              "codebuild:DeleteProject",
              "codebuild:StartBuild"
            ],
            "Resource": "arn:aws:codebuild:*:*:project/Elastic-Beanstalk-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:CreateTable",
              "dynamodb:DeleteTable",
              "dynamodb:DescribeTable",
              "dynamodb:TagResource"
            ],
            "Resource": [
              "arn:aws:dynamodb:*:*:table/awseb-e-*",
              "arn:aws:dynamodb:*:*:table/eb-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RebootInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": [
                  "arn:aws:cloudformation:*:*:stack/awseb-e-*",
                  "arn:aws:cloudformation:*:*:stack/eb-*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecs:DeleteCluster"
            ],
            "Resource": "arn:aws:ecs:*:*:cluster/awseb-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:*Rule",
              "elasticloadbalancing:*Tags",
              "elasticloadbalancing:SetRulePriorities",
              "elasticloadbalancing:SetSecurityGroups"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
              "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
              "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:*"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/awseb-*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/eb-*/*",
              "arn:aws:elasticloadbalancing:*:*:listener/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:listener/eb-*",
              "arn:aws:elasticloadbalancing:*:*:listener/*/awseb-*/*/*",
              "arn:aws:elasticloadbalancing:*:*:listener/*/eb-*/*/*",
              "arn:aws:elasticloadbalancing:*:*:listener-rule/app/awseb-*/*/*/*",
              "arn:aws:elasticloadbalancing:*:*:listener-rule/app/eb-*/*/*/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:AddRoleToInstanceProfile",
              "iam:CreateInstanceProfile",
              "iam:CreateRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-elasticbeanstalk*",
              "arn:aws:iam::*:instance-profile/aws-elasticbeanstalk*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:AttachRolePolicy"
            ],
            "Resource": "arn:aws:iam::*:role/aws-elasticbeanstalk*",
            "Condition": {
              "StringLike": {
                "iam:PolicyArn": [
                  "arn:aws:iam::aws:policy/AWSElasticBeanstalk*",
                  "arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalk*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "elasticbeanstalk.amazonaws.com",
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn",
                  "autoscaling.amazonaws.com",
                  "elasticloadbalancing.amazonaws.com",
                  "ecs.amazonaws.com",
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling*",
              "arn:aws:iam::*:role/aws-service-role/elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*",
              "arn:aws:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing*",
              "arn:aws:iam::*:role/aws-service-role/managedupdates.elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*",
              "arn:aws:iam::*:role/aws-service-role/maintenance.elasticbeanstalk.amazonaws.com/AWSServiceRoleForElasticBeanstalk*"
            ],
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "autoscaling.amazonaws.com",
                  "elasticbeanstalk.amazonaws.com",
                  "elasticloadbalancing.amazonaws.com",
                  "managedupdates.elasticbeanstalk.amazonaws.com",
                  "maintenance.elasticbeanstalk.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:DeleteLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "rds:*DBSubnetGroup",
              "rds:AuthorizeDBSecurityGroupIngress",
              "rds:CreateDBInstance",
              "rds:CreateDBSecurityGroup",
              "rds:DeleteDBInstance",
              "rds:DeleteDBSecurityGroup",
              "rds:ModifyDBInstance",
              "rds:RestoreDBInstanceFromDBSnapshot"
            ],
            "Resource": [
              "arn:aws:rds:*:*:db:*",
              "arn:aws:rds:*:*:secgrp:awseb-e-*",
              "arn:aws:rds:*:*:secgrp:eb-*",
              "arn:aws:rds:*:*:snapshot:*",
              "arn:aws:rds:*:*:subgrp:awseb-e-*",
              "arn:aws:rds:*:*:subgrp:eb-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:Delete*",
              "s3:Get*",
              "s3:Put*"
            ],
            "Resource": "arn:aws:s3:::elasticbeanstalk-*/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:GetBucket*",
              "s3:ListBucket",
              "s3:PutBucketPolicy"
            ],
            "Resource": "arn:aws:s3:::elasticbeanstalk-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:DeleteTopic",
              "sns:GetTopicAttributes",
              "sns:Publish",
              "sns:SetTopicAttributes",
              "sns:Subscribe",
              "sns:Unsubscribe"
            ],
            "Resource": "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:*QueueAttributes",
              "sqs:CreateQueue",
              "sqs:DeleteQueue",
              "sqs:SendMessage",
              "sqs:TagQueue"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:awseb-e-*",
              "arn:aws:sqs:*:*:eb-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecs:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:CreateAction": [
                  "CreateCluster",
                  "RegisterTaskDefinition"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkMailMessageFlowReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "workmailmessageflow:Get*"
            ],
            "Resource": "*",
            "Effect": "Allow"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeGuruProfilerAgentAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "codeguru-profiler:ConfigureAgent",
              "codeguru-profiler:CreateProfilingGroup",
              "codeguru-profiler:PostAgentProfile"
            ],
            "Resource": "arn:aws:codeguru-profiler:*:*:profilingGroup/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkMailMessageFlowFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "workmailmessageflow:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgeApiDestinationsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:UpdateSecret",
              "secretsmanager:DescribeSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:PutSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:events!connection/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHealthLakeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "healthlake:*",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "iam:ListRoles"
            ],
            "Resource": "*",
            "Effect": "Allow"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "healthlake.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonHealthLakeReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "healthlake:ListFHIRDatastores",
              "healthlake:DescribeFHIRDatastore",
              "healthlake:DescribeFHIRImportJob",
              "healthlake:DescribeFHIRExportJob",
              "healthlake:GetCapabilities",
              "healthlake:ReadResource",
              "healthlake:SearchWithGet",
              "healthlake:SearchWithPost"
            ],
            "Effect": "Allow",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSProtonDeveloperAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ProtonPermissions",
            "Effect": "Allow",
            "Action": [
              "codecommit:ListRepositories",
              "codepipeline:GetPipeline",
              "codepipeline:GetPipelineExecution",
              "codepipeline:GetPipelineState",
              "codepipeline:ListPipelineExecutions",
              "codepipeline:ListPipelines",
              "codestar-connections:ListConnections",
              "codestar-connections:UseConnection",
              "proton:CancelServiceInstanceDeployment",
              "proton:CancelServicePipelineDeployment",
              "proton:CreateService",
              "proton:DeleteService",
              "proton:GetAccountRoles",
              "proton:GetAccountSettings",
              "proton:GetEnvironment",
              "proton:GetEnvironmentAccountConnection",
              "proton:GetEnvironmentTemplate",
              "proton:GetEnvironmentTemplateMajorVersion",
              "proton:GetEnvironmentTemplateMinorVersion",
              "proton:GetEnvironmentTemplateVersion",
              "proton:GetRepository",
              "proton:GetRepositorySyncStatus",
              "proton:GetResourcesSummary",
              "proton:GetService",
              "proton:GetServiceInstance",
              "proton:GetServiceTemplate",
              "proton:GetServiceTemplateMajorVersion",
              "proton:GetServiceTemplateMinorVersion",
              "proton:GetServiceTemplateVersion",
              "proton:GetTemplateSyncConfig",
              "proton:GetTemplateSyncStatus",
              "proton:ListEnvironmentAccountConnections",
              "proton:ListEnvironmentOutputs",
              "proton:ListEnvironmentProvisionedResources",
              "proton:ListEnvironments",
              "proton:ListEnvironmentTemplateMajorVersions",
              "proton:ListEnvironmentTemplateMinorVersions",
              "proton:ListEnvironmentTemplates",
              "proton:ListEnvironmentTemplateVersions",
              "proton:ListRepositories",
              "proton:ListRepositorySyncDefinitions",
              "proton:ListServiceInstanceOutputs",
              "proton:ListServiceInstanceProvisionedResources",
              "proton:ListServiceInstances",
              "proton:ListServicePipelineOutputs",
              "proton:ListServicePipelineProvisionedResources",
              "proton:ListServices",
              "proton:ListServiceTemplateMajorVersions",
              "proton:ListServiceTemplateMinorVersions",
              "proton:ListServiceTemplates",
              "proton:ListServiceTemplateVersions",
              "proton:ListTagsForResource",
              "proton:UpdateService",
              "proton:UpdateServiceInstance",
              "proton:UpdateServicePipeline",
              "s3:ListAllMyBuckets",
              "s3:ListBucket"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeStarConnectionsPermissions",
            "Effect": "Allow",
            "Action": "codestar-connections:PassConnection",
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ],
            "Condition": {
              "StringEquals": {
                "codestar-connections:PassedToService": "proton.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CodeConnectionsPermissions",
            "Effect": "Allow",
            "Action": "codeconnections:PassConnection",
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ],
            "Condition": {
              "StringEquals": {
                "codeconnections:PassedToService": "proton.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSStorageGatewayServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "fsx:ListTagsForResource"
            ],
            "Resource": "arn:aws:fsx:*:*:backup/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSProtonFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ProtonPermissions",
            "Effect": "Allow",
            "Action": [
              "proton:*",
              "codestar-connections:ListConnections",
              "kms:ListAliases",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateGrantPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "proton.*.amazonaws.com"
              }
            }
          },
          {
            "Sid": "PassRolePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "proton.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CreateServiceLinkedRolePermissions",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/sync.proton.amazonaws.com/AWSServiceRoleForProtonSync",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "sync.proton.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CodeStarConnectionsPermissions",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:PassConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ],
            "Condition": {
              "StringEquals": {
                "codestar-connections:PassedToService": "proton.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CodeConnectionsPermissions",
            "Effect": "Allow",
            "Action": [
              "codeconnections:PassConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ],
            "Condition": {
              "StringEquals": {
                "codeconnections:PassedToService": "proton.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSProtonReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "codepipeline:ListPipelineExecutions",
              "codepipeline:ListPipelines",
              "codepipeline:GetPipeline",
              "codepipeline:GetPipelineState",
              "codepipeline:GetPipelineExecution",
              "proton:GetAccountRoles",
              "proton:GetAccountSettings",
              "proton:GetEnvironment",
              "proton:GetEnvironmentAccountConnection",
              "proton:GetEnvironmentTemplate",
              "proton:GetEnvironmentTemplateMajorVersion",
              "proton:GetEnvironmentTemplateMinorVersion",
              "proton:GetEnvironmentTemplateVersion",
              "proton:GetRepository",
              "proton:GetRepositorySyncStatus",
              "proton:GetResourcesSummary",
              "proton:GetService",
              "proton:GetServiceInstance",
              "proton:GetServiceTemplate",
              "proton:GetServiceTemplateMajorVersion",
              "proton:GetServiceTemplateMinorVersion",
              "proton:GetServiceTemplateVersion",
              "proton:GetTemplateSyncConfig",
              "proton:GetTemplateSyncStatus",
              "proton:ListEnvironmentAccountConnections",
              "proton:ListEnvironmentOutputs",
              "proton:ListEnvironmentProvisionedResources",
              "proton:ListEnvironments",
              "proton:ListEnvironmentTemplateMajorVersions",
              "proton:ListEnvironmentTemplateMinorVersions",
              "proton:ListEnvironmentTemplates",
              "proton:ListEnvironmentTemplateVersions",
              "proton:ListRepositories",
              "proton:ListRepositorySyncDefinitions",
              "proton:ListServiceInstanceOutputs",
              "proton:ListServiceInstanceProvisionedResources",
              "proton:ListServiceInstances",
              "proton:ListServicePipelineOutputs",
              "proton:ListServicePipelineProvisionedResources",
              "proton:ListServices",
              "proton:ListServiceTemplateMajorVersions",
              "proton:ListServiceTemplateMinorVersions",
              "proton:ListServiceTemplates",
              "proton:ListServiceTemplateVersions",
              "proton:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGrafanaConsoleReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSGrafanaConsoleReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "grafana:Describe*",
              "grafana:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGrafanaWorkspacePermissionManagement",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSGrafanaPermissions",
            "Effect": "Allow",
            "Action": [
              "grafana:DescribeWorkspace",
              "grafana:DescribeWorkspaceAuthentication",
              "grafana:UpdatePermissions",
              "grafana:ListPermissions",
              "grafana:ListWorkspaces"
            ],
            "Resource": "arn:aws:grafana:*:*:/workspaces*"
          },
          {
            "Sid": "IAMIdentityCenterPermissions",
            "Effect": "Allow",
            "Action": [
              "sso:DescribeRegisteredRegions",
              "sso:GetSharedSsoConfiguration",
              "sso:ListDirectoryAssociations",
              "sso:GetManagedApplicationInstance",
              "sso:ListProfiles",
              "sso:AssociateProfile",
              "sso:DisassociateProfile",
              "sso:GetProfile",
              "sso:ListProfileAssociations",
              "sso-directory:DescribeUser",
              "sso-directory:DescribeGroup"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGrafanaAccountAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSGrafanaOrganizationAdmin",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GrafanaIAMGetRolePermission",
            "Effect": "Allow",
            "Action": "iam:GetRole",
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Sid": "AWSGrafanaPermissions",
            "Effect": "Allow",
            "Action": [
              "grafana:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GrafanaIAMPassRolePermission",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "grafana.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ElasticBeanstalkPermissions",
            "Effect": "Allow",
            "Action": [
              "elasticbeanstalk:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowPassRoleToElasticBeanstalkAndDownstreamServices",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "elasticbeanstalk.amazonaws.com",
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn",
                  "autoscaling.amazonaws.com",
                  "elasticloadbalancing.amazonaws.com",
                  "ecs.amazonaws.com",
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAccountLimits",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribeLoadBalancers",
              "autoscaling:DescribeNotificationConfigurations",
              "autoscaling:DescribeScalingActivities",
              "autoscaling:DescribeScheduledActions",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstances",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcClassicLink",
              "ec2:DescribeVpcs",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "logs:DescribeLogGroups",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstances",
              "rds:DescribeOrderableDBInstanceOptions",
              "sns:ListSubscriptionsByTopic"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EC2BroadOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress",
              "ec2:AssociateAddress",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateLaunchTemplateVersion",
              "ec2:CreateSecurityGroup",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteLaunchTemplateVersions",
              "ec2:DeleteSecurityGroup",
              "ec2:DisassociateAddress",
              "ec2:ReleaseAddress",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2RunInstancesOperationPermissions",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ec2:LaunchTemplate": "arn:aws:ec2:*:*:launch-template/*"
              }
            }
          },
          {
            "Sid": "EC2TerminateInstancesOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": [
                  "arn:aws:cloudformation:*:*:stack/awseb-e-*",
                  "arn:aws:cloudformation:*:*:stack/eb-*"
                ]
              }
            }
          },
          {
            "Sid": "ECSBroadOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "ecs:CreateCluster",
              "ecs:DescribeClusters",
              "ecs:RegisterTaskDefinition"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ECSDeleteClusterOperationPermissions",
            "Effect": "Allow",
            "Action": "ecs:DeleteCluster",
            "Resource": "arn:aws:ecs:*:*:cluster/awseb-*"
          },
          {
            "Sid": "ASGOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "autoscaling:AttachInstances",
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:CreateLaunchConfiguration",
              "autoscaling:CreateOrUpdateTags",
              "autoscaling:DeleteLaunchConfiguration",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:DeleteScheduledAction",
              "autoscaling:DetachInstances",
              "autoscaling:DeletePolicy",
              "autoscaling:PutScalingPolicy",
              "autoscaling:PutScheduledUpdateGroupAction",
              "autoscaling:PutNotificationConfiguration",
              "autoscaling:ResumeProcesses",
              "autoscaling:SetDesiredCapacity",
              "autoscaling:SuspendProcesses",
              "autoscaling:TerminateInstanceInAutoScalingGroup",
              "autoscaling:UpdateAutoScalingGroup"
            ],
            "Resource": [
              "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/awseb-e-*",
              "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/eb-*",
              "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/awseb-e-*",
              "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/eb-*"
            ]
          },
          {
            "Sid": "CFNOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:*"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/awseb-*",
              "arn:aws:cloudformation:*:*:stack/eb-*"
            ]
          },
          {
            "Sid": "ELBOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
              "elasticloadbalancing:ConfigureHealthCheck",
              "elasticloadbalancing:CreateLoadBalancer",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:RegisterTargets"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:targetgroup/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:targetgroup/eb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/awseb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/eb-*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/awseb-*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/*/eb-*/*"
            ]
          },
          {
            "Sid": "CWLogsOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:DeleteLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/elasticbeanstalk/*"
          },
          {
            "Sid": "S3ObjectOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:GetObjectVersion",
              "s3:GetObjectVersionAcl",
              "s3:PutObject",
              "s3:PutObjectAcl",
              "s3:PutObjectVersionAcl"
            ],
            "Resource": "arn:aws:s3:::elasticbeanstalk-*/*"
          },
          {
            "Sid": "S3BucketOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetBucketPolicy",
              "s3:ListBucket",
              "s3:PutBucketPolicy"
            ],
            "Resource": "arn:aws:s3:::elasticbeanstalk-*"
          },
          {
            "Sid": "SNSOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:GetTopicAttributes",
              "sns:SetTopicAttributes",
              "sns:Subscribe"
            ],
            "Resource": "arn:aws:sns:*:*:ElasticBeanstalkNotifications-*"
          },
          {
            "Sid": "SQSOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:awseb-e-*",
              "arn:aws:sqs:*:*:eb-*"
            ]
          },
          {
            "Sid": "CWPutMetricAlarmOperationPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:awseb-*",
              "arn:aws:cloudwatch:*:*:alarm:eb-*"
            ]
          },
          {
            "Sid": "AllowECSTagResource",
            "Effect": "Allow",
            "Action": [
              "ecs:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ecs:CreateAction": [
                  "CreateCluster",
                  "RegisterTaskDefinition"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "BatchServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSBatchPolicyStatement1",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeImages",
              "ec2:DescribeImageAttribute",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSpotFleetInstances",
              "ec2:DescribeSpotFleetRequests",
              "ec2:DescribeSpotPriceHistory",
              "ec2:DescribeSpotFleetRequestHistory",
              "ec2:DescribeVpcClassicLink",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:RequestSpotFleet",
              "autoscaling:DescribeAccountLimits",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeScalingActivities",
              "eks:DescribeCluster",
              "ecs:DescribeClusters",
              "ecs:DescribeContainerInstances",
              "ecs:DescribeTaskDefinition",
              "ecs:DescribeTasks",
              "ecs:ListClusters",
              "ecs:ListContainerInstances",
              "ecs:ListTaskDefinitionFamilies",
              "ecs:ListTaskDefinitions",
              "ecs:ListTasks",
              "ecs:DeregisterTaskDefinition",
              "ecs:TagResource",
              "ecs:ListAccountSettings",
              "logs:DescribeLogGroups",
              "iam:GetInstanceProfile",
              "iam:GetRole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSBatchPolicyStatement2",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/batch/job*"
          },
          {
            "Sid": "AWSBatchPolicyStatement3",
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/batch/job*:log-stream:*"
          },
          {
            "Sid": "AWSBatchPolicyStatement4",
            "Effect": "Allow",
            "Action": [
              "autoscaling:CreateOrUpdateTags"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSBatchServiceTag": "false"
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement5",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn",
                  "ecs-tasks.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement6",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "spot.amazonaws.com",
                  "spotfleet.amazonaws.com",
                  "autoscaling.amazonaws.com",
                  "ecs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement7",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplate"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSBatchServiceTag": "false"
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement8",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances",
              "ec2:CancelSpotFleetRequests",
              "ec2:ModifySpotFleetRequest",
              "ec2:DeleteLaunchTemplate"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSBatchServiceTag": "false"
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement9",
            "Effect": "Allow",
            "Action": [
              "autoscaling:CreateLaunchConfiguration",
              "autoscaling:DeleteLaunchConfiguration"
            ],
            "Resource": "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/AWSBatch*"
          },
          {
            "Sid": "AWSBatchPolicyStatement10",
            "Effect": "Allow",
            "Action": [
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:UpdateAutoScalingGroup",
              "autoscaling:SetDesiredCapacity",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:SuspendProcesses",
              "autoscaling:PutNotificationConfiguration",
              "autoscaling:TerminateInstanceInAutoScalingGroup"
            ],
            "Resource": "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/AWSBatch*"
          },
          {
            "Sid": "AWSBatchPolicyStatement11",
            "Effect": "Allow",
            "Action": [
              "ecs:DeleteCluster",
              "ecs:DeregisterContainerInstance",
              "ecs:RunTask",
              "ecs:StartTask",
              "ecs:StopTask"
            ],
            "Resource": "arn:aws:ecs:*:*:cluster/AWSBatch*"
          },
          {
            "Sid": "AWSBatchPolicyStatement12",
            "Effect": "Allow",
            "Action": [
              "ecs:RunTask",
              "ecs:StartTask",
              "ecs:StopTask"
            ],
            "Resource": "arn:aws:ecs:*:*:task-definition/*"
          },
          {
            "Sid": "AWSBatchPolicyStatement13",
            "Effect": "Allow",
            "Action": [
              "ecs:StopTask"
            ],
            "Resource": "arn:aws:ecs:*:*:task/*/*"
          },
          {
            "Sid": "AWSBatchPolicyStatement14",
            "Effect": "Allow",
            "Action": [
              "ecs:CreateCluster",
              "ecs:RegisterTaskDefinition"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSBatchServiceTag": "false"
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement15",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": [
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*:*:launch-template/*",
              "arn:aws:ec2:*:*:placement-group/*",
              "arn:aws:ec2:*:*:capacity-reservation/*",
              "arn:aws:ec2:*:*:elastic-gpu/*",
              "arn:aws:elastic-inference:*:*:elastic-inference-accelerator/*",
              "arn:aws:resource-groups:*:*:group/*"
            ]
          },
          {
            "Sid": "AWSBatchPolicyStatement16",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSBatchServiceTag": "false"
              }
            }
          },
          {
            "Sid": "AWSBatchPolicyStatement17",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "RunInstances",
                  "CreateLaunchTemplate",
                  "RequestSpotFleet"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEMRServicePolicy_v2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateInTaggedNetwork",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:RunInstances",
              "ec2:CreateFleet",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateLaunchTemplateVersion"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "CreateWithEMRTaggedLaunchTemplate",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateFleet",
              "ec2:RunInstances",
              "ec2:CreateLaunchTemplateVersion"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "CreateEMRTaggedLaunchTemplate",
            "Effect": "Allow",
            "Action": "ec2:CreateLaunchTemplate",
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "CreateEMRTaggedInstancesAndVolumes",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances",
              "ec2:CreateFleet"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "ResourcesToLaunchEC2",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances",
              "ec2:CreateFleet",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateLaunchTemplateVersion"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*::image/ami-*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*:*:capacity-reservation/*",
              "arn:aws:ec2:*:*:placement-group/EMR_*",
              "arn:aws:ec2:*:*:fleet/*",
              "arn:aws:ec2:*:*:dedicated-host/*",
              "arn:aws:resource-groups:*:*:group/*"
            ]
          },
          {
            "Sid": "ManageEMRTaggedResources",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplateVersion",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteNetworkInterface",
              "ec2:ModifyInstanceAttribute",
              "ec2:TerminateInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "ManageTagsOnEMRTaggedResources",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "CreateNetworkInterfaceNeededForPrivateSubnet",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "TagOnCreateTaggedEMRResources",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "RunInstances",
                  "CreateFleet",
                  "CreateLaunchTemplate",
                  "CreateNetworkInterface"
                ]
              }
            }
          },
          {
            "Sid": "TagPlacementGroups",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:placement-group/EMR_*"
            ]
          },
          {
            "Sid": "ListActionsForEC2Resources",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeCapacityReservations",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumeStatus",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateDefaultSecurityGroupWithEMRTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "CreateDefaultSecurityGroupInVPCWithEMRTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "TagOnCreateDefaultSecurityGroupWithEMRTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true",
                "ec2:CreateAction": "CreateSecurityGroup"
              }
            }
          },
          {
            "Sid": "ManageSecurityGroups",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "CreateEMRPlacementGroups",
            "Effect": "Allow",
            "Action": [
              "ec2:CreatePlacementGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:placement-group/EMR_*"
          },
          {
            "Sid": "DeletePlacementGroups",
            "Effect": "Allow",
            "Action": [
              "ec2:DeletePlacementGroup"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AutoScaling",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ResourceGroupsForCapacityReservations",
            "Effect": "Allow",
            "Action": [
              "resource-groups:ListGroupResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AutoScalingCloudWatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:*_EMR_Auto_Scaling"
          },
          {
            "Sid": "PassRoleForAutoScaling",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/EMR_AutoScaling_DefaultRole",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "application-autoscaling.amazonaws.com*"
              }
            }
          },
          {
            "Sid": "PassRoleForEC2",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ec2.amazonaws.com*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEMRReadOnlyAccessPolicy_v2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ElasticMapReduceActions",
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:DescribeEditor",
              "elasticmapreduce:DescribeJobFlows",
              "elasticmapreduce:DescribeSecurityConfiguration",
              "elasticmapreduce:DescribeStep",
              "elasticmapreduce:DescribeReleaseLabel",
              "elasticmapreduce:GetBlockPublicAccessConfiguration",
              "elasticmapreduce:GetManagedScalingPolicy",
              "elasticmapreduce:GetAutoTerminationPolicy",
              "elasticmapreduce:ListBootstrapActions",
              "elasticmapreduce:ListClusters",
              "elasticmapreduce:ListEditors",
              "elasticmapreduce:ListInstanceFleets",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ListInstances",
              "elasticmapreduce:ListSecurityConfigurations",
              "elasticmapreduce:ListSteps",
              "elasticmapreduce:ListSupportedInstanceTypes",
              "elasticmapreduce:ViewEventsFromAllClustersInConsole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ViewMetricsInEMRConsole",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEMRFullAccessPolicy_v2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RunJobFlowExplicitlyWithEMRManagedTag",
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:RunJobFlow"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/for-use-with-amazon-emr-managed-policies": "true"
              }
            }
          },
          {
            "Sid": "ElasticMapReduceActions",
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:AddInstanceFleet",
              "elasticmapreduce:AddInstanceGroups",
              "elasticmapreduce:AddJobFlowSteps",
              "elasticmapreduce:AddTags",
              "elasticmapreduce:CancelSteps",
              "elasticmapreduce:CreateEditor",
              "elasticmapreduce:CreateSecurityConfiguration",
              "elasticmapreduce:DeleteEditor",
              "elasticmapreduce:DeleteSecurityConfiguration",
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:DescribeEditor",
              "elasticmapreduce:DescribeJobFlows",
              "elasticmapreduce:DescribeSecurityConfiguration",
              "elasticmapreduce:DescribeStep",
              "elasticmapreduce:DescribeReleaseLabel",
              "elasticmapreduce:GetBlockPublicAccessConfiguration",
              "elasticmapreduce:GetManagedScalingPolicy",
              "elasticmapreduce:GetAutoTerminationPolicy",
              "elasticmapreduce:ListBootstrapActions",
              "elasticmapreduce:ListClusters",
              "elasticmapreduce:ListEditors",
              "elasticmapreduce:ListInstanceFleets",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ListInstances",
              "elasticmapreduce:ListSecurityConfigurations",
              "elasticmapreduce:ListSteps",
              "elasticmapreduce:ListSupportedInstanceTypes",
              "elasticmapreduce:ModifyCluster",
              "elasticmapreduce:ModifyInstanceFleet",
              "elasticmapreduce:ModifyInstanceGroups",
              "elasticmapreduce:OpenEditorInConsole",
              "elasticmapreduce:PutAutoScalingPolicy",
              "elasticmapreduce:PutBlockPublicAccessConfiguration",
              "elasticmapreduce:PutManagedScalingPolicy",
              "elasticmapreduce:RemoveAutoScalingPolicy",
              "elasticmapreduce:RemoveManagedScalingPolicy",
              "elasticmapreduce:RemoveTags",
              "elasticmapreduce:SetTerminationProtection",
              "elasticmapreduce:StartEditor",
              "elasticmapreduce:StopEditor",
              "elasticmapreduce:TerminateJobFlows",
              "elasticmapreduce:ViewEventsFromAllClustersInConsole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ViewMetricsInEMRConsole",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PassRoleForElasticMapReduce",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/EMR_DefaultRole_V2",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "elasticmapreduce.amazonaws.com*"
              }
            }
          },
          {
            "Sid": "PassRoleForEC2",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/EMR_EC2_DefaultRole",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ec2.amazonaws.com*"
              }
            }
          },
          {
            "Sid": "PassRoleForAutoScaling",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/EMR_AutoScaling_DefaultRole",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "application-autoscaling.amazonaws.com*"
              }
            }
          },
          {
            "Sid": "ElasticMapReduceServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/elasticmapreduce.amazonaws.com*/AWSServiceRoleForEMRCleanup*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "elasticmapreduce.amazonaws.com",
                  "elasticmapreduce.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Sid": "ConsoleUIActions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeNatGateways",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints",
              "s3:ListAllMyBuckets",
              "iam:ListRoles"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSecurityHubOrganizationsAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "OrganizationPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:ListAccounts",
              "organizations:DescribeOrganization",
              "organizations:ListRoots",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListAccountsForParent",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganizationalUnit"
            ],
            "Resource": "*"
          },
          {
            "Sid": "OrganizationPermissionsEnable",
            "Effect": "Allow",
            "Action": "organizations:EnableAWSServiceAccess",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": "securityhub.amazonaws.com"
              }
            }
          },
          {
            "Sid": "OrganizationPermissionsDelegatedAdmin",
            "Effect": "Allow",
            "Action": [
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator"
            ],
            "Resource": "arn:aws:organizations::*:account/o-*/*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": "securityhub.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "mgn:ListTagsForResource",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "kms:ListRetirableGrants",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgh:AssociateCreatedArtifact",
              "mgh:CreateProgressUpdateStream",
              "mgh:DisassociateCreatedArtifact",
              "mgh:GetHomeRegion",
              "mgh:ImportMigrationTask",
              "mgh:NotifyMigrationTaskState",
              "mgh:PutResourceAttributes"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:GetEbsDefaultKmsKeyId",
              "ec2:GetEbsEncryptionByDefault"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount"
            ],
            "Resource": "arn:aws:organizations::*:account/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAccounts"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RegisterImage",
              "ec2:DeregisterImage"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplateVersion",
              "ec2:ModifyLaunchTemplate",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteLaunchTemplateVersions"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:ModifyInstanceAttribute",
              "ec2:GetConsoleOutput",
              "ec2:GetConsoleScreenshot"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RevokeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplate"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSApplicationMigrationReplicationServerRole",
              "arn:aws:iam::*:role/service-role/AWSApplicationMigrationConversionServerRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:launch-template/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateLaunchTemplate",
                  "CreateSecurityGroup",
                  "CreateVolume",
                  "CreateSnapshot",
                  "RunInstances"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationConversionServerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mgn:SendClientMetricsForMgn",
              "mgn:SendClientLogsForMgn",
              "mgn:GetChannelCommandsForMgn",
              "mgn:SendChannelCommandResultForMgn"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
              "mgn:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
              "kms:ListAliases",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeKeyPairs",
              "ec2:DescribeTags",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:GetEbsEncryptionByDefault",
              "ec2:GetEbsDefaultKmsKeyId"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor3",
            "Effect": "Allow",
            "Action": "license-manager:ListLicenseConfigurations",
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor4",
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DescribeLoadBalancers",
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor5",
            "Effect": "Allow",
            "Action": "iam:ListInstanceProfiles",
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor6",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSApplicationMigrationLaunchInstanceWithSsmRole",
              "arn:aws:iam::*:role/service-role/AWSApplicationMigrationLaunchInstanceWithDrsRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "VisualEditor7",
            "Effect": "Allow",
            "Action": [
              "drs:DescribeSourceServers"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor8",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              },
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Sid": "VisualEditor9",
            "Effect": "Allow",
            "Action": [
              "ssm:ListCommandInvocations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor10",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeInstanceInformation",
              "ssm:GetCommandInvocation"
            ],
            "Resource": "*",
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "VisualEditor11",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeDocument",
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSDisasterRecovery-InstallDRAgentOnInstance",
              "arn:aws:ssm:*:*:document/AWSMigration-*"
            ],
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "VisualEditor12",
            "Effect": "Allow",
            "Action": [
              "drs:DisconnectSourceServer"
            ],
            "Resource": "arn:aws:drs:*:*:source-server/*",
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              },
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceConfiguredDR": "false"
              }
            }
          },
          {
            "Sid": "VisualEditor13",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameter",
              "ssm:PutParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*"
          },
          {
            "Sid": "VisualEditor14",
            "Effect": "Allow",
            "Action": [
              "servicequotas:GetServiceQuota"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VisualEditor15",
            "Effect": "Allow",
            "Action": [
              "ssm:GetAutomationExecution"
            ],
            "Resource": "arn:aws:ssm:*:*:automation-execution/*"
          },
          {
            "Sid": "VisualEditor16",
            "Effect": "Allow",
            "Action": [
              "ssm:GetDocument"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSDisasterRecovery-InstallDRAgentOnInstance",
              "arn:aws:ssm:*:*:document/AWSMigration-*"
            ]
          },
          {
            "Sid": "VisualEditor17",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameters"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "VisualEditor18",
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": "arn:aws:ssm:*:*:automation-definition/AWSMigration-*:$DEFAULT",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "mgn.amazonaws.com"
              }
            }
          },
          {
            "Sid": "VisualEditor19",
            "Effect": "Allow",
            "Action": "ssm:ListCommands",
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "VisualEditor20",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeParameters"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "mgn.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationAgentPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mgn:SendAgentMetricsForMgn",
              "mgn:SendAgentLogsForMgn",
              "mgn:SendClientMetricsForMgn",
              "mgn:SendClientLogsForMgn"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgn:RegisterAgentForMgn",
              "mgn:UpdateAgentSourcePropertiesForMgn",
              "mgn:UpdateAgentReplicationInfoForMgn",
              "mgn:UpdateAgentConversionInfoForMgn",
              "mgn:GetAgentInstallationAssetsForMgn",
              "mgn:GetAgentCommandForMgn",
              "mgn:GetAgentConfirmedResumeInfoForMgn",
              "mgn:GetAgentRuntimeConfigurationForMgn",
              "mgn:UpdateAgentBacklogForMgn",
              "mgn:GetAgentReplicationInfoForMgn"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "mgn:TagResource",
            "Resource": "arn:aws:mgn:*:*:source-server/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationEC2Access",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSApplicationMigrationConversionServerRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSnapshots",
              "ec2:DescribeImages",
              "ec2:DescribeVolumes"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "mgn.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplateVersion",
              "ec2:ModifyLaunchTemplate",
              "ec2:DeleteLaunchTemplateVersions"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplate"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "mgn.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteLaunchTemplate"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "mgn.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:ModifyInstanceAttribute",
              "ec2:GetConsoleOutput",
              "ec2:GetConsoleScreenshot"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RevokeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateSecurityGroup",
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateSecurityGroup",
                  "CreateVolume",
                  "CreateSnapshot",
                  "RunInstances",
                  "CreateLaunchTemplate"
                ]
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:ModifyVolume"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationMGHAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mgh:AssociateCreatedArtifact",
              "mgh:CreateProgressUpdateStream",
              "mgh:DisassociateCreatedArtifact",
              "mgh:GetHomeRegion",
              "mgh:ImportMigrationTask",
              "mgh:NotifyMigrationTaskState",
              "mgh:PutResourceAttributes"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mgn:DescribeJobLogItems",
              "mgn:DescribeJobs",
              "mgn:DescribeSourceServers",
              "mgn:DescribeReplicationConfigurationTemplates",
              "mgn:GetLaunchConfiguration",
              "mgn:DescribeVcenterClients",
              "mgn:GetReplicationConfiguration",
              "mgn:DescribeLaunchConfigurationTemplates",
              "mgn:ListSourceServerActions",
              "mgn:ListTemplateActions",
              "mgn:ListApplications",
              "mgn:ListWaves",
              "mgn:ListExports",
              "mgn:ListImports",
              "mgn:ListImportErrors",
              "mgn:ListExportErrors"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicequotas:GetServiceQuota"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationReplicationServerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mgn:SendClientMetricsForMgn",
              "mgn:SendClientLogsForMgn",
              "mgn:GetChannelCommandsForMgn",
              "mgn:SendChannelCommandResultForMgn",
              "mgn:GetAgentSnapshotCreditsForMgn",
              "mgn:DescribeReplicationServerAssociationsForMgn",
              "mgn:DescribeSnapshotRequestsForMgn",
              "mgn:BatchDeleteSnapshotRequestForMgn",
              "mgn:NotifyAgentAuthenticationForMgn",
              "mgn:BatchCreateVolumeSnapshotGroupForMgn",
              "mgn:UpdateAgentReplicationProcessStateForMgn",
              "mgn:NotifyAgentReplicationProgressForMgn",
              "mgn:NotifyAgentConnectedForMgn",
              "mgn:NotifyAgentDisconnectedForMgn"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateSnapshot"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLookoutEquipmentFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lookoutequipment:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lookoutequipment.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "lookoutequipment.*.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCompromisedKeyQuarantineV2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Deny",
            "Action": [
              "cloudtrail:LookupEvents",
              "ec2:RequestSpotInstances",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "iam:AddUserToGroup",
              "iam:AttachGroupPolicy",
              "iam:AttachRolePolicy",
              "iam:AttachUserPolicy",
              "iam:ChangePassword",
              "iam:CreateAccessKey",
              "iam:CreateInstanceProfile",
              "iam:CreateLoginProfile",
              "iam:CreatePolicyVersion",
              "iam:CreateRole",
              "iam:CreateUser",
              "iam:DetachUserPolicy",
              "iam:PassRole",
              "iam:PutGroupPolicy",
              "iam:PutRolePolicy",
              "iam:PutUserPermissionsBoundary",
              "iam:PutUserPolicy",
              "iam:SetDefaultPolicyVersion",
              "iam:UpdateAccessKey",
              "iam:UpdateAccountPasswordPolicy",
              "iam:UpdateAssumeRolePolicy",
              "iam:UpdateLoginProfile",
              "iam:UpdateUser",
              "lambda:AddLayerVersionPermission",
              "lambda:AddPermission",
              "lambda:CreateFunction",
              "lambda:GetPolicy",
              "lambda:ListTags",
              "lambda:PutProvisionedConcurrencyConfig",
              "lambda:TagResource",
              "lambda:UntagResource",
              "lambda:UpdateFunctionCode",
              "lightsail:Create*",
              "lightsail:Delete*",
              "lightsail:DownloadDefaultKeyPair",
              "lightsail:GetInstanceAccessDetails",
              "lightsail:Start*",
              "lightsail:Update*",
              "organizations:CreateAccount",
              "organizations:CreateOrganization",
              "organizations:InviteAccountToOrganization",
              "s3:DeleteBucket",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:PutLifecycleConfiguration",
              "s3:PutBucketAcl",
              "s3:PutBucketOwnershipControls",
              "s3:DeleteBucketPolicy",
              "s3:ObjectOwnerOverrideToBucketOwner",
              "s3:PutAccountPublicAccessBlock",
              "s3:PutBucketPolicy",
              "s3:ListAllMyBuckets",
              "ec2:PurchaseReservedInstancesOffering",
              "ec2:AcceptReservedInstancesExchangeQuote",
              "ec2:CreateReservedInstancesListing",
              "savingsplans:CreateSavingsPlan"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSystemsManagerOpsDataSyncServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:GetOpsItem",
              "ssm:UpdateOpsItem"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/ExplorerSecurityHubOpsItem": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:CreateOpsItem"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:AddTagsToResource"
            ],
            "Resource": "arn:aws:ssm:*:*:opsitem/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/*",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "securityhub:GetFindings",
              "securityhub:BatchUpdateFindings"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "securityhub:ASFFSyntaxPath/Workflow.Status": "SUPPRESSED"
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/Confidence": false
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/Criticality": false
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/Note.Text": false
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/Note.UpdatedBy": false
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/RelatedFindings": false
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/Types": false
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/UserDefinedFields.key": false
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/UserDefinedFields.value": false
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "securityhub:BatchUpdateFindings",
            "Resource": "*",
            "Condition": {
              "Null": {
                "securityhub:ASFFSyntaxPath/VerificationState": false
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudWatchAlarms_ActionSSMIncidentsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "StartIncidentPermissions",
            "Effect": "Allow",
            "Action": "ssm-incidents:StartIncident",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonNimbleStudio-LaunchProfileWorker",
      "PolicyDocument": {
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "fsx:DescribeFileSystems",
              "ds:DescribeDirectories"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "nimble.amazonaws.com"
              }
            },
            "Sid": "GetLaunchProfileInitializationDependencies"
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AmazonNimbleStudio-StudioAdmin",
      "PolicyDocument": {
        "Statement": [
          {
            "Sid": "StudioAdminFullAccess",
            "Effect": "Allow",
            "Action": [
              "nimble:CreateStreamingSession",
              "nimble:GetStreamingSession",
              "nimble:StartStreamingSession",
              "nimble:StopStreamingSession",
              "nimble:CreateStreamingSessionStream",
              "nimble:GetStreamingSessionStream",
              "nimble:DeleteStreamingSession",
              "nimble:ListStreamingSessionBackups",
              "nimble:GetStreamingSessionBackup",
              "nimble:ListEulas",
              "nimble:ListEulaAcceptances",
              "nimble:GetEula",
              "nimble:AcceptEulas",
              "nimble:ListStudioMembers",
              "nimble:GetStudioMember",
              "nimble:ListStreamingSessions",
              "nimble:GetStreamingImage",
              "nimble:ListStreamingImages",
              "nimble:GetLaunchProfileInitialization",
              "nimble:GetLaunchProfileDetails",
              "nimble:GetFeatureMap",
              "nimble:PutStudioLogEvents",
              "nimble:ListLaunchProfiles",
              "nimble:GetLaunchProfile",
              "nimble:GetLaunchProfileMember",
              "nimble:ListLaunchProfileMembers",
              "nimble:PutLaunchProfileMembers",
              "nimble:UpdateLaunchProfileMember",
              "nimble:DeleteLaunchProfileMember"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sso-directory:DescribeUsers",
              "sso-directory:SearchUsers",
              "identitystore:DescribeUser",
              "identitystore:ListUsers"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ds:CreateComputer",
              "ds:DescribeDirectories",
              "ec2:DescribeSubnets",
              "ec2:CreateNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DeleteNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DescribeSecurityGroups",
              "fsx:DescribeFileSystems"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "nimble.amazonaws.com"
              }
            }
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AmazonNimbleStudio-StudioUser",
      "PolicyDocument": {
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ds:CreateComputer",
              "ec2:DescribeSubnets",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:CreateNetworkInterface",
              "ec2:DescribeSecurityGroups",
              "fsx:DescribeFileSystems",
              "ds:DescribeDirectories"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "nimble.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "sso-directory:DescribeUsers",
              "sso-directory:SearchUsers",
              "identitystore:DescribeUser",
              "identitystore:ListUsers"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "nimble:ListLaunchProfiles"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "nimble:requesterPrincipalId": "${nimble:principalId}"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "nimble:ListStudioMembers",
              "nimble:GetStudioMember",
              "nimble:ListEulas",
              "nimble:ListEulaAcceptances",
              "nimble:GetFeatureMap",
              "nimble:PutStudioLogEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "nimble:DeleteStreamingSession",
              "nimble:GetStreamingSession",
              "nimble:StartStreamingSession",
              "nimble:StopStreamingSession",
              "nimble:CreateStreamingSessionStream",
              "nimble:GetStreamingSessionStream",
              "nimble:ListStreamingSessions",
              "nimble:ListStreamingSessionBackups",
              "nimble:GetStreamingSessionBackup"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "nimble:ownedBy": "${nimble:requesterPrincipalId}"
              }
            }
          }
        ],
        "Version": "2012-10-17"
      }
    },
    {
      "PolicyName": "AmazonLookoutEquipmentReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lookoutequipment:Describe*",
              "lookoutequipment:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLookoutMetricsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lookoutmetrics:DescribeMetricSet",
              "lookoutmetrics:ListMetricSets",
              "lookoutmetrics:DescribeAnomalyDetector",
              "lookoutmetrics:ListAnomalyDetectors",
              "lookoutmetrics:DescribeAnomalyDetectionExecutions",
              "lookoutmetrics:DescribeAlert",
              "lookoutmetrics:ListAlerts",
              "lookoutmetrics:ListTagsForResource",
              "lookoutmetrics:ListAnomalyGroupSummaries",
              "lookoutmetrics:ListAnomalyGroupTimeSeries",
              "lookoutmetrics:ListAnomalyGroupRelatedMetrics",
              "lookoutmetrics:GetAnomalyGroup",
              "lookoutmetrics:GetDataQualityMetrics",
              "lookoutmetrics:GetSampleData",
              "lookoutmetrics:GetFeedback"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLookoutMetricsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lookoutmetrics:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*LookoutMetrics*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "lookoutmetrics.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIncidentManagerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "UpdateIncidentRecordPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-incidents:ListIncidentRecords",
              "ssm-incidents:CreateTimelineEvent"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RelatedOpsItemPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateOpsItem",
              "ssm:AssociateOpsItemRelatedItem"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IncidentEngagementPermissions",
            "Effect": "Allow",
            "Action": "ssm-contacts:StartEngagement",
            "Resource": "*"
          },
          {
            "Sid": "PutMetricDataPermission",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/IncidentManager"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIncidentManagerResolverAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "StartIncidentPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-incidents:StartIncident"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ResponsePlanReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-incidents:ListResponsePlans",
              "ssm-incidents:GetResponsePlan"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IncidentRecordResolverPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-incidents:ListIncidentRecords",
              "ssm-incidents:GetIncidentRecord",
              "ssm-incidents:UpdateIncidentRecord",
              "ssm-incidents:ListTimelineEvents",
              "ssm-incidents:CreateTimelineEvent",
              "ssm-incidents:GetTimelineEvent",
              "ssm-incidents:UpdateTimelineEvent",
              "ssm-incidents:DeleteTimelineEvent",
              "ssm-incidents:ListRelatedItems",
              "ssm-incidents:UpdateRelatedItems"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLookoutVisionReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "LookoutVisionReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "lookoutvision:DescribeDataset",
              "lookoutvision:DescribeModel",
              "lookoutvision:DescribeProject",
              "lookoutvision:DescribeModelPackagingJob",
              "lookoutvision:ListDatasetEntries",
              "lookoutvision:ListModels",
              "lookoutvision:ListProjects",
              "lookoutvision:ListTagsForResource",
              "lookoutvision:ListModelPackagingJobs"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLookoutVisionFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "LookoutVisionFullAccess",
            "Effect": "Allow",
            "Action": [
              "lookoutvision:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLookoutVisionConsoleReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "LookoutVisionReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "lookoutvision:DescribeDataset",
              "lookoutvision:DescribeModel",
              "lookoutvision:DescribeProject",
              "lookoutvision:DescribeTrialDetection",
              "lookoutvision:DescribeModelPackagingJob",
              "lookoutvision:ListDatasetEntries",
              "lookoutvision:ListModels",
              "lookoutvision:ListProjects",
              "lookoutvision:ListTagsForResource",
              "lookoutvision:ListTrialDetections",
              "lookoutvision:ListModelPackagingJobs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LookoutVisionConsoleS3BucketSearchAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LookoutVisionConsoleS3ObjectReadAccess",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "arn:aws:s3:::lookoutvision-*/*"
          },
          {
            "Sid": "LookoutVisionConsoleDashboardAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLookoutVisionConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "LookoutVisionFullAccess",
            "Effect": "Allow",
            "Action": [
              "lookoutvision:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LookoutVisionConsoleS3BucketSearchAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LookoutVisionConsoleS3BucketFirstUseSetupAccess",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:PutBucketVersioning",
              "s3:PutLifecycleConfiguration",
              "s3:PutEncryptionConfiguration",
              "s3:PutBucketPublicAccessBlock"
            ],
            "Resource": "arn:aws:s3:::lookoutvision-*"
          },
          {
            "Sid": "LookoutVisionConsoleS3BucketAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "s3:GetBucketVersioning"
            ],
            "Resource": "arn:aws:s3:::lookoutvision-*"
          },
          {
            "Sid": "LookoutVisionConsoleS3ObjectAccess",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:PutObject",
              "s3:AbortMultipartUpload",
              "s3:ListMultipartUploadParts"
            ],
            "Resource": "arn:aws:s3:::lookoutvision-*/*"
          },
          {
            "Sid": "LookoutVisionConsoleDatasetLabelingToolsAccess",
            "Effect": "Allow",
            "Action": [
              "groundtruthlabeling:RunGenerateManifestByCrawlingJob",
              "groundtruthlabeling:AssociatePatchToManifestJob",
              "groundtruthlabeling:DescribeConsoleJob"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LookoutVisionConsoleDashboardAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LookoutVisionConsoleTagSelectorAccess",
            "Effect": "Allow",
            "Action": [
              "tag:GetTagKeys",
              "tag:GetTagValues"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LookoutVisionConsoleKmsKeySelectorAccess",
            "Effect": "Allow",
            "Action": [
              "kms:ListAliases"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AppRunnerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "logs:CreateLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/apprunner/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/apprunner/*:log-stream:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:PutTargets",
              "events:DeleteRule",
              "events:RemoveTargets",
              "events:DescribeRule",
              "events:EnableRule",
              "events:DisableRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/AWSAppRunnerManagedRule*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppRunnerServicePolicyForECRAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetDownloadUrlForLayer",
              "ecr:BatchGetImage",
              "ecr:DescribeImages",
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogAppRegistryServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "cloudformation:DescribeStacks",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "resource-groups:CreateGroup",
              "resource-groups:Tag"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/EnableAWSServiceCatalogAppRegistry": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "resource-groups:DeleteGroup",
              "resource-groups:UpdateGroup",
              "resource-groups:GetTags",
              "resource-groups:Tag",
              "resource-groups:Untag"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/EnableAWSServiceCatalogAppRegistry": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "resource-groups:GetGroup",
              "resource-groups:GetGroupConfiguration"
            ],
            "Resource": [
              "arn:*:resource-groups:*:*:group/AWS_AppRegistry*",
              "arn:*:resource-groups:*:*:group/AWS_CloudFormation_Stack*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeviceFarmTestGridServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/AWSDeviceFarmManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSDeviceFarmManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSDeviceFarmManaged": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSKeyManagementServiceMultiRegionKeysServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kms:SynchronizeMultiRegionKey"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSSMOpsInsightsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowCreateOpsItem",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateOpsItem",
              "ssm:AddTagsToResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAccessOpsItem",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateOpsItem",
              "ssm:GetOpsItem"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SsmOperationalInsight": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBugBustServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "codeguru-reviewer:ListRecommendations",
              "codeguru-reviewer:UntagResource",
              "codeguru-reviewer:DescribeCodeReview"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/bugbust": "enabled"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBugBustFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CodeGuruReviewerPermission",
            "Effect": "Allow",
            "Action": [
              "codeguru-reviewer:DescribeCodeReview",
              "codeguru-reviewer:ListRecommendations",
              "codeguru-reviewer:ListCodeReviews"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeGuruProfilerPermission",
            "Effect": "Allow",
            "Action": [
              "codeguru-profiler:ListProfilingGroups",
              "codeguru-profiler:DescribeProfilingGroup"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSBugBustFullAccess",
            "Effect": "Allow",
            "Action": [
              "bugbust:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSBugBustSLRCreation",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/bugbust.amazonaws.com/AWSServiceRoleForBugBust",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "bugbust.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBugBustPlayerAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CodeGuruReviewerPermission",
            "Effect": "Allow",
            "Action": [
              "codeguru-reviewer:DescribeCodeReview",
              "codeguru-reviewer:ListRecommendations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeGuruProfilerPermission",
            "Effect": "Allow",
            "Action": [
              "codeguru-profiler:DescribeProfilingGroup"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSBugBustPlayerAccess",
            "Effect": "Allow",
            "Action": [
              "bugbust:ListBugs",
              "bugbust:ListProfilingGroups",
              "bugbust:JoinEvent",
              "bugbust:GetEvent",
              "bugbust:ListEvents",
              "bugbust:GetJoinEventStatus",
              "bugbust:ListEventScores",
              "bugbust:ListEventParticipants",
              "bugbust:UpdateWorkItem",
              "bugbust:ListPullRequests"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "Route53RecoveryReadinessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeReservedCapacity",
              "dynamodb:DescribeReservedCapacityOfferings"
            ],
            "Resource": "arn:aws:dynamodb:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:DescribeTable",
              "dynamodb:DescribeTimeToLive"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/servicequotas.amazonaws.com/AWSServiceRoleForServiceQuotas",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "servicequotas.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:GetFunctionConcurrency",
              "lambda:GetFunctionConfiguration",
              "lambda:GetProvisionedConcurrencyConfig",
              "lambda:ListProvisionedConcurrencyConfigs",
              "lambda:ListAliases",
              "lambda:ListVersionsByFunction"
            ],
            "Resource": "arn:aws:lambda:*:*:function:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBClusters"
            ],
            "Resource": "arn:aws:rds:*:*:cluster:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances"
            ],
            "Resource": "arn:aws:rds:*:*:db:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "route53:ListResourceRecordSets"
            ],
            "Resource": "arn:aws:route53:::hostedzone/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "route53:GetHealthCheck",
              "route53:GetHealthCheckStatus"
            ],
            "Resource": "arn:aws:route53:::healthcheck/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicequotas:RequestServiceQuotaIncrease"
            ],
            "Resource": "arn:aws:servicequotas:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:GetTopicAttributes",
              "sns:ListSubscriptionsByTopic"
            ],
            "Resource": "arn:aws:sns:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl"
            ],
            "Resource": "arn:aws:sqs:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "apigateway:GET",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingPolicies",
              "autoscaling:DescribeAccountLimits",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeLifecycleHooks",
              "autoscaling:DescribeLoadBalancers",
              "autoscaling:DescribeLoadBalancerTargetGroups",
              "autoscaling:DescribeNotificationConfigurations",
              "autoscaling:DescribePolicies",
              "cloudwatch:GetMetricData",
              "cloudwatch:DescribeAlarms",
              "dynamodb:DescribeLimits",
              "dynamodb:ListGlobalTables",
              "dynamodb:ListTables",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:GetEbsEncryptionByDefault",
              "ec2:GetEbsDefaultKmsKeyId",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "kafka:DescribeCluster",
              "kafka:DescribeConfigurationRevision",
              "lambda:ListEventSourceMappings",
              "lambda:ListFunctions",
              "rds:DescribeAccountAttributes",
              "route53:GetHostedZone",
              "servicequotas:ListAWSDefaultServiceQuotas",
              "servicequotas:ListRequestedServiceQuotaChangeHistory",
              "servicequotas:ListServiceQuotas",
              "servicequotas:ListServices",
              "sns:GetEndpointAttributes",
              "sns:GetSubscriptionAttributes"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerPipelinesIntegrations",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:DeleteFunction",
              "lambda:GetFunction",
              "lambda:InvokeFunction",
              "lambda:UpdateFunctionCode"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*sagemaker*",
              "arn:aws:lambda:*:*:function:*sageMaker*",
              "arn:aws:lambda:*:*:function:*SageMaker*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sqs:CreateQueue",
              "sqs:SendMessage"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:*sagemaker*",
              "arn:aws:sqs:*:*:*sageMaker*",
              "arn:aws:sqs:*:*:*SageMaker*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lambda.amazonaws.com",
                  "elasticmapreduce.amazonaws.com",
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:PutRule",
              "events:PutTargets"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/SageMakerPipelineExecutionEMRStepStatusUpdateRule",
              "arn:aws:events:*:*:rule/SageMakerPipelineExecutionEMRClusterStatusUpdateRule"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:AddJobFlowSteps",
              "elasticmapreduce:CancelSteps",
              "elasticmapreduce:DescribeStep",
              "elasticmapreduce:RunJobFlow",
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:TerminateJobFlows",
              "elasticmapreduce:ListSteps"
            ],
            "Resource": [
              "arn:aws:elasticmapreduce:*:*:cluster/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeTranscriptionServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "transcribe:StartStreamTranscription",
              "transcribe:StartMedicalStreamTranscription"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLicenseManagerConsumptionPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "license-manager:CheckoutLicense",
            "license-manager:CheckInLicense",
            "license-manager:ExtendLicenseConsumption",
            "license-manager:GetLicense"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "MemoryDBServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AmazonMemoryDBManaged"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AmazonMemoryDBManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/MemoryDB"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingElastiCacheRGPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elasticache:DescribeReplicationGroups",
              "elasticache:ModifyReplicationGroupShardConfiguration",
              "elasticache:IncreaseReplicaCount",
              "elasticache:DecreaseReplicaCount",
              "elasticache:DescribeCacheClusters",
              "elasticache:DescribeCacheParameters",
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonS3ObjectLambdaExecutionRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "s3-object-lambda:WriteGetObjectResponse"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53RecoveryReadinessFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53-recovery-readiness:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53RecoveryClusterReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53-recovery-cluster:GetRoutingControlState",
              "route53-recovery-cluster:ListRoutingControls"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53RecoveryControlConfigFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53-recovery-control-config:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53RecoveryControlConfigReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53-recovery-control-config:DescribeCluster",
              "route53-recovery-control-config:DescribeControlPanel",
              "route53-recovery-control-config:DescribeRoutingControl",
              "route53-recovery-control-config:DescribeRoutingControlByName",
              "route53-recovery-control-config:DescribeSafetyRule",
              "route53-recovery-control-config:GetResourcePolicy",
              "route53-recovery-control-config:ListAssociatedRoute53HealthChecks",
              "route53-recovery-control-config:ListClusters",
              "route53-recovery-control-config:ListControlPanels",
              "route53-recovery-control-config:ListRoutingControls",
              "route53-recovery-control-config:ListSafetyRules",
              "route53-recovery-control-config:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53RecoveryReadinessReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53-recovery-readiness:GetCell",
              "route53-recovery-readiness:GetReadinessCheck",
              "route53-recovery-readiness:GetReadinessCheckResourceStatus",
              "route53-recovery-readiness:GetReadinessCheckStatus",
              "route53-recovery-readiness:GetRecoveryGroup",
              "route53-recovery-readiness:GetRecoveryGroupReadinessSummary",
              "route53-recovery-readiness:GetResourceSet",
              "route53-recovery-readiness:ListCells",
              "route53-recovery-readiness:ListCrossAccountAuthorizations",
              "route53-recovery-readiness:ListReadinessChecks",
              "route53-recovery-readiness:ListRecoveryGroups",
              "route53-recovery-readiness:ListResourceSets",
              "route53-recovery-readiness:ListRules",
              "route53-recovery-readiness:ListTagsForResources"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "route53-recovery-readiness:GetArchitectureRecommendations",
              "route53-recovery-readiness:GetCellReadinessSummary"
            ],
            "Resource": "arn:aws:route53-recovery-readiness::*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53RecoveryClusterFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "route53-recovery-cluster:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRolePolicyForBackupReports",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "backup:DescribeFramework",
              "backup:ListBackupJobs",
              "backup:ListRestoreJobs",
              "backup:ListCopyJobs"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus",
              "config:BatchGetResourceConfig",
              "config:SelectResourceConfig",
              "config:DescribeConfigurationAggregators",
              "config:SelectAggregateResourceConfig",
              "config:DescribeConfigRuleEvaluationStatus",
              "config:DescribeConfigRules",
              "s3:GetBucketLocation"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:GetComplianceDetailsByConfigRule",
              "config:PutConfigRule",
              "config:DeleteConfigRule"
            ],
            "Resource": "arn:aws:config:*:*:config-rule/aws-service-rule/backup.amazonaws.com*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DeleteConfigurationAggregator",
              "config:PutConfigurationAggregator"
            ],
            "Resource": "arn:aws:config:*:*:config-aggregator/aws-service-config-aggregator/backup.amazonaws.com*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupAuditAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "backup:CreateFramework",
              "backup:UpdateFramework",
              "backup:ListFrameworks",
              "backup:DescribeFramework",
              "backup:DeleteFramework",
              "backup:ListBackupPlans",
              "backup:ListBackupVaults",
              "backup:CreateReportPlan",
              "backup:UpdateReportPlan",
              "backup:ListReportPlans",
              "backup:DescribeReportPlan",
              "backup:DeleteReportPlan",
              "backup:StartReportJob",
              "backup:ListReportJobs",
              "backup:DescribeReportJob"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DescribeConfigurationRecorders",
              "config:DescribeConfigurationRecorderStatus",
              "config:DescribeComplianceByConfigRule"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:GetComplianceDetailsByConfigRule"
            ],
            "Resource": "arn:aws:config:*:*:config-rule/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:GetBucketLocation"
            ],
            "Resource": "arn:aws:s3:::*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Stmt1480452973134",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "Stmt1480452973145",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973144",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ]
          },
          {
            "Sid": "Stmt1480452973165",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "Stmt1480452973149",
            "Effect": "Allow",
            "Action": [
              "ec2:AssignIpv6Addresses"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*"
          },
          {
            "Sid": "Stmt1480452973150",
            "Effect": "Allow",
            "Action": [
              "ec2:UnAssignIpv6Addresses"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*"
          },
          {
            "Sid": "Stmt1480452973154",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973164",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSubnets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973174",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973184",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddListenerCertificates",
              "elasticloadbalancing:RemoveListenerCertificates"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:listener/*"
            ]
          },
          {
            "Sid": "Stmt1480452973194",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ]
          },
          {
            "Sid": "Stmt1480452973195",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeTags"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973196",
            "Effect": "Allow",
            "Action": [
              "acm:DescribeCertificate"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973197",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/ES",
                  "AWS/OpenSearch"
                ]
              }
            }
          },
          {
            "Sid": "Stmt1480452973198",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:route-table/*"
            ]
          },
          {
            "Sid": "Stmt1480452973199",
            "Effect": "Allow",
            "Action": "ec2:CreateVpcEndpoint",
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/OpenSearchManaged": "true"
              }
            }
          },
          {
            "Sid": "Stmt1480452973200",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVpcEndpoint",
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/OpenSearchManaged": "true"
              }
            }
          },
          {
            "Sid": "Stmt1480452973201",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Stmt1480452973202",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchServiceCognitoAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-idp:DescribeUserPool",
              "cognito-idp:CreateUserPoolClient",
              "cognito-idp:DeleteUserPoolClient",
              "cognito-idp:UpdateUserPoolClient",
              "cognito-idp:DescribeUserPoolClient",
              "cognito-idp:AdminInitiateAuth",
              "cognito-idp:AdminUserGlobalSignOut",
              "cognito-idp:ListUserPoolClients",
              "cognito-identity:DescribeIdentityPool",
              "cognito-identity:UpdateIdentityPool",
              "cognito-identity:GetIdentityPoolRoles"
            ],
            "Resource": [
              "arn:aws:cognito-identity:*:*:identitypool/*",
              "arn:aws:cognito-idp:*:*:userpool/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "cognito-identity.amazonaws.com",
                  "cognito-identity-us-gov.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "cognito-identity:SetIdentityPoolRoles",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingNeptuneClusterPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "rds:ListTagsForResource",
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters",
              "rds:DescribeDBClusterParameters",
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "rds:AddTagsToResource",
            "Resource": [
              "arn:aws:rds:*:*:db:autoscaled-reader*"
            ],
            "Condition": {
              "StringEquals": {
                "rds:DatabaseEngine": "neptune"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "rds:CreateDBInstance",
            "Resource": [
              "arn:aws:rds:*:*:db:autoscaled-reader*",
              "arn:aws:rds:*:*:cluster:*"
            ],
            "Condition": {
              "StringEquals": {
                "rds:DatabaseEngine": "neptune"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "rds:DeleteDBInstance"
            ],
            "Resource": [
              "arn:aws:rds:*:*:db:autoscaled-reader*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSConnectorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AccessSSMService",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateActivation",
              "ssm:DescribeInstanceInformation",
              "ssm:DeleteActivation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConnectorAgentStartSession",
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": [
              "arn:aws:eks:*:*:cluster/*",
              "arn:aws:ssm:*::document/AmazonEKS-ExecuteNonInteractiveCommand"
            ]
          },
          {
            "Sid": "ConnectorAgentDeregister",
            "Effect": "Allow",
            "Action": [
              "ssm:DeregisterManagedInstance"
            ],
            "Resource": [
              "arn:aws:eks:*:*:cluster/*"
            ]
          },
          {
            "Sid": "PassAnyRoleToSsm",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "PutManagedEventRule",
            "Effect": "Allow",
            "Action": "events:PutRule",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "eks-connector.amazonaws.com",
                "events:source": "aws.ssm"
              }
            }
          },
          {
            "Sid": "PutManagedEventTarget",
            "Effect": "Allow",
            "Action": "events:PutTargets",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "eks-connector.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "KafkaConnectServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/AmazonMSKConnectManaged": "true"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "AmazonMSKConnectManaged"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:AttachNetworkInterface",
              "ec2:DetachNetworkInterface",
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AmazonMSKConnectManaged": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuicksightOpenSearchPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "es:ESHttpGet"
            ],
            "Resource": [
              "arn:aws:es:*:*:domain/*/",
              "arn:aws:es:*:*:domain/*/_cluster/settings",
              "arn:aws:es:*:*:domain/*/_cat/indices"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "es:ListDomainNames",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "es:DescribeDomain"
            ],
            "Resource": [
              "arn:aws:es:*:*:domain/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "es:ESHttpPost",
              "es:ESHttpGet"
            ],
            "Resource": [
              "arn:aws:es:*:*:domain/*/_opendistro/_sql",
              "arn:aws:es:*:*:domain/*/_plugin/_sql"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchServiceFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "es:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchServiceReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "es:Describe*",
              "es:List*",
              "es:Get*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMediaTailorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": "arn:aws:logs:*:*:log-group:MediaTailor/*:log-stream:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:MediaTailor/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMSKConnectReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kafkaconnect:ListConnectors",
              "kafkaconnect:ListCustomPlugins",
              "kafkaconnect:ListWorkerConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kafkaconnect:DescribeConnector"
            ],
            "Resource": [
              "arn:aws:kafkaconnect:*:*:connector/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "kafkaconnect:DescribeCustomPlugin"
            ],
            "Resource": [
              "arn:aws:kafkaconnect:*:*:custom-plugin/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "kafkaconnect:DescribeWorkerConfiguration"
            ],
            "Resource": [
              "arn:aws:kafkaconnect:*:*:worker-configuration/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonConnectCampaignsServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "connect-campaigns:ListCampaigns"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "connect:BatchPutContact",
              "connect:StopContact"
            ],
            "Resource": "arn:aws:connect:*:*:instance/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftQueryEditorV2FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RedshiftPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListWorkgroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KeyManagementServicePermissions",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:DeleteSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:sqlworkbench!*"
          },
          {
            "Sid": "ResourceGroupsTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "sqlworkbench.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2Permissions",
            "Effect": "Allow",
            "Action": "sqlworkbench:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftQueryEditorV2NoSharing",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RedshiftPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListWorkgroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:DeleteSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:sqlworkbench!*",
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "ResourceGroupsTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "sqlworkbench.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:CreateFolder",
              "sqlworkbench:PutTab",
              "sqlworkbench:BatchDeleteFolder",
              "sqlworkbench:DeleteTab",
              "sqlworkbench:GenerateSession",
              "sqlworkbench:GetAccountInfo",
              "sqlworkbench:GetAccountSettings",
              "sqlworkbench:GetUserInfo",
              "sqlworkbench:GetUserWorkspaceSettings",
              "sqlworkbench:PutUserWorkspaceSettings",
              "sqlworkbench:ListConnections",
              "sqlworkbench:ListFiles",
              "sqlworkbench:ListTabs",
              "sqlworkbench:UpdateFolder",
              "sqlworkbench:ListRedshiftClusters",
              "sqlworkbench:DriverExecute",
              "sqlworkbench:ListTaggedResources",
              "sqlworkbench:ListQueryExecutionHistory",
              "sqlworkbench:GetQueryExecutionHistory",
              "sqlworkbench:ListNotebooks",
              "sqlworkbench:GetSchemaInference",
              "sqlworkbench:GetAutocompletionMetadata",
              "sqlworkbench:GetAutocompletionResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:CreateConnection",
              "sqlworkbench:CreateSavedQuery",
              "sqlworkbench:CreateChart",
              "sqlworkbench:CreateNotebook",
              "sqlworkbench:DuplicateNotebook",
              "sqlworkbench:CreateNotebookFromVersion",
              "sqlworkbench:ImportNotebook"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:DeleteChart",
              "sqlworkbench:DeleteConnection",
              "sqlworkbench:DeleteSavedQuery",
              "sqlworkbench:GetChart",
              "sqlworkbench:GetConnection",
              "sqlworkbench:GetSavedQuery",
              "sqlworkbench:ListSavedQueryVersions",
              "sqlworkbench:UpdateChart",
              "sqlworkbench:UpdateConnection",
              "sqlworkbench:UpdateSavedQuery",
              "sqlworkbench:AssociateConnectionWithTab",
              "sqlworkbench:AssociateQueryWithTab",
              "sqlworkbench:AssociateConnectionWithChart",
              "sqlworkbench:AssociateNotebookWithTab",
              "sqlworkbench:UpdateFileFolder",
              "sqlworkbench:ListTagsForResource",
              "sqlworkbench:GetNotebook",
              "sqlworkbench:UpdateNotebook",
              "sqlworkbench:DeleteNotebook",
              "sqlworkbench:DuplicateNotebook",
              "sqlworkbench:CreateNotebookCell",
              "sqlworkbench:DeleteNotebookCell",
              "sqlworkbench:UpdateNotebookCellContent",
              "sqlworkbench:UpdateNotebookCellLayout",
              "sqlworkbench:BatchGetNotebookCell",
              "sqlworkbench:ListNotebookVersions",
              "sqlworkbench:CreateNotebookVersion",
              "sqlworkbench:GetNotebookVersion",
              "sqlworkbench:DeleteNotebookVersion",
              "sqlworkbench:RestoreNotebookVersion",
              "sqlworkbench:CreateNotebookFromVersion",
              "sqlworkbench:ExportNotebook",
              "sqlworkbench:ImportNotebook"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
            "Effect": "Allow",
            "Action": "sqlworkbench:TagResource",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "sqlworkbench-resource-owner"
              },
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
                "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftQueryEditorV2ReadSharing",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RedshiftPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListWorkgroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:DeleteSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:sqlworkbench!*",
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "ResourceGroupsTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "sqlworkbench.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:CreateFolder",
              "sqlworkbench:PutTab",
              "sqlworkbench:BatchDeleteFolder",
              "sqlworkbench:DeleteTab",
              "sqlworkbench:GenerateSession",
              "sqlworkbench:GetAccountInfo",
              "sqlworkbench:GetAccountSettings",
              "sqlworkbench:GetUserInfo",
              "sqlworkbench:GetUserWorkspaceSettings",
              "sqlworkbench:PutUserWorkspaceSettings",
              "sqlworkbench:ListConnections",
              "sqlworkbench:ListFiles",
              "sqlworkbench:ListTabs",
              "sqlworkbench:UpdateFolder",
              "sqlworkbench:ListRedshiftClusters",
              "sqlworkbench:DriverExecute",
              "sqlworkbench:ListTaggedResources",
              "sqlworkbench:ListQueryExecutionHistory",
              "sqlworkbench:GetQueryExecutionHistory",
              "sqlworkbench:ListNotebooks",
              "sqlworkbench:GetSchemaInference",
              "sqlworkbench:GetAutocompletionMetadata",
              "sqlworkbench:GetAutocompletionResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:CreateConnection",
              "sqlworkbench:CreateSavedQuery",
              "sqlworkbench:CreateChart",
              "sqlworkbench:CreateNotebook",
              "sqlworkbench:DuplicateNotebook",
              "sqlworkbench:CreateNotebookFromVersion",
              "sqlworkbench:ImportNotebook"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:DeleteChart",
              "sqlworkbench:DeleteConnection",
              "sqlworkbench:DeleteSavedQuery",
              "sqlworkbench:GetChart",
              "sqlworkbench:GetConnection",
              "sqlworkbench:GetSavedQuery",
              "sqlworkbench:ListSavedQueryVersions",
              "sqlworkbench:UpdateChart",
              "sqlworkbench:UpdateConnection",
              "sqlworkbench:UpdateSavedQuery",
              "sqlworkbench:AssociateConnectionWithTab",
              "sqlworkbench:AssociateQueryWithTab",
              "sqlworkbench:AssociateConnectionWithChart",
              "sqlworkbench:AssociateNotebookWithTab",
              "sqlworkbench:UpdateFileFolder",
              "sqlworkbench:ListTagsForResource",
              "sqlworkbench:GetNotebook",
              "sqlworkbench:UpdateNotebook",
              "sqlworkbench:DeleteNotebook",
              "sqlworkbench:DuplicateNotebook",
              "sqlworkbench:CreateNotebookCell",
              "sqlworkbench:DeleteNotebookCell",
              "sqlworkbench:UpdateNotebookCellContent",
              "sqlworkbench:UpdateNotebookCellLayout",
              "sqlworkbench:BatchGetNotebookCell",
              "sqlworkbench:ListNotebookVersions",
              "sqlworkbench:CreateNotebookVersion",
              "sqlworkbench:GetNotebookVersion",
              "sqlworkbench:DeleteNotebookVersion",
              "sqlworkbench:RestoreNotebookVersion",
              "sqlworkbench:CreateNotebookFromVersion",
              "sqlworkbench:ExportNotebook",
              "sqlworkbench:ImportNotebook"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
            "Effect": "Allow",
            "Action": "sqlworkbench:TagResource",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "sqlworkbench-resource-owner"
              },
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
                "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2TeamReadAccessPermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:GetChart",
              "sqlworkbench:GetConnection",
              "sqlworkbench:GetSavedQuery",
              "sqlworkbench:ListSavedQueryVersions",
              "sqlworkbench:ListTagsForResource",
              "sqlworkbench:AssociateQueryWithTab",
              "sqlworkbench:AssociateNotebookWithTab",
              "sqlworkbench:GetNotebook",
              "sqlworkbench:DuplicateNotebook",
              "sqlworkbench:BatchGetNotebookCell",
              "sqlworkbench:ListNotebookVersions",
              "sqlworkbench:GetNotebookVersion",
              "sqlworkbench:CreateNotebookFromVersion",
              "sqlworkbench:ExportNotebook"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2TagOnlyTeamPermissions",
            "Effect": "Allow",
            "Action": "sqlworkbench:TagResource",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "sqlworkbench-team"
              },
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
                "aws:RequestTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2UntagOnlyTeamPermissions",
            "Effect": "Allow",
            "Action": "sqlworkbench:UntagResource",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "sqlworkbench-team"
              },
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftQueryEditorV2ReadWriteSharing",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RedshiftPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListWorkgroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecretsManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:DeleteSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:sqlworkbench!*",
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "ResourceGroupsTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "sqlworkbench.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2NonResourceLevelPermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:CreateFolder",
              "sqlworkbench:PutTab",
              "sqlworkbench:BatchDeleteFolder",
              "sqlworkbench:DeleteTab",
              "sqlworkbench:GenerateSession",
              "sqlworkbench:GetAccountInfo",
              "sqlworkbench:GetAccountSettings",
              "sqlworkbench:GetUserInfo",
              "sqlworkbench:GetUserWorkspaceSettings",
              "sqlworkbench:PutUserWorkspaceSettings",
              "sqlworkbench:ListConnections",
              "sqlworkbench:ListFiles",
              "sqlworkbench:ListTabs",
              "sqlworkbench:UpdateFolder",
              "sqlworkbench:ListRedshiftClusters",
              "sqlworkbench:DriverExecute",
              "sqlworkbench:ListTaggedResources",
              "sqlworkbench:ListQueryExecutionHistory",
              "sqlworkbench:GetQueryExecutionHistory",
              "sqlworkbench:ListNotebooks",
              "sqlworkbench:GetSchemaInference",
              "sqlworkbench:GetAutocompletionMetadata",
              "sqlworkbench:GetAutocompletionResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2CreateOwnedResourcePermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:CreateConnection",
              "sqlworkbench:CreateSavedQuery",
              "sqlworkbench:CreateChart",
              "sqlworkbench:CreateNotebook",
              "sqlworkbench:DuplicateNotebook",
              "sqlworkbench:CreateNotebookFromVersion",
              "sqlworkbench:ImportNotebook"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2OwnerSpecificPermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:DeleteChart",
              "sqlworkbench:DeleteConnection",
              "sqlworkbench:DeleteSavedQuery",
              "sqlworkbench:GetChart",
              "sqlworkbench:GetConnection",
              "sqlworkbench:GetSavedQuery",
              "sqlworkbench:ListSavedQueryVersions",
              "sqlworkbench:UpdateChart",
              "sqlworkbench:UpdateConnection",
              "sqlworkbench:UpdateSavedQuery",
              "sqlworkbench:AssociateConnectionWithTab",
              "sqlworkbench:AssociateQueryWithTab",
              "sqlworkbench:AssociateConnectionWithChart",
              "sqlworkbench:AssociateNotebookWithTab",
              "sqlworkbench:UpdateFileFolder",
              "sqlworkbench:ListTagsForResource",
              "sqlworkbench:GetNotebook",
              "sqlworkbench:UpdateNotebook",
              "sqlworkbench:DeleteNotebook",
              "sqlworkbench:DuplicateNotebook",
              "sqlworkbench:CreateNotebookCell",
              "sqlworkbench:DeleteNotebookCell",
              "sqlworkbench:UpdateNotebookCellContent",
              "sqlworkbench:UpdateNotebookCellLayout",
              "sqlworkbench:BatchGetNotebookCell",
              "sqlworkbench:ListNotebookVersions",
              "sqlworkbench:CreateNotebookVersion",
              "sqlworkbench:GetNotebookVersion",
              "sqlworkbench:DeleteNotebookVersion",
              "sqlworkbench:RestoreNotebookVersion",
              "sqlworkbench:CreateNotebookFromVersion",
              "sqlworkbench:ExportNotebook",
              "sqlworkbench:ImportNotebook"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2TagOnlyUserIdPermissions",
            "Effect": "Allow",
            "Action": "sqlworkbench:TagResource",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "sqlworkbench-resource-owner"
              },
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
                "aws:RequestTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2TeamReadWriteAccessPermissions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:GetChart",
              "sqlworkbench:GetConnection",
              "sqlworkbench:GetSavedQuery",
              "sqlworkbench:ListSavedQueryVersions",
              "sqlworkbench:ListTagsForResource",
              "sqlworkbench:UpdateChart",
              "sqlworkbench:UpdateConnection",
              "sqlworkbench:UpdateSavedQuery",
              "sqlworkbench:AssociateConnectionWithTab",
              "sqlworkbench:AssociateQueryWithTab",
              "sqlworkbench:AssociateConnectionWithChart",
              "sqlworkbench:AssociateNotebookWithTab",
              "sqlworkbench:GetNotebook",
              "sqlworkbench:DuplicateNotebook",
              "sqlworkbench:BatchGetNotebookCell",
              "sqlworkbench:ListNotebookVersions",
              "sqlworkbench:GetNotebookVersion",
              "sqlworkbench:CreateNotebookFromVersion",
              "sqlworkbench:ExportNotebook"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2TagOnlyTeamPermissions",
            "Effect": "Allow",
            "Action": "sqlworkbench:TagResource",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "sqlworkbench-team"
              },
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}",
                "aws:RequestTag/sqlworkbench-team": "${aws:PrincipalTag/sqlworkbench-team}"
              }
            }
          },
          {
            "Sid": "AmazonRedshiftQueryEditorV2UntagOnlyTeamPermissions",
            "Effect": "Allow",
            "Action": "sqlworkbench:UntagResource",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "sqlworkbench-team"
              },
              "StringEquals": {
                "aws:ResourceTag/sqlworkbench-resource-owner": "${aws:userid}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonConnectVoiceIDFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "voiceid:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSEC2CapacityReservationFleetRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeCapacityReservations",
              "ec2:DescribeInstances"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateCapacityReservation",
              "ec2:CancelCapacityReservation",
              "ec2:ModifyCapacityReservation"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:capacity-reservation/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:CapacityReservationFleet": "arn:aws:ec2:*:*:capacity-reservation-fleet/crf-*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:capacity-reservation/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateCapacityReservation"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAccountManagementFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "account:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAccountManagementReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "account:Get*",
              "account:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMemoryDBFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "memorydb:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/memorydb.amazonaws.com/AWSServiceRoleForMemoryDB",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "memorydb.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMemoryDBReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "memorydb:Describe*",
              "memorydb:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSCustomServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "rdscrc",
            "Effect": "Allow",
            "Action": [
              "rds:CrossRegionCommunication"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ecc1",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeRegions",
              "ec2:DescribeSnapshots",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVolumes",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeIamInstanceProfileAssociations",
              "ec2:DescribeImages",
              "ec2:DescribeVpcs",
              "ec2:RegisterImage",
              "ec2:DeregisterImage",
              "ec2:DescribeTags",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVolumesModifications",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:SearchTransitGatewayMulticastGroups",
              "ec2:GetTransitGatewayMulticastDomainAssociations",
              "ec2:DescribeTransitGatewayMulticastDomains",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeRouteTables"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ecc2",
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateIamInstanceProfile",
              "ec2:AssociateIamInstanceProfile",
              "ec2:ReplaceIamInstanceProfileAssociation",
              "ec2:TerminateInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:RebootInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ecc1scoping",
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ecc1scoping2",
            "Effect": "Allow",
            "Action": [
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress",
              "ec2:ReleaseAddress"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ecc1scoping3",
            "Effect": "Allow",
            "Action": [
              "ec2:AssignPrivateIpAddresses"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccRunInstances1",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccRunInstances2",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*",
              "arn:aws:ec2:*:*:placement-group/*"
            ]
          },
          {
            "Sid": "eccRunInstances3",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*::snapshot/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle-rac",
                  "custom-oracle"
                ]
              }
            }
          },
          {
            "Sid": "eccModifyInstanceAttribute1",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyInstanceAttribute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-sqlserver"
                ],
                "ec2:Attribute": "InstanceType"
              }
            }
          },
          {
            "Sid": "RequireImdsV2",
            "Effect": "Deny",
            "Action": "ec2:RunInstances",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringNotEquals": {
                "ec2:MetadataHttpTokens": "required"
              },
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccRunInstances3keyPair1",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances",
              "ec2:DeleteKeyPair"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccKeyPair2",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateKeyPair"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccNetworkInterface1",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccNetworkInterface2",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "eccNetworkInterface3",
            "Effect": "Allow",
            "Action": "ec2:DeleteNetworkInterface",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccCreateTag1",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccCreateTag2",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ],
                "ec2:CreateAction": [
                  "CreateKeyPair",
                  "RunInstances",
                  "CreateNetworkInterface",
                  "CreateVolume",
                  "CreateSnapshot",
                  "CreateSnapshots",
                  "CopySnapshot",
                  "AllocateAddress",
                  "CopyImage"
                ]
              }
            }
          },
          {
            "Sid": "eccVolume1",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccVolume2",
            "Effect": "Allow",
            "Action": "ec2:CreateVolume",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccVolume3",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVolumeAttribute",
              "ec2:DeleteVolume",
              "ec2:ModifyVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccVolume4snapshot1",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume",
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccSnapshot2",
            "Effect": "Allow",
            "Action": [
              "ec2:CopySnapshot",
              "ec2:CreateSnapshot",
              "ec2:CreateSnapshots"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccSnapshot3",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshots",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccSnapshot4",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshot",
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-sqlserver"
                ]
              }
            }
          },
          {
            "Sid": "eccAmi1",
            "Effect": "Allow",
            "Action": [
              "ec2:CopyImage"
            ],
            "Resource": [
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*::snapshot/*"
            ]
          },
          {
            "Sid": "iam1",
            "Effect": "Allow",
            "Action": [
              "iam:ListInstanceProfiles",
              "iam:GetInstanceProfile",
              "iam:GetRole",
              "iam:ListRolePolicies",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "iam:GetPolicy",
              "iam:GetPolicyVersion"
            ],
            "Resource": "*"
          },
          {
            "Sid": "iam2",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/AWSRDSCustom*",
              "arn:aws:iam::*:role/service-role/AWSRDSCustom*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Sid": "cloudtrail1",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:GetTrailStatus"
            ],
            "Resource": "arn:aws:cloudtrail:*:*:trail/do-not-delete-rds-custom-*"
          },
          {
            "Sid": "cw1",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:EnableAlarmActions",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "cw2",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:TagResource"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "cw3",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
          },
          {
            "Sid": "ssm1",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": "arn:aws:ssm:*:*:document/*"
          },
          {
            "Sid": "ssm2",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ssm3",
            "Effect": "Allow",
            "Action": [
              "ssm:GetCommandInvocation",
              "ssm:GetConnectionStatus",
              "ssm:DescribeInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ssm4",
            "Effect": "Allow",
            "Action": [
              "ssm:PutParameter",
              "ssm:AddTagsToResource"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ssm5",
            "Effect": "Allow",
            "Action": [
              "ssm:DeleteParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eb1",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:TagResource"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eb2",
            "Effect": "Allow",
            "Action": [
              "events:PutTargets",
              "events:DescribeRule",
              "events:EnableRule",
              "events:ListTargetsByRule",
              "events:DeleteRule",
              "events:RemoveTargets",
              "events:DisableRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eb3",
            "Effect": "Allow",
            "Action": [
              "events:PutRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "events:ManagedBy": [
                  "custom.rds.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "eb4",
            "Effect": "Allow",
            "Action": [
              "events:PutTargets",
              "events:EnableRule",
              "events:DeleteRule",
              "events:RemoveTargets",
              "events:DisableRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "events:ManagedBy": [
                  "custom.rds.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "eb5",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
          },
          {
            "Sid": "secretmanager1",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:TagResource",
              "secretsmanager:CreateSecret"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "secretmanager2",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:TagResource",
              "secretsmanager:DescribeSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:PutSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "sqs1",
            "Effect": "Allow",
            "Action": [
              "sqs:CreateQueue",
              "sqs:TagQueue"
            ],
            "Resource": "arn:aws:sqs:*:*:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-sqlserver"
                ]
              }
            }
          },
          {
            "Sid": "sqs2",
            "Effect": "Allow",
            "Action": [
              "sqs:GetQueueAttributes",
              "sqs:SendMessage",
              "sqs:ReceiveMessage",
              "sqs:DeleteMessage",
              "sqs:DeleteQueue"
            ],
            "Resource": "arn:aws:sqs:*:*:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-sqlserver"
                ]
              }
            }
          },
          {
            "Sid": "servicequota1",
            "Effect": "Allow",
            "Action": [
              "servicequotas:GetServiceQuota"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSCustomPreviewServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ecc1",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeRegions",
              "ec2:DescribeSnapshots",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVolumes",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeIamInstanceProfileAssociations",
              "ec2:DescribeImages",
              "ec2:DescribeVpcs",
              "ec2:RegisterImage",
              "ec2:DeregisterImage",
              "ec2:DescribeTags",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVolumesModifications",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:SearchTransitGatewayMulticastGroups",
              "ec2:GetTransitGatewayMulticastDomainAssociations",
              "ec2:DescribeTransitGatewayMulticastDomains",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeRouteTables"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ecc2",
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateIamInstanceProfile",
              "ec2:AssociateIamInstanceProfile",
              "ec2:ReplaceIamInstanceProfileAssociation",
              "ec2:TerminateInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:RebootInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ecc1scoping",
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ecc1scoping2",
            "Effect": "Allow",
            "Action": [
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress",
              "ec2:ReleaseAddress"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ecc1scoping3",
            "Effect": "Allow",
            "Action": [
              "ec2:AssignPrivateIpAddresses"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccRunInstances1",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccRunInstances2",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*",
              "arn:aws:ec2:*:*:placement-group/*"
            ]
          },
          {
            "Sid": "eccRunInstances3",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*::snapshot/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle-rac",
                  "custom-oracle"
                ]
              }
            }
          },
          {
            "Sid": "RequireImdsV2",
            "Effect": "Deny",
            "Action": "ec2:RunInstances",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringNotEquals": {
                "ec2:MetadataHttpTokens": "required"
              },
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccRunInstances3keyPair1",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances",
              "ec2:DeleteKeyPair"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccKeyPair2",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateKeyPair"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:key-pair/do-not-delete-rds-custom-*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccNetworkInterface1",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccNetworkInterface2",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "eccNetworkInterface3",
            "Effect": "Allow",
            "Action": "ec2:DeleteNetworkInterface",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccCreateTag1",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccCreateTag2",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ],
                "ec2:CreateAction": [
                  "CreateKeyPair",
                  "RunInstances",
                  "CreateNetworkInterface",
                  "CreateVolume",
                  "CreateSnapshots",
                  "CopySnapshot",
                  "AllocateAddress"
                ]
              }
            }
          },
          {
            "Sid": "eccVolume1",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccVolume2",
            "Effect": "Allow",
            "Action": "ec2:CreateVolume",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccVolume3",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVolumeAttribute",
              "ec2:DeleteVolume",
              "ec2:ModifyVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccVolume4snapshot1",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume",
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccSnapshot2",
            "Effect": "Allow",
            "Action": [
              "ec2:CopySnapshot",
              "ec2:CreateSnapshots"
            ],
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eccSnapshot3",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshots",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "iam1",
            "Effect": "Allow",
            "Action": [
              "iam:ListInstanceProfiles",
              "iam:GetInstanceProfile",
              "iam:GetRole",
              "iam:ListRolePolicies",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "iam:GetPolicy",
              "iam:GetPolicyVersion"
            ],
            "Resource": "*"
          },
          {
            "Sid": "iam2",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/AWSRDSCustom*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Sid": "cloudtrail1",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:GetTrailStatus"
            ],
            "Resource": "arn:aws:cloudtrail:*:*:trail/do-not-delete-rds-custom-*"
          },
          {
            "Sid": "cw1",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:EnableAlarmActions",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "cw2",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:TagResource"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "cw3",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
          },
          {
            "Sid": "ssm1",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": "arn:aws:ssm:*:*:document/*"
          },
          {
            "Sid": "ssm2",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ssm3",
            "Effect": "Allow",
            "Action": [
              "ssm:GetCommandInvocation",
              "ssm:GetConnectionStatus",
              "ssm:DescribeInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ssm4",
            "Effect": "Allow",
            "Action": [
              "ssm:PutParameter",
              "ssm:AddTagsToResource"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ssm5",
            "Effect": "Allow",
            "Action": [
              "ssm:DeleteParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/rds/custom-oracle-rac/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eb1",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:TagResource"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eb2",
            "Effect": "Allow",
            "Action": [
              "events:PutTargets",
              "events:DescribeRule",
              "events:EnableRule",
              "events:ListTargetsByRule",
              "events:DeleteRule",
              "events:RemoveTargets",
              "events:DisableRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "eb3",
            "Effect": "Allow",
            "Action": [
              "events:PutRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "events:ManagedBy": [
                  "custom.rds-preview.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "eb4",
            "Effect": "Allow",
            "Action": [
              "events:PutTargets",
              "events:EnableRule",
              "events:DeleteRule",
              "events:RemoveTargets",
              "events:DisableRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "events:ManagedBy": [
                  "custom.rds-preview.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "eb5",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/do-not-delete-rds-custom-*"
          },
          {
            "Sid": "secretmanager1",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:TagResource",
              "secretsmanager:CreateSecret"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "secretmanager2",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:TagResource",
              "secretsmanager:DescribeSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:PutSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "servicequota1",
            "Effect": "Allow",
            "Action": [
              "servicequotas:GetServiceQuota"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubStrategyServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "permissionsForAds",
            "Effect": "Allow",
            "Action": [
              "discovery:ListConfigurations",
              "discovery:DescribeConfigurations",
              "mgh:GetHomeRegion"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Sid": "permissionsForS3",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:PutObjectAcl"
            ],
            "Resource": "arn:aws:s3:::migrationhub-strategy-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubStrategyConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "migrationhub-strategy:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:CreateBucket",
              "s3:PutEncryptionConfiguration",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketPolicy",
              "s3:PutBucketVersioning",
              "s3:PutLifecycleConfiguration"
            ],
            "Resource": "arn:aws:s3:::migrationhub-strategy-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "discovery:GetDiscoverySummary",
              "discovery:DescribeTags",
              "discovery:DescribeConfigurations",
              "discovery:ListConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "migrationhub-strategy.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/migrationhub-strategy.amazonaws.com/AWSMigrationHubStrategyServiceRolePolicy*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubStrategyCollector",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "MHSRAllowS3Resources",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:GetBucketAcl",
              "s3:CreateBucket",
              "s3:PutEncryptionConfiguration",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketVersioning",
              "s3:PutLifecycleConfiguration",
              "s3:ListBucket",
              "s3:GetBucketLocation"
            ],
            "Resource": "arn:aws:s3:::migrationhub-strategy-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "MHSRAllowS3ListBucket",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "MHSRAllowMetricsAndLogs",
            "Effect": "Allow",
            "Action": [
              "application-transformation:PutMetricData",
              "application-transformation:PutLogData",
              "application-transformation:StartPortingCompatibilityAssessment",
              "application-transformation:GetPortingCompatibilityAssessment",
              "application-transformation:StartPortingRecommendationAssessment",
              "application-transformation:GetPortingRecommendationAssessment"
            ],
            "Resource": "*"
          },
          {
            "Sid": "MHSRAllowExecuteAPI",
            "Effect": "Allow",
            "Action": [
              "execute-api:Invoke",
              "execute-api:ManageConnections"
            ],
            "Resource": [
              "arn:aws:execute-api:*:*:*/prod/*/put-log-data",
              "arn:aws:execute-api:*:*:*/prod/*/put-metric-data"
            ]
          },
          {
            "Sid": "MHSRAllowCollectorAPI",
            "Effect": "Allow",
            "Action": [
              "migrationhub-strategy:RegisterCollector",
              "migrationhub-strategy:GetAntiPattern",
              "migrationhub-strategy:GetMessage",
              "migrationhub-strategy:SendMessage",
              "migrationhub-strategy:ListAntiPatterns",
              "migrationhub-strategy:ListJarArtifacts",
              "migrationhub-strategy:UpdateCollectorConfiguration",
              "migrationhub-strategy:PutLogData",
              "migrationhub-strategy:PutMetricData"
            ],
            "Resource": "arn:aws:migrationhub-strategy:*:*:*"
          },
          {
            "Sid": "MHSRAllowSecretsManager",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:migrationhub-strategy-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPanoramaServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PanoramaIoTThingAccess",
            "Effect": "Allow",
            "Action": [
              "iot:CreateThing",
              "iot:DeleteThing",
              "iot:DeleteThingShadow",
              "iot:DescribeThing",
              "iot:GetThingShadow",
              "iot:UpdateThing",
              "iot:UpdateThingShadow"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/panorama*"
            ]
          },
          {
            "Sid": "PanoramaIoTCertificateAccess",
            "Effect": "Allow",
            "Action": [
              "iot:AttachThingPrincipal",
              "iot:DetachThingPrincipal",
              "iot:UpdateCertificate",
              "iot:DeleteCertificate",
              "iot:AttachPrincipalPolicy",
              "iot:DetachPrincipalPolicy"
            ],
            "Resource": [
              "arn:aws:iot:*:*:thing/panorama*",
              "arn:aws:iot:*:*:cert/*"
            ]
          },
          {
            "Sid": "PanoramaIoTCreateCertificateAccess",
            "Effect": "Allow",
            "Action": [
              "iot:CreateKeysAndCertificate"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PanoramaIoTCreatePolicyAndVersionAccess",
            "Effect": "Allow",
            "Action": [
              "iot:CreatePolicy",
              "iot:CreatePolicyVersion",
              "iot:AttachPolicy"
            ],
            "Resource": [
              "arn:aws:iot:*:*:policy/panorama*"
            ]
          },
          {
            "Sid": "PanoramaIoTJobAccess",
            "Effect": "Allow",
            "Action": [
              "iot:DescribeJobExecution",
              "iot:CreateJob",
              "iot:DeleteJob"
            ],
            "Resource": [
              "arn:aws:iot:*:*:job/panorama*",
              "arn:aws:iot:*:*:thing/panorama*"
            ]
          },
          {
            "Sid": "PanoramaIoTEndpointAccess",
            "Effect": "Allow",
            "Action": [
              "iot:DescribeEndpoint"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PanoramaReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "panorama:Describe*",
              "panorama:List*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SecretsManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue",
              "secretsmanager:DescribeSecret",
              "secretsmanager:CreateSecret",
              "secretsmanager:ListSecretVersionIds",
              "secretsmanager:DeleteSecret"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:panorama*",
              "arn:aws:secretsmanager:*:*:secret:Panorama*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPanoramaApplianceServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PanoramaDeviceCreateLogStream",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/panorama_device*:log-stream:*",
              "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
            ]
          },
          {
            "Sid": "PanoramaDeviceCreateLogGroup",
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/panorama_device*",
              "arn:aws:logs:*:*:log-group:/aws/panorama/devices/*"
            ]
          },
          {
            "Sid": "PanoramaDevicePutMetric",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "PanoramaDeviceMetrics"
              }
            }
          },
          {
            "Sid": "PanoramaDeviceS3Access",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:ListBucket",
              "s3:GetObjectVersion"
            ],
            "Resource": [
              "arn:aws:s3:::*-nodepackage-store-*",
              "arn:aws:s3:::*-application-payload-store-*",
              "arn:aws:s3:*:*:accesspoint/panorama*"
            ],
            "Condition": {
              "StringLike": {
                "s3:DataAccessPointArn": "arn:aws:s3:*:*:accesspoint/panorama*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplacePurchaseOrdersServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowPurchaseOrderActions",
            "Effect": "Allow",
            "Action": [
              "purchase-orders:ViewPurchaseOrders",
              "purchase-orders:ModifyPurchaseOrders"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeepRacerAccountAdminAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DeepRacerAdminAccessStatement",
            "Effect": "Allow",
            "Action": [
              "deepracer:*"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "Null": {
                "deepracer:UserToken": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeepRacerDefaultMultiUserAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "deepracer:Add*",
              "deepracer:Remove*",
              "deepracer:Create*",
              "deepracer:Perform*",
              "deepracer:Clone*",
              "deepracer:Get*",
              "deepracer:List*",
              "deepracer:Edit*",
              "deepracer:Start*",
              "deepracer:Set*",
              "deepracer:Update*",
              "deepracer:Delete*",
              "deepracer:Stop*",
              "deepracer:Import*",
              "deepracer:Tag*",
              "deepracer:Untag*"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "Null": {
                "deepracer:UserToken": "false"
              },
              "Bool": {
                "deepracer:MultiUser": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "deepracer:GetAccountConfig",
              "deepracer:GetTrack",
              "deepracer:ListTracks",
              "deepracer:TestRewardFunction"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Deny",
            "Action": [
              "deepracer:Admin*"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCostAndUsageReportAutomationPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketTagging",
              "s3:PutBucketTagging",
              "s3:GetBucketPolicy",
              "s3:PutBucketPolicy",
              "s3:ListBucket",
              "s3:CreateBucket"
            ],
            "Resource": "arn:aws:s3:::aws-map-cur-bucket-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cur:PutReportDefinition",
              "cur:DeleteReportDefinition",
              "cur:DescribeReportDefinitions"
            ],
            "Resource": "arn:aws:cur:*:*:definition/map-migrated-report"
          },
          {
            "Effect": "Allow",
            "Action": "cur:DescribeReportDefinitions",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRedshiftAllCommandsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateTrainingJob",
              "sagemaker:CreateAutoMLJob",
              "sagemaker:CreateCompilationJob",
              "sagemaker:CreateEndpoint",
              "sagemaker:DescribeAutoMLJob",
              "sagemaker:DescribeTrainingJob",
              "sagemaker:DescribeCompilationJob",
              "sagemaker:DescribeProcessingJob",
              "sagemaker:DescribeTransformJob",
              "sagemaker:ListCandidatesForAutoMLJob",
              "sagemaker:StopAutoMLJob",
              "sagemaker:StopCompilationJob",
              "sagemaker:StopTrainingJob",
              "sagemaker:DescribeEndpoint",
              "sagemaker:InvokeEndpoint",
              "sagemaker:StopProcessingJob",
              "sagemaker:CreateModel",
              "sagemaker:CreateProcessingJob"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:model/*redshift*",
              "arn:aws:sagemaker:*:*:training-job/*redshift*",
              "arn:aws:sagemaker:*:*:automl-job/*redshift*",
              "arn:aws:sagemaker:*:*:compilation-job/*redshift*",
              "arn:aws:sagemaker:*:*:processing-job/*redshift*",
              "arn:aws:sagemaker:*:*:transform-job/*redshift*",
              "arn:aws:sagemaker:*:*:endpoint/*redshift*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/sagemaker/Endpoints/*redshift*",
              "arn:aws:logs:*:*:log-group:/aws/sagemaker/ProcessingJobs/*redshift*",
              "arn:aws:logs:*:*:log-group:/aws/sagemaker/TrainingJobs/*redshift*",
              "arn:aws:logs:*:*:log-group:/aws/sagemaker/TransformJobs/*redshift*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "SageMaker",
                  "/aws/sagemaker/Endpoints",
                  "/aws/sagemaker/ProcessingJobs",
                  "/aws/sagemaker/TrainingJobs",
                  "/aws/sagemaker/TransformJobs"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:BatchCheckLayerAvailability",
              "ecr:BatchGetImage",
              "ecr:GetAuthorizationToken",
              "ecr:GetDownloadUrlForLayer"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetBucketAcl",
              "s3:GetBucketCors",
              "s3:GetEncryptionConfiguration",
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:ListMultipartUploadParts",
              "s3:ListBucketMultipartUploads",
              "s3:PutObject",
              "s3:PutBucketAcl",
              "s3:PutBucketCors",
              "s3:DeleteObject",
              "s3:AbortMultipartUpload",
              "s3:CreateBucket"
            ],
            "Resource": [
              "arn:aws:s3:::redshift-downloads",
              "arn:aws:s3:::redshift-downloads/*",
              "arn:aws:s3:::*redshift*",
              "arn:aws:s3:::*redshift*/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/Redshift": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:Scan",
              "dynamodb:DescribeTable",
              "dynamodb:Getitem"
            ],
            "Resource": [
              "arn:aws:dynamodb:*:*:table/*redshift*",
              "arn:aws:dynamodb:*:*:table/*redshift*/index/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:ListInstances"
            ],
            "Resource": [
              "arn:aws:elasticmapreduce:*:*:cluster/*redshift*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:ListInstances"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "elasticmapreduce:ResourceTag/Redshift": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": "arn:aws:lambda:*:*:function:*redshift*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase",
              "glue:DeleteDatabase",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:UpdateDatabase",
              "glue:CreateTable",
              "glue:DeleteTable",
              "glue:BatchDeleteTable",
              "glue:UpdateTable",
              "glue:GetTable",
              "glue:GetTables",
              "glue:BatchCreatePartition",
              "glue:CreatePartition",
              "glue:DeletePartition",
              "glue:BatchDeletePartition",
              "glue:UpdatePartition",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:BatchGetPartition"
            ],
            "Resource": [
              "arn:aws:glue:*:*:table/*redshift*/*",
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*redshift*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetResourcePolicy",
              "secretsmanager:GetSecretValue",
              "secretsmanager:DescribeSecret",
              "secretsmanager:ListSecretVersionIds"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:*redshift*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetRandomPassword",
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "redshift.amazonaws.com",
                  "glue.amazonaws.com",
                  "sagemaker.amazonaws.com",
                  "athena.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationVCenterClientPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mgn:CreateVcenterClientForMgn",
              "mgn:DescribeVcenterClients"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgn:GetVcenterClientCommandsForMgn",
              "mgn:SendVcenterClientCommandResultForMgn",
              "mgn:SendVcenterClientLogsForMgn",
              "mgn:SendVcenterClientMetricsForMgn",
              "mgn:DeleteVcenterClient",
              "mgn:TagResource",
              "mgn:NotifyVcenterClientStartedForMgn"
            ],
            "Resource": "arn:aws:mgn:*:*:vcenter-client/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDevOpsGuruOrganizationsAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DevOpsGuruOrganizationsAccess",
            "Effect": "Allow",
            "Action": [
              "devops-guru:DescribeOrganizationHealth",
              "devops-guru:DescribeOrganizationResourceCollectionHealth",
              "devops-guru:DescribeOrganizationOverview",
              "devops-guru:ListOrganizationInsights",
              "devops-guru:SearchOrganizationInsights"
            ],
            "Resource": "*"
          },
          {
            "Sid": "OrganizationsDataAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListAccounts",
              "organizations:ListChildren",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListRoots"
            ],
            "Resource": "arn:aws:organizations::*:"
          },
          {
            "Sid": "OrganizationsAdminDataAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:DeregisterDelegatedAdministrator",
              "organizations:RegisterDelegatedAdministrator",
              "organizations:ListDelegatedAdministrators",
              "organizations:EnableAWSServiceAccess",
              "organizations:DisableAWSServiceAccess"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "devops-guru.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonInspector2ServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "TirosPolicy",
            "Effect": "Allow",
            "Action": [
              "directconnect:DescribeConnections",
              "directconnect:DescribeDirectConnectGatewayAssociations",
              "directconnect:DescribeDirectConnectGatewayAttachments",
              "directconnect:DescribeDirectConnectGateways",
              "directconnect:DescribeVirtualGateways",
              "directconnect:DescribeVirtualInterfaces",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeManagedPrefixLists",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRegions",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayConnects",
              "ec2:DescribeTransitGatewayPeeringAttachments",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "ec2:SearchTransitGatewayRoutes",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetHealth",
              "network-firewall:DescribeFirewall",
              "network-firewall:DescribeFirewallPolicy",
              "network-firewall:DescribeResourcePolicy",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:ListFirewallPolicies",
              "network-firewall:ListFirewalls",
              "network-firewall:ListRuleGroups",
              "tiros:CreateQuery",
              "tiros:GetQueryAnswer"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "PackageVulnerabilityScanning",
            "Effect": "Allow",
            "Action": [
              "ecr:BatchGetImage",
              "ecr:BatchGetRepositoryScanningConfiguration",
              "ecr:DescribeImages",
              "ecr:DescribeRegistry",
              "ecr:DescribeRepositories",
              "ecr:GetAuthorizationToken",
              "ecr:GetDownloadUrlForLayer",
              "ecr:GetRegistryScanningConfiguration",
              "ecr:ListImages",
              "ecr:PutRegistryScanningConfiguration",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "ssm:DescribeAssociation",
              "ssm:DescribeAssociationExecutions",
              "ssm:DescribeInstanceInformation",
              "ssm:ListAssociations",
              "ssm:ListResourceDataSync"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LambdaPackageVulnerabilityScanning",
            "Effect": "Allow",
            "Action": [
              "lambda:ListFunctions",
              "lambda:GetFunction",
              "lambda:GetLayerVersion",
              "lambda:ListTags",
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GatherInventory",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateAssociation",
              "ssm:StartAssociationsOnce",
              "ssm:DeleteAssociation",
              "ssm:UpdateAssociation"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:document/AmazonInspector2-*",
              "arn:aws:ssm:*:*:document/AWS-GatherSoftwareInventory",
              "arn:aws:ssm:*:*:managed-instance/*",
              "arn:aws:ssm:*:*:association/*"
            ]
          },
          {
            "Sid": "DataSyncCleanup",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateResourceDataSync",
              "ssm:DeleteResourceDataSync"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:resource-data-sync/InspectorResourceDataSync-do-not-delete"
            ]
          },
          {
            "Sid": "ManagedRules",
            "Effect": "Allow",
            "Action": [
              "events:PutRule",
              "events:DeleteRule",
              "events:DescribeRule",
              "events:ListTargetsByRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/DO-NOT-DELETE-AmazonInspector*ManagedRule"
            ]
          },
          {
            "Sid": "LambdaCodeVulnerabilityScanning",
            "Effect": "Allow",
            "Action": [
              "codeguru-security:CreateScan",
              "codeguru-security:GetAccountConfiguration",
              "codeguru-security:GetFindings",
              "codeguru-security:GetScan",
              "codeguru-security:ListFindings",
              "codeguru-security:BatchGetFindings",
              "codeguru-security:DeleteScansByCategory"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CodeGuruCodeVulnerabilityScanning",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:ListAttachedRolePolicies",
              "iam:ListPolicies",
              "iam:ListPolicyVersions",
              "iam:ListRolePolicies",
              "lambda:ListVersionsByFunction"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "codeguru-security.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "Ec2DeepInspection",
            "Effect": "Allow",
            "Action": [
              "ssm:PutParameter",
              "ssm:GetParameters",
              "ssm:DeleteParameter"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:parameter/inspector-aws/service/inspector-linux-application-paths"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowManagementOfServiceLinkedChannel",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:CreateServiceLinkedChannel",
              "cloudtrail:DeleteServiceLinkedChannel"
            ],
            "Resource": [
              "arn:aws:cloudtrail:*:*:channel/aws-service-channel/inspector2/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowListServiceLinkedChannels",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:ListServiceLinkedChannels"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowToRunInvokeCisSpecificDocuments",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:GetCommandInvocation"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AmazonInspector2-InvokeInspectorSsmPluginCIS"
            ]
          },
          {
            "Sid": "AllowToRunCisCommandsToSpecificResources",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowToPutCloudwatchMetricData",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/Inspector2"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryRecoveryInstancePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSRecoveryInstancePolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:SendAgentMetricsForDrs",
              "drs:SendAgentLogsForDrs",
              "drs:UpdateAgentSourcePropertiesForDrs",
              "drs:UpdateAgentReplicationInfoForDrs",
              "drs:UpdateAgentConversionInfoForDrs",
              "drs:GetAgentCommandForDrs",
              "drs:GetAgentConfirmedResumeInfoForDrs",
              "drs:GetAgentRuntimeConfigurationForDrs",
              "drs:UpdateAgentBacklogForDrs",
              "drs:GetAgentReplicationInfoForDrs",
              "drs:UpdateReplicationCertificateForDrs",
              "drs:NotifyReplicationServerAuthenticationForDrs"
            ],
            "Resource": "arn:aws:drs:*:*:recovery-instance/*",
            "Condition": {
              "StringEquals": {
                "drs:EC2InstanceARN": "${ec2:SourceInstanceARN}"
              }
            }
          },
          {
            "Sid": "DRSRecoveryInstancePolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:DescribeRecoveryInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSRecoveryInstancePolicy3",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceTypes"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSRecoveryInstancePolicy4",
            "Effect": "Allow",
            "Action": [
              "drs:GetAgentInstallationAssetsForDrs",
              "drs:SendClientLogsForDrs",
              "drs:CreateSourceServerForDrs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSRecoveryInstancePolicy5",
            "Effect": "Allow",
            "Action": [
              "drs:TagResource"
            ],
            "Resource": "arn:aws:drs:*:*:source-server/*",
            "Condition": {
              "StringEquals": {
                "drs:CreateAction": "CreateSourceServerForDrs"
              }
            }
          },
          {
            "Sid": "DRSRecoveryInstancePolicy6",
            "Effect": "Allow",
            "Action": [
              "drs:SendAgentMetricsForDrs",
              "drs:SendAgentLogsForDrs",
              "drs:UpdateAgentSourcePropertiesForDrs",
              "drs:UpdateAgentReplicationInfoForDrs",
              "drs:UpdateAgentConversionInfoForDrs",
              "drs:GetAgentCommandForDrs",
              "drs:GetAgentConfirmedResumeInfoForDrs",
              "drs:GetAgentRuntimeConfigurationForDrs",
              "drs:UpdateAgentBacklogForDrs",
              "drs:GetAgentReplicationInfoForDrs"
            ],
            "Resource": "arn:aws:drs:*:*:source-server/*"
          },
          {
            "Sid": "DRSRecoveryInstancePolicy7",
            "Effect": "Allow",
            "Action": [
              "sts:AssumeRole",
              "sts:TagSession"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/DRSCrossAccountAgentAuthorizedRole_*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/SourceInstanceARN": "${ec2:SourceInstanceARN}"
              },
              "ForAnyValue:StringEquals": {
                "sts:TransitiveTagKeys": "SourceInstanceARN"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryAgentPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSAgentPolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:SendAgentMetricsForDrs",
              "drs:SendAgentLogsForDrs",
              "drs:UpdateAgentSourcePropertiesForDrs",
              "drs:UpdateAgentReplicationInfoForDrs",
              "drs:UpdateAgentConversionInfoForDrs",
              "drs:GetAgentCommandForDrs",
              "drs:GetAgentConfirmedResumeInfoForDrs",
              "drs:GetAgentRuntimeConfigurationForDrs",
              "drs:UpdateAgentBacklogForDrs",
              "drs:GetAgentReplicationInfoForDrs",
              "drs:IssueAgentCertificateForDrs"
            ],
            "Resource": "arn:aws:drs:*:*:source-server/${aws:SourceIdentity}"
          },
          {
            "Sid": "DRSAgentPolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:GetAgentInstallationAssetsForDrs"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryAgentInstallationPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSAgentInstallationPolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:GetAgentInstallationAssetsForDrs",
              "drs:SendClientLogsForDrs",
              "drs:SendClientMetricsForDrs",
              "drs:CreateSourceServerForDrs",
              "drs:CreateRecoveryInstanceForDrs",
              "drs:DescribeRecoveryInstances",
              "drs:CreateSourceNetwork"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSAgentInstallationPolicy2",
            "Effect": "Allow",
            "Action": "drs:TagResource",
            "Resource": "arn:aws:drs:*:*:source-server/*",
            "Condition": {
              "StringEquals": {
                "drs:CreateAction": "CreateSourceServerForDrs"
              }
            }
          },
          {
            "Sid": "DRSAgentInstallationPolicy3",
            "Effect": "Allow",
            "Action": "drs:TagResource",
            "Resource": "arn:aws:drs:*:*:source-server/*",
            "Condition": {
              "StringEquals": {
                "drs:CreateAction": "CreateRecoveryInstanceForDrs"
              }
            }
          },
          {
            "Sid": "DRSAgentInstallationPolicy4",
            "Effect": "Allow",
            "Action": "drs:TagResource",
            "Resource": "arn:aws:drs:*:*:source-network/*",
            "Condition": {
              "StringEquals": {
                "drs:CreateAction": "CreateSourceNetwork"
              }
            }
          },
          {
            "Sid": "DRSAgentInstallationPolicy5",
            "Effect": "Allow",
            "Action": "drs:IssueAgentCertificateForDrs",
            "Resource": "arn:aws:drs:*:*:source-server/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryFailbackPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSFailbackPolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:SendClientMetricsForDrs",
              "drs:SendClientLogsForDrs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSFailbackPolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:GetChannelCommandsForDrs",
              "drs:SendChannelCommandResultForDrs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSFailbackPolicy3",
            "Effect": "Allow",
            "Action": [
              "drs:DescribeReplicationServerAssociationsForDrs",
              "drs:DescribeRecoveryInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSFailbackPolicy4",
            "Effect": "Allow",
            "Action": [
              "drs:GetFailbackCommandForDrs",
              "drs:UpdateFailbackClientLastSeenForDrs",
              "drs:NotifyAgentAuthenticationForDrs",
              "drs:UpdateAgentReplicationProcessStateForDrs",
              "drs:NotifyAgentReplicationProgressForDrs",
              "drs:NotifyAgentConnectedForDrs",
              "drs:NotifyAgentDisconnectedForDrs",
              "drs:NotifyConsistencyAttainedForDrs",
              "drs:GetFailbackLaunchRequestedForDrs",
              "drs:IssueAgentCertificateForDrs"
            ],
            "Resource": "arn:aws:drs:*:*:recovery-instance/${aws:SourceIdentity}"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ConsoleFullAccess1",
            "Effect": "Allow",
            "Action": [
              "drs:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess2",
            "Effect": "Allow",
            "Action": [
              "kms:ListAliases",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess3",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:GetEbsEncryptionByDefault",
              "ec2:GetEbsDefaultKmsKeyId",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeCapacityReservations",
              "ec2:DescribeHosts"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess4",
            "Effect": "Allow",
            "Action": "license-manager:ListLicenseConfigurations",
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess5",
            "Effect": "Allow",
            "Action": "resource-groups:ListGroups",
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess6",
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DescribeLoadBalancers",
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess7",
            "Effect": "Allow",
            "Action": [
              "iam:ListInstanceProfiles",
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess8",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryConversionServerRole",
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess9",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess10",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplateVersion",
              "ec2:ModifyLaunchTemplate",
              "ec2:DeleteLaunchTemplateVersions",
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess11",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplate"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess12",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess13",
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:ModifyInstanceAttribute",
              "ec2:GetConsoleOutput",
              "ec2:GetConsoleScreenshot"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess14",
            "Effect": "Allow",
            "Action": [
              "ec2:RevokeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess15",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess16",
            "Effect": "Allow",
            "Action": "ec2:CreateSecurityGroup",
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Sid": "ConsoleFullAccess17",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess18",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess19",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess20",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess21",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume",
              "ec2:StartInstances",
              "ec2:GetConsoleOutput",
              "ec2:GetConsoleScreenshot"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AWSDRS": "AllowLaunchingIntoThisInstance"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess22",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess23",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess24",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess25",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess26",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateSecurityGroup",
                  "CreateVolume",
                  "CreateSnapshot",
                  "RunInstances"
                ]
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess27",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateLaunchTemplate"
                ]
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess28",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess29",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSReadOnlyAccess1",
            "Effect": "Allow",
            "Action": [
              "drs:DescribeJobLogItems",
              "drs:DescribeJobs",
              "drs:DescribeRecoveryInstances",
              "drs:DescribeRecoverySnapshots",
              "drs:DescribeReplicationConfigurationTemplates",
              "drs:DescribeSourceServers",
              "drs:GetFailbackReplicationConfiguration",
              "drs:GetLaunchConfiguration",
              "drs:GetReplicationConfiguration",
              "drs:ListExtensibleSourceServers",
              "drs:ListStagingAccounts",
              "drs:ListTagsForResource",
              "drs:ListLaunchActions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSReadOnlyAccess2",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:GetInstanceTypesFromInstanceRequirements"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSReadOnlyAccess4",
            "Effect": "Allow",
            "Action": "iam:ListRoles",
            "Resource": "*"
          },
          {
            "Sid": "DRSReadOnlyAccess5",
            "Effect": "Allow",
            "Action": "ssm:ListCommandInvocations",
            "Resource": "*"
          },
          {
            "Sid": "DRSReadOnlyAccess6",
            "Effect": "Allow",
            "Action": "ssm:GetParameter",
            "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecovery-*"
          },
          {
            "Sid": "DRSReadOnlyAccess7",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeDocument",
              "ssm:GetDocument"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWS-CreateImage",
              "arn:aws:ssm:*:*:document/AWSMigration-ValidateNetworkConnectivity",
              "arn:aws:ssm:*:*:document/AWSMigration-VerifyMountedVolumes",
              "arn:aws:ssm:*:*:document/AWSMigration-ValidateHttpResponse",
              "arn:aws:ssm:*:*:document/AWSMigration-ValidateDiskSpace",
              "arn:aws:ssm:*:*:document/AWSMigration-VerifyProcessIsRunning",
              "arn:aws:ssm:*:*:document/AWSMigration-LinuxTimeSyncSetting",
              "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure"
            ]
          },
          {
            "Sid": "DRSReadOnlyAccess8",
            "Effect": "Allow",
            "Action": [
              "ssm:GetAutomationExecution"
            ],
            "Resource": "arn:aws:ssm:*:*:automation-execution/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSServiceRolePolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSServiceRolePolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:TagResource"
            ],
            "Resource": "arn:aws:drs:*:*:recovery-instance/*"
          },
          {
            "Sid": "DRSServiceRolePolicy3",
            "Effect": "Allow",
            "Action": [
              "drs:CreateRecoveryInstanceForDrs",
              "drs:TagResource"
            ],
            "Resource": "arn:aws:drs:*:*:source-server/*"
          },
          {
            "Sid": "DRSServiceRolePolicy4",
            "Effect": "Allow",
            "Action": "iam:GetInstanceProfile",
            "Resource": "*"
          },
          {
            "Sid": "DRSServiceRolePolicy5",
            "Effect": "Allow",
            "Action": "kms:ListRetirableGrants",
            "Resource": "*"
          },
          {
            "Sid": "DRSServiceRolePolicy6",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumeAttribute",
              "ec2:GetEbsDefaultKmsKeyId",
              "ec2:GetEbsEncryptionByDefault",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeVpcs",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeRouteTables",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeManagedPrefixLists",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetManagedPrefixListAssociations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSServiceRolePolicy7",
            "Effect": "Allow",
            "Action": [
              "ec2:RegisterImage"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSServiceRolePolicy8",
            "Effect": "Allow",
            "Action": [
              "ec2:DeregisterImage"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy9",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy10",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplateVersion",
              "ec2:ModifyLaunchTemplate",
              "ec2:DeleteLaunchTemplate",
              "ec2:DeleteLaunchTemplateVersions"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy11",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume",
              "ec2:ModifyVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy12",
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:ModifyInstanceAttribute",
              "ec2:GetConsoleOutput",
              "ec2:GetConsoleScreenshot"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy13",
            "Effect": "Allow",
            "Action": [
              "ec2:RevokeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy14",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy15",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy16",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Sid": "DRSServiceRolePolicy17",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplate"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy18",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy19",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy20",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy21",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy22",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*"
          },
          {
            "Sid": "DRSServiceRolePolicy23",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy24",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ]
          },
          {
            "Sid": "DRSServiceRolePolicy25",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryReplicationServerRole",
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryConversionServerRole",
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy26",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:launch-template/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateLaunchTemplate",
                  "CreateSecurityGroup",
                  "CreateVolume",
                  "CreateSnapshot",
                  "RunInstances"
                ]
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy27",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:image/*"
            ],
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSServiceRolePolicy28",
            "Effect": "Allow",
            "Action": "cloudwatch:GetMetricData",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryFailbackInstallationPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSFailbackInstallationPolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:SendClientLogsForDrs",
              "drs:SendClientMetricsForDrs",
              "drs:DescribeRecoveryInstances",
              "drs:DescribeSourceServers"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSFailbackInstallationPolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:TagResource",
              "drs:IssueAgentCertificateForDrs",
              "drs:AssociateFailbackClientToRecoveryInstanceForDrs",
              "drs:GetSuggestedFailbackClientDeviceMappingForDrs",
              "drs:UpdateAgentReplicationInfoForDrs",
              "drs:UpdateFailbackClientDeviceMappingForDrs"
            ],
            "Resource": "arn:aws:drs:*:*:recovery-instance/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryReplicationServerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSReplicationServerPolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:SendClientMetricsForDrs",
              "drs:SendClientLogsForDrs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSReplicationServerPolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:GetChannelCommandsForDrs",
              "drs:SendChannelCommandResultForDrs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSReplicationServerPolicy3",
            "Effect": "Allow",
            "Action": [
              "drs:GetAgentSnapshotCreditsForDrs",
              "drs:DescribeReplicationServerAssociationsForDrs",
              "drs:DescribeSnapshotRequestsForDrs",
              "drs:BatchDeleteSnapshotRequestForDrs",
              "drs:NotifyAgentAuthenticationForDrs",
              "drs:BatchCreateVolumeSnapshotGroupForDrs",
              "drs:UpdateAgentReplicationProcessStateForDrs",
              "drs:NotifyAgentReplicationProgressForDrs",
              "drs:NotifyAgentConnectedForDrs",
              "drs:NotifyAgentDisconnectedForDrs",
              "drs:NotifyVolumeEventForDrs",
              "drs:SendVolumeStatsForDrs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSReplicationServerPolicy4",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSReplicationServerPolicy5",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSReplicationServerPolicy6",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSReplicationServerPolicy7",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateSnapshot"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryConversionServerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSConversionServerPolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:SendClientMetricsForDrs",
              "drs:SendClientLogsForDrs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSConversionServerPolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:GetChannelCommandsForDrs",
              "drs:SendChannelCommandResultForDrs"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSShieldServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSShield",
            "Effect": "Allow",
            "Action": [
              "wafv2:GetWebACL",
              "wafv2:UpdateWebACL",
              "wafv2:GetWebACLForResource",
              "wafv2:ListResourcesForWebACL",
              "cloudfront:ListDistributions",
              "cloudfront:GetDistribution"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCloudWatchRUMServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "xray:PutTraceSegments"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "cloudwatch:namespace": [
                  "RUM/CustomMetrics/*",
                  "AWS/RUM"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDetectiveServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:ListAccounts"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGrafanaAthenaAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "athena:GetDatabase",
              "athena:GetDataCatalog",
              "athena:GetTableMetadata",
              "athena:ListDatabases",
              "athena:ListDataCatalogs",
              "athena:ListTableMetadata",
              "athena:ListWorkGroups"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:GetWorkGroup",
              "athena:StartQueryExecution",
              "athena:StopQueryExecution"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/GrafanaDataSource": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:BatchGetPartition"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads",
              "s3:ListMultipartUploadParts",
              "s3:AbortMultipartUpload",
              "s3:CreateBucket",
              "s3:PutObject",
              "s3:PutBucketPublicAccessBlock"
            ],
            "Resource": [
              "arn:aws:s3:::grafana-athena-query-results-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElementalMediaTailorFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": "mediatailor:*",
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSElementalMediaTailorReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "mediatailor:List*",
            "mediatailor:Describe*",
            "mediatailor:Get*"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSProtonSyncServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SyncToProton",
            "Effect": "Allow",
            "Action": [
              "proton:UpdateServiceTemplateVersion",
              "proton:UpdateServiceTemplate",
              "proton:UpdateEnvironmentTemplateVersion",
              "proton:UpdateEnvironmentTemplate",
              "proton:GetServiceTemplateVersion",
              "proton:GetServiceTemplate",
              "proton:GetEnvironmentTemplateVersion",
              "proton:GetEnvironmentTemplate",
              "proton:DeleteServiceTemplateVersion",
              "proton:DeleteEnvironmentTemplateVersion",
              "proton:CreateServiceTemplateVersion",
              "proton:CreateServiceTemplate",
              "proton:CreateEnvironmentTemplateVersion",
              "proton:CreateEnvironmentTemplate",
              "proton:ListEnvironmentTemplateVersions",
              "proton:ListServiceTemplateVersions",
              "proton:CreateEnvironmentTemplateMajorVersion",
              "proton:CreateServiceTemplateMajorVersion"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AccessGitRepos",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:UseConnection",
              "codeconnections:UseConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonBraketJobsExecutionPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:ListBucket",
              "s3:CreateBucket",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketPolicy"
            ],
            "Resource": "arn:aws:s3:::amazon-braket-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetDownloadUrlForLayer",
              "ecr:BatchGetImage",
              "ecr:BatchCheckLayerAvailability"
            ],
            "Resource": "arn:aws:ecr:*:*:repository/amazon-braket*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "braket:CancelJob",
              "braket:CancelQuantumTask",
              "braket:CreateJob",
              "braket:CreateQuantumTask",
              "braket:GetDevice",
              "braket:GetJob",
              "braket:GetQuantumTask",
              "braket:SearchDevices",
              "braket:SearchJobs",
              "braket:SearchQuantumTasks",
              "braket:ListTagsForResource",
              "braket:TagResource",
              "braket:UntagResource"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/AmazonBraketJobsExecutionRole*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "braket.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:GetQueryResults"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:GetLogEvents",
              "logs:DescribeLogStreams",
              "logs:StartQuery",
              "logs:StopQuery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/braket*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "/aws/braket"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSECRPullThroughCache_ServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ECR",
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken",
              "ecr:BatchCheckLayerAvailability",
              "ecr:InitiateLayerUpload",
              "ecr:UploadLayerPart",
              "ecr:CompleteLayerUpload",
              "ecr:PutImage"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecretsManager",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:ecr-pullthroughcache/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGrafanaRedshiftAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "redshift:DescribeClusters",
              "redshift-data:GetStatementResult",
              "redshift-data:DescribeStatement",
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "redshift-data:DescribeTable",
              "redshift-data:ExecuteStatement",
              "redshift-data:ListTables",
              "redshift-data:ListSchemas"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/GrafanaDataSource": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "redshift:GetClusterCredentials",
            "Resource": [
              "arn:aws:redshift:*:*:dbname:*/*",
              "arn:aws:redshift:*:*:dbuser:*/redshift_data_api_user"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "secretsmanager:ResourceTag/RedshiftQueryOwner": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubRefactorSpacesServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeTargetGroups",
              "ram:GetResourceShareAssociations"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteTransitGatewayVpcAttachment",
              "ec2:CreateRoute",
              "ec2:DeleteRoute",
              "ec2:DeleteTags",
              "ram:DeleteResourceShare",
              "ram:AssociateResourceShare",
              "ram:DisassociateResourceShare"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:environment-id": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:DeleteVpcEndpointServiceConfigurations",
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:application-id": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:CreateLoadBalancerListeners",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:DeleteTargetGroup"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/refactor-spaces:route-id": [
                  "*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "apigateway:PUT",
              "apigateway:POST",
              "apigateway:GET",
              "apigateway:PATCH",
              "apigateway:DELETE"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*",
              "arn:aws:apigateway:*::/vpclinks/*",
              "arn:aws:apigateway:*::/tags",
              "arn:aws:apigateway:*::/tags/*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:application-id": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "apigateway:GET",
            "Resource": "arn:aws:apigateway:*::/vpclinks/*"
          },
          {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DeleteLoadBalancer",
            "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateListener"
            ],
            "Resource": [
              "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
              "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
            ],
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:route-id": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DeleteListener",
            "Resource": "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:RegisterTargets"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DeregisterTargets"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:route-id": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateTargetGroup"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*",
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:route-id": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubRefactorSpacesFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RefactorSpaces",
            "Effect": "Allow",
            "Action": [
              "refactor-spaces:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2Describe",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcs",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeTags",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeInternetGateways"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RequestTagTransitGatewayCreate",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTransitGateway",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTransitGatewayVpcAttachment"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:environment-id": "false"
              }
            }
          },
          {
            "Sid": "ResourceTagTransitGatewayCreate",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTransitGateway",
              "ec2:CreateSecurityGroup",
              "ec2:CreateTransitGatewayVpcAttachment"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:environment-id": "false"
              }
            }
          },
          {
            "Sid": "VpcEndpointServiceConfigurationCreate",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpointServiceConfiguration"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2NetworkingModify",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteTransitGateway",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteTransitGatewayVpcAttachment",
              "ec2:CreateRoute",
              "ec2:DeleteRoute",
              "ec2:DeleteTags"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:environment-id": "false"
              }
            }
          },
          {
            "Sid": "VpcEndpointServiceConfigurationDelete",
            "Effect": "Allow",
            "Action": "ec2:DeleteVpcEndpointServiceConfigurations",
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:application-id": "false"
              }
            }
          },
          {
            "Sid": "ELBLoadBalancerCreate",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateLoadBalancer"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:application-id": "false"
              }
            }
          },
          {
            "Sid": "ELBDescribe",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeListeners"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ELBModify",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:CreateLoadBalancerListeners",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:DeleteTargetGroup"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/refactor-spaces:route-id": [
                  "*"
                ]
              }
            }
          },
          {
            "Sid": "ELBLoadBalancerDelete",
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DeleteLoadBalancer",
            "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
          },
          {
            "Sid": "ELBListenerCreate",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateListener"
            ],
            "Resource": [
              "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
              "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
            ],
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:route-id": "false"
              }
            }
          },
          {
            "Sid": "ELBListenerDelete",
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DeleteListener",
            "Resource": "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
          },
          {
            "Sid": "ELBTargetGroupModify",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:RegisterTargets"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
          },
          {
            "Sid": "ELBTargetGroupCreate",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateTargetGroup"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*",
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:route-id": "false"
              }
            }
          },
          {
            "Sid": "APIGatewayModify",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET",
              "apigateway:DELETE",
              "apigateway:PATCH",
              "apigateway:POST",
              "apigateway:PUT",
              "apigateway:UpdateRestApiPolicy"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*",
              "arn:aws:apigateway:*::/vpclinks",
              "arn:aws:apigateway:*::/vpclinks/*",
              "arn:aws:apigateway:*::/tags",
              "arn:aws:apigateway:*::/tags/*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:application-id": "false"
              }
            }
          },
          {
            "Sid": "APIGatewayVpcLinksGet",
            "Effect": "Allow",
            "Action": "apigateway:GET",
            "Resource": [
              "arn:aws:apigateway:*::/vpclinks",
              "arn:aws:apigateway:*::/vpclinks/*"
            ]
          },
          {
            "Sid": "OrganizationDescribe",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudformationStackCreate",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudformationStackTag",
            "Effect": "Allow",
            "Action": [
              "cloudformation:TagResource"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/*"
          },
          {
            "Sid": "CreateRefactorSpacesSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "refactor-spaces.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CreateELBSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCloudWatchEvidentlyReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "evidently:GetExperiment",
              "evidently:GetFeature",
              "evidently:GetLaunch",
              "evidently:GetProject",
              "evidently:ListExperiments",
              "evidently:ListFeatures",
              "evidently:ListLaunches",
              "evidently:ListProjects"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCloudWatchEvidentlyFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "evidently:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/CloudWatchRUMEvidentlyRole-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:DescribeAlarmHistory",
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "cloudwatch:TagResource",
              "cloudwatch:UnTagResource"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudtrail:LookupEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:Evidently-Alarm-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:Subscribe",
              "sns:ListSubscriptionsByTopic"
            ],
            "Resource": [
              "arn:*:sns:*:*:Evidently-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCloudWatchRUMReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "rum:GetAppMonitor",
              "rum:GetAppMonitorData",
              "rum:ListAppMonitors",
              "rum:ListRumMetricsDestinations",
              "rum:BatchGetRumMetricDefinitions"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCloudWatchRUMFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "rum:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/rum.amazonaws.com/AWSServiceRoleForRealUserMonitoring"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/RUM-Monitor*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "cognito-identity.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": "arn:aws:cloudwatch:*:*:alarm:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cognito-identity:CreateIdentityPool",
              "cognito-identity:ListIdentityPools",
              "cognito-identity:DescribeIdentityPool",
              "cognito-identity:GetIdentityPoolRoles",
              "cognito-identity:SetIdentityPoolRoles"
            ],
            "Resource": "arn:aws:cognito-identity:*:*:identitypool/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:DeleteLogGroup",
              "logs:PutRetentionPolicy",
              "logs:CreateLogStream"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:*RUMService*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:GetLogDelivery",
              "logs:UpdateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:ListLogDeliveries",
              "logs:DescribeResourcePolicies"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": "arn:aws:logs:*:*:log-group::log-stream:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "synthetics:describeCanaries",
              "synthetics:describeCanariesLastRun"
            ],
            "Resource": "arn:aws:synthetics:*:*:canary:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonInspector2FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowFullAccessToInspectorApis",
            "Effect": "Allow",
            "Action": "inspector2:*",
            "Resource": "*"
          },
          {
            "Sid": "AllowAccessToCodeGuruApis",
            "Effect": "Allow",
            "Action": [
              "codeguru-security:BatchGetFindings",
              "codeguru-security:GetAccountConfiguration"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAccessToCreateSlr",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "agentless.inspector2.amazonaws.com",
                  "inspector2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AllowAccessToOrganizationApis",
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess",
              "organizations:RegisterDelegatedAdministrator",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesWebServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeNetworkInterfaces",
              "ec2:AssociateAddress",
              "ec2:DisassociateAddress",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/WorkSpacesWebManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "WorkSpacesWebManaged"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/WorkSpacesWebManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/WorkSpacesWeb",
                  "AWS/Usage"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:PutRecord",
              "kinesis:PutRecords",
              "kinesis:DescribeStreamSummary"
            ],
            "Resource": "arn:aws:kinesis:*:*:stream/amazon-workspaces-web-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesWebReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "workspaces-web:GetBrowserSettings",
              "workspaces-web:GetIdentityProvider",
              "workspaces-web:GetNetworkSettings",
              "workspaces-web:GetPortal",
              "workspaces-web:GetPortalServiceProviderMetadata",
              "workspaces-web:GetTrustStore",
              "workspaces-web:GetTrustStoreCertificate",
              "workspaces-web:GetUserSettings",
              "workspaces-web:GetUserAccessLoggingSettings",
              "workspaces-web:ListBrowserSettings",
              "workspaces-web:ListIdentityProviders",
              "workspaces-web:ListNetworkSettings",
              "workspaces-web:ListPortals",
              "workspaces-web:ListTagsForResource",
              "workspaces-web:ListTrustStoreCertificates",
              "workspaces-web:ListTrustStores",
              "workspaces-web:ListUserSettings",
              "workspaces-web:ListUserAccessLoggingSettings"
            ],
            "Resource": "arn:aws:workspaces-web:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "kinesis:ListStreams"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIPAMServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "IPAMDiscoveryDescribeActions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeByoipCidrs",
              "ec2:DescribeIpv6Pools",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePublicIpv4Pools",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:GetIpamDiscoveredAccounts",
              "ec2:GetIpamDiscoveredPublicAddresses",
              "ec2:GetIpamDiscoveredResourceCidrs",
              "globalaccelerator:ListAccelerators",
              "globalaccelerator:ListByoipCidrs",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchMetricsPublishActions",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/IPAM"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPrivateNetworksServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/Private5G"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDevOpsGuruConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DevOpsGuruFullAccess",
            "Effect": "Allow",
            "Action": [
              "devops-guru:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudFormationListStacksAccess",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchGetMetricDataAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SnsListTopicsAccess",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SnsTopicOperations",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:GetTopicAttributes",
              "sns:SetTopicAttributes",
              "sns:Publish"
            ],
            "Resource": "arn:aws:sns:*:*:DevOps-Guru-*"
          },
          {
            "Sid": "DevOpsGuruSlrCreation",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "devops-guru.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DevOpsGuruSlrDeletion",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
          },
          {
            "Sid": "RDSDescribeDBInstancesAccess",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PerformanceInsightsMetricsDataAccess",
            "Effect": "Allow",
            "Action": [
              "pi:GetResourceMetrics",
              "pi:DescribeDimensionKeys"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchLogsFilterLogEventsAccess",
            "Effect": "Allow",
            "Action": [
              "logs:FilterLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/DevOps-Guru-Analysis": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "EC2FastLaunchServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": "EC2 Fast Launch"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/CreatedBy": "EC2 Fast Launch"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshot",
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/CreatedBy": "EC2 Fast Launch"
              }
            }
          },
          {
            "Sid": "AllowCreateTaggedSnapshot",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshot",
            "Resource": [
              "arn:aws:ec2:*:*:snapshot/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": "EC2 Fast Launch"
              },
              "StringLike": {
                "aws:RequestTag/CreatedByLaunchTemplateVersion": "*"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "CreatedByLaunchTemplateName",
                  "CreatedByLaunchTemplateId"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateLaunchTemplate",
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": "EC2 Fast Launch"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateSnapshot",
                  "RunInstances",
                  "CreateLaunchTemplate"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:snapshot/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/CreatedBy": "EC2 Fast Launch"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeLaunchTemplates"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/EC2"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppRunnerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/apprunner.amazonaws.com/AWSServiceRoleForAppRunner",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "apprunner.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "apprunner.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AppRunnerAdminAccess",
            "Effect": "Allow",
            "Action": "apprunner:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AppRunnerNetworkingServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcs",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AWSAppRunnerManaged"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              },
              "StringLike": {
                "aws:RequestTag/AWSAppRunnerManaged": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:DeleteNetworkInterface",
            "Resource": "*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSAppRunnerManaged": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonInspector2ReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeOrganizationalUnit",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "inspector2:BatchGet*",
              "inspector2:List*",
              "inspector2:Describe*",
              "inspector2:Get*",
              "inspector2:Search*",
              "codeguru-security:BatchGetFindings",
              "codeguru-security:GetAccountConfiguration"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupServiceRolePolicyForS3Restore",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:ListBucketVersions",
              "s3:ListBucket",
              "s3:GetBucketVersioning",
              "s3:GetBucketLocation",
              "s3:PutBucketVersioning",
              "s3:PutBucketOwnershipControls",
              "s3:GetBucketOwnershipControls"
            ],
            "Resource": [
              "arn:aws:s3:::*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:DeleteObject",
              "s3:PutObjectVersionAcl",
              "s3:GetObjectVersionAcl",
              "s3:GetObjectTagging",
              "s3:PutObjectTagging",
              "s3:GetObjectAcl",
              "s3:PutObjectAcl",
              "s3:ListMultipartUploadParts",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::*/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:GenerateDataKey",
              "kms:Decrypt"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "s3.*.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupServiceRolePolicyForS3Backup",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchGetMetricDataPermissions",
            "Effect": "Allow",
            "Action": "cloudwatch:GetMetricData",
            "Resource": "*"
          },
          {
            "Sid": "EventBridgePermissionsForAwsBackupManagedRule",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:PutTargets",
              "events:DescribeRule",
              "events:EnableRule",
              "events:PutRule",
              "events:RemoveTargets",
              "events:ListTargetsByRule",
              "events:DisableRule"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/AwsBackupManagedRule*"
            ]
          },
          {
            "Sid": "EventBridgeListRulesPermissions",
            "Effect": "Allow",
            "Action": "events:ListRules",
            "Resource": "*"
          },
          {
            "Sid": "KmsPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:DescribeKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "s3.*.amazonaws.com"
              }
            }
          },
          {
            "Sid": "S3BucketPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketTagging",
              "s3:GetInventoryConfiguration",
              "s3:ListBucketVersions",
              "s3:ListBucket",
              "s3:GetBucketVersioning",
              "s3:GetBucketLocation",
              "s3:GetBucketAcl",
              "s3:PutInventoryConfiguration",
              "s3:GetBucketNotification",
              "s3:PutBucketNotification"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Sid": "S3ObjectPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:GetObjectAcl",
              "s3:GetObject",
              "s3:GetObjectVersionTagging",
              "s3:GetObjectVersionAcl",
              "s3:GetObjectTagging",
              "s3:GetObjectVersion"
            ],
            "Resource": "arn:aws:s3:::*/*"
          },
          {
            "Sid": "S3ListBucketPermissions",
            "Effect": "Allow",
            "Action": "s3:ListAllMyBuckets",
            "Resource": "*"
          },
          {
            "Sid": "RecoveryPointTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "backup:TagResource"
            ],
            "Resource": "arn:aws:backup:*:*:recovery-point:*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": "${aws:ResourceAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsGlueServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "glue:BatchCreatePartition",
              "glue:BatchDeletePartition",
              "glue:BatchDeleteTable",
              "glue:BatchDeleteTableVersion",
              "glue:BatchGetPartition",
              "glue:CreateDatabase",
              "glue:CreatePartition",
              "glue:CreateTable",
              "glue:DeletePartition",
              "glue:DeleteTable",
              "glue:DeleteTableVersion",
              "glue:GetDatabase",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetTableVersion",
              "glue:GetTableVersions",
              "glue:SearchTables",
              "glue:UpdatePartition",
              "glue:UpdateTable",
              "glue:GetUserDefinedFunctions"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/default",
              "arn:aws:glue:*:*:database/global_temp",
              "arn:aws:glue:*:*:database/sagemaker-*",
              "arn:aws:glue:*:*:table/sagemaker-*",
              "arn:aws:glue:*:*:tableVersion/sagemaker-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:GetBucketAcl",
              "s3:GetBucketCors",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads",
              "s3:PutBucketCors"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*",
              "arn:aws:s3:::sagemaker-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*",
              "arn:aws:s3:::sagemaker-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DeleteLogDelivery",
              "logs:Describe*",
              "logs:GetLogDelivery",
              "logs:GetLogEvents",
              "logs:ListLogDeliveries",
              "logs:PutLogEvents",
              "logs:PutResourcePolicy",
              "logs:UpdateLogDelivery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/glue/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsCodePipelineServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonSageMakerCodePipelineCFnPermission",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateChangeSet",
              "cloudformation:CreateStack",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStacks",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:SetStackPolicy",
              "cloudformation:UpdateStack"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/sagemaker-*"
          },
          {
            "Sid": "AmazonSageMakerCodePipelineCFnTagPermission",
            "Effect": "Allow",
            "Action": [
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/sagemaker-*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "sagemaker:project-name"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerCodePipelineS3Permission",
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerCodePipelinePassRolePermission",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCloudformationRole"
            ]
          },
          {
            "Sid": "AmazonSageMakerCodePipelineCodeBuildPermission",
            "Effect": "Allow",
            "Action": [
              "codebuild:BatchGetBuilds",
              "codebuild:StartBuild"
            ],
            "Resource": [
              "arn:aws:codebuild:*:*:project/sagemaker-*",
              "arn:aws:codebuild:*:*:build/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerCodePipelineCodeCommitPermission",
            "Effect": "Allow",
            "Action": [
              "codecommit:CancelUploadArchive",
              "codecommit:GetBranch",
              "codecommit:GetCommit",
              "codecommit:GetUploadArchiveStatus",
              "codecommit:UploadArchive"
            ],
            "Resource": "arn:aws:codecommit:*:*:sagemaker-*"
          },
          {
            "Sid": "AmazonSageMakerCodePipelineCodeStarConnectionPermission",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:UseConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*"
            ],
            "Condition": {
              "StringEqualsIgnoreCase": {
                "aws:ResourceTag/sagemaker": "true"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerCodePipelineCodeConnectionPermission",
            "Effect": "Allow",
            "Action": [
              "codeconnections:UseConnection"
            ],
            "Resource": [
              "arn:aws:codeconnections:*:*:connection/*"
            ],
            "Condition": {
              "StringEqualsIgnoreCase": {
                "aws:ResourceTag/sagemaker": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsEventsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "codepipeline:StartPipelineExecution",
            "Resource": "arn:aws:codepipeline:*:*:sagemaker-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsFirehoseServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "firehose:PutRecord",
              "firehose:PutRecordBatch"
            ],
            "Resource": "arn:aws:firehose:*:*:deliverystream/sagemaker-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppRunnerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "apprunner:List*",
              "apprunner:Describe*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIdentitySyncFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ds:AuthorizeApplication",
              "ds:UnauthorizeApplication"
            ],
            "Resource": "arn:*:ds:*:*:*/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "identity-sync:DeleteSyncProfile",
              "identity-sync:CreateSyncProfile",
              "identity-sync:GetSyncProfile",
              "identity-sync:StartSync",
              "identity-sync:StopSync",
              "identity-sync:CreateSyncFilter",
              "identity-sync:DeleteSyncFilter",
              "identity-sync:ListSyncFilters",
              "identity-sync:CreateSyncTarget",
              "identity-sync:DeleteSyncTarget",
              "identity-sync:GetSyncTarget",
              "identity-sync:UpdateSyncTarget"
            ],
            "Resource": "arn:*:identity-sync:*:*:*/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIdentitySyncReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "identity-sync:GetSyncProfile",
              "identity-sync:ListSyncFilters",
              "identity-sync:GetSyncTarget"
            ],
            "Resource": "arn:*:identity-sync:*:*:*/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsApiGatewayServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DeleteLogDelivery",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:DescribeResourcePolicies",
              "logs:DescribeDestinations",
              "logs:DescribeExportTasks",
              "logs:DescribeMetricFilters",
              "logs:DescribeQueries",
              "logs:DescribeQueryDefinitions",
              "logs:DescribeSubscriptionFilters",
              "logs:GetLogDelivery",
              "logs:GetLogEvents",
              "logs:PutLogEvents",
              "logs:PutResourcePolicy",
              "logs:UpdateLogDelivery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/apigateway/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsCloudformationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddAssociation",
              "sagemaker:AddTags",
              "sagemaker:AssociateTrialComponent",
              "sagemaker:BatchDescribeModelPackage",
              "sagemaker:BatchGetMetrics",
              "sagemaker:BatchGetRecord",
              "sagemaker:BatchPutMetrics",
              "sagemaker:CreateAction",
              "sagemaker:CreateAlgorithm",
              "sagemaker:CreateApp",
              "sagemaker:CreateAppImageConfig",
              "sagemaker:CreateArtifact",
              "sagemaker:CreateAutoMLJob",
              "sagemaker:CreateCodeRepository",
              "sagemaker:CreateCompilationJob",
              "sagemaker:CreateContext",
              "sagemaker:CreateDataQualityJobDefinition",
              "sagemaker:CreateDeviceFleet",
              "sagemaker:CreateDomain",
              "sagemaker:CreateEdgePackagingJob",
              "sagemaker:CreateEndpoint",
              "sagemaker:CreateEndpointConfig",
              "sagemaker:CreateExperiment",
              "sagemaker:CreateFeatureGroup",
              "sagemaker:CreateFlowDefinition",
              "sagemaker:CreateHumanTaskUi",
              "sagemaker:CreateHyperParameterTuningJob",
              "sagemaker:CreateImage",
              "sagemaker:CreateImageVersion",
              "sagemaker:CreateInferenceRecommendationsJob",
              "sagemaker:CreateLabelingJob",
              "sagemaker:CreateLineageGroupPolicy",
              "sagemaker:CreateModel",
              "sagemaker:CreateModelBiasJobDefinition",
              "sagemaker:CreateModelExplainabilityJobDefinition",
              "sagemaker:CreateModelPackage",
              "sagemaker:CreateModelPackageGroup",
              "sagemaker:CreateModelQualityJobDefinition",
              "sagemaker:CreateMonitoringSchedule",
              "sagemaker:CreateNotebookInstance",
              "sagemaker:CreateNotebookInstanceLifecycleConfig",
              "sagemaker:CreatePipeline",
              "sagemaker:CreatePresignedDomainUrl",
              "sagemaker:CreatePresignedNotebookInstanceUrl",
              "sagemaker:CreateProcessingJob",
              "sagemaker:CreateProject",
              "sagemaker:CreateTrainingJob",
              "sagemaker:CreateTransformJob",
              "sagemaker:CreateTrial",
              "sagemaker:CreateTrialComponent",
              "sagemaker:CreateUserProfile",
              "sagemaker:CreateWorkforce",
              "sagemaker:CreateWorkteam",
              "sagemaker:DeleteAction",
              "sagemaker:DeleteAlgorithm",
              "sagemaker:DeleteApp",
              "sagemaker:DeleteAppImageConfig",
              "sagemaker:DeleteArtifact",
              "sagemaker:DeleteAssociation",
              "sagemaker:DeleteCodeRepository",
              "sagemaker:DeleteContext",
              "sagemaker:DeleteDataQualityJobDefinition",
              "sagemaker:DeleteDeviceFleet",
              "sagemaker:DeleteDomain",
              "sagemaker:DeleteEndpoint",
              "sagemaker:DeleteEndpointConfig",
              "sagemaker:DeleteExperiment",
              "sagemaker:DeleteFeatureGroup",
              "sagemaker:DeleteFlowDefinition",
              "sagemaker:DeleteHumanLoop",
              "sagemaker:DeleteHumanTaskUi",
              "sagemaker:DeleteImage",
              "sagemaker:DeleteImageVersion",
              "sagemaker:DeleteLineageGroupPolicy",
              "sagemaker:DeleteModel",
              "sagemaker:DeleteModelBiasJobDefinition",
              "sagemaker:DeleteModelExplainabilityJobDefinition",
              "sagemaker:DeleteModelPackage",
              "sagemaker:DeleteModelPackageGroup",
              "sagemaker:DeleteModelPackageGroupPolicy",
              "sagemaker:DeleteModelQualityJobDefinition",
              "sagemaker:DeleteMonitoringSchedule",
              "sagemaker:DeleteNotebookInstance",
              "sagemaker:DeleteNotebookInstanceLifecycleConfig",
              "sagemaker:DeletePipeline",
              "sagemaker:DeleteProject",
              "sagemaker:DeleteRecord",
              "sagemaker:DeleteTags",
              "sagemaker:DeleteTrial",
              "sagemaker:DeleteTrialComponent",
              "sagemaker:DeleteUserProfile",
              "sagemaker:DeleteWorkforce",
              "sagemaker:DeleteWorkteam",
              "sagemaker:DeregisterDevices",
              "sagemaker:DescribeAction",
              "sagemaker:DescribeAlgorithm",
              "sagemaker:DescribeApp",
              "sagemaker:DescribeAppImageConfig",
              "sagemaker:DescribeArtifact",
              "sagemaker:DescribeAutoMLJob",
              "sagemaker:DescribeCodeRepository",
              "sagemaker:DescribeCompilationJob",
              "sagemaker:DescribeContext",
              "sagemaker:DescribeDataQualityJobDefinition",
              "sagemaker:DescribeDevice",
              "sagemaker:DescribeDeviceFleet",
              "sagemaker:DescribeDomain",
              "sagemaker:DescribeEdgePackagingJob",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeExperiment",
              "sagemaker:DescribeFeatureGroup",
              "sagemaker:DescribeFlowDefinition",
              "sagemaker:DescribeHumanLoop",
              "sagemaker:DescribeHumanTaskUi",
              "sagemaker:DescribeHyperParameterTuningJob",
              "sagemaker:DescribeImage",
              "sagemaker:DescribeImageVersion",
              "sagemaker:DescribeInferenceRecommendationsJob",
              "sagemaker:DescribeLabelingJob",
              "sagemaker:DescribeLineageGroup",
              "sagemaker:DescribeModel",
              "sagemaker:DescribeModelBiasJobDefinition",
              "sagemaker:DescribeModelExplainabilityJobDefinition",
              "sagemaker:DescribeModelPackage",
              "sagemaker:DescribeModelPackageGroup",
              "sagemaker:DescribeModelQualityJobDefinition",
              "sagemaker:DescribeMonitoringSchedule",
              "sagemaker:DescribeNotebookInstance",
              "sagemaker:DescribeNotebookInstanceLifecycleConfig",
              "sagemaker:DescribePipeline",
              "sagemaker:DescribePipelineDefinitionForExecution",
              "sagemaker:DescribePipelineExecution",
              "sagemaker:DescribeProcessingJob",
              "sagemaker:DescribeProject",
              "sagemaker:DescribeSubscribedWorkteam",
              "sagemaker:DescribeTrainingJob",
              "sagemaker:DescribeTransformJob",
              "sagemaker:DescribeTrial",
              "sagemaker:DescribeTrialComponent",
              "sagemaker:DescribeUserProfile",
              "sagemaker:DescribeWorkforce",
              "sagemaker:DescribeWorkteam",
              "sagemaker:DisableSagemakerServicecatalogPortfolio",
              "sagemaker:DisassociateTrialComponent",
              "sagemaker:EnableSagemakerServicecatalogPortfolio",
              "sagemaker:GetDeviceFleetReport",
              "sagemaker:GetDeviceRegistration",
              "sagemaker:GetLineageGroupPolicy",
              "sagemaker:GetModelPackageGroupPolicy",
              "sagemaker:GetRecord",
              "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
              "sagemaker:GetSearchSuggestions",
              "sagemaker:InvokeEndpoint",
              "sagemaker:InvokeEndpointAsync",
              "sagemaker:ListActions",
              "sagemaker:ListAlgorithms",
              "sagemaker:ListAppImageConfigs",
              "sagemaker:ListApps",
              "sagemaker:ListArtifacts",
              "sagemaker:ListAssociations",
              "sagemaker:ListAutoMLJobs",
              "sagemaker:ListCandidatesForAutoMLJob",
              "sagemaker:ListCodeRepositories",
              "sagemaker:ListCompilationJobs",
              "sagemaker:ListContexts",
              "sagemaker:ListDataQualityJobDefinitions",
              "sagemaker:ListDeviceFleets",
              "sagemaker:ListDevices",
              "sagemaker:ListDomains",
              "sagemaker:ListEdgePackagingJobs",
              "sagemaker:ListEndpointConfigs",
              "sagemaker:ListEndpoints",
              "sagemaker:ListExperiments",
              "sagemaker:ListFeatureGroups",
              "sagemaker:ListFlowDefinitions",
              "sagemaker:ListHumanLoops",
              "sagemaker:ListHumanTaskUis",
              "sagemaker:ListHyperParameterTuningJobs",
              "sagemaker:ListImageVersions",
              "sagemaker:ListImages",
              "sagemaker:ListInferenceRecommendationsJobs",
              "sagemaker:ListLabelingJobs",
              "sagemaker:ListLabelingJobsForWorkteam",
              "sagemaker:ListLineageGroups",
              "sagemaker:ListModelBiasJobDefinitions",
              "sagemaker:ListModelExplainabilityJobDefinitions",
              "sagemaker:ListModelMetadata",
              "sagemaker:ListModelPackageGroups",
              "sagemaker:ListModelPackages",
              "sagemaker:ListModelQualityJobDefinitions",
              "sagemaker:ListModels",
              "sagemaker:ListMonitoringExecutions",
              "sagemaker:ListMonitoringSchedules",
              "sagemaker:ListNotebookInstanceLifecycleConfigs",
              "sagemaker:ListNotebookInstances",
              "sagemaker:ListPipelineExecutionSteps",
              "sagemaker:ListPipelineExecutions",
              "sagemaker:ListPipelineParametersForExecution",
              "sagemaker:ListPipelines",
              "sagemaker:ListProcessingJobs",
              "sagemaker:ListProjects",
              "sagemaker:ListSubscribedWorkteams",
              "sagemaker:ListTags",
              "sagemaker:ListTrainingJobs",
              "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
              "sagemaker:ListTransformJobs",
              "sagemaker:ListTrialComponents",
              "sagemaker:ListTrials",
              "sagemaker:ListUserProfiles",
              "sagemaker:ListWorkforces",
              "sagemaker:ListWorkteams",
              "sagemaker:PutLineageGroupPolicy",
              "sagemaker:PutModelPackageGroupPolicy",
              "sagemaker:PutRecord",
              "sagemaker:QueryLineage",
              "sagemaker:RegisterDevices",
              "sagemaker:RenderUiTemplate",
              "sagemaker:Search",
              "sagemaker:SendHeartbeat",
              "sagemaker:SendPipelineExecutionStepFailure",
              "sagemaker:SendPipelineExecutionStepSuccess",
              "sagemaker:StartHumanLoop",
              "sagemaker:StartMonitoringSchedule",
              "sagemaker:StartNotebookInstance",
              "sagemaker:StartPipelineExecution",
              "sagemaker:StopAutoMLJob",
              "sagemaker:StopCompilationJob",
              "sagemaker:StopEdgePackagingJob",
              "sagemaker:StopHumanLoop",
              "sagemaker:StopHyperParameterTuningJob",
              "sagemaker:StopInferenceRecommendationsJob",
              "sagemaker:StopLabelingJob",
              "sagemaker:StopMonitoringSchedule",
              "sagemaker:StopNotebookInstance",
              "sagemaker:StopPipelineExecution",
              "sagemaker:StopProcessingJob",
              "sagemaker:StopTrainingJob",
              "sagemaker:StopTransformJob",
              "sagemaker:UpdateAction",
              "sagemaker:UpdateAppImageConfig",
              "sagemaker:UpdateArtifact",
              "sagemaker:UpdateCodeRepository",
              "sagemaker:UpdateContext",
              "sagemaker:UpdateDeviceFleet",
              "sagemaker:UpdateDevices",
              "sagemaker:UpdateDomain",
              "sagemaker:UpdateEndpoint",
              "sagemaker:UpdateEndpointWeightsAndCapacities",
              "sagemaker:UpdateExperiment",
              "sagemaker:UpdateImage",
              "sagemaker:UpdateModelPackage",
              "sagemaker:UpdateMonitoringSchedule",
              "sagemaker:UpdateNotebookInstance",
              "sagemaker:UpdateNotebookInstanceLifecycleConfig",
              "sagemaker:UpdatePipeline",
              "sagemaker:UpdatePipelineExecution",
              "sagemaker:UpdateProject",
              "sagemaker:UpdateTrainingJob",
              "sagemaker:UpdateTrial",
              "sagemaker:UpdateTrialComponent",
              "sagemaker:UpdateUserProfile",
              "sagemaker:UpdateWorkforce",
              "sagemaker:UpdateWorkteam"
            ],
            "NotResource": [
              "arn:aws:sagemaker:*:*:domain/*",
              "arn:aws:sagemaker:*:*:user-profile/*",
              "arn:aws:sagemaker:*:*:app/*",
              "arn:aws:sagemaker:*:*:flow-definition/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodeBuildRole",
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsCodeBuildServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonSageMakerCodeBuildCodeCommitPermission",
            "Effect": "Allow",
            "Action": [
              "codecommit:CancelUploadArchive",
              "codecommit:GetBranch",
              "codecommit:GetCommit",
              "codecommit:GetUploadArchiveStatus",
              "codecommit:UploadArchive"
            ],
            "Resource": "arn:aws:codecommit:*:*:sagemaker-*"
          },
          {
            "Sid": "AmazonSageMakerCodeBuildECRReadPermission",
            "Effect": "Allow",
            "Action": [
              "ecr:BatchCheckLayerAvailability",
              "ecr:BatchGetImage",
              "ecr:DescribeImageScanFindings",
              "ecr:DescribeRegistry",
              "ecr:DescribeImageReplicationStatus",
              "ecr:DescribeRepositories",
              "ecr:DescribeImageReplicationStatus",
              "ecr:GetAuthorizationToken",
              "ecr:GetDownloadUrlForLayer"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AmazonSageMakerCodeBuildECRWritePermission",
            "Effect": "Allow",
            "Action": [
              "ecr:CompleteLayerUpload",
              "ecr:CreateRepository",
              "ecr:InitiateLayerUpload",
              "ecr:PutImage",
              "ecr:UploadLayerPart"
            ],
            "Resource": [
              "arn:aws:ecr:*:*:repository/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerCodeBuildPassRoletPermission",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsEventsRole",
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodePipelineRole",
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCloudformationRole",
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsCodeBuildRole",
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "events.amazonaws.com",
                  "codepipeline.amazonaws.com",
                  "cloudformation.amazonaws.com",
                  "codebuild.amazonaws.com",
                  "sagemaker.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerCodeBuildLogPermission",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DeleteLogDelivery",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:DescribeResourcePolicies",
              "logs:DescribeDestinations",
              "logs:DescribeExportTasks",
              "logs:DescribeMetricFilters",
              "logs:DescribeQueries",
              "logs:DescribeQueryDefinitions",
              "logs:DescribeSubscriptionFilters",
              "logs:GetLogDelivery",
              "logs:GetLogEvents",
              "logs:ListLogDeliveries",
              "logs:PutLogEvents",
              "logs:PutResourcePolicy",
              "logs:UpdateLogDelivery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/codebuild/*"
          },
          {
            "Sid": "AmazonSageMakerCodeBuildS3Permission",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:GetBucketAcl",
              "s3:GetBucketCors",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads",
              "s3:PutBucketCors",
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*",
              "arn:aws:s3:::sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerCodeBuildSageMakerPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddAssociation",
              "sagemaker:AddTags",
              "sagemaker:AssociateTrialComponent",
              "sagemaker:BatchDescribeModelPackage",
              "sagemaker:BatchGetMetrics",
              "sagemaker:BatchGetRecord",
              "sagemaker:BatchPutMetrics",
              "sagemaker:CreateAction",
              "sagemaker:CreateAlgorithm",
              "sagemaker:CreateApp",
              "sagemaker:CreateAppImageConfig",
              "sagemaker:CreateArtifact",
              "sagemaker:CreateAutoMLJob",
              "sagemaker:CreateCodeRepository",
              "sagemaker:CreateCompilationJob",
              "sagemaker:CreateContext",
              "sagemaker:CreateDataQualityJobDefinition",
              "sagemaker:CreateDeviceFleet",
              "sagemaker:CreateDomain",
              "sagemaker:CreateEdgePackagingJob",
              "sagemaker:CreateEndpoint",
              "sagemaker:CreateEndpointConfig",
              "sagemaker:CreateExperiment",
              "sagemaker:CreateFeatureGroup",
              "sagemaker:CreateFlowDefinition",
              "sagemaker:CreateHumanTaskUi",
              "sagemaker:CreateHyperParameterTuningJob",
              "sagemaker:CreateImage",
              "sagemaker:CreateImageVersion",
              "sagemaker:CreateInferenceRecommendationsJob",
              "sagemaker:CreateLabelingJob",
              "sagemaker:CreateLineageGroupPolicy",
              "sagemaker:CreateModel",
              "sagemaker:CreateModelBiasJobDefinition",
              "sagemaker:CreateModelExplainabilityJobDefinition",
              "sagemaker:CreateModelPackage",
              "sagemaker:CreateModelPackageGroup",
              "sagemaker:CreateModelQualityJobDefinition",
              "sagemaker:CreateMonitoringSchedule",
              "sagemaker:CreateNotebookInstance",
              "sagemaker:CreateNotebookInstanceLifecycleConfig",
              "sagemaker:CreatePipeline",
              "sagemaker:CreatePresignedDomainUrl",
              "sagemaker:CreatePresignedNotebookInstanceUrl",
              "sagemaker:CreateProcessingJob",
              "sagemaker:CreateProject",
              "sagemaker:CreateTrainingJob",
              "sagemaker:CreateTransformJob",
              "sagemaker:CreateTrial",
              "sagemaker:CreateTrialComponent",
              "sagemaker:CreateUserProfile",
              "sagemaker:CreateWorkforce",
              "sagemaker:CreateWorkteam",
              "sagemaker:DeleteAction",
              "sagemaker:DeleteAlgorithm",
              "sagemaker:DeleteApp",
              "sagemaker:DeleteAppImageConfig",
              "sagemaker:DeleteArtifact",
              "sagemaker:DeleteAssociation",
              "sagemaker:DeleteCodeRepository",
              "sagemaker:DeleteContext",
              "sagemaker:DeleteDataQualityJobDefinition",
              "sagemaker:DeleteDeviceFleet",
              "sagemaker:DeleteDomain",
              "sagemaker:DeleteEndpoint",
              "sagemaker:DeleteEndpointConfig",
              "sagemaker:DeleteExperiment",
              "sagemaker:DeleteFeatureGroup",
              "sagemaker:DeleteFlowDefinition",
              "sagemaker:DeleteHumanLoop",
              "sagemaker:DeleteHumanTaskUi",
              "sagemaker:DeleteImage",
              "sagemaker:DeleteImageVersion",
              "sagemaker:DeleteLineageGroupPolicy",
              "sagemaker:DeleteModel",
              "sagemaker:DeleteModelBiasJobDefinition",
              "sagemaker:DeleteModelExplainabilityJobDefinition",
              "sagemaker:DeleteModelPackage",
              "sagemaker:DeleteModelPackageGroup",
              "sagemaker:DeleteModelPackageGroupPolicy",
              "sagemaker:DeleteModelQualityJobDefinition",
              "sagemaker:DeleteMonitoringSchedule",
              "sagemaker:DeleteNotebookInstance",
              "sagemaker:DeleteNotebookInstanceLifecycleConfig",
              "sagemaker:DeletePipeline",
              "sagemaker:DeleteProject",
              "sagemaker:DeleteRecord",
              "sagemaker:DeleteTags",
              "sagemaker:DeleteTrial",
              "sagemaker:DeleteTrialComponent",
              "sagemaker:DeleteUserProfile",
              "sagemaker:DeleteWorkforce",
              "sagemaker:DeleteWorkteam",
              "sagemaker:DeregisterDevices",
              "sagemaker:DescribeAction",
              "sagemaker:DescribeAlgorithm",
              "sagemaker:DescribeApp",
              "sagemaker:DescribeAppImageConfig",
              "sagemaker:DescribeArtifact",
              "sagemaker:DescribeAutoMLJob",
              "sagemaker:DescribeCodeRepository",
              "sagemaker:DescribeCompilationJob",
              "sagemaker:DescribeContext",
              "sagemaker:DescribeDataQualityJobDefinition",
              "sagemaker:DescribeDevice",
              "sagemaker:DescribeDeviceFleet",
              "sagemaker:DescribeDomain",
              "sagemaker:DescribeEdgePackagingJob",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeExperiment",
              "sagemaker:DescribeFeatureGroup",
              "sagemaker:DescribeFlowDefinition",
              "sagemaker:DescribeHumanLoop",
              "sagemaker:DescribeHumanTaskUi",
              "sagemaker:DescribeHyperParameterTuningJob",
              "sagemaker:DescribeImage",
              "sagemaker:DescribeImageVersion",
              "sagemaker:DescribeInferenceRecommendationsJob",
              "sagemaker:DescribeLabelingJob",
              "sagemaker:DescribeLineageGroup",
              "sagemaker:DescribeModel",
              "sagemaker:DescribeModelBiasJobDefinition",
              "sagemaker:DescribeModelExplainabilityJobDefinition",
              "sagemaker:DescribeModelPackage",
              "sagemaker:DescribeModelPackageGroup",
              "sagemaker:DescribeModelQualityJobDefinition",
              "sagemaker:DescribeMonitoringSchedule",
              "sagemaker:DescribeNotebookInstance",
              "sagemaker:DescribeNotebookInstanceLifecycleConfig",
              "sagemaker:DescribePipeline",
              "sagemaker:DescribePipelineDefinitionForExecution",
              "sagemaker:DescribePipelineExecution",
              "sagemaker:DescribeProcessingJob",
              "sagemaker:DescribeProject",
              "sagemaker:DescribeSubscribedWorkteam",
              "sagemaker:DescribeTrainingJob",
              "sagemaker:DescribeTransformJob",
              "sagemaker:DescribeTrial",
              "sagemaker:DescribeTrialComponent",
              "sagemaker:DescribeUserProfile",
              "sagemaker:DescribeWorkforce",
              "sagemaker:DescribeWorkteam",
              "sagemaker:DisableSagemakerServicecatalogPortfolio",
              "sagemaker:DisassociateTrialComponent",
              "sagemaker:EnableSagemakerServicecatalogPortfolio",
              "sagemaker:GetDeviceFleetReport",
              "sagemaker:GetDeviceRegistration",
              "sagemaker:GetLineageGroupPolicy",
              "sagemaker:GetModelPackageGroupPolicy",
              "sagemaker:GetRecord",
              "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
              "sagemaker:GetSearchSuggestions",
              "sagemaker:InvokeEndpoint",
              "sagemaker:InvokeEndpointAsync",
              "sagemaker:ListActions",
              "sagemaker:ListAlgorithms",
              "sagemaker:ListAppImageConfigs",
              "sagemaker:ListApps",
              "sagemaker:ListArtifacts",
              "sagemaker:ListAssociations",
              "sagemaker:ListAutoMLJobs",
              "sagemaker:ListCandidatesForAutoMLJob",
              "sagemaker:ListCodeRepositories",
              "sagemaker:ListCompilationJobs",
              "sagemaker:ListContexts",
              "sagemaker:ListDataQualityJobDefinitions",
              "sagemaker:ListDeviceFleets",
              "sagemaker:ListDevices",
              "sagemaker:ListDomains",
              "sagemaker:ListEdgePackagingJobs",
              "sagemaker:ListEndpointConfigs",
              "sagemaker:ListEndpoints",
              "sagemaker:ListExperiments",
              "sagemaker:ListFeatureGroups",
              "sagemaker:ListFlowDefinitions",
              "sagemaker:ListHumanLoops",
              "sagemaker:ListHumanTaskUis",
              "sagemaker:ListHyperParameterTuningJobs",
              "sagemaker:ListImageVersions",
              "sagemaker:ListImages",
              "sagemaker:ListInferenceRecommendationsJobs",
              "sagemaker:ListLabelingJobs",
              "sagemaker:ListLabelingJobsForWorkteam",
              "sagemaker:ListLineageGroups",
              "sagemaker:ListModelBiasJobDefinitions",
              "sagemaker:ListModelExplainabilityJobDefinitions",
              "sagemaker:ListModelMetadata",
              "sagemaker:ListModelPackageGroups",
              "sagemaker:ListModelPackages",
              "sagemaker:ListModelQualityJobDefinitions",
              "sagemaker:ListModels",
              "sagemaker:ListMonitoringExecutions",
              "sagemaker:ListMonitoringSchedules",
              "sagemaker:ListNotebookInstanceLifecycleConfigs",
              "sagemaker:ListNotebookInstances",
              "sagemaker:ListPipelineExecutionSteps",
              "sagemaker:ListPipelineExecutions",
              "sagemaker:ListPipelineParametersForExecution",
              "sagemaker:ListPipelines",
              "sagemaker:ListProcessingJobs",
              "sagemaker:ListProjects",
              "sagemaker:ListSubscribedWorkteams",
              "sagemaker:ListTags",
              "sagemaker:ListTrainingJobs",
              "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
              "sagemaker:ListTransformJobs",
              "sagemaker:ListTrialComponents",
              "sagemaker:ListTrials",
              "sagemaker:ListUserProfiles",
              "sagemaker:ListWorkforces",
              "sagemaker:ListWorkteams",
              "sagemaker:PutLineageGroupPolicy",
              "sagemaker:PutModelPackageGroupPolicy",
              "sagemaker:PutRecord",
              "sagemaker:QueryLineage",
              "sagemaker:RegisterDevices",
              "sagemaker:RenderUiTemplate",
              "sagemaker:Search",
              "sagemaker:SendHeartbeat",
              "sagemaker:SendPipelineExecutionStepFailure",
              "sagemaker:SendPipelineExecutionStepSuccess",
              "sagemaker:StartHumanLoop",
              "sagemaker:StartMonitoringSchedule",
              "sagemaker:StartNotebookInstance",
              "sagemaker:StartPipelineExecution",
              "sagemaker:StopAutoMLJob",
              "sagemaker:StopCompilationJob",
              "sagemaker:StopEdgePackagingJob",
              "sagemaker:StopHumanLoop",
              "sagemaker:StopHyperParameterTuningJob",
              "sagemaker:StopInferenceRecommendationsJob",
              "sagemaker:StopLabelingJob",
              "sagemaker:StopMonitoringSchedule",
              "sagemaker:StopNotebookInstance",
              "sagemaker:StopPipelineExecution",
              "sagemaker:StopProcessingJob",
              "sagemaker:StopTrainingJob",
              "sagemaker:StopTransformJob",
              "sagemaker:UpdateAction",
              "sagemaker:UpdateAppImageConfig",
              "sagemaker:UpdateArtifact",
              "sagemaker:UpdateCodeRepository",
              "sagemaker:UpdateContext",
              "sagemaker:UpdateDeviceFleet",
              "sagemaker:UpdateDevices",
              "sagemaker:UpdateDomain",
              "sagemaker:UpdateEndpoint",
              "sagemaker:UpdateEndpointWeightsAndCapacities",
              "sagemaker:UpdateExperiment",
              "sagemaker:UpdateImage",
              "sagemaker:UpdateModelPackage",
              "sagemaker:UpdateMonitoringSchedule",
              "sagemaker:UpdateNotebookInstance",
              "sagemaker:UpdateNotebookInstanceLifecycleConfig",
              "sagemaker:UpdatePipeline",
              "sagemaker:UpdatePipelineExecution",
              "sagemaker:UpdateProject",
              "sagemaker:UpdateTrainingJob",
              "sagemaker:UpdateTrial",
              "sagemaker:UpdateTrialComponent",
              "sagemaker:UpdateUserProfile",
              "sagemaker:UpdateWorkforce",
              "sagemaker:UpdateWorkteam"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:endpoint/*",
              "arn:aws:sagemaker:*:*:endpoint-config/*",
              "arn:aws:sagemaker:*:*:model/*",
              "arn:aws:sagemaker:*:*:pipeline/*",
              "arn:aws:sagemaker:*:*:project/*",
              "arn:aws:sagemaker:*:*:model-package/*"
            ]
          },
          {
            "Sid": "AmazonSageMakerCodeBuildCodeStarConnectionPermission",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:UseConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*"
            ],
            "Condition": {
              "StringEqualsIgnoreCase": {
                "aws:ResourceTag/sagemaker": "true"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerCodeBuildCodeConnectionPermission",
            "Effect": "Allow",
            "Action": [
              "codeconnections:UseConnection"
            ],
            "Resource": [
              "arn:aws:codeconnections:*:*:connection/*"
            ],
            "Condition": {
              "StringEqualsIgnoreCase": {
                "aws:ResourceTag/sagemaker": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerServiceCatalogProductsLambdaServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonSageMakerLambdaECRPermission",
            "Effect": "Allow",
            "Action": [
              "ecr:DescribeImages",
              "ecr:BatchDeleteImage",
              "ecr:CompleteLayerUpload",
              "ecr:CreateRepository",
              "ecr:DeleteRepository",
              "ecr:InitiateLayerUpload",
              "ecr:PutImage",
              "ecr:UploadLayerPart"
            ],
            "Resource": [
              "arn:aws:ecr:*:*:repository/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerLambdaEventBridgePermission",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:DescribeRule",
              "events:PutRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerLambdaS3BucketPermission",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:GetBucketAcl",
              "s3:GetBucketCors",
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads",
              "s3:PutBucketCors"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*",
              "arn:aws:s3:::sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerLambdaS3ObjectPermission",
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*",
              "arn:aws:s3:::sagemaker-*"
            ]
          },
          {
            "Sid": "AmazonSageMakerLambdaSageMakerPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddAssociation",
              "sagemaker:AddTags",
              "sagemaker:AssociateTrialComponent",
              "sagemaker:BatchDescribeModelPackage",
              "sagemaker:BatchGetMetrics",
              "sagemaker:BatchGetRecord",
              "sagemaker:BatchPutMetrics",
              "sagemaker:CreateAction",
              "sagemaker:CreateAlgorithm",
              "sagemaker:CreateApp",
              "sagemaker:CreateAppImageConfig",
              "sagemaker:CreateArtifact",
              "sagemaker:CreateAutoMLJob",
              "sagemaker:CreateCodeRepository",
              "sagemaker:CreateCompilationJob",
              "sagemaker:CreateContext",
              "sagemaker:CreateDataQualityJobDefinition",
              "sagemaker:CreateDeviceFleet",
              "sagemaker:CreateDomain",
              "sagemaker:CreateEdgePackagingJob",
              "sagemaker:CreateEndpoint",
              "sagemaker:CreateEndpointConfig",
              "sagemaker:CreateExperiment",
              "sagemaker:CreateFeatureGroup",
              "sagemaker:CreateFlowDefinition",
              "sagemaker:CreateHumanTaskUi",
              "sagemaker:CreateHyperParameterTuningJob",
              "sagemaker:CreateImage",
              "sagemaker:CreateImageVersion",
              "sagemaker:CreateInferenceRecommendationsJob",
              "sagemaker:CreateLabelingJob",
              "sagemaker:CreateLineageGroupPolicy",
              "sagemaker:CreateModel",
              "sagemaker:CreateModelBiasJobDefinition",
              "sagemaker:CreateModelExplainabilityJobDefinition",
              "sagemaker:CreateModelPackage",
              "sagemaker:CreateModelPackageGroup",
              "sagemaker:CreateModelQualityJobDefinition",
              "sagemaker:CreateMonitoringSchedule",
              "sagemaker:CreateNotebookInstance",
              "sagemaker:CreateNotebookInstanceLifecycleConfig",
              "sagemaker:CreatePipeline",
              "sagemaker:CreatePresignedDomainUrl",
              "sagemaker:CreatePresignedNotebookInstanceUrl",
              "sagemaker:CreateProcessingJob",
              "sagemaker:CreateProject",
              "sagemaker:CreateTrainingJob",
              "sagemaker:CreateTransformJob",
              "sagemaker:CreateTrial",
              "sagemaker:CreateTrialComponent",
              "sagemaker:CreateUserProfile",
              "sagemaker:CreateWorkforce",
              "sagemaker:CreateWorkteam",
              "sagemaker:DeleteAction",
              "sagemaker:DeleteAlgorithm",
              "sagemaker:DeleteApp",
              "sagemaker:DeleteAppImageConfig",
              "sagemaker:DeleteArtifact",
              "sagemaker:DeleteAssociation",
              "sagemaker:DeleteCodeRepository",
              "sagemaker:DeleteContext",
              "sagemaker:DeleteDataQualityJobDefinition",
              "sagemaker:DeleteDeviceFleet",
              "sagemaker:DeleteDomain",
              "sagemaker:DeleteEndpoint",
              "sagemaker:DeleteEndpointConfig",
              "sagemaker:DeleteExperiment",
              "sagemaker:DeleteFeatureGroup",
              "sagemaker:DeleteFlowDefinition",
              "sagemaker:DeleteHumanLoop",
              "sagemaker:DeleteHumanTaskUi",
              "sagemaker:DeleteImage",
              "sagemaker:DeleteImageVersion",
              "sagemaker:DeleteLineageGroupPolicy",
              "sagemaker:DeleteModel",
              "sagemaker:DeleteModelBiasJobDefinition",
              "sagemaker:DeleteModelExplainabilityJobDefinition",
              "sagemaker:DeleteModelPackage",
              "sagemaker:DeleteModelPackageGroup",
              "sagemaker:DeleteModelPackageGroupPolicy",
              "sagemaker:DeleteModelQualityJobDefinition",
              "sagemaker:DeleteMonitoringSchedule",
              "sagemaker:DeleteNotebookInstance",
              "sagemaker:DeleteNotebookInstanceLifecycleConfig",
              "sagemaker:DeletePipeline",
              "sagemaker:DeleteProject",
              "sagemaker:DeleteRecord",
              "sagemaker:DeleteTags",
              "sagemaker:DeleteTrial",
              "sagemaker:DeleteTrialComponent",
              "sagemaker:DeleteUserProfile",
              "sagemaker:DeleteWorkforce",
              "sagemaker:DeleteWorkteam",
              "sagemaker:DeregisterDevices",
              "sagemaker:DescribeAction",
              "sagemaker:DescribeAlgorithm",
              "sagemaker:DescribeApp",
              "sagemaker:DescribeAppImageConfig",
              "sagemaker:DescribeArtifact",
              "sagemaker:DescribeAutoMLJob",
              "sagemaker:DescribeCodeRepository",
              "sagemaker:DescribeCompilationJob",
              "sagemaker:DescribeContext",
              "sagemaker:DescribeDataQualityJobDefinition",
              "sagemaker:DescribeDevice",
              "sagemaker:DescribeDeviceFleet",
              "sagemaker:DescribeDomain",
              "sagemaker:DescribeEdgePackagingJob",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeExperiment",
              "sagemaker:DescribeFeatureGroup",
              "sagemaker:DescribeFlowDefinition",
              "sagemaker:DescribeHumanLoop",
              "sagemaker:DescribeHumanTaskUi",
              "sagemaker:DescribeHyperParameterTuningJob",
              "sagemaker:DescribeImage",
              "sagemaker:DescribeImageVersion",
              "sagemaker:DescribeInferenceRecommendationsJob",
              "sagemaker:DescribeLabelingJob",
              "sagemaker:DescribeLineageGroup",
              "sagemaker:DescribeModel",
              "sagemaker:DescribeModelBiasJobDefinition",
              "sagemaker:DescribeModelExplainabilityJobDefinition",
              "sagemaker:DescribeModelPackage",
              "sagemaker:DescribeModelPackageGroup",
              "sagemaker:DescribeModelQualityJobDefinition",
              "sagemaker:DescribeMonitoringSchedule",
              "sagemaker:DescribeNotebookInstance",
              "sagemaker:DescribeNotebookInstanceLifecycleConfig",
              "sagemaker:DescribePipeline",
              "sagemaker:DescribePipelineDefinitionForExecution",
              "sagemaker:DescribePipelineExecution",
              "sagemaker:DescribeProcessingJob",
              "sagemaker:DescribeProject",
              "sagemaker:DescribeSubscribedWorkteam",
              "sagemaker:DescribeTrainingJob",
              "sagemaker:DescribeTransformJob",
              "sagemaker:DescribeTrial",
              "sagemaker:DescribeTrialComponent",
              "sagemaker:DescribeUserProfile",
              "sagemaker:DescribeWorkforce",
              "sagemaker:DescribeWorkteam",
              "sagemaker:DisableSagemakerServicecatalogPortfolio",
              "sagemaker:DisassociateTrialComponent",
              "sagemaker:EnableSagemakerServicecatalogPortfolio",
              "sagemaker:GetDeviceFleetReport",
              "sagemaker:GetDeviceRegistration",
              "sagemaker:GetLineageGroupPolicy",
              "sagemaker:GetModelPackageGroupPolicy",
              "sagemaker:GetRecord",
              "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
              "sagemaker:GetSearchSuggestions",
              "sagemaker:InvokeEndpoint",
              "sagemaker:InvokeEndpointAsync",
              "sagemaker:ListActions",
              "sagemaker:ListAlgorithms",
              "sagemaker:ListAppImageConfigs",
              "sagemaker:ListApps",
              "sagemaker:ListArtifacts",
              "sagemaker:ListAssociations",
              "sagemaker:ListAutoMLJobs",
              "sagemaker:ListCandidatesForAutoMLJob",
              "sagemaker:ListCodeRepositories",
              "sagemaker:ListCompilationJobs",
              "sagemaker:ListContexts",
              "sagemaker:ListDataQualityJobDefinitions",
              "sagemaker:ListDeviceFleets",
              "sagemaker:ListDevices",
              "sagemaker:ListDomains",
              "sagemaker:ListEdgePackagingJobs",
              "sagemaker:ListEndpointConfigs",
              "sagemaker:ListEndpoints",
              "sagemaker:ListExperiments",
              "sagemaker:ListFeatureGroups",
              "sagemaker:ListFlowDefinitions",
              "sagemaker:ListHumanLoops",
              "sagemaker:ListHumanTaskUis",
              "sagemaker:ListHyperParameterTuningJobs",
              "sagemaker:ListImageVersions",
              "sagemaker:ListImages",
              "sagemaker:ListInferenceRecommendationsJobs",
              "sagemaker:ListLabelingJobs",
              "sagemaker:ListLabelingJobsForWorkteam",
              "sagemaker:ListLineageGroups",
              "sagemaker:ListModelBiasJobDefinitions",
              "sagemaker:ListModelExplainabilityJobDefinitions",
              "sagemaker:ListModelMetadata",
              "sagemaker:ListModelPackageGroups",
              "sagemaker:ListModelPackages",
              "sagemaker:ListModelQualityJobDefinitions",
              "sagemaker:ListModels",
              "sagemaker:ListMonitoringExecutions",
              "sagemaker:ListMonitoringSchedules",
              "sagemaker:ListNotebookInstanceLifecycleConfigs",
              "sagemaker:ListNotebookInstances",
              "sagemaker:ListPipelineExecutionSteps",
              "sagemaker:ListPipelineExecutions",
              "sagemaker:ListPipelineParametersForExecution",
              "sagemaker:ListPipelines",
              "sagemaker:ListProcessingJobs",
              "sagemaker:ListProjects",
              "sagemaker:ListSubscribedWorkteams",
              "sagemaker:ListTags",
              "sagemaker:ListTrainingJobs",
              "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
              "sagemaker:ListTransformJobs",
              "sagemaker:ListTrialComponents",
              "sagemaker:ListTrials",
              "sagemaker:ListUserProfiles",
              "sagemaker:ListWorkforces",
              "sagemaker:ListWorkteams",
              "sagemaker:PutLineageGroupPolicy",
              "sagemaker:PutModelPackageGroupPolicy",
              "sagemaker:PutRecord",
              "sagemaker:QueryLineage",
              "sagemaker:RegisterDevices",
              "sagemaker:RenderUiTemplate",
              "sagemaker:Search",
              "sagemaker:SendHeartbeat",
              "sagemaker:SendPipelineExecutionStepFailure",
              "sagemaker:SendPipelineExecutionStepSuccess",
              "sagemaker:StartHumanLoop",
              "sagemaker:StartMonitoringSchedule",
              "sagemaker:StartNotebookInstance",
              "sagemaker:StartPipelineExecution",
              "sagemaker:StopAutoMLJob",
              "sagemaker:StopCompilationJob",
              "sagemaker:StopEdgePackagingJob",
              "sagemaker:StopHumanLoop",
              "sagemaker:StopHyperParameterTuningJob",
              "sagemaker:StopInferenceRecommendationsJob",
              "sagemaker:StopLabelingJob",
              "sagemaker:StopMonitoringSchedule",
              "sagemaker:StopNotebookInstance",
              "sagemaker:StopPipelineExecution",
              "sagemaker:StopProcessingJob",
              "sagemaker:StopTrainingJob",
              "sagemaker:StopTransformJob",
              "sagemaker:UpdateAction",
              "sagemaker:UpdateAppImageConfig",
              "sagemaker:UpdateArtifact",
              "sagemaker:UpdateCodeRepository",
              "sagemaker:UpdateContext",
              "sagemaker:UpdateDeviceFleet",
              "sagemaker:UpdateDevices",
              "sagemaker:UpdateDomain",
              "sagemaker:UpdateEndpoint",
              "sagemaker:UpdateEndpointWeightsAndCapacities",
              "sagemaker:UpdateExperiment",
              "sagemaker:UpdateImage",
              "sagemaker:UpdateModelPackage",
              "sagemaker:UpdateMonitoringSchedule",
              "sagemaker:UpdateNotebookInstance",
              "sagemaker:UpdateNotebookInstanceLifecycleConfig",
              "sagemaker:UpdatePipeline",
              "sagemaker:UpdatePipelineExecution",
              "sagemaker:UpdateProject",
              "sagemaker:UpdateTrainingJob",
              "sagemaker:UpdateTrial",
              "sagemaker:UpdateTrialComponent",
              "sagemaker:UpdateUserProfile",
              "sagemaker:UpdateWorkforce",
              "sagemaker:UpdateWorkteam"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:action/*",
              "arn:aws:sagemaker:*:*:algorithm/*",
              "arn:aws:sagemaker:*:*:app-image-config/*",
              "arn:aws:sagemaker:*:*:artifact/*",
              "arn:aws:sagemaker:*:*:automl-job/*",
              "arn:aws:sagemaker:*:*:code-repository/*",
              "arn:aws:sagemaker:*:*:compilation-job/*",
              "arn:aws:sagemaker:*:*:context/*",
              "arn:aws:sagemaker:*:*:data-quality-job-definition/*",
              "arn:aws:sagemaker:*:*:device-fleet/*/device/*",
              "arn:aws:sagemaker:*:*:device-fleet/*",
              "arn:aws:sagemaker:*:*:edge-packaging-job/*",
              "arn:aws:sagemaker:*:*:endpoint/*",
              "arn:aws:sagemaker:*:*:endpoint-config/*",
              "arn:aws:sagemaker:*:*:experiment/*",
              "arn:aws:sagemaker:*:*:experiment-trial/*",
              "arn:aws:sagemaker:*:*:experiment-trial-component/*",
              "arn:aws:sagemaker:*:*:feature-group/*",
              "arn:aws:sagemaker:*:*:human-loop/*",
              "arn:aws:sagemaker:*:*:human-task-ui/*",
              "arn:aws:sagemaker:*:*:hyper-parameter-tuning-job/*",
              "arn:aws:sagemaker:*:*:image/*",
              "arn:aws:sagemaker:*:*:image-version/*/*",
              "arn:aws:sagemaker:*:*:inference-recommendations-job/*",
              "arn:aws:sagemaker:*:*:labeling-job/*",
              "arn:aws:sagemaker:*:*:model/*",
              "arn:aws:sagemaker:*:*:model-bias-job-definition/*",
              "arn:aws:sagemaker:*:*:model-explainability-job-definition/*",
              "arn:aws:sagemaker:*:*:model-package/*",
              "arn:aws:sagemaker:*:*:model-package-group/*",
              "arn:aws:sagemaker:*:*:model-quality-job-definition/*",
              "arn:aws:sagemaker:*:*:monitoring-schedule/*",
              "arn:aws:sagemaker:*:*:notebook-instance/*",
              "arn:aws:sagemaker:*:*:notebook-instance-lifecycle-config/*",
              "arn:aws:sagemaker:*:*:pipeline/*",
              "arn:aws:sagemaker:*:*:pipeline/*/execution/*",
              "arn:aws:sagemaker:*:*:processing-job/*",
              "arn:aws:sagemaker:*:*:project/*",
              "arn:aws:sagemaker:*:*:training-job/*",
              "arn:aws:sagemaker:*:*:transform-job/*",
              "arn:aws:sagemaker:*:*:workforce/*",
              "arn:aws:sagemaker:*:*:workteam/*"
            ]
          },
          {
            "Sid": "AmazonSageMakerLambdaPassRolePermission",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsExecutionRole"
            ]
          },
          {
            "Sid": "AmazonSageMakerLambdaLogPermission",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DeleteLogDelivery",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:DescribeResourcePolicies",
              "logs:DescribeDestinations",
              "logs:DescribeExportTasks",
              "logs:DescribeMetricFilters",
              "logs:DescribeQueries",
              "logs:DescribeQueryDefinitions",
              "logs:DescribeSubscriptionFilters",
              "logs:GetLogDelivery",
              "logs:GetLogEvents",
              "logs:ListLogDeliveries",
              "logs:PutLogEvents",
              "logs:PutResourcePolicy",
              "logs:UpdateLogDelivery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
          },
          {
            "Sid": "AmazonSageMakerLambdaCodeBuildPermission",
            "Effect": "Allow",
            "Action": [
              "codebuild:StartBuild",
              "codebuild:BatchGetBuilds"
            ],
            "Resource": "arn:aws:codebuild:*:*:project/sagemaker-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/sagemaker:project-name": "*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEBSCSIDriverPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot",
              "ec2:AttachVolume",
              "ec2:DetachVolume",
              "ec2:ModifyVolume",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshots",
              "ec2:DescribeTags",
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumesModifications"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateVolume",
                  "CreateSnapshot"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/ebs.csi.aws.com/cluster": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/CSIVolumeName": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/CSIVolumeName": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/kubernetes.io/created-for/pvc/name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/CSIVolumeSnapshotName": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeSDKMediaPipelinesServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowPutMetricsForChimeSDKNamespace",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/ChimeSDK"
              }
            }
          },
          {
            "Sid": "AllowKinesisVideoStreamsAccess",
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:GetDataEndpoint",
              "kinesisvideo:PutMedia",
              "kinesisvideo:UpdateDataRetention",
              "kinesisvideo:DescribeStream",
              "kinesisvideo:CreateStream"
            ],
            "Resource": [
              "arn:aws:kinesisvideo:*:*:stream/ChimeMediaPipelines-*"
            ]
          },
          {
            "Sid": "AllowKinesisVideoStreamsListAccess",
            "Effect": "Allow",
            "Action": [
              "kinesisvideo:ListStreams"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowChimeMeetingAccess",
            "Effect": "Allow",
            "Action": [
              "chime:GetMeeting",
              "chime:CreateAttendee",
              "chime:DeleteAttendee"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSPerformanceInsightsReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonRDSDescribeDBInstances",
            "Effect": "Allow",
            "Action": "rds:DescribeDBInstances",
            "Resource": "*"
          },
          {
            "Sid": "AmazonRDSDescribeDBClusters",
            "Effect": "Allow",
            "Action": "rds:DescribeDBClusters",
            "Resource": "*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsDescribeDimensionKeys",
            "Effect": "Allow",
            "Action": "pi:DescribeDimensionKeys",
            "Resource": "arn:aws:pi:*:*:metrics/rds/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsGetDimensionKeyDetails",
            "Effect": "Allow",
            "Action": "pi:GetDimensionKeyDetails",
            "Resource": "arn:aws:pi:*:*:metrics/rds/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsGetResourceMetadata",
            "Effect": "Allow",
            "Action": "pi:GetResourceMetadata",
            "Resource": "arn:aws:pi:*:*:metrics/rds/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsGetResourceMetrics",
            "Effect": "Allow",
            "Action": "pi:GetResourceMetrics",
            "Resource": "arn:aws:pi:*:*:metrics/rds/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsListAvailableResourceDimensions",
            "Effect": "Allow",
            "Action": "pi:ListAvailableResourceDimensions",
            "Resource": "arn:aws:pi:*:*:metrics/rds/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsListAvailableResourceMetrics",
            "Effect": "Allow",
            "Action": "pi:ListAvailableResourceMetrics",
            "Resource": "arn:aws:pi:*:*:metrics/rds/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsGetPerformanceAnalysisReport",
            "Effect": "Allow",
            "Action": "pi:GetPerformanceAnalysisReport",
            "Resource": "arn:aws:pi:*:*:perf-reports/rds/*/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsListPerformanceAnalysisReports",
            "Effect": "Allow",
            "Action": "pi:ListPerformanceAnalysisReports",
            "Resource": "arn:aws:pi:*:*:perf-reports/rds/*/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsListTagsForResource",
            "Effect": "Allow",
            "Action": "pi:ListTagsForResource",
            "Resource": "arn:aws:pi:*:*:*/rds/*"
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAManageSubscription",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:Subscribe",
              "aws-marketplace:Unsubscribe"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws-marketplace:ProductId": [
                  "34850061-abaf-402d-92df-94325c9e947f",
                  "bfdca560-2c78-4e64-8193-794c159e6d30"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ViewSubscriptions"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBillingConductorFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "billingconductor:*",
              "organizations:ListAccounts",
              "pricing:DescribeServices"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBillingConductorReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "billingconductor:List*",
              "organizations:ListAccounts",
              "pricing:DescribeServices"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AwsGlueSessionUserRestrictedServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowGlueActions",
            "Effect": "Allow",
            "Action": "glue:*",
            "Resource": [
              "arn:aws:glue:*:*:catalog/*",
              "arn:aws:glue:*:*:database/*",
              "arn:aws:glue:*:*:table/*",
              "arn:aws:glue:*:*:tableVersion/*",
              "arn:aws:glue:*:*:connection/*",
              "arn:aws:glue:*:*:userDefinedFunction/*",
              "arn:aws:glue:*:*:devEndpoint/*",
              "arn:aws:glue:*:*:job/*",
              "arn:aws:glue:*:*:trigger/*",
              "arn:aws:glue:*:*:crawler/*",
              "arn:aws:glue:*:*:workflow/*",
              "arn:aws:glue:*:*:mlTransform/*",
              "arn:aws:glue:*:*:registry/*",
              "arn:aws:glue:*:*:schema/*"
            ]
          },
          {
            "Sid": "AllowCompletionActions",
            "Effect": "Allow",
            "Action": [
              "glue:StartCompletion",
              "glue:GetCompletion"
            ],
            "Resource": [
              "arn:aws:glue:*:*:completion/*"
            ]
          },
          {
            "Sid": "AllowSessionActions",
            "Effect": "Allow",
            "Action": [
              "glue:CreateSession"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/owner": "${aws:userid}"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "owner"
                ]
              }
            }
          },
          {
            "Sid": "AllowGlueTaggingAction",
            "Effect": "Allow",
            "Action": [
              "glue:TagResource"
            ],
            "Resource": "arn:aws:glue:*:*:session/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/owner": "${aws:userid}",
                "aws:RequestTag/owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AllowStatementActions",
            "Effect": "Allow",
            "Action": [
              "glue:RunStatement",
              "glue:GetStatement",
              "glue:ListStatements",
              "glue:CancelStatement",
              "glue:StopSession",
              "glue:DeleteSession",
              "glue:GetSession"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AllowListSessionsAction",
            "Effect": "Allow",
            "Action": [
              "glue:ListSessions"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DenyTagActions",
            "Effect": "Deny",
            "Action": [
              "glue:UntagResource",
              "tag:TagResources",
              "tag:UntagResources"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "owner"
                ]
              }
            }
          },
          {
            "Sid": "AllowS3BucketActions",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*"
            ]
          },
          {
            "Sid": "AllowS3ObjectActions",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*/*",
              "arn:aws:s3:::*/*aws-glue-*/*"
            ]
          },
          {
            "Sid": "AllowS3ObjectCrawlerActions",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::crawler-public*"
            ]
          },
          {
            "Sid": "AllowLogsActions",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:/aws-glue/*"
            ]
          },
          {
            "Sid": "AllowTagsActions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws-glue-service-resource"
                ]
              }
            },
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AwsGlueSessionUserRestrictedPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowSessionActions",
            "Effect": "Allow",
            "Action": [
              "glue:CreateSession"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/owner": "${aws:userid}"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "owner"
                ]
              }
            }
          },
          {
            "Sid": "AllowGlueTaggingAction",
            "Effect": "Allow",
            "Action": [
              "glue:TagResource"
            ],
            "Resource": "arn:aws:glue:*:*:session/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/owner": "${aws:userid}",
                "aws:RequestTag/owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AllowCompletionActions",
            "Effect": "Allow",
            "Action": [
              "glue:StartCompletion",
              "glue:GetCompletion"
            ],
            "Resource": [
              "arn:aws:glue:*:*:completion/*"
            ]
          },
          {
            "Sid": "AllowGlueActions",
            "Effect": "Allow",
            "Action": [
              "glue:RunStatement",
              "glue:GetStatement",
              "glue:ListStatements",
              "glue:CancelStatement",
              "glue:StopSession",
              "glue:DeleteSession",
              "glue:GetSession"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/owner": "${aws:userid}"
              }
            }
          },
          {
            "Sid": "AllowListSessions",
            "Effect": "Allow",
            "Action": [
              "glue:ListSessions"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DenyTagActions",
            "Effect": "Deny",
            "Action": [
              "glue:UntagResource",
              "tag:TagResources",
              "tag:UntagResources"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "owner"
                ]
              }
            }
          },
          {
            "Sid": "AllowPassRoleActions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AwsGlueSessionServiceRoleUserRestricted*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "glue.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AwsGlueSessionUserRestrictedNotebookPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "NotebokAllowActions0",
            "Effect": "Allow",
            "Action": [
              "glue:CreateSession"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/owner": "${aws:PrincipalTag/owner}"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "owner"
                ]
              }
            }
          },
          {
            "Sid": "AllowGlueTaggingAction",
            "Effect": "Allow",
            "Action": [
              "glue:TagResource"
            ],
            "Resource": "arn:aws:glue:*:*:session/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/owner": "${aws:PrincipalTag/owner}",
                "aws:RequestTag/owner": "${aws:PrincipalTag/owner}"
              }
            }
          },
          {
            "Sid": "NotebookAllowActions1",
            "Effect": "Allow",
            "Action": [
              "glue:StartCompletion",
              "glue:GetCompletion"
            ],
            "Resource": [
              "arn:aws:glue:*:*:completion/*"
            ]
          },
          {
            "Sid": "NotebookAllowActions2",
            "Effect": "Allow",
            "Action": [
              "glue:RunStatement",
              "glue:GetStatement",
              "glue:ListStatements",
              "glue:CancelStatement",
              "glue:StopSession",
              "glue:DeleteSession",
              "glue:GetSession"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/owner": "${aws:PrincipalTag/owner}"
              }
            }
          },
          {
            "Sid": "NotebookAllowActions3",
            "Effect": "Allow",
            "Action": [
              "glue:ListSessions"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "NotebookDenyActions",
            "Effect": "Deny",
            "Action": [
              "glue:UntagResource",
              "tag:TagResources",
              "tag:UntagResources"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "owner"
                ]
              }
            }
          },
          {
            "Sid": "NotebookPassRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AwsGlueSessionServiceRoleUserRestrictedForNotebook*",
              "arn:aws:iam::*:role/AwsGlueSessionUserRestrictedNotebookServiceRole*"
            ],
            "Condition": {
              "StringLike": {
                "iam:PassedToService": [
                  "glue.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AwsGlueSessionUserRestrictedNotebookServiceRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "glue:*",
            "Resource": [
              "arn:aws:glue:*:*:catalog/*",
              "arn:aws:glue:*:*:database/*",
              "arn:aws:glue:*:*:table/*",
              "arn:aws:glue:*:*:tableVersion/*",
              "arn:aws:glue:*:*:connection/*",
              "arn:aws:glue:*:*:userDefinedFunction/*",
              "arn:aws:glue:*:*:devEndpoint/*",
              "arn:aws:glue:*:*:job/*",
              "arn:aws:glue:*:*:trigger/*",
              "arn:aws:glue:*:*:crawler/*",
              "arn:aws:glue:*:*:workflow/*",
              "arn:aws:glue:*:*:mlTransform/*",
              "arn:aws:glue:*:*:registry/*",
              "arn:aws:glue:*:*:schema/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:CreateSession"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/owner": "${aws:PrincipalTag/owner}"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "owner"
                ]
              }
            }
          },
          {
            "Sid": "AllowGlueTaggingAction",
            "Effect": "Allow",
            "Action": [
              "glue:TagResource"
            ],
            "Resource": "arn:aws:glue:*:*:session/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/owner": "${aws:PrincipalTag/owner}",
                "aws:RequestTag/owner": "${aws:PrincipalTag/owner}"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:RunStatement",
              "glue:GetStatement",
              "glue:ListStatements",
              "glue:CancelStatement",
              "glue:StopSession",
              "glue:DeleteSession",
              "glue:GetSession"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/owner": "${aws:PrincipalTag/owner}"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "glue:ListSessions"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Deny",
            "Action": [
              "glue:UntagResource",
              "tag:TagResources",
              "tag:UntagResources"
            ],
            "Resource": [
              "arn:aws:glue:*:*:session/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "owner"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-glue-*/*",
              "arn:aws:s3:::*/*aws-glue-*/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::crawler-public*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:/aws-glue/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws-glue-service-resource"
                ]
              }
            },
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubOrchestratorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ApplicationDiscoveryService",
            "Effect": "Allow",
            "Action": [
              "discovery:DescribeConfigurations",
              "discovery:ListConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LaunchWizard",
            "Effect": "Allow",
            "Action": [
              "launchwizard:ListProvisionedApps",
              "launchwizard:DescribeProvisionedApp",
              "launchwizard:ListDeployments",
              "launchwizard:GetDeployment"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2instances",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ec2MGNLaunchTemplate",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplateVersion",
              "ec2:ModifyLaunchTemplate"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "mgn.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ec2LaunchTemplates",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeLaunchTemplates"
            ],
            "Resource": "*"
          },
          {
            "Sid": "getHomeRegion",
            "Action": [
              "mgh:GetHomeRegion"
            ],
            "Effect": "Allow",
            "Resource": "*"
          },
          {
            "Sid": "SSMcommand",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:GetCommandInvocation",
              "ssm:CancelCommand"
            ],
            "Resource": [
              "arn:aws:ssm:*::document/AWS-RunRemoteScript",
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:s3:::aws-migrationhub-orchestrator-*",
              "arn:aws:s3:::migrationhub-orchestrator-*"
            ]
          },
          {
            "Sid": "SSM",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeInstanceInformation",
              "ssm:GetCommandInvocation"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "s3GetObject",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::migrationhub-orchestrator-*",
              "arn:aws:s3:::migrationhub-orchestrator-*/*"
            ]
          },
          {
            "Sid": "EventBridge",
            "Effect": "Allow",
            "Action": [
              "events:PutTargets",
              "events:DescribeRule",
              "events:DeleteRule",
              "events:PutRule",
              "events:RemoveTargets"
            ],
            "Resource": "arn:aws:events:*:*:rule/MigrationHubOrchestratorManagedRule*"
          },
          {
            "Sid": "MGN",
            "Effect": "Allow",
            "Action": [
              "mgn:GetReplicationConfiguration",
              "mgn:GetLaunchConfiguration",
              "mgn:StartCutover",
              "mgn:FinalizeCutover",
              "mgn:StartTest",
              "mgn:UpdateReplicationConfiguration",
              "mgn:DescribeSourceServers",
              "mgn:MarkAsArchived",
              "mgn:ChangeServerLifeCycleState"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ec2DescribeImportImage",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImportImageTasks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "s3ListBucket",
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": "arn:aws:s3:::*",
            "Condition": {
              "StringLike": {
                "s3:prefix": "migrationhub-orchestrator-vmie-*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubOrchestratorPlugin",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:PutObject",
              "s3:GetObject",
              "s3:GetBucketAcl"
            ],
            "Resource": "arn:aws:s3:::migrationhub-orchestrator-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "execute-api:Invoke",
              "execute-api:ManageConnections"
            ],
            "Resource": [
              "arn:aws:execute-api:*:*:*/prod/*/put-log-data",
              "arn:aws:execute-api:*:*:*/prod/*/put-metric-data"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "migrationhub-orchestrator:RegisterPlugin",
              "migrationhub-orchestrator:GetMessage",
              "migrationhub-orchestrator:SendMessage"
            ],
            "Resource": "arn:aws:migrationhub-orchestrator:*:*:*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:migrationhub-orchestrator-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubOrchestratorConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "MHO",
            "Effect": "Allow",
            "Action": [
              "migrationhub-orchestrator:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ListAllMyBuckets",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Sid": "S3MHO",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::migrationhub-orchestrator-*",
              "arn:aws:s3:::migrationhub-orchestrator-*/*"
            ]
          },
          {
            "Sid": "ListSecrets",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Configuration",
            "Effect": "Allow",
            "Action": [
              "discovery:DescribeConfigurations",
              "discovery:ListConfigurations",
              "discovery:GetDiscoverySummary"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetHomeRegion",
            "Effect": "Allow",
            "Action": [
              "mgh:GetHomeRegion"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2Describe",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KMS",
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMListProfileRole",
            "Effect": "Allow",
            "Action": [
              "iam:ListInstanceProfiles",
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ECS",
            "Effect": "Allow",
            "Action": [
              "ecs:ListClusters"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Account",
            "Effect": "Allow",
            "Action": [
              "account:ListRegions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "migrationhub-orchestrator.amazonaws.com"
              }
            }
          },
          {
            "Sid": "GetRole",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/migrationhub-orchestrator.amazonaws.com/AWSServiceRoleForMigrationHubOrchestrator*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubOrchestratorInstanceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:migrationhub-orchestrator-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::migrationhub-orchestrator-*",
              "arn:aws:s3:::aws-migrationhub-orchestrator-*/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "MonitronServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/monitron/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEMRServerlessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EC2PolicyStatement",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeRouteTables"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchPolicyStatement",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/EMRServerless",
                  "AWS/Usage"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBudgetsActions_RolePolicyForResourceAdministrationWithSSM",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceStatus",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "rds:DescribeDBInstances",
              "rds:StartDBInstance",
              "rds:StopDBInstance"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:automation-definition/AWS-StartEC2Instance:*",
              "arn:aws:ssm:*:*:automation-definition/AWS-StopEC2Instance:*",
              "arn:aws:ssm:*:*:automation-definition/AWS-StartRdsInstance:*",
              "arn:aws:ssm:*:*:automation-definition/AWS-StopRdsInstance:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryStagingAccountPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSStagingAccountPolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:DescribeSourceServers",
              "drs:DescribeRecoverySnapshots",
              "drs:CreateConvertedSnapshotForDrs",
              "drs:GetReplicationConfiguration",
              "drs:DescribeJobs",
              "drs:DescribeJobLogItems"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSStagingAccountPolicy2",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifySnapshotAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringEquals": {
                "ec2:Add/userId": "${aws:SourceIdentity}"
              },
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryEc2InstancePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSEc2InstancePolicy1",
            "Effect": "Allow",
            "Action": [
              "drs:GetAgentInstallationAssetsForDrs",
              "drs:SendClientLogsForDrs",
              "drs:SendClientMetricsForDrs",
              "drs:CreateSourceServerForDrs",
              "drs:CreateSourceNetwork"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSEc2InstancePolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:TagResource"
            ],
            "Resource": "arn:aws:drs:*:*:source-server/*",
            "Condition": {
              "StringEquals": {
                "drs:CreateAction": "CreateSourceServerForDrs"
              }
            }
          },
          {
            "Sid": "DRSEc2InstancePolicy3",
            "Effect": "Allow",
            "Action": [
              "drs:TagResource"
            ],
            "Resource": "arn:aws:drs:*:*:source-network/*",
            "Condition": {
              "StringEquals": {
                "drs:CreateAction": "CreateSourceNetwork"
              }
            }
          },
          {
            "Sid": "DRSEc2InstancePolicy4",
            "Effect": "Allow",
            "Action": [
              "drs:SendAgentMetricsForDrs",
              "drs:SendAgentLogsForDrs",
              "drs:UpdateAgentSourcePropertiesForDrs",
              "drs:UpdateAgentReplicationInfoForDrs",
              "drs:UpdateAgentConversionInfoForDrs",
              "drs:GetAgentCommandForDrs",
              "drs:GetAgentConfirmedResumeInfoForDrs",
              "drs:GetAgentRuntimeConfigurationForDrs",
              "drs:UpdateAgentBacklogForDrs",
              "drs:GetAgentReplicationInfoForDrs"
            ],
            "Resource": "arn:aws:drs:*:*:source-server/*"
          },
          {
            "Sid": "DRSEc2InstancePolicy5",
            "Effect": "Allow",
            "Action": [
              "sts:AssumeRole",
              "sts:TagSession"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/DRSCrossAccountAgentAuthorizedRole_*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/SourceInstanceARN": "${ec2:SourceInstanceARN}"
              },
              "ForAnyValue:StringEquals": {
                "sts:TransitiveTagKeys": "SourceInstanceARN"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationAgentPolicy_v2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mgn:SendAgentMetricsForMgn",
              "mgn:SendAgentLogsForMgn",
              "mgn:UpdateAgentSourcePropertiesForMgn",
              "mgn:UpdateAgentReplicationInfoForMgn",
              "mgn:UpdateAgentConversionInfoForMgn",
              "mgn:GetAgentCommandForMgn",
              "mgn:GetAgentConfirmedResumeInfoForMgn",
              "mgn:GetAgentRuntimeConfigurationForMgn",
              "mgn:UpdateAgentBacklogForMgn",
              "mgn:GetAgentReplicationInfoForMgn",
              "mgn:IssueClientCertificateForMgn"
            ],
            "Resource": "arn:aws:mgn:*:*:source-server/${aws:SourceIdentity}"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSM2ServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSubnets",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:DescribeNetworkInterfaces",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DescribeMountTargets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:DeregisterTargets"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "fsx:DescribeFileSystems"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/M2"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSManagedServicesDeploymentToolkitPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AMSCDKToolkitS3Permissions",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteBucketPolicy",
              "s3:DeleteObject",
              "s3:DeleteObjectTagging",
              "s3:DeleteObjectVersion",
              "s3:DeleteObjectVersionTagging",
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:GetBucketPolicy",
              "s3:GetBucketVersioning",
              "s3:GetLifecycleConfiguration",
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:GetObjectAttributes",
              "s3:GetObjectLegalHold",
              "s3:GetObjectRetention",
              "s3:GetObjectTagging",
              "s3:GetObjectVersion",
              "s3:GetObjectVersionAcl",
              "s3:GetObjectVersionAttributes",
              "s3:GetObjectVersionForReplication",
              "s3:GetObjectVersionTagging",
              "s3:GetObjectVersionTorrent",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:PutBucketAcl",
              "s3:PutBucketLogging",
              "s3:PutBucketObjectLockConfiguration",
              "s3:PutBucketPolicy",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketTagging",
              "s3:PutBucketVersioning",
              "s3:PutEncryptionConfiguration",
              "s3:PutLifecycleConfiguration"
            ],
            "Resource": "arn:aws:s3:::ams-cdktoolkit*"
          },
          {
            "Sid": "AMSCDKToolkitCloudFormationPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResources",
              "cloudformation:DescribeStacks",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:GetTemplate",
              "cloudformation:GetTemplateSummary",
              "cloudformation:TagResource",
              "cloudformation:UntagResource",
              "cloudformation:UpdateTerminationProtection"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/ams-cdk-toolkit*"
          },
          {
            "Sid": "AMSCDKToolkitECRPermissions",
            "Effect": "Allow",
            "Action": [
              "ecr:BatchGetRepositoryScanningConfiguration",
              "ecr:CreateRepository",
              "ecr:DeleteLifecyclePolicy",
              "ecr:DeleteRepository",
              "ecr:DeleteRepositoryPolicy",
              "ecr:DescribeRepositories",
              "ecr:GetLifecyclePolicy",
              "ecr:ListTagsForResource",
              "ecr:PutImageScanningConfiguration",
              "ecr:PutImageTagMutability",
              "ecr:PutLifecyclePolicy",
              "ecr:SetRepositoryPolicy",
              "ecr:TagResource",
              "ecr:UntagResource"
            ],
            "Resource": "arn:aws:ecr:*:*:repository/ams-cdktoolkit*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCloudTrail_ReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudtrail:Get*",
              "cloudtrail:Describe*",
              "cloudtrail:List*",
              "cloudtrail:LookupEvents"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationAgentInstallationPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mgn:GetAgentInstallationAssetsForMgn",
              "mgn:SendClientMetricsForMgn",
              "mgn:SendClientLogsForMgn",
              "mgn:RegisterAgentForMgn",
              "mgn:VerifyClientRoleForMgn"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgn:IssueClientCertificateForMgn"
            ],
            "Resource": "arn:aws:mgn:*:*:source-server/*"
          },
          {
            "Effect": "Allow",
            "Action": "mgn:TagResource",
            "Resource": "arn:aws:mgn:*:*:source-server/*",
            "Condition": {
              "StringEquals": {
                "mgn:CreateAction": "RegisterAgentForMgn"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSWellArchitectedOrganizationsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListAccountsForParent",
              "organizations:ListChildren",
              "organizations:ListParents",
              "organizations:ListRoots"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSRolesAnywhereServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/RolesAnywhere",
                  "AWS/Usage"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:GetCertificateAuthorityCertificate",
              "acm-pca:DescribeCertificateAuthority"
            ],
            "Resource": "arn:aws:acm-pca:*:*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSNetworkManagerCloudWANServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTransitGatewayRouteTableAnnouncement",
              "ec2:DeleteTransitGatewayRouteTableAnnouncement",
              "ec2:EnableTransitGatewayRouteTablePropagation",
              "ec2:DisableTransitGatewayRouteTablePropagation"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGuardDutyMalwareProtectionServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DescribeAndListPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "ec2:DescribeSnapshots",
              "ecs:ListClusters",
              "ecs:ListContainerInstances",
              "ecs:ListTasks",
              "ecs:DescribeTasks",
              "eks:DescribeCluster"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateSnapshotVolumeConditionalStatement",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshot",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/GuardDutyExcluded": "true"
              }
            }
          },
          {
            "Sid": "CreateSnapshotConditionalStatement",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshot",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "GuardDutyScanId"
              }
            }
          },
          {
            "Sid": "CreateTagsPermission",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:*/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateSnapshot"
              }
            }
          },
          {
            "Sid": "AddTagsToSnapshotPermission",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/GuardDutyScanId": "*"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "GuardDutyExcluded",
                  "GuardDutyFindingDetected"
                ]
              }
            }
          },
          {
            "Sid": "DeleteAndShareSnapshotPermission",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot",
              "ec2:ModifySnapshotAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/GuardDutyScanId": "*"
              },
              "Null": {
                "aws:ResourceTag/GuardDutyExcluded": "true"
              }
            }
          },
          {
            "Sid": "PreventPublicAccessToSnapshotPermission",
            "Effect": "Deny",
            "Action": [
              "ec2:ModifySnapshotAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringEquals": {
                "ec2:Add/group": "all"
              }
            }
          },
          {
            "Sid": "CreateGrantPermission",
            "Effect": "Allow",
            "Action": "kms:CreateGrant",
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/GuardDutyExcluded": "true"
              },
              "StringLike": {
                "kms:EncryptionContext:aws:ebs:id": "snap-*"
              },
              "ForAllValues:StringEquals": {
                "kms:GrantOperations": [
                  "Decrypt",
                  "CreateGrant",
                  "GenerateDataKeyWithoutPlaintext",
                  "ReEncryptFrom",
                  "ReEncryptTo",
                  "RetireGrant",
                  "DescribeKey"
                ]
              },
              "Bool": {
                "kms:GrantIsForAWSResource": "true"
              }
            }
          },
          {
            "Sid": "ShareSnapshotKMSPermission",
            "Effect": "Allow",
            "Action": [
              "kms:ReEncryptTo",
              "kms:ReEncryptFrom"
            ],
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "ec2.*.amazonaws.com"
              },
              "Null": {
                "aws:ResourceTag/GuardDutyExcluded": "true"
              }
            }
          },
          {
            "Sid": "DescribeKeyPermission",
            "Effect": "Allow",
            "Action": "kms:DescribeKey",
            "Resource": "arn:aws:kms:*:*:key/*"
          },
          {
            "Sid": "GuardDutyLogGroupPermission",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups",
              "logs:CreateLogGroup",
              "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/guardduty/*"
          },
          {
            "Sid": "GuardDutyLogStreamPermission",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/guardduty/*:log-stream:*"
          },
          {
            "Sid": "EBSDirectAPIPermissions",
            "Effect": "Allow",
            "Action": [
              "ebs:GetSnapshotBlock",
              "ebs:ListSnapshotBlocks"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/GuardDutyScanId": "*"
              },
              "Null": {
                "aws:ResourceTag/GuardDutyExcluded": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSVendorInsightsVendorFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "aws-marketplace:DescribeEntity",
            "Resource": "arn:aws:aws-marketplace:*:*:*/SaaSProduct/*"
          },
          {
            "Effect": "Allow",
            "Action": "aws-marketplace:ListEntities",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "vendor-insights:CreateDataSource",
              "vendor-insights:UpdateDataSource",
              "vendor-insights:DeleteDataSource",
              "vendor-insights:GetDataSource",
              "vendor-insights:ListDataSources",
              "vendor-insights:CreateSecurityProfile",
              "vendor-insights:ListSecurityProfiles",
              "vendor-insights:GetSecurityProfile",
              "vendor-insights:AssociateDataSource",
              "vendor-insights:DisassociateDataSource",
              "vendor-insights:UpdateSecurityProfile",
              "vendor-insights:ActivateSecurityProfile",
              "vendor-insights:DeactivateSecurityProfile",
              "vendor-insights:UpdateSecurityProfileSnapshotCreationConfiguration",
              "vendor-insights:UpdateSecurityProfileSnapshotReleaseConfiguration",
              "vendor-insights:ListSecurityProfileSnapshots",
              "vendor-insights:GetSecurityProfileSnapshot",
              "vendor-insights:TagResource",
              "vendor-insights:UntagResource",
              "vendor-insights:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:AcceptAgreementApprovalRequest",
              "aws-marketplace:RejectAgreementApprovalRequest",
              "aws-marketplace:GetAgreementApprovalRequest",
              "aws-marketplace:ListAgreementApprovalRequests",
              "aws-marketplace:CancelAgreement",
              "aws-marketplace:SearchAgreements"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws-marketplace:AgreementType": "VendorInsightsAgreement"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "artifact:GetReport",
              "artifact:GetReportMetadata",
              "artifact:GetTermForReport",
              "artifact:ListReports"
            ],
            "Resource": "arn:aws:artifact:*::report/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSVendorInsightsVendorReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "aws-marketplace:DescribeEntity",
            "Resource": "arn:aws:aws-marketplace:*:*:*/SaaSProduct/*"
          },
          {
            "Effect": "Allow",
            "Action": "aws-marketplace:ListEntities",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "vendor-insights:GetDataSource",
              "vendor-insights:ListDataSources",
              "vendor-insights:ListSecurityProfiles",
              "vendor-insights:GetSecurityProfile",
              "vendor-insights:GetSecurityProfileSnapshot",
              "vendor-insights:ListSecurityProfileSnapshots",
              "vendor-insights:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "artifact:GetReport",
              "artifact:GetReportMetadata",
              "artifact:GetTermForReport",
              "artifact:ListReports"
            ],
            "Resource": "arn:aws:artifact:*::report/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSVendorInsightsAssessorFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "vendor-insights:GetProfileAccessTerms",
              "vendor-insights:ListEntitledSecurityProfiles",
              "vendor-insights:GetEntitledSecurityProfileSnapshot",
              "vendor-insights:ListEntitledSecurityProfileSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:CreateAgreementRequest",
              "aws-marketplace:GetAgreementRequest",
              "aws-marketplace:AcceptAgreementRequest",
              "aws-marketplace:CancelAgreementRequest",
              "aws-marketplace:ListAgreementRequests",
              "aws-marketplace:SearchAgreements",
              "aws-marketplace:CancelAgreement"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws-marketplace:AgreementType": "VendorInsightsAgreement"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "artifact:GetReport",
              "artifact:GetReportMetadata",
              "artifact:GetTermForReport",
              "artifact:ListReports"
            ],
            "Resource": "arn:aws:artifact:*::report/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSVendorInsightsAssessorReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "vendor-insights:ListEntitledSecurityProfiles",
              "vendor-insights:GetEntitledSecurityProfileSnapshot",
              "vendor-insights:ListEntitledSecurityProfileSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "artifact:GetReport",
              "artifact:GetReportMetadata",
              "artifact:GetTermForReport",
              "artifact:ListReports"
            ],
            "Resource": "arn:aws:artifact:*::report/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLicenseManagerUserSubscriptionsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DSReadPermissions",
            "Effect": "Allow",
            "Action": [
              "ds:DescribeDirectories",
              "ds:GetAuthorizedApplicationDetails"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMReadPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:GetInventory",
              "ssm:GetCommandInvocation",
              "ssm:ListCommandInvocations",
              "ssm:DescribeInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2ReadPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeVpcPeeringConnections"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2WritePermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances",
              "ec2:CreateTags"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:productCode": [
                  "bz0vcy31ooqlzk5tsash4r1ik",
                  "d44g89hc0gp9jdzm99rznthpw",
                  "77yzkpa7kvee1y1tt7wnsdwoc"
                ]
              }
            },
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Sid": "SSMDocumentExecutionPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ssm:*::document/AWS-RunPowerShellScript"
            ]
          },
          {
            "Sid": "SSMInstanceExecutionPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSLicenseManager": "UserSubscriptions"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSTrustedAdvisorPriorityFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "trustedadvisor:DescribeAccount*",
              "trustedadvisor:DescribeOrganization",
              "trustedadvisor:DescribeRisk*",
              "trustedadvisor:DownloadRisk",
              "trustedadvisor:UpdateRiskStatus",
              "trustedadvisor:DescribeNotificationConfigurations",
              "trustedadvisor:UpdateNotificationConfigurations",
              "trustedadvisor:DeleteNotificationConfigurationForDelegatedAdmin",
              "trustedadvisor:SetOrganizationAccess"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators",
              "organizations:EnableAWSServiceAccess",
              "organizations:DisableAWSServiceAccess"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "reporting.trustedadvisor.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/reporting.trustedadvisor.amazonaws.com/AWSServiceRoleForTrustedAdvisorReporting",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "reporting.trustedadvisor.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator"
            ],
            "Resource": "arn:aws:organizations::*:*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "reporting.trustedadvisor.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSTrustedAdvisorPriorityReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "trustedadvisor:DescribeAccount*",
              "trustedadvisor:DescribeOrganization",
              "trustedadvisor:DescribeRisk*",
              "trustedadvisor:DownloadRisk",
              "trustedadvisor:DescribeNotificationConfigurations"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "reporting.trustedadvisor.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationDiscoveryAgentlessCollectorAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "arsenal:RegisterOnPremisesAgent"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr-public:DescribeImages"
            ],
            "Resource": "arn:aws:ecr-public::446372222237:repository/6e5498e4-8c31-4f57-9991-13b4b992ff7b"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr-public:GetAuthorizationToken"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "mgh:GetHomeRegion"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "sts:GetServiceBearerToken"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSupportAppFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "servicequotas:GetRequestedServiceQuotaChange",
              "servicequotas:GetServiceQuota",
              "servicequotas:RequestServiceQuotaIncrease",
              "support:AddAttachmentsToSet",
              "support:AddCommunicationToCase",
              "support:CreateCase",
              "support:DescribeCases",
              "support:DescribeCommunications",
              "support:DescribeSeverityLevels",
              "support:InitiateChatForCase",
              "support:ResolveCase"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "servicequotas.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSupportAppReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "support:DescribeCases",
              "support:DescribeCommunications"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSLocalOutpostServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeRouteTables",
              "ec2:DescribeAddresses",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribePlacementGroups"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/eks-local:controlplane-name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:subnet/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/eks-local:controlplane-name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/eks-local:controlplane-name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/eks-local:controlplane-name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:launch-template/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:placement-group/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup",
              "ec2:TerminateInstances",
              "ec2:GetConsoleOutput"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/eks-local:controlplane-name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "kubernetes.io/cluster/*",
                  "eks*"
                ]
              },
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateNetworkInterface",
                  "CreateSecurityGroup",
                  "RunInstances"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "kubernetes.io/cluster/*",
                  "eks*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/eks-local:controlplane-name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "secretsmanager:DeleteSecret",
            "Resource": "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/eks-local:controlplane-name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "secretsmanager:DescribeSecret",
            "Resource": "arn:aws:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:GetInstanceProfile",
              "iam:DeleteInstanceProfile",
              "iam:RemoveRoleFromInstanceProfile"
            ],
            "Resource": "arn:aws:iam::*:instance-profile/eks-local-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ssm:resourceTag/eks-local:controlplane-name": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartSession"
            ],
            "Resource": "arn:aws:ssm:*::document/AmazonEKS-ControlPlaneInstanceProxy"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:ResumeSession",
              "ssm:TerminateSession"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "outposts:GetOutpost"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerCanvasForecastAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-*/Canvas*",
              "arn:aws:s3:::sagemaker-*/canvas*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEKSLocalOutpostClusterPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeRouteTables",
              "ec2:DescribeTags",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeInstanceTypes",
              "ec2messages:AcknowledgeMessage",
              "ec2messages:DeleteMessage",
              "ec2messages:FailMessage",
              "ec2messages:GetEndpoint",
              "ec2messages:GetMessages",
              "ec2messages:SendReply",
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel",
              "ssm:DescribeInstanceProperties",
              "ssm:DescribeDocumentParameters",
              "ssm:ListInstanceAssociations",
              "ssm:RegisterManagedInstance",
              "ssm:UpdateInstanceInformation",
              "ssm:UpdateInstanceAssociationStatus",
              "ssm:PutComplianceItems",
              "ssm:PutInventory",
              "ecr-public:GetAuthorizationToken",
              "ecr:GetAuthorizationToken"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecr:GetDownloadUrlForLayer",
              "ecr:BatchGetImage"
            ],
            "Resource": [
              "arn:aws:ecr:*:*:repository/eks/*",
              "arn:aws:ecr:*:*:repository/bottlerocket-admin",
              "arn:aws:ecr:*:*:repository/bottlerocket-control-eks",
              "arn:aws:ecr:*:*:repository/diagnostics-collector-eks",
              "arn:aws:ecr:*:*:repository/kubelet-config-updater"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue",
              "secretsmanager:DeleteSecret"
            ],
            "Resource": "arn:*:secretsmanager:*:*:secret:eks-local.cluster.x-k8s.io/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:DescribeLogStreams"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/eks/*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "GroundTruthSyntheticConsoleReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker-groundtruth-synthetic:List*",
              "sagemaker-groundtruth-synthetic:Get*",
              "s3:ListBucket"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "GroundTruthSyntheticConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "sagemaker-groundtruth-synthetic:*",
              "s3:ListBucket"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSSMManagedEC2InstanceDefaultPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowSSMAgentPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAssociation",
              "ssm:GetDeployablePatchSnapshotForInstance",
              "ssm:GetDocument",
              "ssm:DescribeDocument",
              "ssm:GetManifest",
              "ssm:ListAssociations",
              "ssm:ListInstanceAssociations",
              "ssm:PutInventory",
              "ssm:PutComplianceItems",
              "ssm:PutConfigurePackageResult",
              "ssm:UpdateAssociationStatus",
              "ssm:UpdateInstanceAssociationStatus",
              "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSSMChannelMessaging",
            "Effect": "Allow",
            "Action": [
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSSMLegacyMessaging",
            "Effect": "Allow",
            "Action": [
              "ec2messages:AcknowledgeMessage",
              "ec2messages:DeleteMessage",
              "ec2messages:FailMessage",
              "ec2messages:GetEndpoint",
              "ec2messages:GetMessages",
              "ec2messages:SendReply"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerCanvasFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SageMakerUserDetailsAndPackageOperations",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeDomain",
              "sagemaker:DescribeUserProfile",
              "sagemaker:ListTags",
              "sagemaker:ListModelPackages",
              "sagemaker:ListModelPackageGroups",
              "sagemaker:ListEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SageMakerPackageGroupOperations",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateModelPackageGroup",
              "sagemaker:CreateModelPackage",
              "sagemaker:DescribeModelPackageGroup",
              "sagemaker:DescribeModelPackage"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:model-package/*",
              "arn:aws:sagemaker:*:*:model-package-group/*"
            ]
          },
          {
            "Sid": "SageMakerTrainingOperations",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateCompilationJob",
              "sagemaker:CreateEndpoint",
              "sagemaker:CreateEndpointConfig",
              "sagemaker:CreateModel",
              "sagemaker:CreateProcessingJob",
              "sagemaker:CreateAutoMLJob",
              "sagemaker:CreateAutoMLJobV2",
              "sagemaker:CreateTrainingJob",
              "sagemaker:CreateTransformJob",
              "sagemaker:DeleteEndpoint",
              "sagemaker:DescribeCompilationJob",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:DescribeModel",
              "sagemaker:DescribeProcessingJob",
              "sagemaker:DescribeAutoMLJob",
              "sagemaker:DescribeAutoMLJobV2",
              "sagemaker:DescribeTrainingJob",
              "sagemaker:DescribeTransformJob",
              "sagemaker:ListCandidatesForAutoMLJob",
              "sagemaker:StopAutoMLJob",
              "sagemaker:StopTrainingJob",
              "sagemaker:StopTransformJob",
              "sagemaker:AddTags",
              "sagemaker:DeleteApp"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:*Canvas*",
              "arn:aws:sagemaker:*:*:*canvas*",
              "arn:aws:sagemaker:*:*:*model-compilation-*"
            ]
          },
          {
            "Sid": "SageMakerHostingOperations",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DeleteEndpointConfig",
              "sagemaker:DeleteModel",
              "sagemaker:InvokeEndpoint",
              "sagemaker:UpdateEndpointWeightsAndCapacities",
              "sagemaker:InvokeEndpointAsync"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:*Canvas*",
              "arn:aws:sagemaker:*:*:*canvas*"
            ]
          },
          {
            "Sid": "EC2VPCOperation",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServices"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ECROperations",
            "Effect": "Allow",
            "Action": [
              "ecr:BatchGetImage",
              "ecr:GetDownloadUrlForLayer",
              "ecr:GetAuthorizationToken"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMGetOperations",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Sid": "IAMPassOperation",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "sagemaker.amazonaws.com"
              }
            }
          },
          {
            "Sid": "LoggingOperation",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/sagemaker/*"
          },
          {
            "Sid": "S3Operations",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:CreateBucket",
              "s3:GetBucketCors",
              "s3:GetBucketLocation"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Sid": "ReadSageMakerJumpstartArtifacts",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": [
              "arn:aws:s3:::jumpstart-cache-prod-us-west-2/*",
              "arn:aws:s3:::jumpstart-cache-prod-us-east-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-us-east-2/*",
              "arn:aws:s3:::jumpstart-cache-prod-eu-west-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-eu-central-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-south-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-2/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-2/*"
            ]
          },
          {
            "Sid": "S3ListOperations",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GlueOperations",
            "Effect": "Allow",
            "Action": "glue:SearchTables",
            "Resource": [
              "arn:aws:glue:*:*:table/*/*",
              "arn:aws:glue:*:*:database/*",
              "arn:aws:glue:*:*:catalog"
            ]
          },
          {
            "Sid": "SecretsManagerARNBasedOperation",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:CreateSecret",
              "secretsmanager:PutResourcePolicy"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
            ]
          },
          {
            "Sid": "SecretManagerTagBasedOperation",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/SageMaker": "true"
              }
            }
          },
          {
            "Sid": "RedshiftOperations",
            "Effect": "Allow",
            "Action": [
              "redshift-data:ExecuteStatement",
              "redshift-data:DescribeStatement",
              "redshift-data:CancelStatement",
              "redshift-data:GetStatementResult",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables",
              "redshift-data:DescribeTable"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RedshiftGetCredentialsOperation",
            "Effect": "Allow",
            "Action": [
              "redshift:GetClusterCredentials"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
              "arn:aws:redshift:*:*:dbname:*"
            ]
          },
          {
            "Sid": "ForecastOperations",
            "Effect": "Allow",
            "Action": [
              "forecast:CreateExplainabilityExport",
              "forecast:CreateExplainability",
              "forecast:CreateForecastEndpoint",
              "forecast:CreateAutoPredictor",
              "forecast:CreateDatasetImportJob",
              "forecast:CreateDatasetGroup",
              "forecast:CreateDataset",
              "forecast:CreateForecast",
              "forecast:CreateForecastExportJob",
              "forecast:CreatePredictorBacktestExportJob",
              "forecast:CreatePredictor",
              "forecast:DescribeExplainabilityExport",
              "forecast:DescribeExplainability",
              "forecast:DescribeAutoPredictor",
              "forecast:DescribeForecastEndpoint",
              "forecast:DescribeDatasetImportJob",
              "forecast:DescribeDataset",
              "forecast:DescribeForecast",
              "forecast:DescribeForecastExportJob",
              "forecast:DescribePredictorBacktestExportJob",
              "forecast:GetAccuracyMetrics",
              "forecast:InvokeForecastEndpoint",
              "forecast:GetRecentForecastContext",
              "forecast:DescribePredictor",
              "forecast:TagResource",
              "forecast:DeleteResourceTree"
            ],
            "Resource": [
              "arn:aws:forecast:*:*:*Canvas*"
            ]
          },
          {
            "Sid": "RDSOperation",
            "Effect": "Allow",
            "Action": "rds:DescribeDBInstances",
            "Resource": "*"
          },
          {
            "Sid": "IAMPassOperationForForecast",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "forecast.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AutoscalingOperations",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:RegisterScalableTarget"
            ],
            "Resource": "arn:aws:application-autoscaling:*:*:scalable-target/*",
            "Condition": {
              "StringEquals": {
                "application-autoscaling:service-namespace": "sagemaker",
                "application-autoscaling:scalable-dimension": "sagemaker:variant:DesiredInstanceCount"
              }
            }
          },
          {
            "Sid": "AsyncEndpointOperations",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "sagemaker:DescribeEndpointConfig"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeScalingOperations",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalingActivities"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "SageMakerCloudWatchUpdate",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "application-autoscaling.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AutoscalingSageMakerEndpointOperation",
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AthenaOperation",
            "Action": [
              "athena:ListTableMetadata",
              "athena:ListDataCatalogs",
              "athena:ListDatabases"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "GlueOperation",
            "Action": [
              "glue:GetDatabases",
              "glue:GetPartitions",
              "glue:GetTables"
            ],
            "Effect": "Allow",
            "Resource": [
              "arn:aws:glue:*:*:table/*",
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "QuicksightOperation",
            "Action": [
              "quicksight:ListNamespaces"
            ],
            "Effect": "Allow",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowUseOfKeyInAccount",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/Source": "SageMakerCanvas",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessCreateApplicationOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:CreateApplication",
            "Resource": "arn:aws:emr-serverless:*:*:/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessListApplicationOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:ListApplications",
            "Resource": "arn:aws:emr-serverless:*:*:/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessApplicationOperations",
            "Effect": "Allow",
            "Action": [
              "emr-serverless:UpdateApplication",
              "emr-serverless:StopApplication",
              "emr-serverless:GetApplication",
              "emr-serverless:StartApplication"
            ],
            "Resource": "arn:aws:emr-serverless:*:*:/applications/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessStartJobRunOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:StartJobRun",
            "Resource": "arn:aws:emr-serverless:*:*:/applications/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessListJobRunOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:ListJobRuns",
            "Resource": "arn:aws:emr-serverless:*:*:/applications/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessJobRunOperations",
            "Effect": "Allow",
            "Action": [
              "emr-serverless:GetJobRun",
              "emr-serverless:CancelJobRun"
            ],
            "Resource": "arn:aws:emr-serverless:*:*:/applications/*/jobruns/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessTagResourceOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:TagResource",
            "Resource": "arn:aws:emr-serverless:*:*:/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "IAMPassOperationForEMRServerless",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerCanvasEMRSExecutionAccess-*",
              "arn:aws:iam::*:role/AmazonSageMakerCanvasEMRSExecutionAccess-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "emr-serverless.amazonaws.com",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCloudWatchEvidentlyServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "appconfig:StartDeployment",
            "Resource": [
              "arn:aws:appconfig:*:*:application/*",
              "arn:aws:appconfig:*:*:deploymentstrategy/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/DeployedBy": "Evidently"
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": "appconfig:StartDeployment",
            "Resource": "arn:aws:appconfig:*:*:application/*/configurationprofile/*",
            "Condition": {
              "StringNotEquals": {
                "aws:ResourceTag/Owner": "Evidently"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "appconfig:TagResource",
            "Resource": "arn:aws:appconfig:*:*:application/*/environment/*/deployment/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/DeployedBy": "Evidently"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "appconfig:StopDeployment",
            "Resource": "arn:aws:appconfig:*:*:application/*"
          },
          {
            "Effect": "Deny",
            "Action": "appconfig:StopDeployment",
            "Resource": "arn:aws:appconfig:*:*:application/*/environment/*/deployment/*",
            "Condition": {
              "StringNotEquals": {
                "aws:ResourceTag/DeployedBy": "Evidently"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "appconfig:ListDeployments",
            "Resource": "arn:aws:appconfig:*:*:application/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeviceFarmServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/AWSDeviceFarmManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSDeviceFarmManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:instance/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSDeviceFarmManaged": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTFleetwiseServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/IoTFleetWise"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSupportPlansReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "supportplans:GetSupportPlan",
              "supportplans:GetSupportPlanUpdateStatus"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSupportPlansFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "supportplans:GetSupportPlan",
              "supportplans:GetSupportPlanUpdateStatus",
              "supportplans:StartSupportPlanUpdate",
              "supportplans:CreateSupportPlanSchedule"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AppIntegrationsServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/AppIntegrations"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "appflow:DescribeConnectorEntity",
              "appflow:ListConnectorEntities"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "appflow:DescribeConnectorProfiles",
              "appflow:UseConnectorProfile"
            ],
            "Resource": "arn:aws:appflow:*:*:connector-profile/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "appflow:DeleteFlow",
              "appflow:DescribeFlow",
              "appflow:DescribeFlowExecutionRecords",
              "appflow:StartFlow",
              "appflow:StopFlow",
              "appflow:UpdateFlow"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AppIntegrationsManaged": "true"
              }
            },
            "Resource": "arn:aws:appflow:*:*:flow/FlowCreatedByAppIntegrations-*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "appflow:TagResource"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AppIntegrationsManaged"
                ]
              }
            },
            "Resource": "arn:aws:appflow:*:*:flow/FlowCreatedByAppIntegrations-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonAppStreamPCAAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:IssueCertificate",
              "acm-pca:GetCertificate",
              "acm-pca:DescribeCertificateAuthority"
            ],
            "Resource": "arn:*:acm-pca:*:*:*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/euc-private-ca": "*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSRefactoringToolkitSidecarPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SsmMessagesAccess",
            "Effect": "Allow",
            "Action": [
              "ssmmessages:OpenControlChannel",
              "ssmmessages:CreateControlChannel",
              "ssmmessages:OpenDataChannel",
              "ssmmessages:CreateDataChannel"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3GetObjectAccess",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::*/refactoringtoolkit*"
          },
          {
            "Sid": "S3ListBucketAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::*",
            "Condition": {
              "StringLike": {
                "s3:prefix": "refactoringtoolkit*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSRefactoringToolkitFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "App2ContainerAccess",
            "Effect": "Allow",
            "Action": [
              "a2c:GetContainerizationJobDetails",
              "a2c:GetDeploymentJobDetails",
              "a2c:StartContainerizationJob",
              "a2c:StartDeploymentJob"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudformationExecutionAccess",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateChangeSet",
              "cloudformation:CreateStack",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DescribeStackEvents",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:UpdateStack",
              "cloudformation:TagResource",
              "cloudformation:UntagResource"
            ],
            "Resource": [
              "arn:*:cloudformation:*:*:stack/a2c-app-*",
              "arn:*:cloudformation:*:*:stack/a2c-build-*",
              "arn:*:cloudformation:*:*:stack/application-transformation-app-*"
            ]
          },
          {
            "Sid": "CodeBuildCreateAccess",
            "Effect": "Allow",
            "Action": [
              "codebuild:CreateProject",
              "codebuild:UpdateProject"
            ],
            "Resource": "arn:aws:codebuild:*:*:project/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/a2c-generated": "false"
              }
            }
          },
          {
            "Sid": "CodeBuildExecutionAccess",
            "Effect": "Allow",
            "Action": [
              "codebuild:StartBuild"
            ],
            "Resource": "arn:aws:codebuild:*:*:project/*"
          },
          {
            "Sid": "CreateSecurityGroupAccess",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Ec2CreateAccess",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateInternetGateway",
              "ec2:CreateKeyPair",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSubnet",
              "ec2:CreateTags",
              "ec2:CreateVpc",
              "ec2:AuthorizeSecurityGroupIngress"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/a2c-generated": "false"
              }
            }
          },
          {
            "Sid": "Ec2CreateAccessATS",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateInternetGateway",
              "ec2:CreateKeyPair",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSubnet",
              "ec2:CreateTags",
              "ec2:CreateVpc",
              "ec2:AuthorizeSecurityGroupIngress"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/application-transformation": "false"
              }
            }
          },
          {
            "Sid": "Ec2ModifyAccess",
            "Effect": "Allow",
            "Action": [
              "ec2:AssociateRouteTable",
              "ec2:AttachInternetGateway",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:DeleteTags",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:CreateSubnet",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/a2c-generated": "false"
              }
            }
          },
          {
            "Sid": "Ec2ModifyAccessATS",
            "Effect": "Allow",
            "Action": [
              "ec2:AssociateRouteTable",
              "ec2:AttachInternetGateway",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:DeleteTags",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:CreateSubnet",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/application-transformation": "false"
              }
            }
          },
          {
            "Sid": "EcrCreateAccess",
            "Effect": "Allow",
            "Action": [
              "ecr:CreateRepository",
              "ecr:TagResource"
            ],
            "Resource": "arn:*:ecr:*:*:repository/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/a2c-generated": "false"
              }
            }
          },
          {
            "Sid": "EcrCreateAccessATS",
            "Effect": "Allow",
            "Action": [
              "ecr:CreateRepository",
              "ecr:TagResource"
            ],
            "Resource": "arn:*:ecr:*:*:repository/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/application-transformation": "false"
              }
            }
          },
          {
            "Sid": "EcrModifyAccess",
            "Effect": "Allow",
            "Action": [
              "ecr:GetLifecyclePolicy",
              "ecr:GetRepositoryPolicy",
              "ecr:ListImages",
              "ecr:ListTagsForResource",
              "ecr:TagResource",
              "ecr:UntagResource"
            ],
            "Resource": "arn:*:ecr:*:*:repository/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/a2c-generated": "false"
              }
            }
          },
          {
            "Sid": "EcrModifyAccessATS",
            "Effect": "Allow",
            "Action": [
              "ecr:GetLifecyclePolicy",
              "ecr:GetRepositoryPolicy",
              "ecr:ListImages",
              "ecr:ListTagsForResource",
              "ecr:TagResource",
              "ecr:UntagResource"
            ],
            "Resource": "arn:*:ecr:*:*:repository/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/application-transformation": "false"
              }
            }
          },
          {
            "Sid": "EcsCreateAccess",
            "Effect": "Allow",
            "Action": [
              "ecs:CreateCluster",
              "ecs:CreateService",
              "ecs:RegisterTaskDefinition",
              "ecs:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/a2c-generated": "false"
              }
            }
          },
          {
            "Sid": "EcsCreateAccessATS",
            "Effect": "Allow",
            "Action": [
              "ecs:CreateCluster",
              "ecs:CreateService",
              "ecs:RegisterTaskDefinition",
              "ecs:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/application-transformation": "false"
              }
            }
          },
          {
            "Sid": "EcsModifyAccess",
            "Effect": "Allow",
            "Action": [
              "ecs:UpdateService",
              "ecs:TagResource",
              "ecs:UntagResource"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/a2c-generated": "false"
              }
            }
          },
          {
            "Sid": "EcsModifyAccessATS",
            "Effect": "Allow",
            "Action": [
              "ecs:UpdateService",
              "ecs:TagResource",
              "ecs:UntagResource"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/application-transformation": "false"
              }
            }
          },
          {
            "Sid": "EcsReadTaskDefinitionAccess",
            "Effect": "Allow",
            "Action": [
              "ecs:DescribeTaskDefinition"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cloudformation.amazonaws.com"
              }
            }
          },
          {
            "Sid": "EcsExecuteCommandInSidecar",
            "Effect": "Allow",
            "Action": [
              "ecs:ExecuteCommand"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ecs:container-name": "a2c-sidecar"
              }
            }
          },
          {
            "Sid": "EcsExecuteCommandInSidecarATS",
            "Effect": "Allow",
            "Action": [
              "ecs:ExecuteCommand"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ecs:container-name": "application-transformation-sidecar"
              }
            }
          },
          {
            "Sid": "CreateEcsServiceLinkedRoleAccess",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "ecs.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CloudwatchCreateAccess",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:TagResource"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/codebuild/*:*",
              "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
              "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
            ],
            "Condition": {
              "Null": {
                "aws:RequestTag/a2c-generated": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "a2c-generated"
                ]
              }
            }
          },
          {
            "Sid": "CloudwatchCreateAccessATS",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:TagResource"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
              "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
            ],
            "Condition": {
              "Null": {
                "aws:RequestTag/application-transformation": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "application-transformation"
                ]
              }
            }
          },
          {
            "Sid": "CloudwatchGetAccess",
            "Effect": "Allow",
            "Action": [
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/codebuild/*:*",
              "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
              "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/a2c-generated": "false"
              }
            }
          },
          {
            "Sid": "CloudwatchGetAccessATS",
            "Effect": "Allow",
            "Action": [
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/ecs/containerinsights/*:*",
              "arn:aws:logs:*:*:log-group:/aws/ecs/container-logs/*:*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/application-transformation": "false"
              }
            }
          },
          {
            "Sid": "SsmParameterAccess",
            "Effect": "Allow",
            "Action": [
              "ssm:AddTagsToResource",
              "ssm:GetParameters",
              "ssm:PutParameter",
              "ssm:RemoveTagsFromResource"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/a2c-generated-check-ecs-slr-*"
          },
          {
            "Sid": "SsmMessagesAccess",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeSessions",
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3ObjectAccess",
            "Effect": "Allow",
            "Action": [
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::*/refactoringtoolkit*",
              "arn:aws:s3:::*/a2c-generated*",
              "arn:aws:s3:::*/application-transformation*"
            ]
          },
          {
            "Sid": "S3ListAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::*",
            "Condition": {
              "StringLike": {
                "s3:prefix": [
                  "application-transformation",
                  "refactoringtoolkit"
                ]
              }
            }
          },
          {
            "Sid": "ReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks",
              "clouddirectory:ListDirectories",
              "codebuild:BatchGetProjects",
              "codebuild:BatchGetBuilds",
              "ds:DescribeDirectories",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeRegions",
              "ecr:DescribeImages",
              "ecr:DescribeRepositories",
              "ecs:DescribeClusters",
              "ecs:DescribeServices",
              "ecs:DescribeTasks",
              "ecs:ListTagsForResource",
              "ecs:ListTasks",
              "iam:ListRoles",
              "s3:GetBucketLocation",
              "s3:GetBucketVersioning",
              "s3:ListAllMyBuckets",
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetECSSLR",
            "Effect": "Allow",
            "Action": "iam:GetRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
          },
          {
            "Sid": "PortingAssistantFullAccess",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws.portingassistant.dotnet.datastore",
              "arn:aws:s3:::aws.portingassistant.dotnet.datastore/*"
            ]
          },
          {
            "Sid": "ApplicationTransformationAccess",
            "Effect": "Allow",
            "Action": [
              "application-transformation:StartPortingCompatibilityAssessment",
              "application-transformation:GetPortingCompatibilityAssessment",
              "application-transformation:StartPortingRecommendationAssessment",
              "application-transformation:GetPortingRecommendationAssessment",
              "application-transformation:PutLogData",
              "application-transformation:PutMetricData",
              "application-transformation:StartContainerization",
              "application-transformation:GetContainerization",
              "application-transformation:StartDeployment",
              "application-transformation:GetDeployment"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KmsAccess",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:Encrypt",
              "kms:DescribeKey",
              "kms:GenerateDataKey"
            ],
            "Resource": "arn:aws:kms:*::*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "kms:ResourceAliases": "alias/application-transformation*"
              }
            }
          },
          {
            "Sid": "EcrPushAccess",
            "Effect": "Allow",
            "Action": [
              "ecr:InitiateLayerUpload",
              "ecr:PutImage",
              "ecr:UploadLayerPart",
              "ecr:CompleteLayerUpload",
              "ecr:BatchCheckLayerAvailability",
              "ecr:GetDownloadUrlForLayer"
            ],
            "Resource": "arn:*:ecr:*:*:repository/*",
            "Condition": {
              "Null": {
                "ecr:ResourceTag/application-transformation": "false"
              }
            }
          },
          {
            "Sid": "EcrAuthAccess",
            "Effect": "Allow",
            "Action": [
              "ecr:GetAuthorizationToken"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KmsCreateGrantAccess",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "arn:aws:kms:*::*",
            "Condition": {
              "Bool": {
                "kms:GrantIsForAWSResource": true
              },
              "ForAnyValue:StringLike": {
                "kms:ResourceAliases": "alias/application-transformation*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceExplorerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudTrailEventsAccess",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:CreateServiceLinkedChannel",
              "cloudtrail:GetServiceLinkedChannel"
            ],
            "Resource": [
              "arn:aws:cloudtrail:*:*:channel/aws-service-channel/resource-explorer-2/*"
            ]
          },
          {
            "Sid": "ApiGatewayAccess",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*/deployments"
            ]
          },
          {
            "Sid": "ResourceInventoryAccess",
            "Effect": "Allow",
            "Action": [
              "access-analyzer:ListAnalyzers",
              "acm-pca:ListCertificateAuthorities",
              "amplify:ListApps",
              "amplify:ListBackendEnvironments",
              "amplify:ListBranches",
              "amplify:ListDomainAssociations",
              "amplifyuibuilder:ListComponents",
              "amplifyuibuilder:ListThemes",
              "app-integrations:ListEventIntegrations",
              "apprunner:ListServices",
              "apprunner:ListVpcConnectors",
              "appstream:DescribeAppBlocks",
              "appstream:DescribeApplications",
              "appstream:DescribeFleets",
              "appstream:DescribeImageBuilders",
              "appstream:DescribeStacks",
              "appsync:ListGraphqlApis",
              "aps:ListRuleGroupsNamespaces",
              "aps:ListWorkspaces",
              "athena:ListDataCatalogs",
              "athena:ListWorkGroups",
              "autoscaling:DescribeAutoScalingGroups",
              "backup:ListBackupPlans",
              "backup:ListReportPlans",
              "batch:DescribeComputeEnvironments",
              "batch:DescribeJobQueues",
              "batch:ListSchedulingPolicies",
              "cloudformation:ListStacks",
              "cloudformation:ListStackSets",
              "cloudfront:ListCachePolicies",
              "cloudfront:ListCloudFrontOriginAccessIdentities",
              "cloudfront:ListDistributions",
              "cloudfront:ListFieldLevelEncryptionConfigs",
              "cloudfront:ListFieldLevelEncryptionProfiles",
              "cloudfront:ListFunctions",
              "cloudfront:ListOriginAccessControls",
              "cloudfront:ListOriginRequestPolicies",
              "cloudfront:ListRealtimeLogConfigs",
              "cloudfront:ListResponseHeadersPolicies",
              "cloudtrail:ListTrails",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:DescribeInsightRules",
              "cloudwatch:ListDashboards",
              "cloudwatch:ListMetricStreams",
              "codeartifact:ListDomains",
              "codeartifact:ListRepositories",
              "codebuild:ListProjects",
              "codecommit:ListRepositories",
              "codeguru-profiler:ListProfilingGroups",
              "codepipeline:ListPipelines",
              "codestar-connections:ListConnections",
              "cognito-identity:ListIdentityPools",
              "cognito-idp:ListUserPools",
              "databrew:ListDatasets",
              "databrew:ListRecipes",
              "databrew:ListRulesets",
              "detective:ListGraphs",
              "ds:DescribeDirectories",
              "dynamodb:ListStreams",
              "dynamodb:ListTables",
              "ec2:DescribeAddresses",
              "ec2:DescribeCapacityReservationFleets",
              "ec2:DescribeCapacityReservations",
              "ec2:DescribeCarrierGateways",
              "ec2:DescribeClientVpnEndpoints",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeEgressOnlyInternetGateways",
              "ec2:DescribeElasticGpus",
              "ec2:DescribeExportImageTasks",
              "ec2:DescribeExportTasks",
              "ec2:DescribeFleets",
              "ec2:DescribeFlowLogs",
              "ec2:DescribeFpgaImages",
              "ec2:DescribeHostReservations",
              "ec2:DescribeHosts",
              "ec2:DescribeImages",
              "ec2:DescribeImportImageTasks",
              "ec2:DescribeImportSnapshotTasks",
              "ec2:DescribeInstanceEventWindows",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeIpamPools",
              "ec2:DescribeIpams",
              "ec2:DescribeIpamScopes",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeManagedPrefixLists",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
              "ec2:DescribeNetworkInsightsAccessScopes",
              "ec2:DescribeNetworkInsightsAnalyses",
              "ec2:DescribeNetworkInsightsPaths",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePlacementGroups",
              "ec2:DescribePublicIpv4Pools",
              "ec2:DescribeReservedInstances",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSpotFleetRequests",
              "ec2:DescribeSpotInstanceRequests",
              "ec2:DescribeSubnets",
              "ec2:DescribeTrafficMirrorFilters",
              "ec2:DescribeTrafficMirrorSessions",
              "ec2:DescribeTrafficMirrorTargets",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayConnectPeers",
              "ec2:DescribeTransitGatewayMulticastDomains",
              "ec2:DescribeTransitGatewayPolicyTables",
              "ec2:DescribeTransitGatewayRouteTableAnnouncements",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeVerifiedAccessEndpoints",
              "ec2:DescribeVerifiedAccessGroups",
              "ec2:DescribeVerifiedAccessInstances",
              "ec2:DescribeVerifiedAccessTrustProviders",
              "ec2:DescribeVolumes",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:GetSubnetCidrReservations",
              "ecr:DescribeRepositories",
              "ecr-public:DescribeRepositories",
              "ecs:DescribeCapacityProviders",
              "ecs:DescribeServices",
              "ecs:ListClusters",
              "ecs:ListContainerInstances",
              "ecs:ListServices",
              "ecs:ListTaskDefinitions",
              "ecs:ListTasks",
              "elasticache:DescribeCacheClusters",
              "elasticache:DescribeCacheParameterGroups",
              "elasticache:DescribeCacheSecurityGroups",
              "elasticache:DescribeCacheSubnetGroups",
              "elasticache:DescribeGlobalReplicationGroups",
              "elasticache:DescribeReplicationGroups",
              "elasticache:DescribeReservedCacheNodes",
              "elasticache:DescribeSnapshots",
              "elasticache:DescribeUserGroups",
              "elasticache:DescribeUsers",
              "elasticbeanstalk:DescribeApplications",
              "elasticbeanstalk:DescribeApplicationVersions",
              "elasticbeanstalk:DescribeEnvironments",
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeFileSystems",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTargetGroups",
              "emr-serverless:ListApplications",
              "es:ListDomainNames",
              "events:ListEventBuses",
              "events:ListRules",
              "evidently:ListExperiments",
              "evidently:ListFeatures",
              "evidently:ListLaunches",
              "evidently:ListProjects",
              "finspace:ListEnvironments",
              "firehose:ListDeliveryStreams",
              "fis:ListExperimentTemplates",
              "forecast:ListDatasetGroups",
              "forecast:ListDatasets",
              "frauddetector:GetDetectors",
              "frauddetector:GetEntityTypes",
              "frauddetector:GetEventTypes",
              "frauddetector:GetLabels",
              "frauddetector:GetOutcomes",
              "frauddetector:GetVariables",
              "gamelift:ListAliases",
              "geo:ListPlaceIndexes",
              "geo:ListTrackers",
              "greengrass:ListComponents",
              "globalaccelerator:ListAccelerators",
              "globalaccelerator:ListEndpointGroups",
              "globalaccelerator:ListListeners",
              "glue:GetDatabases",
              "glue:GetJobs",
              "glue:GetTables",
              "glue:GetTriggers",
              "greengrass:ListComponentVersions",
              "greengrass:ListGroups",
              "healthlake:ListFHIRDatastores",
              "iam:ListGroups",
              "iam:ListInstanceProfiles",
              "iam:ListOpenIDConnectProviders",
              "iam:ListPolicies",
              "iam:ListRoles",
              "iam:ListSAMLProviders",
              "iam:ListServerCertificates",
              "iam:ListUsers",
              "iam:ListVirtualMFADevices",
              "imagebuilder:ListComponentBuildVersions",
              "imagebuilder:ListComponents",
              "imagebuilder:ListContainerRecipes",
              "imagebuilder:ListDistributionConfigurations",
              "imagebuilder:ListImageBuildVersions",
              "imagebuilder:ListImagePipelines",
              "imagebuilder:ListImageRecipes",
              "imagebuilder:ListImages",
              "imagebuilder:ListInfrastructureConfigurations",
              "iotanalytics:ListChannels",
              "iotanalytics:ListDatasets",
              "iotanalytics:ListDatastores",
              "iotanalytics:ListPipelines",
              "iotevents:ListAlarmModels",
              "iotevents:ListDetectorModels",
              "iotevents:ListInputs",
              "iot:ListJobTemplates",
              "iot:ListAuthorizers",
              "iot:ListMitigationActions",
              "iot:ListPolicies",
              "iot:ListProvisioningTemplates",
              "iot:ListRoleAliases",
              "iot:ListSecurityProfiles",
              "iot:ListThings",
              "iot:ListTopicRuleDestinations",
              "iot:ListTopicRules",
              "iotsitewise:ListAssetModels",
              "iotsitewise:ListAssets",
              "iotsitewise:ListGateways",
              "iottwinmaker:ListComponentTypes",
              "iottwinmaker:ListEntities",
              "iottwinmaker:ListScenes",
              "iottwinmaker:ListWorkspaces",
              "kafka:ListConfigurations",
              "kms:ListKeys",
              "ivs:ListChannels",
              "ivs:ListStreamKeys",
              "kafka:ListClusters",
              "kinesis:ListStreamConsumers",
              "kinesis:ListStreams",
              "kinesisanalytics:ListApplications",
              "kinesisvideo:ListStreams",
              "lambda:ListAliases",
              "lambda:ListCodeSigningConfigs",
              "lambda:ListEventSourceMappings",
              "lambda:ListFunctions",
              "lambda:ListLayers",
              "lambda:ListLayerVersions",
              "lex:ListBots",
              "lex:ListBotAliases",
              "logs:DescribeDestinations",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "lookoutmetrics:ListAlerts",
              "lookoutvision:ListProjects",
              "mediapackage:ListChannels",
              "mediapackage:ListOriginEndpoints",
              "mediapackage-vod:ListPackagingConfigurations",
              "mediapackage-vod:ListPackagingGroups",
              "mq:ListBrokers",
              "mediatailor:ListPlaybackConfigurations",
              "memorydb:DescribeACLs",
              "memorydb:DescribeClusters",
              "memorydb:DescribeParameterGroups",
              "memorydb:DescribeUsers",
              "mobiletargeting:GetApps",
              "mobiletargeting:GetSegments",
              "mobiletargeting:ListTemplates",
              "network-firewall:ListFirewallPolicies",
              "network-firewall:ListFirewalls",
              "networkmanager:DescribeGlobalNetworks",
              "networkmanager:GetDevices",
              "networkmanager:GetLinks",
              "networkmanager:ListAttachments",
              "networkmanager:ListCoreNetworks",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators",
              "panorama:ListPackages",
              "personalize:ListDatasetGroups",
              "personalize:ListDatasets",
              "personalize:ListSchemas",
              "qldb:ListJournalKinesisStreamsForLedger",
              "qldb:ListLedgers",
              "rds:DescribeBlueGreenDeployments",
              "rds:DescribeDBClusterEndpoints",
              "rds:DescribeDBClusterParameterGroups",
              "rds:DescribeDBClusters",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBEngineVersions",
              "rds:DescribeDBInstanceAutomatedBackups",
              "rds:DescribeDBInstances",
              "rds:DescribeDBParameterGroups",
              "rds:DescribeDBProxies",
              "rds:DescribeDBProxyEndpoints",
              "rds:DescribeDBSecurityGroups",
              "rds:DescribeDBSnapshots",
              "rds:DescribeDBSubnetGroups",
              "rds:DescribeEventSubscriptions",
              "rds:DescribeGlobalClusters",
              "rds:DescribeOptionGroups",
              "rds:DescribeReservedDBInstances",
              "redshift:DescribeClusterParameterGroups",
              "redshift:DescribeClusters",
              "redshift:DescribeClusterSnapshots",
              "redshift:DescribeClusterSubnetGroups",
              "redshift:DescribeEventSubscriptions",
              "redshift:DescribeSnapshotCopyGrants",
              "redshift:DescribeSnapshotSchedules",
              "redshift:DescribeUsageLimits",
              "refactor-spaces:ListApplications",
              "refactor-spaces:ListEnvironments",
              "refactor-spaces:ListRoutes",
              "refactor-spaces:ListServices",
              "rekognition:DescribeProjects",
              "resiliencehub:ListApps",
              "resiliencehub:ListResiliencyPolicies",
              "resource-explorer-2:GetIndex",
              "resource-explorer-2:ListIndexes",
              "resource-explorer-2:ListViews",
              "resource-groups:ListGroups",
              "route53:ListHealthChecks",
              "route53:ListHostedZones",
              "route53-recovery-readiness:ListRecoveryGroups",
              "route53-recovery-readiness:ListResourceSets",
              "route53resolver:ListFirewallDomainLists",
              "route53resolver:ListFirewallRuleGroups",
              "route53resolver:ListResolverEndpoints",
              "route53resolver:ListResolverRules",
              "s3:GetBucketLocation",
              "s3:ListAccessPoints",
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:ListStorageLensConfigurations",
              "sagemaker:ListModels",
              "sagemaker:ListNotebookInstances",
              "secretsmanager:ListSecrets",
              "servicecatalog:ListApplications",
              "servicecatalog:ListAttributeGroups",
              "signer:ListSigningProfiles",
              "sns:ListTopics",
              "sqs:ListQueues",
              "ssm:DescribeAutomationExecutions",
              "ssm:DescribeInstanceInformation",
              "ssm:DescribeMaintenanceWindows",
              "ssm:DescribeMaintenanceWindowTargets",
              "ssm:DescribeMaintenanceWindowTasks",
              "ssm:DescribeParameters",
              "ssm:DescribePatchBaselines",
              "ssm-incidents:ListResponsePlans",
              "ssm:ListAssociations",
              "ssm:ListDocuments",
              "ssm:ListInventoryEntries",
              "ssm:ListResourceDataSync",
              "states:ListActivities",
              "states:ListStateMachines",
              "timestream:ListDatabases",
              "wisdom:listAssistantAssociations",
              "wisdom:ListAssistants",
              "wisdom:listKnowledgeBases"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFaultInjectionSimulatorSSMAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:automation-definition/*:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:GetAutomationExecution",
              "ssm:StopAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:automation-execution/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:document/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:ListCommands",
              "ssm:CancelCommand"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFaultInjectionSimulatorRDSAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowFailover",
            "Effect": "Allow",
            "Action": [
              "rds:FailoverDBCluster"
            ],
            "Resource": [
              "arn:aws:rds:*:*:cluster:*"
            ]
          },
          {
            "Sid": "AllowReboot",
            "Effect": "Allow",
            "Action": [
              "rds:RebootDBInstance"
            ],
            "Resource": [
              "arn:aws:rds:*:*:db:*"
            ]
          },
          {
            "Sid": "DescribeResources",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TargetResolutionByTags",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFaultInjectionSimulatorNetworkAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateTagsOnNetworkAcl",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:network-acl/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkAcl",
                "aws:RequestTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateNetworkAcl",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkAcl",
            "Resource": "arn:aws:ec2:*:*:network-acl/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "DeleteNetworkAcl",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkAclEntry",
              "ec2:DeleteNetworkAcl"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-acl/*",
              "arn:aws:ec2:*:*:vpc/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateNetworkAclOnVpc",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkAcl",
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Sid": "VpcActions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeManagedPrefixLists",
              "ec2:DescribeSubnets",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeRouteTables",
              "ec2:DescribeTransitGatewayPeeringAttachments",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGateways"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ReplaceNetworkAclAssociation",
            "Effect": "Allow",
            "Action": "ec2:ReplaceNetworkAclAssociation",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:network-acl/*"
            ]
          },
          {
            "Sid": "GetManagedPrefixListEntries",
            "Effect": "Allow",
            "Action": "ec2:GetManagedPrefixListEntries",
            "Resource": "arn:aws:ec2:*:*:prefix-list/*"
          },
          {
            "Sid": "CreateRouteTable",
            "Effect": "Allow",
            "Action": "ec2:CreateRouteTable",
            "Resource": "arn:aws:ec2:*:*:route-table/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateRouteTableOnVpc",
            "Effect": "Allow",
            "Action": "ec2:CreateRouteTable",
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Sid": "CreateTagsOnRouteTable",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:route-table/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateRouteTable",
                "aws:RequestTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateTagsOnNetworkInterface",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface",
                "aws:RequestTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateTagsOnPrefixList",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:prefix-list/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateManagedPrefixList",
                "aws:RequestTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "DeleteRouteTable",
            "Effect": "Allow",
            "Action": "ec2:DeleteRouteTable",
            "Resource": [
              "arn:aws:ec2:*:*:route-table/*",
              "arn:aws:ec2:*:*:vpc/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateRoute",
            "Effect": "Allow",
            "Action": "ec2:CreateRoute",
            "Resource": "arn:aws:ec2:*:*:route-table/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateNetworkInterface",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateNetworkInterfaceOnSubnet",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "DeleteNetworkInterface",
            "Effect": "Allow",
            "Action": "ec2:DeleteNetworkInterface",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "CreateManagedPrefixList",
            "Effect": "Allow",
            "Action": "ec2:CreateManagedPrefixList",
            "Resource": "arn:aws:ec2:*:*:prefix-list/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "DeleteManagedPrefixList",
            "Effect": "Allow",
            "Action": "ec2:DeleteManagedPrefixList",
            "Resource": "arn:aws:ec2:*:*:prefix-list/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "ModifyManagedPrefixList",
            "Effect": "Allow",
            "Action": "ec2:ModifyManagedPrefixList",
            "Resource": "arn:aws:ec2:*:*:prefix-list/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "ReplaceRouteTableAssociation",
            "Effect": "Allow",
            "Action": "ec2:ReplaceRouteTableAssociation",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:route-table/*"
            ]
          },
          {
            "Sid": "AssociateRouteTable",
            "Effect": "Allow",
            "Action": "ec2:AssociateRouteTable",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:route-table/*"
            ]
          },
          {
            "Sid": "DisassociateRouteTable",
            "Effect": "Allow",
            "Action": "ec2:DisassociateRouteTable",
            "Resource": [
              "arn:aws:ec2:*:*:route-table/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "DisassociateRouteTableOnSubnet",
            "Effect": "Allow",
            "Action": "ec2:DisassociateRouteTable",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*"
            ]
          },
          {
            "Sid": "ModifyVpcEndpointOnRouteTable",
            "Effect": "Allow",
            "Action": "ec2:ModifyVpcEndpoint",
            "Resource": [
              "arn:aws:ec2:*:*:route-table/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/managedByFIS": "true"
              }
            }
          },
          {
            "Sid": "ModifyVpcEndpoint",
            "Effect": "Allow",
            "Action": "ec2:ModifyVpcEndpoint",
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*"
            ]
          },
          {
            "Sid": "TransitGatewayRouteTableAssociation",
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateTransitGatewayRouteTable",
              "ec2:AssociateTransitGatewayRouteTable"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:transit-gateway-route-table/*",
              "arn:aws:ec2:*:*:transit-gateway-attachment/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFaultInjectionSimulatorEKSAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DescribeInstances",
            "Effect": "Allow",
            "Action": "ec2:DescribeInstances",
            "Resource": "*"
          },
          {
            "Sid": "TerminateInstances",
            "Effect": "Allow",
            "Action": "ec2:TerminateInstances",
            "Resource": "arn:aws:ec2:*:*:instance/*"
          },
          {
            "Sid": "DescribeSubnets",
            "Effect": "Allow",
            "Action": "ec2:DescribeSubnets",
            "Resource": "*"
          },
          {
            "Sid": "DescribeCluster",
            "Effect": "Allow",
            "Action": "eks:DescribeCluster",
            "Resource": "arn:aws:eks:*:*:cluster/*"
          },
          {
            "Sid": "DescribeNodeGroup",
            "Effect": "Allow",
            "Action": "eks:DescribeNodegroup",
            "Resource": "arn:aws:eks:*:*:nodegroup/*"
          },
          {
            "Sid": "TargetResolutionByTags",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFaultInjectionSimulatorECSAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Clusters",
            "Effect": "Allow",
            "Action": [
              "ecs:DescribeClusters",
              "ecs:ListContainerInstances"
            ],
            "Resource": [
              "arn:aws:ecs:*:*:cluster/*"
            ]
          },
          {
            "Sid": "Tasks",
            "Effect": "Allow",
            "Action": [
              "ecs:DescribeTasks",
              "ecs:StopTask"
            ],
            "Resource": [
              "arn:aws:ecs:*:*:task/*/*"
            ]
          },
          {
            "Sid": "ContainerInstances",
            "Effect": "Allow",
            "Action": [
              "ecs:UpdateContainerInstancesState"
            ],
            "Resource": [
              "arn:aws:ecs:*:*:container-instance/*/*"
            ]
          },
          {
            "Sid": "ListTasks",
            "Effect": "Allow",
            "Action": [
              "ecs:ListTasks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMSend",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": [
              "arn:aws:ssm:*:*:managed-instance/*",
              "arn:aws:ssm:*:*:document/*"
            ]
          },
          {
            "Sid": "SSMList",
            "Effect": "Allow",
            "Action": [
              "ssm:ListCommands",
              "ssm:CancelCommand"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TargetResolutionByTags",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFaultInjectionSimulatorEC2Access",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowEc2Actions",
            "Effect": "Allow",
            "Action": [
              "ec2:RebootInstances",
              "ec2:SendSpotInstanceInterruptions",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*"
          },
          {
            "Sid": "AllowEc2InstancesWithEncryptedEbsVolumes",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": [
              "arn:aws:kms:*:*:key/*"
            ],
            "Condition": {
              "StringLike": {
                "kms:ViaService": "ec2.*.amazonaws.com"
              },
              "Bool": {
                "kms:GrantIsForAWSResource": "true"
              }
            }
          },
          {
            "Sid": "AllowSSMSendOnEc2",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:document/*"
            ]
          },
          {
            "Sid": "AllowSSMStopOnEc2",
            "Effect": "Allow",
            "Action": [
              "ssm:CancelCommand",
              "ssm:ListCommands"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeInstances",
            "Effect": "Allow",
            "Action": "ec2:DescribeInstances",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceExplorerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ResourceExplorerReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "resource-explorer-2:Get*",
              "resource-explorer-2:List*",
              "resource-explorer-2:Search",
              "resource-explorer-2:BatchGetView",
              "ec2:DescribeRegions",
              "ram:ListResources",
              "ram:GetResourceShares",
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceExplorerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ResourceExplorerConsoleFullAccess",
            "Effect": "Allow",
            "Action": [
              "resource-explorer-2:*",
              "ec2:DescribeRegions",
              "ram:ListResources",
              "ram:GetResourceShares",
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ResourceExplorerSLRAccess",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "resource-explorer-2.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkspacesPCAAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:IssueCertificate",
              "acm-pca:GetCertificate",
              "acm-pca:DescribeCertificateAuthority"
            ],
            "Resource": "arn:*:acm-pca:*:*:*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/euc-private-ca": "*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGrafanaServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcs",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AmazonGrafanaManaged"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              },
              "Null": {
                "aws:RequestTag/AmazonGrafanaManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ec2:DeleteNetworkInterface",
            "Resource": "*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AmazonGrafanaManaged": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSProtonCodeBuildProvisioningBasicAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/codebuild/AWSProton-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "proton:NotifyResourceDeploymentStatusChange",
            "Resource": "arn:aws:proton:*:*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSProtonCodeBuildProvisioningServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:CreateChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:DeleteStack",
              "cloudformation:UpdateStack",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackEvents",
              "cloudformation:ListStackResources"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/AWSProton-CodeBuild-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "codebuild:CreateProject",
              "codebuild:DeleteProject",
              "codebuild:UpdateProject",
              "codebuild:StartBuild",
              "codebuild:StopBuild",
              "codebuild:RetryBuild",
              "codebuild:BatchGetBuilds",
              "codebuild:BatchGetProjects"
            ],
            "Resource": "arn:aws:codebuild:*:*:project/AWSProton*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": "codebuild.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicequotas:GetServiceQuota"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgeSchedulerFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "scheduler:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "scheduler.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgeSchedulerReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "scheduler:ListSchedules",
              "scheduler:ListScheduleGroups",
              "scheduler:GetSchedule",
              "scheduler:GetScheduleGroup",
              "scheduler:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupRestoreAccessForSAPHANA",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "backup:Get*",
              "backup:List*",
              "backup:Describe*",
              "backup:StartBackupJob",
              "backup:StartRestoreJob"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm-sap:GetOperation",
              "ssm-sap:ListDatabases"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm-sap:BackupDatabase",
              "ssm-sap:RestoreDatabase",
              "ssm-sap:UpdateHanaBackupSettings",
              "ssm-sap:GetDatabase",
              "ssm-sap:ListTagsForResource"
            ],
            "Resource": "arn:aws:ssm-sap:*:*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupDataTransferAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "backup-storage:StartObject",
              "backup-storage:PutChunk",
              "backup-storage:GetChunk",
              "backup-storage:ListChunks",
              "backup-storage:ListObjects",
              "backup-storage:GetObjectMetadata",
              "backup-storage:NotifyObjectComplete"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogSyncServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ArtifactSyncToServiceCatalog",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:ListProvisioningArtifacts",
              "servicecatalog:DescribeProductAsAdmin",
              "servicecatalog:DeleteProvisioningArtifact",
              "servicecatalog:ListServiceActionsForProvisioningArtifact",
              "servicecatalog:DescribeProvisioningArtifact",
              "servicecatalog:CreateProvisioningArtifact",
              "servicecatalog:UpdateProvisioningArtifact"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AccessArtifactRepositories",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:UseConnection",
              "codeconnections:UseConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ]
          },
          {
            "Sid": "ValidateTemplate",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ValidateTemplate"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSSMForSAPServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DescribeInstanceActions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ssm:GetCommandInvocation",
              "ssm:DescribeInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeInstanceStatus",
            "Effect": "Allow",
            "Action": "ec2:DescribeInstanceStatus",
            "Resource": "*"
          },
          {
            "Sid": "TargetRuleActions",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:PutTargets",
              "events:DescribeRule",
              "events:PutRule",
              "events:RemoveTargets"
            ],
            "Resource": [
              "arn:*:events:*:*:rule/SSMSAPManagedRule*",
              "arn:*:events:*:*:event-bus/default"
            ]
          },
          {
            "Sid": "DocumentActions",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeDocument",
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:*:ssm:*:*:document/AWSSystemsManagerSAP-*",
              "arn:*:ssm:*:*:document/AWSSSMSAP*",
              "arn:*:ssm:*:*:document/AWSSAP*"
            ]
          },
          {
            "Sid": "CustomerSendCommand",
            "Effect": "Allow",
            "Action": "ssm:SendCommand",
            "Resource": "arn:*:ec2:*:*:instance/*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "ssm:resourceTag/SSMForSAPManaged": "True"
              }
            }
          },
          {
            "Sid": "InstanceTagActions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:*:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/awsApplication": "false"
              },
              "StringEqualsIgnoreCase": {
                "ec2:ResourceTag/SSMForSAPManaged": "True"
              }
            }
          },
          {
            "Sid": "DescribeTag",
            "Effect": "Allow",
            "Action": "ec2:DescribeTags",
            "Resource": "*"
          },
          {
            "Sid": "GetApplication",
            "Effect": "Allow",
            "Action": "servicecatalog:GetApplication",
            "Resource": "arn:*:servicecatalog:*:*:*"
          },
          {
            "Sid": "UpdateOrDeleteApplication",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:DeleteApplication",
              "servicecatalog:UpdateApplication"
            ],
            "Resource": "arn:*:servicecatalog:*:*:*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SSMForSAPCreated": "True"
              }
            }
          },
          {
            "Sid": "CreateApplication",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:TagResource",
              "servicecatalog:CreateApplication"
            ],
            "Resource": "arn:*:servicecatalog:*:*:*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/SSMForSAPCreated": "True"
              }
            }
          },
          {
            "Sid": "CreateServiceLinkedRole",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/servicecatalog-appregistry.amazonaws.com/AWSServiceRoleForAWSServiceCatalogAppRegistry",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "servicecatalog-appregistry.amazonaws.com"
              }
            }
          },
          {
            "Sid": "PutMetricData",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/Usage",
                  "AWS/SSMForSAP"
                ]
              }
            }
          },
          {
            "Sid": "CreateAttributeGroup",
            "Effect": "Allow",
            "Action": "servicecatalog:CreateAttributeGroup",
            "Resource": "arn:*:servicecatalog:*:*:/attribute-groups/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/SSMForSAPCreated": "True"
              }
            }
          },
          {
            "Sid": "GetAttributeGroup",
            "Effect": "Allow",
            "Action": "servicecatalog:GetAttributeGroup",
            "Resource": "arn:*:servicecatalog:*:*:/attribute-groups/*"
          },
          {
            "Sid": "DeleteAttributeGroup",
            "Effect": "Allow",
            "Action": "servicecatalog:DeleteAttributeGroup",
            "Resource": "arn:*:servicecatalog:*:*:/attribute-groups/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SSMForSAPCreated": "True"
              }
            }
          },
          {
            "Sid": "AttributeGroupActions",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:AssociateAttributeGroup",
              "servicecatalog:DisassociateAttributeGroup"
            ],
            "Resource": "arn:*:servicecatalog:*:*:*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SSMForSAPCreated": "True"
              }
            }
          },
          {
            "Sid": "ListAssociatedAttributeGroups",
            "Effect": "Allow",
            "Action": "servicecatalog:ListAssociatedAttributeGroups",
            "Resource": "arn:*:servicecatalog:*:*:*"
          },
          {
            "Sid": "CreateGroup",
            "Effect": "Allow",
            "Action": [
              "resource-groups:CreateGroup",
              "resource-groups:Tag"
            ],
            "Resource": "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SSMForSAPCreated": "True"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "SSMForSAPCreated"
                ]
              }
            }
          },
          {
            "Sid": "GetGroup",
            "Effect": "Allow",
            "Action": "resource-groups:GetGroup",
            "Resource": "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*"
          },
          {
            "Sid": "DeleteGroup",
            "Effect": "Allow",
            "Action": "resource-groups:DeleteGroup",
            "Resource": "arn:*:resource-groups:*:*:group/SystemsManagerForSAP-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SSMForSAPCreated": "True"
              }
            }
          },
          {
            "Sid": "CreateAppTagResourceGroup",
            "Effect": "Allow",
            "Action": [
              "resource-groups:CreateGroup"
            ],
            "Resource": "arn:*:resource-groups:*:*:group/AWS_AppRegistry_AppTag_*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/EnableAWSServiceCatalogAppRegistry": "true"
              }
            }
          },
          {
            "Sid": "TagAppTagResourceGroup",
            "Effect": "Allow",
            "Action": [
              "resource-groups:Tag"
            ],
            "Resource": "arn:*:resource-groups:*:*:group/AWS_AppRegistry_AppTag_*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/EnableAWSServiceCatalogAppRegistry": "true"
              }
            }
          },
          {
            "Sid": "GetAppTagResourceGroupConfig",
            "Effect": "Allow",
            "Action": [
              "resource-groups:GetGroupConfiguration"
            ],
            "Resource": [
              "arn:*:resource-groups:*:*:group/AWS_AppRegistry_AppTag_*"
            ]
          },
          {
            "Sid": "StartStopInstances",
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances"
            ],
            "Resource": "arn:*:ec2:*:*:instance/*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "ec2:resourceTag/SSMForSAPManaged": "True"
              }
            }
          },
          {
            "Sid": "SsmSapResourceGroup",
            "Effect": "Allow",
            "Action": [
              "resource-groups:Tag",
              "resource-groups:CreateGroup"
            ],
            "Resource": "arn:aws:resource-groups:*:*:group/SystemsManagerForSAP-*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/SSMForSAPCreated": "True"
              },
              "ArnLike": {
                "aws:RequestTag/awsApplication": "arn:aws:resource-groups:*:*:group/*/*"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "SSMForSAPCreated",
                  "awsApplication"
                ]
              }
            }
          },
          {
            "Sid": "ManageSsmSapTagsOnEc2Instances",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SSMForSAPManaged": "True"
              },
              "ForAllValues:StringLike": {
                "aws:TagKeys": [
                  "SystemsManagerForSAP-*"
                ]
              }
            }
          },
          {
            "Sid": "ManageSsmSapTagsOnEbsVolumes",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": [
                  "SystemsManagerForSAP-*"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSystemsManagerForSAPFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AwsSsmForSapPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm-sap:*"
            ],
            "Resource": "arn:*:ssm-sap:*:*:*"
          },
          {
            "Sid": "AwsSsmForSapServiceRoleCreationPermission",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm-sap.amazonaws.com/AWSServiceRoleForAWSSSMForSAP"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm-sap.amazonaws.com"
              }
            }
          },
          {
            "Sid": "Ec2StartStopPermission",
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "ec2:resourceTag/SSMForSAPManaged": "True"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSystemsManagerForSAPReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm-sap:get*",
              "ssm-sap:list*"
            ],
            "Resource": "arn:*:ssm-sap:*:*:*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchIngestionServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:route-table/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "ec2:CreateVpcEndpoint",
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/OSISManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/OSISManaged": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:vpc-endpoint/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateVpcEndpoint"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/OSIS"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSReachabilityAnalyzerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReachabilityAnalyzerPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources",
              "directconnect:DescribeConnections",
              "directconnect:DescribeDirectConnectGatewayAssociations",
              "directconnect:DescribeDirectConnectGatewayAttachments",
              "directconnect:DescribeDirectConnectGateways",
              "directconnect:DescribeVirtualGateways",
              "directconnect:DescribeVirtualInterfaces",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeManagedPrefixLists",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRegions",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayConnects",
              "ec2:DescribeTransitGatewayPeeringAttachments",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "ec2:SearchTransitGatewayRoutes",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "globalaccelerator:ListAccelerators",
              "globalaccelerator:ListCustomRoutingAccelerators",
              "globalaccelerator:ListCustomRoutingEndpointGroups",
              "globalaccelerator:ListCustomRoutingListeners",
              "globalaccelerator:ListCustomRoutingPortMappings",
              "globalaccelerator:ListEndpointGroups",
              "globalaccelerator:ListListeners",
              "network-firewall:DescribeFirewall",
              "network-firewall:DescribeFirewallPolicy",
              "network-firewall:DescribeResourcePolicy",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:ListFirewallPolicies",
              "network-firewall:ListFirewalls",
              "network-firewall:ListRuleGroups",
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListAccounts",
              "organizations:ListDelegatedAdministrators",
              "resource-groups:ListGroups",
              "resource-groups:ListGroupResources",
              "tag:GetResources",
              "tiros:CreateQuery",
              "tiros:ExtendQuery",
              "tiros:GetQueryAnswer",
              "tiros:GetQueryExplanation",
              "tiros:GetQueryExtensionAccounts"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ApigatewayPermissions",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*/stages",
              "arn:aws:apigateway:*::/restapis/*/stages/*",
              "arn:aws:apigateway:*::/vpclinks"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchServerlessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowAOSSCloudwatchMetrics",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/AOSS"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationSSMAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ssm:GetCommandInvocation",
              "ssm:DescribeInstanceInformation"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "mgn.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:DescribeDocument",
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/*",
              "arn:aws:ssm:*:*:automation-definition/*:*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "mgn.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "mgn.amazonaws.com"
                ]
              },
              "Null": {
                "aws:ResourceTag/AWSApplicationMigrationServiceManaged": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:ListDocuments"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ssm:ListDocumentVersions",
              "ssm:GetDocument"
            ],
            "Resource": "arn:aws:ssm:*:*:document/*"
          }
        ]
      }
    },
    {
      "PolicyName": "OAMReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "oam:Get*",
              "oam:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "OAMFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "oam:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSXrayCrossAccountSharingConfiguration",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "xray:Link",
              "oam:ListLinks"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "oam:DeleteLink",
              "oam:GetLink",
              "oam:TagResource"
            ],
            "Resource": "arn:aws:oam:*:*:link/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "oam:CreateLink",
              "oam:UpdateLink"
            ],
            "Resource": [
              "arn:aws:oam:*:*:link/*",
              "arn:aws:oam:*:*:sink/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchLogsCrossAccountSharingConfiguration",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "logs:Link",
              "oam:ListLinks"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "oam:DeleteLink",
              "oam:GetLink",
              "oam:TagResource"
            ],
            "Resource": "arn:aws:oam:*:*:link/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "oam:CreateLink",
              "oam:UpdateLink"
            ],
            "Resource": [
              "arn:aws:oam:*:*:link/*",
              "arn:aws:oam:*:*:sink/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchCrossAccountSharingConfiguration",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:Link",
              "oam:ListLinks"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "oam:DeleteLink",
              "oam:GetLink",
              "oam:TagResource"
            ],
            "Resource": "arn:aws:oam:*:*:link/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "oam:CreateLink",
              "oam:UpdateLink"
            ],
            "Resource": [
              "arn:aws:oam:*:*:link/*",
              "arn:aws:oam:*:*:sink/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchInternetMonitorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudfront:GetDistribution",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcs",
              "elasticloadbalancing:DescribeLoadBalancers",
              "workspaces:DescribeWorkspaceDirectories"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "arn:aws:logs:*:*:log-group:/aws/internet-monitor/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DescribeLogStreams",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/internet-monitor/*:log-stream:*"
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/InternetMonitor"
              }
            },
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSWickrFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "wickr:*",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSVPCVerifiedAccessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "VerifiedAccessRoleModifyTaggedNetworkInterfaceActions",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/VerifiedAccessManaged": "true"
              }
            }
          },
          {
            "Sid": "VerifiedAccessRoleModifyNetworkInterfaceActions",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*"
          },
          {
            "Sid": "VerifiedAccessRoleNetworkInterfaceActions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "VerifiedAccessRoleTaggedNetworkInterfaceActions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/VerifiedAccessManaged": "true"
              }
            }
          },
          {
            "Sid": "VerifiedAccessRoleTaggingActions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOmicsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "omics:Get*",
              "omics:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "SecurityLakeServiceLinkedRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "OrganizationsPolicies",
            "Effect": "Allow",
            "Action": [
              "organizations:ListAccounts",
              "organizations:DescribeOrganization"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DescribeOrgAccounts",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount"
            ],
            "Resource": [
              "arn:aws:organizations::*:account/o-*/*"
            ]
          },
          {
            "Sid": "AllowManagementOfServiceLinkedChannel",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:CreateServiceLinkedChannel",
              "cloudtrail:DeleteServiceLinkedChannel",
              "cloudtrail:GetServiceLinkedChannel",
              "cloudtrail:UpdateServiceLinkedChannel"
            ],
            "Resource": "arn:aws:cloudtrail:*:*:channel/aws-service-channel/security-lake/*"
          },
          {
            "Sid": "AllowListServiceLinkedChannel",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:ListServiceLinkedChannels"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeAnyVpc",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ListDelegatedAdmins",
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowWafLoggingConfiguration",
            "Effect": "Allow",
            "Action": [
              "wafv2:PutLoggingConfiguration",
              "wafv2:GetLoggingConfiguration",
              "wafv2:ListLoggingConfigurations",
              "wafv2:DeleteLoggingConfiguration"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "wafv2:LogScope": "SecurityLake"
              }
            }
          },
          {
            "Sid": "AllowPutLoggingConfiguration",
            "Effect": "Allow",
            "Action": [
              "wafv2:PutLoggingConfiguration"
            ],
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "wafv2:LogDestinationResource": "arn:aws:s3:::aws-waf-logs-security-lake-*"
              }
            }
          },
          {
            "Sid": "ListWebACLs",
            "Effect": "Allow",
            "Action": [
              "wafv2:ListWebACLs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LogDelivery",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:DeleteLogDelivery"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "wafv2.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSecurityLakePermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowActionsForSecurityLake",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:PutObject",
              "s3:GetBucketLocation",
              "kms:Decrypt",
              "kms:GenerateDataKey",
              "sqs:ReceiveMessage",
              "sqs:ChangeMessageVisibility",
              "sqs:DeleteMessage",
              "sqs:GetQueueUrl",
              "sqs:SendMessage",
              "sqs:GetQueueAttributes",
              "sqs:ListQueues"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DenyActionsForSecurityLake",
            "Effect": "Deny",
            "NotAction": [
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:PutObject",
              "s3:GetBucketLocation",
              "kms:Decrypt",
              "kms:GenerateDataKey",
              "sqs:ReceiveMessage",
              "sqs:ChangeMessageVisibility",
              "sqs:DeleteMessage",
              "sqs:GetQueueUrl",
              "sqs:SendMessage",
              "sqs:GetQueueAttributes",
              "sqs:ListQueues"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DenyActionsNotOnSecurityLakeBucket",
            "Effect": "Deny",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:PutObject",
              "s3:GetBucketLocation"
            ],
            "NotResource": [
              "arn:aws:s3:::aws-security-data-lake*"
            ]
          },
          {
            "Sid": "DenyActionsNotOnSecurityLakeSQS",
            "Effect": "Deny",
            "Action": [
              "sqs:ReceiveMessage",
              "sqs:ChangeMessageVisibility",
              "sqs:DeleteMessage",
              "sqs:GetQueueUrl",
              "sqs:SendMessage",
              "sqs:GetQueueAttributes",
              "sqs:ListQueues"
            ],
            "NotResource": "arn:aws:sqs:*:*:AmazonSecurityLake*"
          },
          {
            "Sid": "DenyActionsNotOnSecurityLakeKMSS3SQS",
            "Effect": "Deny",
            "Action": [
              "kms:Decrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringNotLike": {
                "kms:ViaService": [
                  "s3.*.amazonaws.com",
                  "sqs.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DenyActionsNotOnSecurityLakeKMSForS3",
            "Effect": "Deny",
            "Action": [
              "kms:Decrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "kms:EncryptionContext:aws:s3:arn": "false"
              },
              "StringNotLikeIfExists": {
                "kms:EncryptionContext:aws:s3:arn": [
                  "arn:aws:s3:::aws-security-data-lake*"
                ]
              }
            }
          },
          {
            "Sid": "DenyActionsNotOnSecurityLakeKMSForS3SQS",
            "Effect": "Deny",
            "Action": [
              "kms:Decrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "kms:EncryptionContext:aws:sqs:arn": "false"
              },
              "StringNotLikeIfExists": {
                "kms:EncryptionContext:aws:sqs:arn": [
                  "arn:aws:sqs:*:*:AmazonSecurityLake*"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerModelGovernanceUseAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowSMMonitoringModelCards",
            "Effect": "Allow",
            "Action": [
              "sagemaker:ListMonitoringAlerts",
              "sagemaker:ListMonitoringExecutions",
              "sagemaker:UpdateMonitoringAlert",
              "sagemaker:StartMonitoringSchedule",
              "sagemaker:StopMonitoringSchedule",
              "sagemaker:ListMonitoringAlertHistory",
              "sagemaker:DescribeModelPackage",
              "sagemaker:DescribeModelPackageGroup",
              "sagemaker:CreateModelCard",
              "sagemaker:DescribeModelCard",
              "sagemaker:UpdateModelCard",
              "sagemaker:DeleteModelCard",
              "sagemaker:ListModelCards",
              "sagemaker:ListModelCardVersions",
              "sagemaker:CreateModelCardExportJob",
              "sagemaker:DescribeModelCardExportJob",
              "sagemaker:ListModelCardExportJobs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSMTrainingModelsSearchTags",
            "Effect": "Allow",
            "Action": [
              "sagemaker:ListTrainingJobs",
              "sagemaker:DescribeTrainingJob",
              "sagemaker:ListModels",
              "sagemaker:DescribeModel",
              "sagemaker:Search",
              "sagemaker:AddTags",
              "sagemaker:DeleteTags",
              "sagemaker:ListTags"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowKMSActions",
            "Effect": "Allow",
            "Action": [
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowS3Actions",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:CreateBucket",
              "s3:GetBucketLocation"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Sid": "AllowS3ListActions",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerGeospatialFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "sagemaker-geospatial:*",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "sagemaker-geospatial.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerGeospatialExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:PutObject",
              "s3:GetObject",
              "s3:ListBucketMultipartUploads"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "sagemaker-geospatial:GetEarthObservationJob",
            "Resource": "arn:aws:sagemaker-geospatial:*:*:earth-observation-job/*"
          },
          {
            "Effect": "Allow",
            "Action": "sagemaker-geospatial:GetRasterDataCollection",
            "Resource": "arn:aws:sagemaker-geospatial:*:*:raster-data-collection/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDocDB-ElasticServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/DocDB-Elastic"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSVpcLatticeServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/VpcLattice"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgePipesFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EventBridgePipesActions",
            "Effect": "Allow",
            "Action": "pipes:*",
            "Resource": "*"
          },
          {
            "Sid": "IAMPassRoleAccessForPipes",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringLike": {
                "iam:PassedToService": "pipes.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgePipesReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "pipes:DescribePipe",
              "pipes:ListPipes",
              "pipes:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEventBridgePipesOperatorAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "pipes:DescribePipe",
              "pipes:ListPipes",
              "pipes:ListTagsForResource",
              "pipes:StartPipe",
              "pipes:StopPipe"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForGroundStationDataflowEndpointGroupPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAddresses",
              "ec2:DescribeNetworkInterfaces"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBackupGatewayServiceRolePolicyForVirtualMachineMetadataSync",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ListVmTags",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:ListTagsForResource"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:vm/*"
          },
          {
            "Sid": "VMTagPermissions",
            "Effect": "Allow",
            "Action": [
              "backup-gateway:TagResource",
              "backup-gateway:UntagResource"
            ],
            "Resource": "arn:aws:backup-gateway:*:*:vm/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSManagedServices_DetectiveControlsConfig_ServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:UpdateTermination*",
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStackResources",
              "cloudformation:CreateChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:GetTemplateSummary",
              "cloudformation:DescribeStacks"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/ams-detective-controls-config-recorder",
              "arn:aws:cloudformation:*:*:stack/ams-detective-controls-config-rules-cdk",
              "arn:aws:cloudformation:*:*:stack/ams-detective-controls-infrastructure-cdk"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "config:DescribeAggregationAuthorizations",
              "config:PutAggregationAuthorization",
              "config:TagResource",
              "config:PutConfigRule"
            ],
            "Resource": [
              "arn:aws:config:*:*:aggregation-authorization/540708452589/*",
              "arn:aws:config:*:*::config-rule/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketPolicy",
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteBucketPolicy",
              "s3:DeleteObject",
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:GetBucketAcl",
              "s3:PutObject",
              "s3:PutBucketAcl",
              "s3:PutBucketLogging",
              "s3:PutBucketObjectLockConfiguration",
              "s3:PutBucketPolicy",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketTagging",
              "s3:PutBucketVersioning",
              "s3:PutEncryptionConfiguration"
            ],
            "Resource": "arn:aws:s3:::ams-config-record-bucket-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSLicenseManagerLinuxSubscriptionsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EC2Permissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeRegions"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "OrganizationPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:DescribeAccount",
              "organizations:ListChildren",
              "organizations:ListParents",
              "organizations:ListAccountsForParent",
              "organizations:ListRoots",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "SecretsManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/LicenseManagerLinuxSubscriptions": "enabled",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            },
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:*"
            ]
          },
          {
            "Sid": "KMSPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/LicenseManagerLinuxSubscriptions": "enabled",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              },
              "StringLike": {
                "kms:ViaService": [
                  "secretsmanager.*.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:kms:*:*:key/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSOutpostsAuthorizeServerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "outposts:StartConnection",
              "outposts:GetConnection"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryStagingAccountPolicy_v2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSStagingAccountPolicyv21",
            "Effect": "Allow",
            "Action": [
              "drs:DescribeSourceServers",
              "drs:DescribeRecoverySnapshots",
              "drs:CreateConvertedSnapshotForDrs",
              "drs:GetReplicationConfiguration",
              "drs:DescribeJobs",
              "drs:DescribeJobLogItems"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DRSStagingAccountPolicyv22",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifySnapshotAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringEquals": {
                "ec2:Add/userId": "${aws:SourceIdentity}"
              },
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "DRSStagingAccountPolicyv23",
            "Effect": "Allow",
            "Action": "drs:IssueAgentCertificateForDrs",
            "Resource": [
              "arn:aws:drs:*:*:source-server/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ResourceGroupsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "tag:GetResources",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCleanRoomsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CleanRoomsRead",
            "Effect": "Allow",
            "Action": [
              "cleanrooms:BatchGet*",
              "cleanrooms:Get*",
              "cleanrooms:List*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleDisplayTables",
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetSchema",
              "glue:GetSchemaVersion",
              "glue:BatchGetPartition"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleLogSummaryQueryLogs",
            "Effect": "Allow",
            "Action": [
              "logs:StartQuery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
          },
          {
            "Sid": "ConsoleLogSummaryObtainLogs",
            "Effect": "Allow",
            "Action": [
              "logs:GetQueryResults"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCleanRoomsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CleanRoomsAccess",
            "Effect": "Allow",
            "Action": [
              "cleanrooms:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PassServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/*cleanrooms*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ListRolesToPickServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetRoleAndListRolePoliciesToInspectServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:ListRolePolicies",
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/*cleanrooms*"
          },
          {
            "Sid": "ListPoliciesToInspectServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "iam:ListPolicies"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetPolicyToInspectServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "iam:GetPolicy",
              "iam:GetPolicyVersion"
            ],
            "Resource": "arn:aws:iam::*:policy/*cleanrooms*"
          },
          {
            "Sid": "ConsoleDisplayTables",
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetSchema",
              "glue:GetSchemaVersion",
              "glue:BatchGetPartition"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsolePickQueryResultsBucketListAll",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SetQueryResultsBucket",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListBucketVersions"
            ],
            "Resource": "arn:aws:s3:::cleanrooms-queryresults*"
          },
          {
            "Sid": "WriteQueryResults",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::cleanrooms-queryresults*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ConsoleDisplayQueryResults",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::cleanrooms-queryresults*"
          },
          {
            "Sid": "EstablishLogDeliveries",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:GetLogDelivery",
              "logs:UpdateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:ListLogDeliveries"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SetupLogGroupsDescribe",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SetupLogGroupsCreate",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SetupLogGroupsResourcePolicy",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeResourcePolicies",
              "logs:PutResourcePolicy"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ConsoleLogSummaryQueryLogs",
            "Effect": "Allow",
            "Action": [
              "logs:StartQuery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
          },
          {
            "Sid": "ConsoleLogSummaryObtainLogs",
            "Effect": "Allow",
            "Action": [
              "logs:GetQueryResults"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCleanRoomsFullAccessNoQuerying",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CleanRoomsAccess",
            "Effect": "Allow",
            "Action": [
              "cleanrooms:BatchGetCollaborationAnalysisTemplate",
              "cleanrooms:BatchGetSchema",
              "cleanrooms:BatchGetSchemaAnalysisRule",
              "cleanrooms:CreateAnalysisTemplate",
              "cleanrooms:CreateCollaboration",
              "cleanrooms:CreateConfiguredTable",
              "cleanrooms:CreateConfiguredTableAnalysisRule",
              "cleanrooms:CreateConfiguredTableAssociation",
              "cleanrooms:CreateMembership",
              "cleanrooms:DeleteAnalysisTemplate",
              "cleanrooms:DeleteCollaboration",
              "cleanrooms:DeleteConfiguredTable",
              "cleanrooms:DeleteConfiguredTableAnalysisRule",
              "cleanrooms:DeleteConfiguredTableAssociation",
              "cleanrooms:DeleteMember",
              "cleanrooms:DeleteMembership",
              "cleanrooms:GetAnalysisTemplate",
              "cleanrooms:GetCollaborationAnalysisTemplate",
              "cleanrooms:GetCollaboration",
              "cleanrooms:GetConfiguredTable",
              "cleanrooms:GetConfiguredTableAnalysisRule",
              "cleanrooms:GetConfiguredTableAssociation",
              "cleanrooms:GetMembership",
              "cleanrooms:GetProtectedQuery",
              "cleanrooms:GetSchema",
              "cleanrooms:GetSchemaAnalysisRule",
              "cleanrooms:ListAnalysisTemplates",
              "cleanrooms:ListCollaborationAnalysisTemplates",
              "cleanrooms:ListCollaborations",
              "cleanrooms:ListConfiguredTableAssociations",
              "cleanrooms:ListConfiguredTables",
              "cleanrooms:ListMembers",
              "cleanrooms:ListMemberships",
              "cleanrooms:ListProtectedQueries",
              "cleanrooms:ListSchemas",
              "cleanrooms:UpdateAnalysisTemplate",
              "cleanrooms:UpdateCollaboration",
              "cleanrooms:UpdateConfiguredTable",
              "cleanrooms:UpdateConfiguredTableAnalysisRule",
              "cleanrooms:UpdateConfiguredTableAssociation",
              "cleanrooms:UpdateMembership",
              "cleanrooms:ListTagsForResource",
              "cleanrooms:UntagResource",
              "cleanrooms:TagResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CleanRoomsNoQuerying",
            "Effect": "Deny",
            "Action": [
              "cleanrooms:StartProtectedQuery",
              "cleanrooms:UpdateProtectedQuery"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PassServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/*cleanrooms*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ListRolesToPickServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetRoleAndListRolePoliciesToInspectServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:ListRolePolicies",
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": "arn:aws:iam::*:role/service-role/*cleanrooms*"
          },
          {
            "Sid": "ListPoliciesToInspectServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "iam:ListPolicies"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetPolicyToInspectServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "iam:GetPolicy",
              "iam:GetPolicyVersion"
            ],
            "Resource": "arn:aws:iam::*:policy/*cleanrooms*"
          },
          {
            "Sid": "ConsoleDisplayTables",
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetSchema",
              "glue:GetSchemaVersion",
              "glue:BatchGetPartition"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EstablishLogDeliveries",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:GetLogDelivery",
              "logs:UpdateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:ListLogDeliveries"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SetupLogGroupsDescribe",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SetupLogGroupsCreate",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SetupLogGroupsResourcePolicy",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeResourcePolicies",
              "logs:PutResourcePolicy"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "cleanrooms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ConsoleLogSummaryQueryLogs",
            "Effect": "Allow",
            "Action": [
              "logs:StartQuery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/cleanrooms*"
          },
          {
            "Sid": "ConsoleLogSummaryObtainLogs",
            "Effect": "Allow",
            "Action": [
              "logs:GetQueryResults"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSHealth_EventProcessorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:PutTargets",
              "events:PutRule",
              "events:RemoveTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "event-processor.health.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:ListTargetsByRule"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDetectiveMemberAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "detective:AcceptInvitation",
              "detective:BatchGetMembershipDatasources",
              "detective:DisassociateMembership",
              "detective:GetFreeTrialEligibility",
              "detective:GetPricingInformation",
              "detective:GetUsageInformation",
              "detective:ListInvitations",
              "detective:RejectInvitation"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDetectiveInvestigatorAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DetectivePermissions",
            "Effect": "Allow",
            "Action": [
              "detective:BatchGetGraphMemberDatasources",
              "detective:BatchGetMembershipDatasources",
              "detective:DescribeOrganizationConfiguration",
              "detective:GetFreeTrialEligibility",
              "detective:GetGraphIngestState",
              "detective:GetMembers",
              "detective:GetPricingInformation",
              "detective:GetUsageInformation",
              "detective:ListDatasourcePackages",
              "detective:ListGraphs",
              "detective:ListHighDegreeEntities",
              "detective:ListInvitations",
              "detective:ListMembers",
              "detective:ListOrganizationAdminAccount",
              "detective:ListTagsForResource",
              "detective:SearchGraph",
              "detective:StartInvestigation",
              "detective:GetInvestigation",
              "detective:ListInvestigations",
              "detective:UpdateInvestigationState",
              "detective:ListIndicators",
              "detective:InvokeAssistant"
            ],
            "Resource": "*"
          },
          {
            "Sid": "OrganizationsPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAccounts"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GuardDutyPermissions",
            "Effect": "Allow",
            "Action": [
              "guardduty:ArchiveFindings",
              "guardduty:GetFindings",
              "guardduty:ListDetectors"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SecurityHubPermissions",
            "Effect": "Allow",
            "Action": [
              "securityHub:GetFindings"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "Ec2InstanceConnectEndpoint",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeAvailabilityZones"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:subnet/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "InstanceConnectEndpointId"
                ]
              },
              "Null": {
                "aws:RequestTag/InstanceConnectEndpointId": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/InstanceConnectEndpointId": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "InstanceConnectEndpointId"
                ]
              },
              "Null": {
                "aws:RequestTag/InstanceConnectEndpointId": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/InstanceConnectEndpointId": [
                  "eice-*"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCognitoUnauthenticatedIdentities",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "rum:PutRumEvents",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSManagedServices_EventsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:PutTargets",
              "events:PutRule",
              "events:RemoveTargets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "events.managedservices.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:ListTargetsByRule"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPrivateCAUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
            "Condition": {
              "StringLike": {
                "acm-pca:TemplateArn": [
                  "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
                ]
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
            "Condition": {
              "StringNotLike": {
                "acm-pca:TemplateArn": [
                  "arn:aws:acm-pca:::template/EndEntityCertificate/V*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:RevokeCertificate",
              "acm-pca:GetCertificate",
              "acm-pca:ListPermissions"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:ListCertificateAuthorities"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPrivateCAFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPrivateCAPrivilegedUser",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
            "Condition": {
              "StringLike": {
                "acm-pca:TemplateArn": [
                  "arn:aws:acm-pca:::template/*CACertificate*/V*"
                ]
              }
            }
          },
          {
            "Effect": "Deny",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*",
            "Condition": {
              "StringNotLike": {
                "acm-pca:TemplateArn": [
                  "arn:aws:acm-pca:::template/*CACertificate*/V*"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:RevokeCertificate",
              "acm-pca:GetCertificate",
              "acm-pca:ListPermissions"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:ListCertificateAuthorities"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSPrivateCAReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificate",
            "acm-pca:GetPolicy",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSPrivateCAAuditor",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:CreateCertificateAuthorityAuditReport",
              "acm-pca:DescribeCertificateAuthority",
              "acm-pca:DescribeCertificateAuthorityAuditReport",
              "acm-pca:GetCertificateAuthorityCsr",
              "acm-pca:GetCertificateAuthorityCertificate",
              "acm-pca:GetCertificate",
              "acm-pca:GetPolicy",
              "acm-pca:ListPermissions",
              "acm-pca:ListTags"
            ],
            "Resource": "arn:aws:acm-pca:*:*:certificate-authority/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "acm-pca:ListCertificateAuthorities"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOmicsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "omics:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ram:AcceptResourceShareInvitation",
              "ram:GetResourceShareInvitations"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaLast": "omics.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "omics.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSupplyChainFederationAdminAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSSupplyChain",
            "Effect": "Allow",
            "Action": [
              "scn:*"
            ],
            "Resource": [
              "arn:aws:scn:*:*:instance/*"
            ]
          },
          {
            "Sid": "ChimeAppInstance",
            "Effect": "Allow",
            "Action": [
              "chime:BatchCreateChannelMembership",
              "chime:CreateAppInstanceUser",
              "chime:CreateChannel",
              "chime:CreateChannelMembership",
              "chime:CreateChannelModerator",
              "chime:Connect",
              "chime:DeleteChannelMembership",
              "chime:DeleteChannelModerator",
              "chime:DescribeChannelMembershipForAppInstanceUser",
              "chime:GetChannelMembershipPreferences",
              "chime:ListChannelMemberships",
              "chime:ListChannelMembershipsForAppInstanceUser",
              "chime:ListChannelMessages",
              "chime:ListChannelModerators",
              "chime:TagResource",
              "chime:PutChannelMembershipPreferences",
              "chime:SendChannelMessage",
              "chime:UpdateChannelReadMarker",
              "chime:UpdateAppInstanceUser"
            ],
            "Resource": [
              "arn:aws:chime:*:*:app-instance/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/SCNInstanceId": "*"
              }
            }
          },
          {
            "Sid": "ChimeChannel",
            "Effect": "Allow",
            "Action": [
              "chime:DescribeChannel"
            ],
            "Resource": [
              "arn:aws:chime:*:*:app-instance/*"
            ]
          },
          {
            "Sid": "ChimeMessaging",
            "Effect": "Allow",
            "Action": [
              "chime:GetMessagingSessionEndpoint"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMIdentityCenter",
            "Effect": "Allow",
            "Action": [
              "sso:GetManagedApplicationInstance",
              "sso:ListDirectoryAssociations",
              "sso:AssociateProfile",
              "sso:DisassociateProfile",
              "sso:ListProfiles",
              "sso:GetProfile",
              "sso:ListProfileAssociations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AppflowConnectorProfile",
            "Effect": "Allow",
            "Action": [
              "appflow:CreateConnectorProfile",
              "appflow:UseConnectorProfile",
              "appflow:DeleteConnectorProfile",
              "appflow:UpdateConnectorProfile"
            ],
            "Resource": [
              "arn:aws:appflow:*:*:connectorprofile/scn-*"
            ]
          },
          {
            "Sid": "AppflowFlow",
            "Effect": "Allow",
            "Action": [
              "appflow:CreateFlow",
              "appflow:DeleteFlow",
              "appflow:DescribeFlow",
              "appflow:DescribeFlowExecutionRecords",
              "appflow:ListFlows",
              "appflow:StartFlow",
              "appflow:StopFlow",
              "appflow:UpdateFlow",
              "appflow:TagResource",
              "appflow:UntagResource"
            ],
            "Resource": [
              "arn:aws:appflow:*:*:flow/scn-*"
            ]
          },
          {
            "Sid": "S3ListAllBuckets",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3ListSupplyChainBucket",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetBucketPolicy",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::aws-supply-chain-data-*"
            ]
          },
          {
            "Sid": "S3ReadWriteObject",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-supply-chain-data-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "SecretsManagerCreateSecret",
            "Effect": "Allow",
            "Action": "secretsmanager:CreateSecret",
            "Resource": "arn:aws:secretsmanager:*:*:secret:*",
            "Condition": {
              "StringLike": {
                "secretsmanager:Name": "appflow!*"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "appflow.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "SecretsManagerPutResourcePolicy",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:PutResourcePolicy"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "appflow.amazonaws.com"
                ]
              },
              "StringEqualsIgnoreCase": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "appflow"
              }
            }
          },
          {
            "Sid": "KMSListKeys",
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:ListAliases"
            ],
            "Resource": "arn:aws:kms:*:*:key/*"
          },
          {
            "Sid": "KMSListGrants",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListGrants"
            ],
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "appflow.*.amazonaws.com"
              },
              "StringEquals": {
                "aws:ResourceTag/aws-supply-chain-access": "true"
              }
            }
          },
          {
            "Sid": "KMSCreateGrant",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": "appflow.*.amazonaws.com"
              },
              "Bool": {
                "kms:GrantIsForAWSResource": "true"
              },
              "StringEquals": {
                "aws:ResourceTag/aws-supply-chain-access": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDetectiveOrganizationsAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "detective:DisableOrganizationAdminAccount",
              "detective:EnableOrganizationAdminAccount",
              "detective:ListOrganizationAdminAccount"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "detective.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess",
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "detective.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "detective.amazonaws.com",
                  "guardduty.amazonaws.com",
                  "macie.amazonaws.com",
                  "securityhub.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonChimeSDKMessagingServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "kinesis.*.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kinesis:PutRecord",
              "kinesis:PutRecords",
              "kinesis:DescribeStream"
            ],
            "Resource": [
              "arn:aws:kinesis:*:*:stream/chime-messaging-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDMSFleetAdvisorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": "cloudwatch:PutMetricData",
          "Resource": "*",
          "Condition": {
            "StringEquals": {
              "cloudwatch:namespace": "AWS/DMS/FleetAdvisor"
            }
          }
        }
      }
    },
    {
      "PolicyName": "CustomerProfilesServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/CustomerProfiles"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/profile.amazonaws.com/AWSServiceRoleForProfile_*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataSyncDiscoveryServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": [
              "arn:*:secretsmanager:*:*:secret:datasync!*"
            ],
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "datasync",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream"
            ],
            "Resource": [
              "arn:*:logs:*:*:log-group:/aws/datasync*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:*:logs:*:*:log-group:/aws/datasync:log-stream:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "MediaConnectGatewayInstanceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "MediaConnectGateway",
            "Effect": "Allow",
            "Action": [
              "mediaconnect:DiscoverGatewayPollEndpoint",
              "mediaconnect:PollGateway",
              "mediaconnect:SubmitGatewayStateChange"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSManagedServices_ContactsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:ListRoleTags",
              "iam:ListUserTags",
              "tag:GetResources",
              "ec2:DescribeTags"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "s3:GetBucketTagging",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "s3:authType": "REST-HEADER",
                "s3:signatureversion": "AWS4-HMAC-SHA256"
              },
              "NumericGreaterThanEquals": {
                "s3:TlsVersion": "1.2"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerCanvasAIServicesAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Textract",
            "Effect": "Allow",
            "Action": [
              "textract:AnalyzeDocument",
              "textract:AnalyzeExpense",
              "textract:AnalyzeID",
              "textract:StartDocumentAnalysis",
              "textract:StartExpenseAnalysis",
              "textract:GetDocumentAnalysis",
              "textract:GetExpenseAnalysis"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Rekognition",
            "Effect": "Allow",
            "Action": [
              "rekognition:DetectLabels",
              "rekognition:DetectText"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Comprehend",
            "Effect": "Allow",
            "Action": [
              "comprehend:BatchDetectDominantLanguage",
              "comprehend:BatchDetectEntities",
              "comprehend:BatchDetectSentiment",
              "comprehend:DetectPiiEntities",
              "comprehend:DetectEntities",
              "comprehend:DetectSentiment",
              "comprehend:DetectDominantLanguage"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Bedrock",
            "Effect": "Allow",
            "Action": [
              "bedrock:InvokeModel",
              "bedrock:ListFoundationModels",
              "bedrock:InvokeModelWithResponseStream"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateBedrockResourcesPermission",
            "Effect": "Allow",
            "Action": [
              "bedrock:CreateModelCustomizationJob",
              "bedrock:CreateProvisionedModelThroughput",
              "bedrock:TagResource"
            ],
            "Resource": [
              "arn:aws:bedrock:*:*:model-customization-job/*",
              "arn:aws:bedrock:*:*:custom-model/*",
              "arn:aws:bedrock:*:*:provisioned-model/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "SageMaker",
                  "Canvas"
                ]
              },
              "StringEquals": {
                "aws:RequestTag/SageMaker": "true",
                "aws:RequestTag/Canvas": "true",
                "aws:ResourceTag/SageMaker": "true",
                "aws:ResourceTag/Canvas": "true"
              }
            }
          },
          {
            "Sid": "GetStopAndDeleteBedrockResourcesPermission",
            "Effect": "Allow",
            "Action": [
              "bedrock:GetModelCustomizationJob",
              "bedrock:GetCustomModel",
              "bedrock:GetProvisionedModelThroughput",
              "bedrock:StopModelCustomizationJob",
              "bedrock:DeleteProvisionedModelThroughput"
            ],
            "Resource": [
              "arn:aws:bedrock:*:*:model-customization-job/*",
              "arn:aws:bedrock:*:*:custom-model/*",
              "arn:aws:bedrock:*:*:provisioned-model/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SageMaker": "true",
                "aws:ResourceTag/Canvas": "true"
              }
            }
          },
          {
            "Sid": "FoundationModelPermission",
            "Effect": "Allow",
            "Action": [
              "bedrock:CreateModelCustomizationJob"
            ],
            "Resource": [
              "arn:aws:bedrock:*::foundation-model/*"
            ]
          },
          {
            "Sid": "BedrockFineTuningPassRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "bedrock.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForCodeWhispererPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "sid1",
            "Effect": "Allow",
            "Action": [
              "sso-directory:ListMembersInGroup"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "sid2",
            "Effect": "Allow",
            "Action": [
              "sso:ListProfileAssociations",
              "sso:ListProfiles",
              "sso:ListDirectoryAssociations",
              "sso:DescribeRegisteredRegions",
              "sso:GetProfile",
              "sso:GetManagedApplicationInstance",
              "sso:ListApplicationAssignments",
              "sso:DescribeInstance",
              "sso:DescribeApplication"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "sid3",
            "Effect": "Allow",
            "Action": [
              "codeguru-security:CreateUploadUrl"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "sid4",
            "Effect": "Allow",
            "Action": [
              "codeguru-security:CreateScan",
              "codeguru-security:GetScan",
              "codeguru-security:ListFindings",
              "codeguru-security:GetFindings"
            ],
            "Resource": [
              "arn:aws:codeguru-security:*:*:scans/CodeWhisperer-*"
            ]
          },
          {
            "Sid": "sid5",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/CodeWhisperer"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonGrafanaCloudWatchAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarmsForMetric",
              "cloudwatch:DescribeAlarmHistory",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetInsightRuleReport"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups",
              "logs:GetLogGroupFields",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:GetQueryResults",
              "logs:GetLogEvents"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeTags",
              "ec2:DescribeInstances",
              "ec2:DescribeRegions"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "tag:GetResources",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "oam:ListSinks",
              "oam:ListAttachedLinks"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGroundStationAgentInstancePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "groundstation:RegisterAgent",
              "groundstation:UpdateAgentStatus",
              "groundstation:GetAgentConfiguration"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "VPCLatticeServicesInvokeAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "vpc-lattice-svcs:Invoke"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "VPCLatticeReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "vpc-lattice:Get*",
              "vpc-lattice:List*",
              "acm:DescribeCertificate",
              "acm:ListCertificates",
              "cloudwatch:GetMetricData",
              "ec2:DescribeInstances",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "elasticloadbalancing:DescribeLoadBalancers",
              "firehose:DescribeDeliveryStream",
              "firehose:ListDeliveryStreams",
              "lambda:ListAliases",
              "lambda:ListFunctions",
              "lambda:ListVersionsByFunction",
              "logs:DescribeLogGroups",
              "logs:GetLogDelivery",
              "logs:ListLogDeliveries",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "VPCLatticeFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "vpc-lattice:*",
              "acm:DescribeCertificate",
              "acm:ListCertificates",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "ec2:DescribeInstances",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "elasticloadbalancing:DescribeLoadBalancers",
              "firehose:DescribeDeliveryStream",
              "firehose:ListDeliveryStreams",
              "logs:DescribeLogGroups",
              "s3:ListAllMyBuckets",
              "lambda:ListAliases",
              "lambda:ListFunctions",
              "lambda:ListVersionsByFunction"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogDelivery",
              "logs:DeleteLogDelivery",
              "logs:GetLogDelivery",
              "logs:ListLogDeliveries",
              "logs:UpdateLogDelivery",
              "logs:DescribeResourcePolicies"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "vpc-lattice.amazonaws.com"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/vpc-lattice.amazonaws.com/AWSServiceRoleForVpcLattice",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "vpc-lattice.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/delivery.logs.amazonaws.com/AWSServiceRoleForLogDelivery",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "delivery.logs.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:DeleteServiceLinkedRole",
              "iam:GetServiceLinkedRoleDeletionStatus"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/vpc-lattice.amazonaws.com/AWSServiceRoleForVpcLattice"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubRefactorSpaces-EnvironmentsWithoutBridgesFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RefactorSpaces",
            "Effect": "Allow",
            "Action": [
              "refactor-spaces:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2Describe",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcs",
              "ec2:DescribeTags",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeInternetGateways"
            ],
            "Resource": "*"
          },
          {
            "Sid": "VpcEndpointServiceConfigurationCreate",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpointServiceConfiguration"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2TagsDelete",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteTags"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:environment-id": "false"
              }
            }
          },
          {
            "Sid": "VpcEndpointServiceConfigurationDelete",
            "Effect": "Allow",
            "Action": "ec2:DeleteVpcEndpointServiceConfigurations",
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:application-id": "false"
              }
            }
          },
          {
            "Sid": "ELBLoadBalancerCreate",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateLoadBalancer"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:application-id": "false"
              }
            }
          },
          {
            "Sid": "ELBDescribe",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeListeners"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ELBModify",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:CreateLoadBalancerListeners",
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:DeleteTargetGroup"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/refactor-spaces:route-id": [
                  "*"
                ]
              }
            }
          },
          {
            "Sid": "ELBLoadBalancerDelete",
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DeleteLoadBalancer",
            "Resource": "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*"
          },
          {
            "Sid": "ELBListenerCreate",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateListener"
            ],
            "Resource": [
              "arn:*:elasticloadbalancing:*:*:loadbalancer/net/refactor-spaces-nlb-*",
              "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
            ],
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:route-id": "false"
              }
            }
          },
          {
            "Sid": "ELBListenerDelete",
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DeleteListener",
            "Resource": "arn:*:elasticloadbalancing:*:*:listener/net/refactor-spaces-nlb-*"
          },
          {
            "Sid": "ELBTargetGroupModify",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:RegisterTargets"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*"
          },
          {
            "Sid": "ELBTargetGroupCreate",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:CreateTargetGroup"
            ],
            "Resource": "arn:*:elasticloadbalancing:*:*:targetgroup/refactor-spaces-tg-*",
            "Condition": {
              "Null": {
                "aws:RequestTag/refactor-spaces:route-id": "false"
              }
            }
          },
          {
            "Sid": "APIGatewayModify",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET",
              "apigateway:DELETE",
              "apigateway:PATCH",
              "apigateway:POST",
              "apigateway:PUT",
              "apigateway:UpdateRestApiPolicy"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/restapis/*",
              "arn:aws:apigateway:*::/vpclinks",
              "arn:aws:apigateway:*::/vpclinks/*",
              "arn:aws:apigateway:*::/tags",
              "arn:aws:apigateway:*::/tags/*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/refactor-spaces:application-id": "false"
              }
            }
          },
          {
            "Sid": "APIGatewayVpcLinksGet",
            "Effect": "Allow",
            "Action": "apigateway:GET",
            "Resource": [
              "arn:aws:apigateway:*::/vpclinks",
              "arn:aws:apigateway:*::/vpclinks/*"
            ]
          },
          {
            "Sid": "OrganizationDescribe",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudformationStackCreate",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudformationStackTag",
            "Effect": "Allow",
            "Action": [
              "cloudformation:TagResource"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/*"
          },
          {
            "Sid": "CreateRefactorSpacesSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "refactor-spaces.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CreateELBSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMediaConnectServicePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecs:UpdateService",
              "ecs:DeleteService",
              "ecs:CreateService",
              "ecs:DescribeServices",
              "ecs:PutAttributes",
              "ecs:DeleteAttributes",
              "ecs:RunTask",
              "ecs:ListTasks",
              "ecs:StartTask",
              "ecs:StopTask",
              "ecs:DescribeTasks",
              "ecs:DescribeContainerInstances",
              "ecs:UpdateContainerInstancesState"
            ],
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ecs:cluster": "arn:aws:ecs:*:*:cluster/MediaConnectGateway"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecs:CreateCluster",
              "ecs:RegisterTaskDefinition"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ecs:UpdateCluster",
              "ecs:UpdateClusterSettings",
              "ecs:ListAttributes",
              "ecs:DescribeClusters",
              "ecs:DeregisterContainerInstance",
              "ecs:ListContainerInstances"
            ],
            "Resource": "arn:aws:ecs:*:*:cluster/MediaConnectGateway"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSProtonServiceGitSyncServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ProtonServiceSync",
            "Effect": "Allow",
            "Action": [
              "proton:GetService",
              "proton:UpdateService",
              "proton:UpdateServicePipeline",
              "proton:GetServiceInstance",
              "proton:CreateServiceInstance",
              "proton:UpdateServiceInstance",
              "proton:ListServiceInstances",
              "proton:GetComponent",
              "proton:CreateComponent",
              "proton:ListComponents",
              "proton:UpdateComponent",
              "proton:GetEnvironment",
              "proton:CreateEnvironment",
              "proton:ListEnvironments",
              "proton:UpdateEnvironment"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceCatalogOrgsDataSyncServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "OrganizationsDataSyncToServiceCatalog",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListChildren",
              "organizations:ListParents",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerModelRegistryFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonSageMakerModelRegistrySageMakerReadPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeAction",
              "sagemaker:DescribeInferenceRecommendationsJob",
              "sagemaker:DescribeModelPackage",
              "sagemaker:DescribeModelPackageGroup",
              "sagemaker:DescribePipeline",
              "sagemaker:DescribePipelineExecution",
              "sagemaker:ListAssociations",
              "sagemaker:ListArtifacts",
              "sagemaker:ListModelMetadata",
              "sagemaker:ListModelPackages",
              "sagemaker:Search",
              "sagemaker:GetSearchSuggestions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerModelRegistrySageMakerWritePermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddTags",
              "sagemaker:CreateModel",
              "sagemaker:CreateModelPackage",
              "sagemaker:CreateModelPackageGroup",
              "sagemaker:CreateEndpoint",
              "sagemaker:CreateEndpointConfig",
              "sagemaker:CreateInferenceRecommendationsJob",
              "sagemaker:DeleteModelPackage",
              "sagemaker:DeleteModelPackageGroup",
              "sagemaker:DeleteTags",
              "sagemaker:UpdateModelPackage"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerModelRegistryS3GetPermission",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ]
          },
          {
            "Sid": "AmazonSageMakerModelRegistryS3ListPermission",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerModelRegistryECRReadPermission",
            "Effect": "Allow",
            "Action": [
              "ecr:BatchGetImage",
              "ecr:DescribeImages"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerModelRegistryIAMPassRolePermission",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "sagemaker.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerModelRegistryTagReadPermission",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerModelRegistryResourceGroupGetPermission",
            "Effect": "Allow",
            "Action": [
              "resource-groups:GetGroupQuery"
            ],
            "Resource": "arn:aws:resource-groups:*:*:group/*"
          },
          {
            "Sid": "AmazonSageMakerModelRegistryResourceGroupListPermission",
            "Effect": "Allow",
            "Action": [
              "resource-groups:ListGroupResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerModelRegistryResourceGroupWritePermission",
            "Effect": "Allow",
            "Action": [
              "resource-groups:CreateGroup",
              "resource-groups:Tag"
            ],
            "Resource": "arn:aws:resource-groups:*:*:group/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": "sagemaker:collection"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerModelRegistryResourceGroupDeletePermission",
            "Effect": "Allow",
            "Action": "resource-groups:DeleteGroup",
            "Resource": "arn:aws:resource-groups:*:*:group/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:collection": "true"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerModelRegistryResourceKMSPermission",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant",
              "kms:DescribeKey",
              "kms:GenerateDataKey",
              "kms:Decrypt"
            ],
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker": "true"
              },
              "StringLike": {
                "kms:ViaService": "sagemaker.*.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSUserNotificationsServiceLinkedRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:PutRule",
              "events:PutTargets",
              "events:DeleteRule",
              "events:ListTargetsByRule",
              "events:RemoveTargets"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/AWSUserNotificationsManagedRule-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/Notifications"
              }
            },
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeCatalystSupportAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "support:DescribeAttachment",
              "support:DescribeCaseAttributes",
              "support:DescribeCases",
              "support:DescribeCommunications",
              "support:DescribeIssueTypes",
              "support:DescribeServices",
              "support:DescribeSeverityLevels",
              "support:DescribeSupportLevel",
              "support:SearchForCases",
              "support:AddAttachmentsToSet",
              "support:AddCommunicationToCase",
              "support:CreateCase",
              "support:InitiateCallForCase",
              "support:InitiateChatForCase",
              "support:PutCaseAttributes",
              "support:RateCaseCommunication",
              "support:ResolveCase"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeCatalystReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "codecatalyst:Get*",
              "codecatalyst:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeCatalystFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CodeCatalystResourceAccess",
            "Effect": "Allow",
            "Action": [
              "codecatalyst:*",
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CodeCatalystAssociateIAMRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "codecatalyst.amazonaws.com",
                  "codecatalyst-runner.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ROSACloudNetworkConfigOperatorPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DescribeNetworkResources",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeSubnets",
              "ec2:DescribeNetworkInterfaces"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ModifyEIPs",
            "Effect": "Allow",
            "Action": [
              "ec2:UnassignPrivateIpAddresses",
              "ec2:AssignPrivateIpAddresses",
              "ec2:UnassignIpv6Addresses",
              "ec2:AssignIpv6Addresses"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAWorkerInstancePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Ec2ReadOnly",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeRegions"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAAmazonEBSCSIDriverOperatorPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshots",
              "ec2:DescribeTags",
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumesModifications"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume",
              "ec2:DetachVolume"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume",
              "ec2:ModifyVolume"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateSnapshotResourceTag",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateSnapshotRequestTag",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:snapshot/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:snapshot/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateVolume",
                  "CreateSnapshot"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAIngressOperatorPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeLoadBalancers",
              "route53:ListHostedZones",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "route53:ChangeResourceRecordSets"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringLike": {
                "route53:ChangeResourceRecordSetsNormalizedRecordNames": [
                  "*.openshiftapps.com",
                  "*.devshift.org",
                  "*.openshiftusgov.com",
                  "*.devshiftusgov.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAControlPlaneOperatorPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcs",
              "ec2:DescribeSecurityGroups",
              "route53:ListHostedZones"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateSecurityGroups",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group*/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "DeleteSecurityGroup",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group*/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "SecurityGroupIngressEgress",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupEgress"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group*/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateSecurityGroupsVPCNoCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*"
            ]
          },
          {
            "Sid": "ListResourceRecordSets",
            "Effect": "Allow",
            "Action": [
              "route53:ListResourceRecordSets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ChangeResourceRecordSetsRestrictedRecordNames",
            "Effect": "Allow",
            "Action": [
              "route53:ChangeResourceRecordSets"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAllValues:StringLike": {
                "route53:ChangeResourceRecordSetsNormalizedRecordNames": [
                  "*.hypershift.local"
                ]
              }
            }
          },
          {
            "Sid": "VPCEndpointWithCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "VPCEndpointResourceTagCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group*/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "VPCEndpointNoCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:route-table/*"
            ]
          },
          {
            "Sid": "ManageVPCEndpointWithCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVpcEndpoint",
              "ec2:DeleteVpcEndpoints"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "ModifyVPCEndpoingNoCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyVpcEndpoint"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*"
            ]
          },
          {
            "Sid": "CreateTagsRestrictedActions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc-endpoint/*",
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateVpcEndpoint",
                  "CreateSecurityGroup"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchIngestionReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "osis:GetPipeline",
              "osis:GetPipelineChangeProgress",
              "osis:GetPipelineBlueprint",
              "osis:ListPipelineBlueprints",
              "osis:ListPipelines",
              "osis:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchIngestionFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "osis:CreatePipeline",
              "osis:UpdatePipeline",
              "osis:DeletePipeline",
              "osis:StartPipeline",
              "osis:StopPipeline",
              "osis:ListPipelines",
              "osis:GetPipeline",
              "osis:GetPipelineChangeProgress",
              "osis:ValidatePipeline",
              "osis:GetPipelineBlueprint",
              "osis:ListPipelineBlueprints",
              "osis:TagResource",
              "osis:UntagResource",
              "osis:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/osis.amazonaws.com/AWSServiceRoleForAmazonOpenSearchIngestionService",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "osis.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSWellArchitectedDiscoveryServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "trustedadvisor:DescribeChecks",
              "trustedadvisor:DescribeCheckItems"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources",
              "resource-groups:ListGroupResources",
              "tag:GetResources"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicecatalog:ListAssociatedResources",
              "servicecatalog:GetApplication",
              "servicecatalog:CreateAttributeGroup"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicecatalog:AssociateAttributeGroup",
              "servicecatalog:DisassociateAttributeGroup"
            ],
            "Resource": [
              "arn:*:servicecatalog:*:*:/applications/*",
              "arn:*:servicecatalog:*:*:/attribute-groups/AWS_WellArchitected-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "servicecatalog:UpdateAttributeGroup",
              "servicecatalog:DeleteAttributeGroup"
            ],
            "Resource": [
              "arn:*:servicecatalog:*:*:/attribute-groups/AWS_WellArchitected-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAKubeControllerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInstances",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DescribeLoadBalancerPolicies"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "KMSDescribeKey",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat": "true"
              }
            }
          },
          {
            "Sid": "LoadBalanacerManagement",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:ConfigureHealthCheck",
              "elasticloadbalancing:CreateLoadBalancerPolicy",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
              "elasticloadbalancing:ModifyLoadBalancerAttributes",
              "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
              "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CreateTargetGroup",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:CreateTargetGroup"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "LoadBalanacerManagementResourceTag",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:ModifyTargetGroup",
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
              "elasticloadbalancing:CreateLoadBalancerListeners",
              "elasticloadbalancing:DeleteLoadBalancerListeners",
              "elasticloadbalancing:AttachLoadBalancerToSubnets",
              "elasticloadbalancing:DetachLoadBalancerFromSubnets",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateListeners",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:CreateListener"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true",
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateSecurityGroup",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateSecurityGroupVpc",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*"
            ]
          },
          {
            "Sid": "CreateLoadBalancer",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:CreateLoadBalancer"
            ],
            "Resource": [
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "ModifySecurityGroup",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateTagsSecurityGroups",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateSecurityGroup"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAKMSProviderPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "VolumeEncryption",
            "Effect": "Allow",
            "Action": [
              "kms:Encrypt",
              "kms:Decrypt",
              "kms:DescribeKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAImageRegistryOperatorPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ListBuckets",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSpecificBucketActions",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:GetBucketTagging",
              "s3:GetBucketPublicAccessBlock",
              "s3:GetEncryptionConfiguration",
              "s3:GetLifecycleConfiguration",
              "s3:GetBucketLocation",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketTagging",
              "s3:PutEncryptionConfiguration",
              "s3:PutLifecycleConfiguration"
            ],
            "Resource": [
              "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}-*",
              "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}"
            ]
          },
          {
            "Sid": "AllowSpecificObjectActions",
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:GetObject",
              "s3:ListMultipartUploadParts",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}-*/*",
              "arn:aws:s3:::*-image-registry-${aws:RequestedRegion}/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonVPCReachabilityAnalyzerPathComponentReadPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "NetworkFirewallPermissions",
            "Effect": "Allow",
            "Action": [
              "network-firewall:Describe*",
              "network-firewall:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "KeyspacesReplicationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cassandra:Select",
              "cassandra:SelectMultiRegionResource",
              "cassandra:Modify",
              "cassandra:ModifyMultiRegionResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeGuruSecurityScanAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonCodeGuruSecurityScanAccess",
            "Effect": "Allow",
            "Action": [
              "codeguru-security:CreateScan",
              "codeguru-security:CreateUploadUrl",
              "codeguru-security:GetScan",
              "codeguru-security:GetFindings"
            ],
            "Resource": "arn:aws:codeguru-security:*:*:scans/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCodeGuruSecurityFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonCodeGuruSecurityFullAccess",
            "Effect": "Allow",
            "Action": [
              "codeguru-security:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSFinSpaceServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSFinSpaceServiceRolePolicy",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/FinSpace",
                  "AWS/Usage"
                ]
              }
            },
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryCrossAccountReplicationPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CrossAccountPolicy1",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumeAttribute",
              "ec2:DescribeInstances",
              "drs:DescribeSourceServers",
              "drs:DescribeReplicationConfigurationTemplates",
              "drs:CreateSourceServerForDrs"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CrossAccountPolicy2",
            "Effect": "Allow",
            "Action": [
              "drs:TagResource"
            ],
            "Resource": "arn:aws:drs:*:*:source-server/*",
            "Condition": {
              "StringEquals": {
                "drs:CreateAction": "CreateSourceServerForDrs"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDMSServerlessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "id0",
            "Effect": "Allow",
            "Action": [
              "dms:CreateReplicationInstance",
              "dms:CreateReplicationTask"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "dms:req-tag/ResourceCreatedBy": "DMSServerless"
              }
            }
          },
          {
            "Sid": "id1",
            "Effect": "Allow",
            "Action": [
              "dms:DescribeReplicationInstances",
              "dms:DescribeReplicationTasks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "id2",
            "Effect": "Allow",
            "Action": [
              "dms:StartReplicationTask",
              "dms:StopReplicationTask",
              "dms:DeleteReplicationTask",
              "dms:DeleteReplicationInstance"
            ],
            "Resource": [
              "arn:aws:dms:*:*:rep:*",
              "arn:aws:dms:*:*:task:*"
            ],
            "Condition": {
              "StringEqualsIgnoreCase": {
                "aws:ResourceTag/ResourceCreatedBy": "DMSServerless"
              }
            }
          },
          {
            "Sid": "id3",
            "Effect": "Allow",
            "Action": [
              "dms:TestConnection",
              "dms:DeleteConnection"
            ],
            "Resource": [
              "arn:aws:dms:*:*:rep:*",
              "arn:aws:dms:*:*:endpoint:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSecurityLakeAdministrator",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowActionsWithAnyResource",
            "Effect": "Allow",
            "Action": [
              "securitylake:*",
              "organizations:DescribeOrganization",
              "organizations:ListDelegatedServicesForAccount",
              "organizations:ListAccounts",
              "iam:ListRoles",
              "ram:GetResourceShareAssociations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowActionsWithAnyResourceViaSecurityLake",
            "Effect": "Allow",
            "Action": [
              "glue:CreateCrawler",
              "glue:StopCrawlerSchedule",
              "lambda:CreateEventSourceMapping",
              "lakeformation:GrantPermissions",
              "lakeformation:ListPermissions",
              "lakeformation:RegisterResource",
              "lakeformation:RevokePermissions",
              "lakeformation:GetDatalakeSettings",
              "events:ListConnections",
              "events:ListApiDestinations",
              "iam:GetRole",
              "iam:ListAttachedRolePolicies",
              "kms:DescribeKey"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowManagingSecurityLakeS3Buckets",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:PutBucketPolicy",
              "s3:PutBucketPublicAccessBlock",
              "s3:PutBucketNotification",
              "s3:PutBucketTagging",
              "s3:PutEncryptionConfiguration",
              "s3:PutBucketVersioning",
              "s3:PutReplicationConfiguration",
              "s3:PutLifecycleConfiguration",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:GetBucketNotification"
            ],
            "Resource": "arn:aws:s3:::aws-security-data-lake*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowLambdaCreateFunction",
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:SecurityLake_Glue_Partition_Updater_Lambda*",
              "arn:aws:lambda:*:*:function:AmazonSecurityLake*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowLambdaAddPermission",
            "Effect": "Allow",
            "Action": [
              "lambda:AddPermission"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:SecurityLake_Glue_Partition_Updater_Lambda*",
              "arn:aws:lambda:*:*:function:AmazonSecurityLake*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              },
              "StringEquals": {
                "lambda:Principal": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowGlueActions",
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase",
              "glue:GetDatabase",
              "glue:CreateTable",
              "glue:GetTable"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/amazon_security_lake_glue_db*",
              "arn:aws:glue:*:*:table/amazon_security_lake_glue_db*/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowEventBridgeActions",
            "Effect": "Allow",
            "Action": [
              "events:PutTargets",
              "events:PutRule",
              "events:DescribeRule",
              "events:CreateApiDestination",
              "events:CreateConnection",
              "events:UpdateConnection",
              "events:UpdateApiDestination",
              "events:DeleteConnection",
              "events:DeleteApiDestination",
              "events:ListTargetsByRule",
              "events:RemoveTargets",
              "events:DeleteRule"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/AmazonSecurityLake*",
              "arn:aws:events:*:*:rule/SecurityLake*",
              "arn:aws:events:*:*:api-destination/AmazonSecurityLake*",
              "arn:aws:events:*:*:connection/AmazonSecurityLake*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowSQSActions",
            "Effect": "Allow",
            "Action": [
              "sqs:CreateQueue",
              "sqs:SetQueueAttributes",
              "sqs:GetQueueURL",
              "sqs:AddPermission",
              "sqs:GetQueueAttributes",
              "sqs:DeleteQueue"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:SecurityLake*",
              "arn:aws:sqs:*:*:AmazonSecurityLake*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowKmsCmkGrantForSecurityLake",
            "Effect": "Allow",
            "Action": "kms:CreateGrant",
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              },
              "StringLike": {
                "kms:EncryptionContext:aws:s3:arn": "arn:aws:s3:::aws-security-data-lake*"
              },
              "ForAllValues:StringEquals": {
                "kms:GrantOperations": [
                  "GenerateDataKey",
                  "RetireGrant",
                  "Decrypt"
                ]
              }
            }
          },
          {
            "Sid": "AllowEnablingQueryBasedSubscribers",
            "Effect": "Allow",
            "Action": [
              "ram:CreateResourceShare",
              "ram:AssociateResourceShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "ram:ResourceArn": [
                  "arn:aws:glue:*:*:catalog",
                  "arn:aws:glue:*:*:database/amazon_security_lake_glue_db*",
                  "arn:aws:glue:*:*:table/amazon_security_lake_glue_db*/*"
                ]
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowConfiguringQueryBasedSubscribers",
            "Effect": "Allow",
            "Action": [
              "ram:UpdateResourceShare",
              "ram:GetResourceShares",
              "ram:DisassociateResourceShare",
              "ram:DeleteResourceShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ram:ResourceShareName": "LakeFormation*"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowConfiguringCredentialsForSubscriberNotification",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:PutSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:events!connection/AmazonSecurityLake-*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowPassRoleForUpdatingGluePartitionsSecLakeArn",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManager",
              "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManagerV2"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "lambda.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceARN": "arn:aws:securitylake:*:*:data-lake/default"
              }
            }
          },
          {
            "Sid": "AllowPassRoleForUpdatingGluePartitionsLambdaArn",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManager",
              "arn:aws:iam::*:role/service-role/AmazonSecurityLakeMetaStoreManagerV2"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "lambda.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceARN": [
                  "arn:aws:lambda:*:*:function:SecurityLake_Glue_Partition_Updater_Lambda*",
                  "arn:aws:lambda:*:*:function:AmazonSecurityLake*"
                ]
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowPassRoleForCrossRegionReplicationSecLakeArn",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeS3ReplicationRole",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "s3.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceARN": "arn:aws:securitylake:*:*:data-lake/default"
              }
            }
          },
          {
            "Sid": "AllowPassRoleForCrossRegionReplicationS3Arn",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeS3ReplicationRole",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "s3.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceARN": "arn:aws:s3:::aws-security-data-lake*"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowPassRoleForCustomSourceCrawlerSecLakeArn",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeCustomDataGlueCrawler*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "glue.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceARN": "arn:aws:securitylake:*:*:data-lake/default"
              }
            }
          },
          {
            "Sid": "AllowPassRoleForCustomSourceCrawlerGlueArn",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeCustomDataGlueCrawler*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "glue.amazonaws.com"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowPassRoleForSubscriberNotificationSecLakeArn",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeSubscriberEventBridge",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "events.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceARN": "arn:aws:securitylake:*:*:subscriber/*"
              }
            }
          },
          {
            "Sid": "AllowPassRoleForSubscriberNotificationEventsArn",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/service-role/AmazonSecurityLakeSubscriberEventBridge",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "events.amazonaws.com"
              },
              "StringLike": {
                "iam:AssociatedResourceARN": "arn:aws:events:*:*:rule/AmazonSecurityLake*"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowOnboardingToSecurityLakeDependencies",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/securitylake.amazonaws.com/AWSServiceRoleForSecurityLake",
              "arn:aws:iam::*:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess",
              "arn:aws:iam::*:role/aws-service-role/apidestinations.events.amazonaws.com/AWSServiceRoleForAmazonEventBridgeApiDestinations"
            ],
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": [
                  "securitylake.amazonaws.com",
                  "lakeformation.amazonaws.com",
                  "apidestinations.events.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AllowRolePolicyActionsforSubscibersandSources",
            "Effect": "Allow",
            "Action": [
              "iam:CreateRole",
              "iam:PutRolePolicy",
              "iam:DeleteRolePolicy"
            ],
            "Resource": "arn:aws:iam::*:role/AmazonSecurityLake*",
            "Condition": {
              "StringEquals": {
                "iam:PermissionsBoundary": "arn:aws:iam::aws:policy/AmazonSecurityLakePermissionsBoundary"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowRegisterS3LocationInLakeFormation",
            "Effect": "Allow",
            "Action": [
              "iam:PutRolePolicy",
              "iam:GetRolePolicy"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/lakeformation.amazonaws.com/AWSServiceRoleForLakeFormationDataAccess",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowIAMActionsByResource",
            "Effect": "Allow",
            "Action": [
              "iam:ListRolePolicies",
              "iam:DeleteRole"
            ],
            "Resource": "arn:aws:iam::*:role/AmazonSecurityLake*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "securitylake.amazonaws.com"
              }
            }
          },
          {
            "Sid": "S3ReadAccessToSecurityLakes",
            "Effect": "Allow",
            "Action": [
              "s3:Get*",
              "s3:List*"
            ],
            "Resource": "arn:aws:s3:::aws-security-data-lake-*"
          },
          {
            "Sid": "S3ReadAccessToSecurityLakeMetastoreObject",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:GetObjectVersion"
            ],
            "Resource": "arn:aws:s3:::security-lake-meta-store-manager-*"
          },
          {
            "Sid": "S3ResourcelessReadOnly",
            "Effect": "Allow",
            "Action": [
              "s3:GetAccountPublicAccessBlock",
              "s3:ListAccessPoints",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ROSASRESupportPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeRegions",
              "sts:DecodeAuthorizationMessage"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Route53",
            "Effect": "Allow",
            "Action": [
              "route53:GetHostedZone",
              "route53:GetHostedZoneCount",
              "route53:ListHostedZones",
              "route53:ListHostedZonesByName",
              "route53:ListResourceRecordSets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DecribeIAMRoles",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:ListRoles"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "EC2DescribeInstance",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeIamInstanceProfileAssociations",
              "ec2:DescribeReservedInstances",
              "ec2:DescribeScheduledInstances"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "VPCNetwork",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DescribeRouteTables"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "Cloudtrail",
            "Effect": "Allow",
            "Action": [
              "cloudtrail:DescribeTrails",
              "cloudtrail:LookupEvents"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "Cloudwatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DescribeVolumes",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVolumes",
              "ec2:DescribeVolumesModifications",
              "ec2:DescribeVolumeStatus"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DescribeLoadBalancers",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeAccountLimits",
              "elasticloadbalancing:DescribeInstanceHealth",
              "elasticloadbalancing:DescribeListenerCertificates",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancerPolicies",
              "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeSSLPolicies",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DescribeVPC",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcEndpointConnections",
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DescribeSecurityGroups",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSecurityGroupReferences",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeStaleSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeAddressesAttribute",
            "Effect": "Allow",
            "Action": "ec2:DescribeAddressesAttribute",
            "Resource": "arn:aws:ec2:*:*:elastic-ip/*"
          },
          {
            "Sid": "DescribeInstance",
            "Effect": "Allow",
            "Action": [
              "iam:GetInstanceProfile"
            ],
            "Resource": "arn:aws:iam::*:instance-profile/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "DescribeSpotFleetInstances",
            "Effect": "Allow",
            "Action": "ec2:DescribeSpotFleetInstances",
            "Resource": "arn:aws:ec2:*:*:spot-fleet-request/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "DescribeVolumeAttribute",
            "Effect": "Allow",
            "Action": "ec2:DescribeVolumeAttribute",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "ManageInstanceLifecycle",
            "Effect": "Allow",
            "Action": [
              "ec2:RebootInstances",
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDocDBElasticFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "docdb-elastic:CreateCluster",
              "docdb-elastic:UpdateCluster",
              "docdb-elastic:GetCluster",
              "docdb-elastic:DeleteCluster",
              "docdb-elastic:ListClusters",
              "docdb-elastic:CreateClusterSnapshot",
              "docdb-elastic:GetClusterSnapshot",
              "docdb-elastic:DeleteClusterSnapshot",
              "docdb-elastic:ListClusterSnapshots",
              "docdb-elastic:RestoreClusterFromSnapshot",
              "docdb-elastic:TagResource",
              "docdb-elastic:UntagResource",
              "docdb-elastic:ListTagsForResource"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVpcEndpoint",
              "ec2:DescribeVpcEndpoints",
              "ec2:DeleteVpcEndpoints",
              "ec2:ModifyVpcEndpoint",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeAvailabilityZones",
              "secretsmanager:ListSecrets"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": "docdb-elastic.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:DescribeKey",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "kms:ViaService": [
                  "docdb-elastic.*.amazonaws.com"
                ],
                "aws:ResourceTag/DocDBElasticFullAccess": "*"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/DocDBElasticFullAccess": "*",
                "kms:ViaService": [
                  "docdb-elastic.*.amazonaws.com"
                ]
              },
              "Bool": {
                "kms:GrantIsForAWSResource": true
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:ListSecretVersionIds",
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:GetResourcePolicy"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "secretsmanager:ResourceTag/DocDBElasticFullAccess": "*"
              },
              "StringEquals": {
                "aws:CalledViaFirst": "docdb-elastic.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/docdb-elastic.amazonaws.com/AWSServiceRoleForDocDB-Elastic",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "docdb-elastic.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSControlTowerAccountServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowPutRuleOnSpecificSourcesAndDetailTypes",
            "Effect": "Allow",
            "Action": "events:PutRule",
            "Resource": "arn:aws:events:*:*:rule/*ControlTower*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "events:source": "aws.securityhub"
              },
              "Null": {
                "events:detail-type": "false"
              },
              "StringEquals": {
                "events:ManagedBy": "controltower.amazonaws.com",
                "events:detail-type": "Security Hub Findings - Imported"
              }
            }
          },
          {
            "Sid": "AllowOtherOperationsOnRulesManagedByControlTower",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:EnableRule",
              "events:DisableRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": "arn:aws:events:*:*:rule/*ControlTower*",
            "Condition": {
              "StringEquals": {
                "events:ManagedBy": "controltower.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowDescribeOperationsOnRulesManagedByControlTower",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:ListTargetsByRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/*ControlTower*"
          },
          {
            "Sid": "AllowControlTowerToPublishSecurityNotifications",
            "Effect": "Allow",
            "Action": "sns:publish",
            "Resource": "arn:aws:sns:*:*:aws-controltower-AggregateSecurityNotifications",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": "${aws:ResourceAccount}"
              }
            }
          },
          {
            "Sid": "AllowActionsForSecurityHubIntegration",
            "Effect": "Allow",
            "Action": [
              "securityhub:DescribeStandardsControls",
              "securityhub:GetEnabledStandards"
            ],
            "Resource": "arn:aws:securityhub:*:*:hub/default"
          }
        ]
      }
    },
    {
      "PolicyName": "ROSAInstallerPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeRegions",
              "ec2:DescribeReservedInstancesOfferings",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSecurityGroupRules",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeVpcs",
              "ec2:DescribeInstanceTypeOfferings",
              "elasticloadbalancing:DescribeAccountLimits",
              "elasticloadbalancing:DescribeLoadBalancers",
              "iam:GetOpenIDConnectProvider",
              "iam:GetRole",
              "route53:GetHostedZone",
              "route53:ListHostedZones",
              "route53:ListHostedZonesByName",
              "route53:ListResourceRecordSets",
              "route53:GetAccountLimit",
              "servicequotas:GetServiceQuota"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PassRoleToEC2",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:*:iam::*:role/*-ROSA-Worker-Role"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ManageInstanceProfiles",
            "Effect": "Allow",
            "Action": [
              "iam:AddRoleToInstanceProfile",
              "iam:RemoveRoleFromInstanceProfile",
              "iam:DeleteInstanceProfile",
              "iam:GetInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:instance-profile/rosa-service-managed-*"
            ]
          },
          {
            "Sid": "CreateInstanceProfiles",
            "Effect": "Allow",
            "Action": [
              "iam:CreateInstanceProfile",
              "iam:TagInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:instance-profile/rosa-service-managed-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "GetSecretValue",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "Route53ManageRecords",
            "Effect": "Allow",
            "Action": [
              "route53:ChangeResourceRecordSets"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringLike": {
                "route53:ChangeResourceRecordSetsNormalizedRecordNames": [
                  "*.openshiftapps.com",
                  "*.devshift.org",
                  "*.hypershift.local",
                  "*.openshiftusgov.com",
                  "*.devshiftusgov.com"
                ]
              }
            }
          },
          {
            "Sid": "Route53Manage",
            "Effect": "Allow",
            "Action": [
              "route53:ChangeTagsForResource",
              "route53:CreateHostedZone",
              "route53:DeleteHostedZone"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "RunInstances"
                ]
              }
            }
          },
          {
            "Sid": "RunInstancesNoCondition",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:snapshot/*"
            ]
          },
          {
            "Sid": "RunInstancesRestrictedRequestTag",
            "Effect": "Allow",
            "Action": "ec2:RunInstances",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "RunInstancesRedHatOwnedAMIs",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:image/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:Owner": [
                  "531415883065",
                  "251351625822",
                  "210686502322"
                ]
              }
            }
          },
          {
            "Sid": "ManageInstancesRestrictedResourceTag",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances",
              "ec2:GetConsoleOutput"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateGrantRestrictedResourceTag",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat": "true"
              },
              "StringLike": {
                "kms:ViaService": "ec2.*.amazonaws.com"
              },
              "Bool": {
                "kms:GrantIsForAWSResource": true
              }
            }
          },
          {
            "Sid": "ManagedKMSRestrictedResourceTag",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:GenerateDataKeyWithoutPlaintext"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat": "true"
              }
            }
          },
          {
            "Sid": "CreateSecurityGroups",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group*/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "DeleteSecurityGroup",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group*/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "SecurityGroupIngressEgress",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupEgress"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group*/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateSecurityGroupsVPCNoCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:vpc/*"
            ]
          },
          {
            "Sid": "CreateTagsRestrictedActions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateSecurityGroup"
                ]
              }
            }
          },
          {
            "Sid": "CreateTagsK8sSubnet",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*"
            ],
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": [
                  "kubernetes.io/cluster/*"
                ]
              }
            }
          },
          {
            "Sid": "ListPoliciesAttachedToRoles",
            "Effect": "Allow",
            "Action": [
              "iam:ListAttachedRolePolicies",
              "iam:ListRolePolicies"
            ],
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDocDBElasticReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "docdb-elastic:ListClusters",
              "docdb-elastic:GetCluster",
              "docdb-elastic:ListClusterSnapshots",
              "docdb-elastic:GetClusterSnapshot",
              "docdb-elastic:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "ROSANodePoolManagementPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CreateServiceLinkedRole",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:*:iam::*:role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing"
            ],
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
              }
            }
          },
          {
            "Sid": "PassWorkerRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:*:iam::*:role/*-ROSA-Worker-Role"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AuthorizeSecurityGroupIngressRestrictedResourceTag",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupIngress"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:security-group-rule/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "NetworkInterfaces",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "NetworkInterfacesNoCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:vpc/*"
            ]
          },
          {
            "Sid": "TerminateInstances",
            "Effect": "Allow",
            "Action": [
              "ec2:TerminateInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateTags",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "RunInstances"
                ]
              }
            }
          },
          {
            "Sid": "CreateTagsCAPAControllerReconcileInstance",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "CreateTagsCAPAControllerReconcileVolume",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "RunInstancesRequest",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/red-hat-managed": "true"
              }
            }
          },
          {
            "Sid": "RunInstancesNoCondition",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*"
            ]
          },
          {
            "Sid": "RunInstancesRedHatAMI",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:image/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:Owner": [
                  "531415883065",
                  "251351625822"
                ]
              }
            }
          },
          {
            "Sid": "ManagedKMSRestrictedResourceTag",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:GenerateDataKeyWithoutPlaintext"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/red-hat": "true"
              }
            }
          },
          {
            "Sid": "CreateGrantRestricted",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "Bool": {
                "kms:GrantIsForAWSResource": true
              },
              "StringEquals": {
                "aws:ResourceTag/red-hat": "true"
              },
              "StringLike": {
                "kms:ViaService": "ec2.*.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryNetworkReplicationPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DRSNetworkReplicationPolicy1",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeRouteTables",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeInstances",
              "ec2:DescribeManagedPrefixLists",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetManagedPrefixListAssociations"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonVPCReachabilityAnalyzerFullAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DirectconnectPermissions",
            "Effect": "Allow",
            "Action": [
              "directconnect:DescribeConnections",
              "directconnect:DescribeDirectConnectGatewayAssociations",
              "directconnect:DescribeDirectConnectGatewayAttachments",
              "directconnect:DescribeDirectConnectGateways",
              "directconnect:DescribeVirtualGateways",
              "directconnect:DescribeVirtualInterfaces"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2Permissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInsightsPath",
              "ec2:DeleteNetworkInsightsAnalysis",
              "ec2:DeleteNetworkInsightsPath",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeManagedPrefixLists",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInsightsAnalyses",
              "ec2:DescribeNetworkInsightsPaths",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRegions",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayConnects",
              "ec2:DescribeTransitGatewayPeeringAttachments",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "ec2:SearchTransitGatewayRoutes",
              "ec2:StartNetworkInsightsAnalysis"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2TagsPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:*:ec2:*:*:network-insights-path/*",
              "arn:*:ec2:*:*:network-insights-analysis/*"
            ]
          },
          {
            "Sid": "ElasticloadbalancingPermissions",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GlobalacceleratorPermissions",
            "Effect": "Allow",
            "Action": [
              "globalaccelerator:ListAccelerators",
              "globalaccelerator:ListCustomRoutingAccelerators",
              "globalaccelerator:ListCustomRoutingEndpointGroups",
              "globalaccelerator:ListCustomRoutingListeners",
              "globalaccelerator:ListCustomRoutingPortMappings",
              "globalaccelerator:ListEndpointGroups",
              "globalaccelerator:ListListeners"
            ],
            "Resource": "*"
          },
          {
            "Sid": "NetworkFirewallPermissions",
            "Effect": "Allow",
            "Action": [
              "network-firewall:DescribeFirewall",
              "network-firewall:DescribeFirewallPolicy",
              "network-firewall:DescribeResourcePolicy",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:ListFirewallPolicies",
              "network-firewall:ListFirewalls",
              "network-firewall:ListRuleGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TirosPermissions",
            "Effect": "Allow",
            "Action": [
              "tiros:CreateQuery",
              "tiros:ExtendQuery",
              "tiros:GetQueryAnswer",
              "tiros:GetQueryExplanation",
              "tiros:GetQueryExtensionAccounts"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonMacieReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "macie2:Describe*",
              "macie2:Get*",
              "macie2:List*",
              "macie2:BatchGetCustomDataIdentifiers",
              "macie2:SearchResources"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonVPCNetworkAccessAnalyzerFullAccessPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DirectconnectPermissions",
            "Effect": "Allow",
            "Action": [
              "directconnect:DescribeConnections",
              "directconnect:DescribeDirectConnectGatewayAssociations",
              "directconnect:DescribeDirectConnectGatewayAttachments",
              "directconnect:DescribeDirectConnectGateways",
              "directconnect:DescribeVirtualGateways",
              "directconnect:DescribeVirtualInterfaces"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2Permissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInsightsAccessScope",
              "ec2:DeleteNetworkInsightsAccessScope",
              "ec2:DeleteNetworkInsightsAccessScopeAnalysis",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeCustomerGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeManagedPrefixLists",
              "ec2:DescribeNatGateways",
              "ec2:DescribeNetworkAcls",
              "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
              "ec2:DescribeNetworkInsightsAccessScopes",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribePrefixLists",
              "ec2:DescribeRegions",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeTransitGatewayAttachments",
              "ec2:DescribeTransitGatewayConnects",
              "ec2:DescribeTransitGatewayPeeringAttachments",
              "ec2:DescribeTransitGatewayRouteTables",
              "ec2:DescribeTransitGateways",
              "ec2:DescribeTransitGatewayVpcAttachments",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServiceConfigurations",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpnConnections",
              "ec2:DescribeVpnGateways",
              "ec2:GetManagedPrefixListEntries",
              "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
              "ec2:GetNetworkInsightsAccessScopeContent",
              "ec2:GetTransitGatewayRouteTablePropagations",
              "ec2:SearchTransitGatewayRoutes",
              "ec2:StartNetworkInsightsAccessScopeAnalysis"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2TagsPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:*:ec2:*:*:network-insights-access-scope/*",
              "arn:*:ec2:*:*:network-insights-access-scope-analysis/*"
            ]
          },
          {
            "Sid": "ElasticloadbalancingPermissions",
            "Effect": "Allow",
            "Action": [
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GlobalacceleratorPermissions",
            "Effect": "Allow",
            "Action": [
              "globalaccelerator:ListAccelerators",
              "globalaccelerator:ListCustomRoutingAccelerators",
              "globalaccelerator:ListCustomRoutingEndpointGroups",
              "globalaccelerator:ListCustomRoutingListeners",
              "globalaccelerator:ListCustomRoutingPortMappings",
              "globalaccelerator:ListEndpointGroups",
              "globalaccelerator:ListListeners"
            ],
            "Resource": "*"
          },
          {
            "Sid": "NetworkFirewallPermissions",
            "Effect": "Allow",
            "Action": [
              "network-firewall:DescribeFirewall",
              "network-firewall:DescribeFirewallPolicy",
              "network-firewall:DescribeResourcePolicy",
              "network-firewall:DescribeRuleGroup",
              "network-firewall:ListFirewallPolicies",
              "network-firewall:ListFirewalls",
              "network-firewall:ListRuleGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ResourceGroupsPermissions",
            "Effect": "Allow",
            "Action": [
              "resource-groups:ListGroupResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TagsPermissions",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TirosPermissions",
            "Effect": "Allow",
            "Action": [
              "tiros:CreateQuery",
              "tiros:GetQueryAnswer"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "EMRDescribeClusterPolicyForEMRWAL",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:DescribeCluster"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppFabricServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchEmitMetric",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/AppFabric"
              }
            }
          },
          {
            "Sid": "S3PutObject",
            "Effect": "Allow",
            "Action": [
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::*/AWSAppFabric/*",
            "Condition": {
              "StringEquals": {
                "s3:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "FirehosePutRecord",
            "Effect": "Allow",
            "Action": [
              "firehose:PutRecordBatch"
            ],
            "Resource": "arn:aws:firehose:*:*:deliverystream/*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "aws:ResourceTag/AWSAppFabricManaged": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResilienceHubAsssessmentExecutionPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSResilienceHubFullResourceStatement",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalableTargets",
              "autoscaling:DescribeAutoScalingGroups",
              "backup:DescribeBackupVault",
              "backup:GetBackupPlan",
              "backup:GetBackupSelection",
              "backup:ListBackupPlans",
              "backup:ListBackupSelections",
              "cloudformation:DescribeStacks",
              "cloudformation:ListStackResources",
              "cloudformation:ValidateTemplate",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "datasync:DescribeTask",
              "datasync:ListLocations",
              "datasync:ListTasks",
              "devops-guru:ListMonitoredResources",
              "dlm:GetLifecyclePolicies",
              "dlm:GetLifecyclePolicy",
              "docdb-elastic:GetCluster",
              "docdb-elastic:GetClusterSnapshot",
              "docdb-elastic:ListClusterSnapshots",
              "docdb-elastic:ListTagsForResource",
              "drs:DescribeJobs",
              "drs:DescribeSourceServers",
              "drs:GetReplicationConfiguration",
              "ds:DescribeDirectories",
              "dynamodb:DescribeContinuousBackups",
              "dynamodb:DescribeGlobalTable",
              "dynamodb:DescribeLimits",
              "dynamodb:DescribeTable",
              "dynamodb:ListGlobalTables",
              "dynamodb:ListTagsOfResource",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeFastSnapshotRestores",
              "ec2:DescribeFleets",
              "ec2:DescribeHosts",
              "ec2:DescribeInstances",
              "ec2:DescribeNatGateways",
              "ec2:DescribePlacementGroups",
              "ec2:DescribeRegions",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeTags",
              "ec2:DescribeVolumes",
              "ec2:DescribeVpcEndpoints",
              "ecr:DescribeRegistry",
              "ecs:DescribeCapacityProviders",
              "ecs:DescribeClusters",
              "ecs:DescribeContainerInstances",
              "ecs:DescribeServices",
              "ecs:DescribeTaskDefinition",
              "ecs:ListContainerInstances",
              "ecs:ListServices",
              "eks:DescribeCluster",
              "eks:DescribeFargateProfile",
              "eks:DescribeNodegroup",
              "eks:ListFargateProfiles",
              "eks:ListNodegroups",
              "elasticache:DescribeCacheClusters",
              "elasticache:DescribeGlobalReplicationGroups",
              "elasticache:DescribeReplicationGroups",
              "elasticache:DescribeSnapshots",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeLifecycleConfiguration",
              "elasticfilesystem:DescribeMountTargets",
              "elasticfilesystem:DescribeReplicationConfigurations",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetHealth",
              "fis:GetExperimentTemplate",
              "fis:ListExperimentTemplates",
              "fis:ListExperiments",
              "fsx:DescribeFileSystems",
              "lambda:GetFunctionConcurrency",
              "lambda:GetFunctionConfiguration",
              "lambda:ListAliases",
              "lambda:ListEventSourceMappings",
              "lambda:ListFunctionEventInvokeConfigs",
              "lambda:ListVersionsByFunction",
              "rds:DescribeDBClusterSnapshots",
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstanceAutomatedBackups",
              "rds:DescribeDBInstances",
              "rds:DescribeDBProxies",
              "rds:DescribeDBProxyTargets",
              "rds:DescribeDBSnapshots",
              "rds:DescribeGlobalClusters",
              "rds:ListTagsForResource",
              "resource-groups:GetGroup",
              "resource-groups:ListGroupResources",
              "route53-recovery-control-config:ListClusters",
              "route53-recovery-control-config:ListControlPanels",
              "route53-recovery-control-config:ListRoutingControls",
              "route53-recovery-readiness:GetReadinessCheckStatus",
              "route53-recovery-readiness:GetResourceSet",
              "route53-recovery-readiness:ListReadinessChecks",
              "route53:GetHealthCheck",
              "route53:ListHealthChecks",
              "route53:ListHostedZones",
              "route53:ListResourceRecordSets",
              "route53resolver:ListResolverEndpoints",
              "route53resolver:ListResolverEndpointIpAddresses",
              "s3:ListBucket",
              "servicecatalog:GetApplication",
              "servicecatalog:ListAssociatedResources",
              "sns:GetSubscriptionAttributes",
              "sns:GetTopicAttributes",
              "sns:ListSubscriptionsByTopic",
              "sqs:GetQueueAttributes",
              "sqs:GetQueueUrl",
              "ssm:DescribeAutomationExecutions",
              "states:DescribeStateMachine",
              "states:ListStateMachineVersions",
              "states:ListStateMachineAliases",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AWSResilienceHubApiGatewayStatement",
            "Effect": "Allow",
            "Action": [
              "apigateway:GET"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/apis/*",
              "arn:aws:apigateway:*::/restapis/*",
              "arn:aws:apigateway:*::/usageplans"
            ]
          },
          {
            "Sid": "AWSResilienceHubS3ArtifactStatement",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:PutObject",
              "s3:GetObject"
            ],
            "Resource": "arn:aws:s3:::aws-resilience-hub-artifacts-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AWSResilienceHubS3AccessStatement",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:GetBucketLogging",
              "s3:GetBucketObjectLockConfiguration",
              "s3:GetBucketPolicyStatus",
              "s3:GetBucketTagging",
              "s3:GetBucketVersioning",
              "s3:GetMultiRegionAccessPointRoutes",
              "s3:GetReplicationConfiguration",
              "s3:ListAllMyBuckets",
              "s3:ListMultiRegionAccessPoints"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AWSResilienceHubCloudWatchStatement",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "ResilienceHub"
              }
            }
          },
          {
            "Sid": "AWSResilienceHubSSMStatement",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParametersByPath"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/ResilienceHub/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppFabricFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appfabric:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KMSListAccess",
            "Effect": "Allow",
            "Action": [
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3ReadAccess",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "FirehoseReadAccess",
            "Effect": "Allow",
            "Action": [
              "firehose:DescribeDeliveryStream",
              "firehose:ListDeliveryStreams"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowUseOfServiceLinkedRole",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "appfabric.amazonaws.com"
              }
            },
            "Resource": "arn:aws:iam::*:role/aws-service-role/appfabric.amazonaws.com/AWSServiceRoleForAppFabric"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSAppFabricReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "appfabric:GetAppAuthorization",
              "appfabric:GetAppBundle",
              "appfabric:GetIngestion",
              "appfabric:GetIngestionDestination",
              "appfabric:ListAppAuthorizations",
              "appfabric:ListAppBundles",
              "appfabric:ListIngestionDestinations",
              "appfabric:ListIngestions",
              "appfabric:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonCognitoUnAuthedIdentitiesSessionPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CognitoUnAuthedIdentitiesSessionPolicy",
            "Effect": "Allow",
            "Action": [
              "rum:PutRumEvents",
              "sagemaker:InvokeEndpoint",
              "polly:*",
              "comprehend:*",
              "translate:*",
              "transcribe:*",
              "rekognition:*",
              "mobiletargeting:*",
              "firehose:*",
              "personalize:*",
              "geo:GetMap*",
              "geo:SearchPlaceIndex*",
              "geo:GetPlace",
              "geo:CalculateRoute*",
              "geo:*Geofence",
              "geo:*Geofences",
              "geo:*DevicePosition*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonEFSCSIDriverPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowDescribe",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
              "ec2:DescribeAvailabilityZones"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowCreateAccessPoint",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:CreateAccessPoint"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:RequestTag/efs.csi.aws.com/cluster": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "efs.csi.aws.com/cluster"
              }
            }
          },
          {
            "Sid": "AllowTagNewAccessPoints",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "elasticfilesystem:CreateAction": "CreateAccessPoint"
              },
              "Null": {
                "aws:RequestTag/efs.csi.aws.com/cluster": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "efs.csi.aws.com/cluster"
              }
            }
          },
          {
            "Sid": "AllowDeleteAccessPoint",
            "Effect": "Allow",
            "Action": "elasticfilesystem:DeleteAccessPoint",
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/efs.csi.aws.com/cluster": "false"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElementalMediaPackageV2FullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": "mediapackagev2:*",
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSElementalMediaPackageV2ReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": {
          "Effect": "Allow",
          "Action": [
            "mediapackagev2:List*",
            "mediapackagev2:Get*"
          ],
          "Resource": "*"
        }
      }
    },
    {
      "PolicyName": "AWSHealthImagingFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "medical-imaging:*"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "medical-imaging.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSHealthImagingReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "medical-imaging:GetDICOMImportJob",
              "medical-imaging:GetDatastore",
              "medical-imaging:GetImageFrame",
              "medical-imaging:GetImageSet",
              "medical-imaging:GetImageSetMetadata",
              "medical-imaging:ListDICOMImportJobs",
              "medical-imaging:ListDatastores",
              "medical-imaging:ListImageSetVersions",
              "medical-imaging:ListTagsForResource",
              "medical-imaging:SearchImageSets"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchFullAccessV2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchFullAccessPermissions",
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalingPolicies",
              "application-signals:*",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:DescribePolicies",
              "cloudwatch:*",
              "logs:*",
              "sns:CreateTopic",
              "sns:ListSubscriptions",
              "sns:ListSubscriptionsByTopic",
              "sns:ListTopics",
              "sns:Subscribe",
              "iam:GetPolicy",
              "iam:GetPolicyVersion",
              "iam:GetRole",
              "oam:ListSinks",
              "rum:*",
              "synthetics:*",
              "xray:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsServiceLinkedRolePermissions",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/application-signals.cloudwatch.amazonaws.com/AWSServiceRoleForCloudWatchApplicationSignals",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "application-signals.cloudwatch.amazonaws.com"
              }
            }
          },
          {
            "Sid": "EventsServicePermissions",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/events.amazonaws.com/AWSServiceRoleForCloudWatchEvents*",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "events.amazonaws.com"
              }
            }
          },
          {
            "Sid": "OAMReadPermissions",
            "Effect": "Allow",
            "Action": [
              "oam:ListAttachedLinks"
            ],
            "Resource": "arn:aws:oam:*:*:sink/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerPartnerServiceCatalogProductsLambdaServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "secretsmanager:GetSecretValue",
            "Resource": "arn:aws:secretsmanager:*:*:secret:*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/sagemaker:partner": false
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerPartnerServiceCatalogProductsApiGatewayServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "lambda:InvokeFunction",
            "Resource": "arn:aws:lambda:*:*:function:sagemaker-*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/sagemaker:project-name": "false",
                "aws:ResourceTag/sagemaker:partner": "false"
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "sagemaker:InvokeEndpoint",
            "Resource": "arn:aws:sagemaker:*:*:endpoint/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/sagemaker:project-name": "false",
                "aws:ResourceTag/sagemaker:partner": "false"
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerPartnerServiceCatalogProductsCloudFormationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsLambdaRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "lambda.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsApiGatewayRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "apigateway.amazonaws.com"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:DeleteFunction",
              "lambda:UpdateFunctionCode",
              "lambda:ListTags",
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:sagemaker-*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/sagemaker:project-name": "false",
                "aws:ResourceTag/sagemaker:partner": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:TagResource"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:sagemaker-*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/sagemaker:project-name": "false",
                "aws:ResourceTag/sagemaker:partner": "false"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "sagemaker:project-name",
                  "sagemaker:partner"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "lambda:PublishLayerVersion",
              "lambda:GetLayerVersion",
              "lambda:DeleteLayerVersion",
              "lambda:GetFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:layer:sagemaker-*",
              "arn:aws:lambda:*:*:function:sagemaker-*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "apigateway:GET",
              "apigateway:DELETE",
              "apigateway:PATCH",
              "apigateway:POST",
              "apigateway:PUT"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/restapis/*",
              "arn:aws:apigateway:*::/restapis"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/sagemaker:project-name": "false",
                "aws:ResourceTag/sagemaker:partner": "false"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "apigateway:POST",
              "apigateway:PUT"
            ],
            "Resource": [
              "arn:aws:apigateway:*::/restapis",
              "arn:aws:apigateway:*::/tags/*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/sagemaker:project-name": "false",
                "aws:ResourceTag/sagemaker:partner": "false"
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "sagemaker:project-name",
                  "sagemaker:partner"
                ]
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-*/lambda-auth-code/layer.zip"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMigrationHubRefactorSpaces-SSMAutomationPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstances"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyInstanceAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/refactor-spaces:ssm:optin": "true"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyInstanceAttribute"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/refactor-spaces:ssm:optin": "true"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "refactor-spaces:ssm:environment-id"
              }
            }
          },
          {
            "Effect": "Allow",
            "Action": "ssm:GetParameters",
            "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSApplicationMigrationService-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSPerformanceInsightsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonRDSPerformanceInsightsReadAccess",
            "Effect": "Allow",
            "Action": [
              "pi:DescribeDimensionKeys",
              "pi:GetDimensionKeyDetails",
              "pi:GetResourceMetadata",
              "pi:GetResourceMetrics",
              "pi:ListAvailableResourceDimensions",
              "pi:ListAvailableResourceMetrics"
            ],
            "Resource": "arn:aws:pi:*:*:metrics/rds/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsAnalisysReportFullAccess",
            "Effect": "Allow",
            "Action": [
              "pi:CreatePerformanceAnalysisReport",
              "pi:GetPerformanceAnalysisReport",
              "pi:ListPerformanceAnalysisReports",
              "pi:DeletePerformanceAnalysisReport"
            ],
            "Resource": "arn:aws:pi:*:*:perf-reports/rds/*/*"
          },
          {
            "Sid": "AmazonRDSPerformanceInsightsTaggingFullAccess",
            "Effect": "Allow",
            "Action": [
              "pi:TagResource",
              "pi:UntagResource",
              "pi:ListTagsForResource"
            ],
            "Resource": "arn:aws:pi:*:*:*/rds/*"
          },
          {
            "Sid": "AmazonRDSDescribeInstanceAccess",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonCloudWatchReadAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricData"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSEntityResolutionConsoleFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EntityResolutionAccess",
            "Effect": "Allow",
            "Action": [
              "entityresolution:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GlueSourcesConsoleDisplay",
            "Effect": "Allow",
            "Action": [
              "glue:GetSchema",
              "glue:SearchTables",
              "glue:GetSchemaByDefinition",
              "glue:GetSchemaVersion",
              "glue:GetSchemaVersionsDiff",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetTableVersion",
              "glue:GetTableVersions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3BucketsConsoleDisplay",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3SourcesConsoleDisplay",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketLocation",
              "s3:ListBucketVersions",
              "s3:GetBucketVersioning"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TaggingConsoleDisplay",
            "Effect": "Allow",
            "Action": [
              "tag:GetTagKeys",
              "tag:GetTagValues"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KMSConsoleDisplay",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ListRolesToPickRoleForPassing",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PassRoleToEntityResolutionService",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*entityresolution*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "entityresolution.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ManageEventBridgeRules",
            "Effect": "Allow",
            "Action": [
              "events:DeleteRule",
              "events:PutTargets",
              "events:PutRule"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/entity-resolution-automatic*"
            ]
          },
          {
            "Sid": "ADXReadAccess",
            "Effect": "Allow",
            "Action": [
              "dataexchange:GetDataSet"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSEntityResolutionConsoleReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EntityResolutionRead",
            "Effect": "Allow",
            "Action": [
              "entityresolution:Get*",
              "entityresolution:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSArtifactServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "organizations:ListAccounts",
              "organizations:DescribeOrganization",
              "organizations:DescribeAccount",
              "organizations:ListAWSServiceAccessForOrganization"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationMigrationServiceEc2InstancePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "MgnAgentInstallation",
            "Effect": "Allow",
            "Action": [
              "mgn:SendClientLogsForMgn",
              "mgn:RegisterAgentForMgn",
              "mgn:GetAgentInstallationAssetsForMgn"
            ],
            "Resource": "*"
          },
          {
            "Sid": "MgnAgentReplication",
            "Effect": "Allow",
            "Action": [
              "mgn:SendAgentMetricsForMgn",
              "mgn:SendAgentLogsForMgn",
              "mgn:UpdateAgentSourcePropertiesForMgn",
              "mgn:UpdateAgentReplicationInfoForMgn",
              "mgn:UpdateAgentConversionInfoForMgn",
              "mgn:GetAgentCommandForMgn",
              "mgn:GetAgentConfirmedResumeInfoForMgn",
              "mgn:GetAgentRuntimeConfigurationForMgn",
              "mgn:UpdateAgentBacklogForMgn",
              "mgn:GetAgentReplicationInfoForMgn"
            ],
            "Resource": "arn:aws:mgn:*:*:source-server/*"
          },
          {
            "Sid": "MgnSourceServerTagResource",
            "Effect": "Allow",
            "Action": "mgn:TagResource",
            "Resource": "arn:aws:mgn:*:*:source-server/*",
            "Condition": {
              "StringEquals": {
                "mgn:CreateAction": "RegisterAgentForMgn"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLaunchWizardFullAccessV2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AppInsightsActions0",
            "Effect": "Allow",
            "Action": "applicationinsights:*",
            "Resource": "*"
          },
          {
            "Sid": "ResourceGroupActions0",
            "Effect": "Allow",
            "Action": "resource-groups:List*",
            "Resource": "*"
          },
          {
            "Sid": "Route53Actions0",
            "Effect": "Allow",
            "Action": [
              "route53:ChangeResourceRecordSets",
              "route53:GetChange",
              "route53:ListResourceRecordSets",
              "route53:ListHostedZones",
              "route53:ListHostedZonesByName"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3Actions0",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:ListBucket",
              "s3:GetBucketLocation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "KmsActions0",
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchActions0",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:List*",
              "cloudwatch:Get*",
              "cloudwatch:Describe*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Ec2Actions0",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateInternetGateway",
              "ec2:CreateNatGateway",
              "ec2:CreateVpc",
              "ec2:CreateKeyPair",
              "ec2:CreateRoute",
              "ec2:CreateRouteTable",
              "ec2:CreateSubnet"
            ],
            "Resource": "*"
          },
          {
            "Sid": "Ec2Actions1",
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress",
              "ec2:AllocateHosts",
              "ec2:AssignPrivateIpAddresses",
              "ec2:AssociateAddress",
              "ec2:CreateDhcpOptions",
              "ec2:CreateEgressOnlyInternetGateway",
              "ec2:CreateNetworkInterface",
              "ec2:CreateVolume",
              "ec2:CreateVpcEndpoint",
              "ec2:CreateTags",
              "ec2:DeleteTags",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "ec2:ModifyInstanceAttribute",
              "ec2:ModifySubnetAttribute",
              "ec2:ModifyVolumeAttribute",
              "ec2:ModifyVpcAttribute",
              "ec2:AssociateDhcpOptions",
              "ec2:AssociateSubnetCidrBlock",
              "ec2:AttachInternetGateway",
              "ec2:AttachNetworkInterface",
              "ec2:AttachVolume",
              "ec2:DeleteDhcpOptions",
              "ec2:DeleteInternetGateway",
              "ec2:DeleteKeyPair",
              "ec2:DeleteNatGateway",
              "ec2:DeleteSecurityGroup",
              "ec2:DeleteVolume",
              "ec2:DeleteVpc",
              "ec2:DetachInternetGateway",
              "ec2:DetachVolume",
              "ec2:DeleteSnapshot",
              "ec2:AssociateRouteTable",
              "ec2:AssociateVpcCidrBlock",
              "ec2:DeleteNetworkAcl",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DeleteRoute",
              "ec2:DeleteRouteTable",
              "ec2:DeleteSubnet",
              "ec2:DetachNetworkInterface",
              "ec2:DisassociateAddress",
              "ec2:DisassociateVpcCidrBlock",
              "ec2:GetLaunchTemplateData",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:ModifyVolume",
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:GetConsoleOutput",
              "ec2:GetPasswordData",
              "ec2:ReleaseAddress",
              "ec2:ReplaceRoute",
              "ec2:ReplaceRouteTableAssociation",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DisassociateIamInstanceProfile",
              "ec2:DisassociateRouteTable",
              "ec2:DisassociateSubnetCidrBlock",
              "ec2:ModifyInstancePlacement",
              "ec2:DeletePlacementGroup",
              "ec2:CreatePlacementGroup",
              "elasticfilesystem:DeleteFileSystem",
              "elasticfilesystem:DeleteMountTarget",
              "ds:AddIpRoutes",
              "ds:CreateComputer",
              "ds:CreateMicrosoftAD",
              "ds:DeleteDirectory",
              "servicecatalog:AssociateProductWithPortfolio",
              "cloudformation:GetTemplateSummary",
              "sts:GetCallerIdentity"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "launchwizard.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CloudFormationActions0",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStack*",
              "cloudformation:Get*",
              "cloudformation:ListStacks",
              "cloudformation:SignalResource",
              "cloudformation:DeleteStack"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/LaunchWizard*/*",
              "arn:aws:cloudformation:*:*:stack/ApplicationInsights*/*"
            ]
          },
          {
            "Sid": "Ec2Actions2",
            "Effect": "Allow",
            "Action": [
              "ec2:StopInstances",
              "ec2:TerminateInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
              }
            }
          },
          {
            "Sid": "IamActions0",
            "Effect": "Allow",
            "Action": [
              "iam:CreateInstanceProfile",
              "iam:DeleteInstanceProfile",
              "iam:RemoveRoleFromInstanceProfile",
              "iam:AddRoleToInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonEC2RoleForLaunchWizard*",
              "arn:aws:iam::*:instance-profile/LaunchWizard*"
            ]
          },
          {
            "Sid": "IamActions1",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonEC2RoleForLaunchWizard",
              "arn:aws:iam::*:role/service-role/AmazonLambdaRoleForLaunchWizard",
              "arn:aws:iam::*:instance-profile/LaunchWizard*"
            ],
            "Condition": {
              "StringEqualsIfExists": {
                "iam:PassedToService": [
                  "lambda.amazonaws.com",
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Sid": "AutoScalingActions0",
            "Effect": "Allow",
            "Action": [
              "autoscaling:AttachInstances",
              "autoscaling:CreateAutoScalingGroup",
              "autoscaling:CreateLaunchConfiguration",
              "autoscaling:DeleteAutoScalingGroup",
              "autoscaling:DeleteLaunchConfiguration",
              "autoscaling:UpdateAutoScalingGroup",
              "autoscaling:CreateOrUpdateTags",
              "resource-groups:CreateGroup",
              "resource-groups:DeleteGroup",
              "sns:ListSubscriptionsByTopic",
              "sns:Publish",
              "ssm:DeleteDocument",
              "ssm:DeleteParameter*",
              "ssm:DescribeDocument*",
              "ssm:GetDocument",
              "ssm:PutParameter"
            ],
            "Resource": [
              "arn:aws:resource-groups:*:*:group/LaunchWizard*",
              "arn:aws:sns:*:*:*",
              "arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/LaunchWizard*",
              "arn:aws:autoscaling:*:*:launchConfiguration:*:launchConfigurationName/LaunchWizard*",
              "arn:aws:ssm:*:*:parameter/LaunchWizard*",
              "arn:aws:ssm:*:*:document/LaunchWizard*"
            ]
          },
          {
            "Sid": "SsmActions0",
            "Effect": "Allow",
            "Action": [
              "ssm:GetDocument",
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ssm:*::document/AWS-RunShellScript"
            ]
          },
          {
            "Sid": "SsmActions1",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
              }
            }
          },
          {
            "Sid": "SsmActions2",
            "Effect": "Allow",
            "Action": [
              "ssm:AddTagsToResource",
              "ssm:DescribeDocument",
              "ssm:GetDocument",
              "ssm:ListTagsForResource",
              "ssm:RemoveTagsFromResource"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:parameter/LaunchWizard*",
              "arn:aws:ssm:*:*:document/LaunchWizard*"
            ]
          },
          {
            "Sid": "SsmActions3",
            "Effect": "Allow",
            "Action": [
              "autoscaling:Describe*",
              "cloudformation:DescribeAccountLimits",
              "cloudformation:DescribeStackDriftDetectionStatus",
              "cloudformation:List*",
              "cloudformation:ValidateTemplate",
              "ds:Describe*",
              "ds:ListAuthorizedApplications",
              "ec2:Describe*",
              "ec2:Get*",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:GetUser",
              "iam:GetPolicyVersion",
              "iam:GetPolicy",
              "iam:List*",
              "resource-groups:Get*",
              "resource-groups:List*",
              "servicequotas:GetServiceQuota",
              "servicequotas:ListServiceQuotas",
              "sns:ListSubscriptions",
              "sns:ListTopics",
              "ssm:CreateDocument",
              "ssm:DescribeAutomation*",
              "ssm:DescribeInstanceInformation",
              "ssm:DescribeParameters",
              "ssm:GetAutomationExecution",
              "ssm:GetCommandInvocation",
              "ssm:GetParameter*",
              "ssm:GetConnectionStatus",
              "ssm:ListCommand*",
              "ssm:ListDocument*",
              "ssm:ListInstanceAssociations",
              "ssm:SendAutomationSignal",
              "tag:Get*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SsmActions4",
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution",
              "ssm:StopAutomationExecution"
            ],
            "Resource": "arn:aws:ssm:*:*:automation-definition/LaunchWizard-*:*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "launchwizard.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CloudFormationActions1",
            "Effect": "Allow",
            "Action": [
              "cloudformation:List*",
              "cloudformation:Describe*"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/LaunchWizard*/"
          },
          {
            "Sid": "IamActions2",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "autoscaling.amazonaws.com",
                  "application-insights.amazonaws.com",
                  "events.amazonaws.com",
                  "autoscaling.amazonaws.com.cn",
                  "events.amazonaws.com.cn"
                ]
              }
            }
          },
          {
            "Sid": "LaunchWizardActions0",
            "Effect": "Allow",
            "Action": "launchwizard:*",
            "Resource": "*"
          },
          {
            "Sid": "SqsActions0",
            "Effect": "Allow",
            "Action": [
              "sqs:TagQueue",
              "sqs:GetQueueUrl",
              "sqs:AddPermission",
              "sqs:ListQueues",
              "sqs:DeleteQueue",
              "sqs:GetQueueAttributes",
              "sqs:ListQueueTags",
              "sqs:CreateQueue",
              "sqs:SetQueueAttributes"
            ],
            "Resource": "arn:aws:sqs:*:*:LaunchWizard*"
          },
          {
            "Sid": "CloudWatchActions1",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "iam:GetInstanceProfile",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:LaunchWizard*",
              "arn:aws:iam::*:instance-profile/LaunchWizard*"
            ]
          },
          {
            "Sid": "EfsActions0",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "route53:ListHostedZones",
              "ec2:CreateSecurityGroup",
              "ec2:AuthorizeSecurityGroupIngress",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:CreateFileSystem",
              "elasticfilesystem:CreateMountTarget",
              "elasticfilesystem:DescribeMountTargets",
              "elasticfilesystem:DescribeMountTargetSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "S3Actions1",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::launchwizard*",
              "arn:aws:s3:::launchwizard*/*",
              "arn:aws:s3:::aws-sap-data-provider/config.properties"
            ]
          },
          {
            "Sid": "CloudFormationActions2",
            "Effect": "Allow",
            "Action": "cloudformation:TagResource",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": "LaunchWizard*"
              }
            }
          },
          {
            "Sid": "LambdaActions0",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:PutBucketVersioning",
              "s3:DeleteBucket",
              "lambda:CreateFunction",
              "lambda:DeleteFunction",
              "lambda:GetFunction",
              "lambda:GetFunctionConfiguration",
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:LaunchWizard*",
              "arn:aws:s3:::launchwizard*"
            ]
          },
          {
            "Sid": "DynamodbActions0",
            "Effect": "Allow",
            "Action": [
              "dynamodb:CreateTable",
              "dynamodb:DescribeTable",
              "dynamodb:DeleteTable"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/LaunchWizard*"
          },
          {
            "Sid": "SecretsManagerActions0",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:TagResource",
              "secretsmanager:UntagResource",
              "secretsmanager:PutResourcePolicy",
              "secretsmanager:DeleteResourcePolicy",
              "secretsmanager:ListSecretVersionIds",
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:LaunchWizard*"
          },
          {
            "Sid": "SecretsManagerActions1",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetRandomPassword",
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SsmActions5",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateOpsMetadata"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SsmActions6",
            "Effect": "Allow",
            "Action": "ssm:DeleteOpsMetadata",
            "Resource": "arn:aws:ssm:*:*:opsmetadata/aws/ssm/LaunchWizard*"
          },
          {
            "Sid": "SnsActions0",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:DeleteTopic",
              "sns:Subscribe",
              "sns:Unsubscribe"
            ],
            "Resource": "arn:aws:sns:*:*:LaunchWizard*"
          },
          {
            "Sid": "FsxActions0",
            "Effect": "Allow",
            "Action": [
              "fsx:UntagResource",
              "fsx:TagResource",
              "fsx:DeleteFileSystem",
              "fsx:ListTagsForResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/Name": "LaunchWizard*"
              }
            }
          },
          {
            "Sid": "FsxActions1",
            "Effect": "Allow",
            "Action": [
              "fsx:CreateFileSystem"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/Name": [
                  "LaunchWizard*"
                ]
              }
            }
          },
          {
            "Sid": "FsxActions2",
            "Effect": "Allow",
            "Action": [
              "fsx:DescribeFileSystems"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ServiceCatalogActions0",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:CreatePortfolio",
              "servicecatalog:DescribePortfolio",
              "servicecatalog:CreateConstraint",
              "servicecatalog:CreateProduct",
              "servicecatalog:AssociatePrincipalWithPortfolio",
              "servicecatalog:CreateProvisioningArtifact",
              "servicecatalog:TagResource",
              "servicecatalog:UntagResource"
            ],
            "Resource": [
              "arn:aws:servicecatalog:*:*:*/*",
              "arn:aws:catalog:*:*:*/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "launchwizard.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SsmActions7",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateAssociation",
              "ssm:DeleteAssociation"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWS-ConfigureAWSPackage",
              "arn:aws:ssm:*:*:association/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "launchwizard.amazonaws.com"
              }
            }
          },
          {
            "Sid": "EfsActions1",
            "Effect": "Allow",
            "Action": [
              "elasticfilesystem:UntagResource",
              "elasticfilesystem:TagResource"
            ],
            "Resource": "arn:aws:elasticfilesystem:*:*:file-system/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "launchwizard.amazonaws.com"
              }
            }
          },
          {
            "Sid": "LogsActions0",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:DeleteLogGroup",
              "logs:DescribeLogStreams",
              "logs:UntagResource",
              "logs:TagResource",
              "logs:CreateLogGroup",
              "logs:DeleteLogStream",
              "logs:PutLogEvents",
              "logs:GetLogEvents",
              "logs:GetLogDelivery",
              "logs:GetLogGroupFields",
              "logs:GetLogRecord",
              "logs:ListLogDeliveries"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:LaunchWizard*",
              "arn:aws:logs:*:*:log-group:LaunchWizard*:log-stream:*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "launchwizard.amazonaws.com"
              }
            }
          },
          {
            "Sid": "LogsActions1",
            "Effect": "Allow",
            "Action": "logs:DescribeLogGroups",
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "launchwizard.amazonaws.com"
              }
            }
          },
          {
            "Sid": "FsxActions3",
            "Effect": "Allow",
            "Action": [
              "fsx:CreateStorageVirtualMachine",
              "fsx:CreateVolume"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "launchwizard.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "FsxActions4",
            "Effect": "Allow",
            "Action": [
              "fsx:DescribeStorageVirtualMachines",
              "fsx:DescribeVolumes"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "launchwizard.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "FsxActions5",
            "Effect": "Allow",
            "Action": [
              "fsx:DeleteStorageVirtualMachine",
              "fsx:DeleteVolume"
            ],
            "Resource": [
              "arn:aws:fsx:*:*:storage-virtual-machine/*/*",
              "arn:aws:fsx:*:*:backup/*",
              "arn:aws:fsx:*:*:volume/*/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/aws:cloudformation:stack-id": "arn:aws:cloudformation:*:*:stack/LaunchWizard-*/*"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "launchwizard.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForCloudWatchMetrics_DbPerfInsightsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "pi:GetResourceMetrics"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneEnvironmentRolePermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateGlueConnection",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "aws-glue-service-resource"
                ]
              }
            }
          },
          {
            "Sid": "GlueOperations",
            "Effect": "Allow",
            "Action": [
              "glue:*DataQuality*",
              "glue:BatchCreatePartition",
              "glue:BatchDeleteConnection",
              "glue:BatchDeletePartition",
              "glue:BatchDeleteTable",
              "glue:BatchDeleteTableVersion",
              "glue:BatchGetJobs",
              "glue:BatchGetWorkflows",
              "glue:BatchStopJobRun",
              "glue:BatchUpdatePartition",
              "glue:CreateBlueprint",
              "glue:CreateConnection",
              "glue:CreateCrawler",
              "glue:CreateDatabase",
              "glue:CreateJob",
              "glue:CreatePartition",
              "glue:CreatePartitionIndex",
              "glue:CreateTable",
              "glue:CreateWorkflow",
              "glue:DeleteBlueprint",
              "glue:DeleteColumnStatisticsForPartition",
              "glue:DeleteColumnStatisticsForTable",
              "glue:DeleteConnection",
              "glue:DeleteCrawler",
              "glue:DeleteJob",
              "glue:DeletePartition",
              "glue:DeletePartitionIndex",
              "glue:DeleteTable",
              "glue:DeleteTableVersion",
              "glue:DeleteWorkflow",
              "glue:GetColumnStatisticsForPartition",
              "glue:GetColumnStatisticsForTable",
              "glue:GetConnection",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:ListSchemas",
              "glue:ListJobs",
              "glue:NotifyEvent",
              "glue:PutWorkflowRunProperties",
              "glue:ResetJobBookmark",
              "glue:ResumeWorkflowRun",
              "glue:SearchTables",
              "glue:StartBlueprintRun",
              "glue:StartCrawler",
              "glue:StartCrawlerSchedule",
              "glue:StartJobRun",
              "glue:StartWorkflowRun",
              "glue:StopCrawler",
              "glue:StopCrawlerSchedule",
              "glue:StopWorkflowRun",
              "glue:UpdateBlueprint",
              "glue:UpdateColumnStatisticsForPartition",
              "glue:UpdateColumnStatisticsForTable",
              "glue:UpdateConnection",
              "glue:UpdateCrawler",
              "glue:UpdateCrawlerSchedule",
              "glue:UpdateDatabase",
              "glue:UpdateJob",
              "glue:UpdatePartition",
              "glue:UpdateTable",
              "glue:UpdateWorkflow"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "PassRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/datazone*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "glue.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SameAccountKmsOperations",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:Decrypt",
              "kms:ListKeys"
            ],
            "Resource": "*",
            "Condition": {
              "StringNotEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "KmsOperationsWithResourceTag",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:Decrypt",
              "kms:ListKeys",
              "kms:Encrypt",
              "kms:GenerateDataKey",
              "kms:Verify",
              "kms:Sign"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "AnalyticsOperations",
            "Effect": "Allow",
            "Action": [
              "datazone:*",
              "sqlworkbench:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "QueryOperations",
            "Effect": "Allow",
            "Action": [
              "athena:BatchGetNamedQuery",
              "athena:BatchGetPreparedStatement",
              "athena:BatchGetQueryExecution",
              "athena:CreateNamedQuery",
              "athena:CreateNotebook",
              "athena:CreatePreparedStatement",
              "athena:CreatePresignedNotebookUrl",
              "athena:DeleteNamedQuery",
              "athena:DeleteNotebook",
              "athena:DeletePreparedStatement",
              "athena:ExportNotebook",
              "athena:GetDatabase",
              "athena:GetDataCatalog",
              "athena:GetNamedQuery",
              "athena:GetPreparedStatement",
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:GetQueryRuntimeStatistics",
              "athena:GetTableMetadata",
              "athena:GetWorkGroup",
              "athena:ImportNotebook",
              "athena:ListDatabases",
              "athena:ListDataCatalogs",
              "athena:ListEngineVersions",
              "athena:ListNamedQueries",
              "athena:ListPreparedStatements",
              "athena:ListQueryExecutions",
              "athena:ListTableMetadata",
              "athena:ListTagsForResource",
              "athena:ListWorkGroups",
              "athena:StartCalculationExecution",
              "athena:StartQueryExecution",
              "athena:StartSession",
              "athena:StopCalculationExecution",
              "athena:StopQueryExecution",
              "athena:TerminateSession",
              "athena:UpdateNamedQuery",
              "athena:UpdateNotebook",
              "athena:UpdateNotebookMetadata",
              "athena:UpdatePreparedStatement",
              "ec2:CreateNetworkInterface",
              "ec2:DeleteNetworkInterface",
              "ec2:Describe*",
              "glue:BatchCreatePartition",
              "glue:BatchDeletePartition",
              "glue:BatchDeleteTable",
              "glue:BatchDeleteTableVersion",
              "glue:BatchGetJobs",
              "glue:BatchGetPartition",
              "glue:BatchGetWorkflows",
              "glue:BatchUpdatePartition",
              "glue:CreateBlueprint",
              "glue:CreateConnection",
              "glue:CreateCrawler",
              "glue:CreateDatabase",
              "glue:CreateJob",
              "glue:CreatePartition",
              "glue:CreatePartitionIndex",
              "glue:CreateTable",
              "glue:CreateWorkflow",
              "glue:DeleteColumnStatisticsForPartition",
              "glue:DeleteColumnStatisticsForTable",
              "glue:DeletePartition",
              "glue:DeletePartitionIndex",
              "glue:DeleteTable",
              "glue:DeleteTableVersion",
              "glue:GetColumnStatisticsForPartition",
              "glue:GetColumnStatisticsForTable",
              "glue:GetConnection",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:ListSchemas",
              "glue:ListJobs",
              "glue:NotifyEvent",
              "glue:SearchTables",
              "glue:UpdateColumnStatisticsForPartition",
              "glue:UpdateColumnStatisticsForTable",
              "glue:UpdateDatabase",
              "glue:UpdatePartition",
              "glue:UpdateTable",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:ListGroups",
              "iam:ListRolePolicies",
              "iam:ListRoles",
              "iam:ListUsers",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:DescribeMetricFilters",
              "logs:DescribeQueries",
              "logs:DescribeQueryDefinitions",
              "logs:DescribeMetricFilters",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:GetLogEvents",
              "logs:GetLogGroupFields",
              "logs:GetQueryResults",
              "logs:GetLogRecord",
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:FilterLogEvents",
              "lakeformation:GetDataAccess",
              "lakeformation:GetDataLakeSettings",
              "lakeformation:GetResourceLFTags",
              "lakeformation:ListPermissions",
              "redshift-data:ListTables",
              "redshift-data:DescribeTable",
              "redshift-data:ListSchemas",
              "redshift-data:ListDatabases",
              "redshift-data:ExecuteStatement",
              "redshift-data:GetStatementResult",
              "redshift-data:DescribeStatement",
              "redshift:CreateClusterUser",
              "redshift:DescribeClusters",
              "redshift:DescribeDataShares",
              "redshift:GetClusterCredentials",
              "redshift:GetClusterCredentialsWithIAM",
              "redshift:JoinGroup",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListWorkgroups",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:GetWorkgroup",
              "redshift-serverless:GetCredentials",
              "secretsmanager:ListSecrets",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "QueryOperationsWithResourceTag",
            "Effect": "Allow",
            "Action": [
              "athena:GetQueryResultsStream"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "SecretsManagerOperationsWithTagKeys",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AmazonDataZoneDomain": "*",
                "aws:ResourceTag/AmazonDataZoneProject": "*"
              },
              "Null": {
                "aws:TagKeys": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AmazonDataZoneDomain",
                  "AmazonDataZoneProject"
                ]
              }
            }
          },
          {
            "Sid": "DataZoneS3Buckets",
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:GetObject",
              "s3:PutObject",
              "s3:PutObjectRetention",
              "s3:ReplicateObject",
              "s3:RestoreObject"
            ],
            "Resource": [
              "arn:aws:s3:::*/datazone/*"
            ]
          },
          {
            "Sid": "DataZoneS3BucketLocation",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ListDataZoneS3Bucket",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringLike": {
                "s3:prefix": [
                  "*/datazone/*",
                  "datazone/*"
                ]
              }
            }
          },
          {
            "Sid": "NotDeniedOperations",
            "Effect": "Deny",
            "NotAction": [
              "datazone:*",
              "sqlworkbench:*",
              "athena:BatchGetNamedQuery",
              "athena:BatchGetPreparedStatement",
              "athena:BatchGetQueryExecution",
              "athena:CreateNamedQuery",
              "athena:CreateNotebook",
              "athena:CreatePreparedStatement",
              "athena:CreatePresignedNotebookUrl",
              "athena:DeleteNamedQuery",
              "athena:DeleteNotebook",
              "athena:DeletePreparedStatement",
              "athena:ExportNotebook",
              "athena:GetDatabase",
              "athena:GetDataCatalog",
              "athena:GetNamedQuery",
              "athena:GetPreparedStatement",
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:GetQueryResultsStream",
              "athena:GetQueryRuntimeStatistics",
              "athena:GetTableMetadata",
              "athena:GetWorkGroup",
              "athena:ImportNotebook",
              "athena:ListDatabases",
              "athena:ListDataCatalogs",
              "athena:ListEngineVersions",
              "athena:ListNamedQueries",
              "athena:ListPreparedStatements",
              "athena:ListQueryExecutions",
              "athena:ListTableMetadata",
              "athena:ListTagsForResource",
              "athena:ListWorkGroups",
              "athena:StartCalculationExecution",
              "athena:StartQueryExecution",
              "athena:StartSession",
              "athena:StopCalculationExecution",
              "athena:StopQueryExecution",
              "athena:TerminateSession",
              "athena:UpdateNamedQuery",
              "athena:UpdateNotebook",
              "athena:UpdateNotebookMetadata",
              "athena:UpdatePreparedStatement",
              "ec2:CreateNetworkInterface",
              "ec2:CreateTags",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteTags",
              "ec2:Describe*",
              "glue:*DataQuality*",
              "glue:BatchCreatePartition",
              "glue:BatchDeleteConnection",
              "glue:BatchDeletePartition",
              "glue:BatchDeleteTable",
              "glue:BatchDeleteTableVersion",
              "glue:BatchGetJobs",
              "glue:BatchGetPartition",
              "glue:BatchGetWorkflows",
              "glue:BatchStopJobRun",
              "glue:BatchUpdatePartition",
              "glue:CreateBlueprint",
              "glue:CreateConnection",
              "glue:CreateCrawler",
              "glue:CreateDatabase",
              "glue:CreateJob",
              "glue:CreatePartition",
              "glue:CreatePartitionIndex",
              "glue:CreateTable",
              "glue:CreateWorkflow",
              "glue:DeleteBlueprint",
              "glue:DeleteColumnStatisticsForPartition",
              "glue:DeleteColumnStatisticsForTable",
              "glue:DeleteConnection",
              "glue:DeleteCrawler",
              "glue:DeleteJob",
              "glue:DeletePartition",
              "glue:DeletePartitionIndex",
              "glue:DeleteTable",
              "glue:DeleteTableVersion",
              "glue:DeleteWorkflow",
              "glue:GetColumnStatisticsForPartition",
              "glue:GetColumnStatisticsForTable",
              "glue:GetConnection",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:ListSchemas",
              "glue:ListJobs",
              "glue:NotifyEvent",
              "glue:PutWorkflowRunProperties",
              "glue:ResetJobBookmark",
              "glue:ResumeWorkflowRun",
              "glue:SearchTables",
              "glue:StartBlueprintRun",
              "glue:StartCrawler",
              "glue:StartCrawlerSchedule",
              "glue:StartJobRun",
              "glue:StartWorkflowRun",
              "glue:StopCrawler",
              "glue:StopCrawlerSchedule",
              "glue:StopWorkflowRun",
              "glue:UpdateBlueprint",
              "glue:UpdateColumnStatisticsForPartition",
              "glue:UpdateColumnStatisticsForTable",
              "glue:UpdateConnection",
              "glue:UpdateCrawler",
              "glue:UpdateCrawlerSchedule",
              "glue:UpdateDatabase",
              "glue:UpdateJob",
              "glue:UpdatePartition",
              "glue:UpdateTable",
              "glue:UpdateWorkflow",
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:List*",
              "iam:PassRole",
              "kms:DescribeKey",
              "kms:Decrypt",
              "kms:Encrypt",
              "kms:GenerateDataKey",
              "kms:ListKeys",
              "kms:Verify",
              "kms:Sign",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:DescribeMetricFilters",
              "logs:DescribeQueries",
              "logs:DescribeQueryDefinitions",
              "logs:StartQuery",
              "logs:StopQuery",
              "logs:GetLogEvents",
              "logs:GetLogGroupFields",
              "logs:GetQueryResults",
              "logs:GetLogRecord",
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:FilterLogEvents",
              "lakeformation:GetDataAccess",
              "lakeformation:GetDataLakeSettings",
              "lakeformation:GetResourceLFTags",
              "lakeformation:ListPermissions",
              "redshift-data:ListTables",
              "redshift-data:DescribeTable",
              "redshift-data:ListSchemas",
              "redshift-data:ListDatabases",
              "redshift-data:ExecuteStatement",
              "redshift-data:GetStatementResult",
              "redshift-data:DescribeStatement",
              "redshift:CreateClusterUser",
              "redshift:DescribeClusters",
              "redshift:DescribeDataShares",
              "redshift:GetClusterCredentials",
              "redshift:GetClusterCredentialsWithIAM",
              "redshift:JoinGroup",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListWorkgroups",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:GetWorkgroup",
              "redshift-serverless:GetCredentials",
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:GetObject",
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:PutObject",
              "s3:PutObjectRetention",
              "s3:ReplicateObject",
              "s3:RestoreObject",
              "secretsmanager:CreateSecret",
              "secretsmanager:ListSecrets",
              "secretsmanager:TagResource",
              "tag:GetResources"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonKeyspacesReadOnlyAccess_v2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "cassandra:Select"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScheduledActions",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "kms:DescribeKey",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryLaunchActionsPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "LaunchActionsPolicy1",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeInstanceInformation",
              "ssm:DescribeParameters"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "LaunchActionsPolicy2",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/*",
              "arn:aws:ssm:*:*:automation-definition/*:*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "LaunchActionsPolicy3",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*::document/AWS-*",
              "arn:aws:ssm:*::document/AWSCodeDeployAgent-*",
              "arn:aws:ssm:*::document/AWSConfigRemediation-*",
              "arn:aws:ssm:*::document/AWSConformancePacks-*",
              "arn:aws:ssm:*::document/AWSDisasterRecovery-*",
              "arn:aws:ssm:*::document/AWSDistroOTel-*",
              "arn:aws:ssm:*::document/AWSDocs-*",
              "arn:aws:ssm:*::document/AWSEC2-*",
              "arn:aws:ssm:*::document/AWSEC2Launch-*",
              "arn:aws:ssm:*::document/AWSFIS-*",
              "arn:aws:ssm:*::document/AWSFleetManager-*",
              "arn:aws:ssm:*::document/AWSIncidents-*",
              "arn:aws:ssm:*::document/AWSKinesisTap-*",
              "arn:aws:ssm:*::document/AWSMigration-*",
              "arn:aws:ssm:*::document/AWSNVMe-*",
              "arn:aws:ssm:*::document/AWSNitroEnclavesWindows-*",
              "arn:aws:ssm:*::document/AWSObservabilityExporter-*",
              "arn:aws:ssm:*::document/AWSPVDriver-*",
              "arn:aws:ssm:*::document/AWSQuickSetupType-*",
              "arn:aws:ssm:*::document/AWSQuickStarts-*",
              "arn:aws:ssm:*::document/AWSRefactorSpaces-*",
              "arn:aws:ssm:*::document/AWSResilienceHub-*",
              "arn:aws:ssm:*::document/AWSSAP-*",
              "arn:aws:ssm:*::document/AWSSAPTools-*",
              "arn:aws:ssm:*::document/AWSSQLServer-*",
              "arn:aws:ssm:*::document/AWSSSO-*",
              "arn:aws:ssm:*::document/AWSSupport-*",
              "arn:aws:ssm:*::document/AWSSystemsManagerSAP-*",
              "arn:aws:ssm:*::document/AmazonCloudWatch-*",
              "arn:aws:ssm:*::document/AmazonCloudWatchAgent-*",
              "arn:aws:ssm:*::document/AmazonECS-*",
              "arn:aws:ssm:*::document/AmazonEFSUtils-*",
              "arn:aws:ssm:*::document/AmazonEKS-*",
              "arn:aws:ssm:*::document/AmazonInspector-*",
              "arn:aws:ssm:*::document/AmazonInspector2-*",
              "arn:aws:ssm:*::document/AmazonInternal-*",
              "arn:aws:ssm:*::document/AwsEnaNetworkDriver-*",
              "arn:aws:ssm:*::document/AwsVssComponents-*",
              "arn:aws:ssm:*::automation-definition/AWS-*:*",
              "arn:aws:ssm:*::automation-definition/AWSCodeDeployAgent-*:*",
              "arn:aws:ssm:*::automation-definition/AWSConfigRemediation-*:*",
              "arn:aws:ssm:*::automation-definition/AWSConformancePacks-*:*",
              "arn:aws:ssm:*::automation-definition/AWSDisasterRecovery-*:*",
              "arn:aws:ssm:*::automation-definition/AWSDistroOTel-*:*",
              "arn:aws:ssm:*::automation-definition/AWSDocs-*:*",
              "arn:aws:ssm:*::automation-definition/AWSEC2-*:*",
              "arn:aws:ssm:*::automation-definition/AWSEC2Launch-*:*",
              "arn:aws:ssm:*::automation-definition/AWSFIS-*:*",
              "arn:aws:ssm:*::automation-definition/AWSFleetManager-*:*",
              "arn:aws:ssm:*::automation-definition/AWSIncidents-*:*",
              "arn:aws:ssm:*::automation-definition/AWSKinesisTap-*:*",
              "arn:aws:ssm:*::automation-definition/AWSMigration-*:*",
              "arn:aws:ssm:*::automation-definition/AWSNVMe-*:*",
              "arn:aws:ssm:*::automation-definition/AWSNitroEnclavesWindows-*:*",
              "arn:aws:ssm:*::automation-definition/AWSObservabilityExporter-*:*",
              "arn:aws:ssm:*::automation-definition/AWSPVDriver-*:*",
              "arn:aws:ssm:*::automation-definition/AWSQuickSetupType-*:*",
              "arn:aws:ssm:*::automation-definition/AWSQuickStarts-*:*",
              "arn:aws:ssm:*::automation-definition/AWSRefactorSpaces-*:*",
              "arn:aws:ssm:*::automation-definition/AWSResilienceHub-*:*",
              "arn:aws:ssm:*::automation-definition/AWSSAP-*:*",
              "arn:aws:ssm:*::automation-definition/AWSSAPTools-*:*",
              "arn:aws:ssm:*::automation-definition/AWSSQLServer-*:*",
              "arn:aws:ssm:*::automation-definition/AWSSSO-*:*",
              "arn:aws:ssm:*::automation-definition/AWSSupport-*:*",
              "arn:aws:ssm:*::automation-definition/AWSSystemsManagerSAP-*:*",
              "arn:aws:ssm:*::automation-definition/AmazonCloudWatch-*:*",
              "arn:aws:ssm:*::automation-definition/AmazonCloudWatchAgent-*:*",
              "arn:aws:ssm:*::automation-definition/AmazonECS-*:*",
              "arn:aws:ssm:*::automation-definition/AmazonEFSUtils-*:*",
              "arn:aws:ssm:*::automation-definition/AmazonEKS-*:*",
              "arn:aws:ssm:*::automation-definition/AmazonInspector-*:*",
              "arn:aws:ssm:*::automation-definition/AmazonInspector2-*:*",
              "arn:aws:ssm:*::automation-definition/AmazonInternal-*:*",
              "arn:aws:ssm:*::automation-definition/AwsEnaNetworkDriver-*:*",
              "arn:aws:ssm:*::automation-definition/AwsVssComponents-*:*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "LaunchActionsPolicy4",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              },
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "LaunchActionsPolicy5",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AWSDRS": "AllowLaunchingIntoThisInstance"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "LaunchActionsPolicy6",
            "Effect": "Allow",
            "Action": [
              "ssm:ListDocuments",
              "ssm:ListCommandInvocations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LaunchActionsPolicy7",
            "Effect": "Allow",
            "Action": [
              "ssm:ListDocumentVersions",
              "ssm:GetDocument",
              "ssm:DescribeDocument"
            ],
            "Resource": "arn:aws:ssm:*:*:document/*"
          },
          {
            "Sid": "LaunchActionsPolicy8",
            "Effect": "Allow",
            "Action": [
              "ssm:GetAutomationExecution"
            ],
            "Resource": "arn:aws:ssm:*:*:automation-execution/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "LaunchActionsPolicy9",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameters"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecoveryService-*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "LaunchActionsPolicy10",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameter",
              "ssm:PutParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecoveryService-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "LaunchActionsPolicy11",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceWithLaunchActionsRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "drs.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonDataZoneStatement",
            "Effect": "Allow",
            "Action": [
              "datazone:*"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ReadOnlyStatement",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:ListAliases",
              "iam:ListRoles",
              "sso:DescribeRegisteredRegions",
              "s3:ListAllMyBuckets",
              "redshift:DescribeClusters",
              "redshift-serverless:ListWorkgroups",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "secretsmanager:ListSecrets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "BucketReadOnlyStatement",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketLocation"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Sid": "CreateBucketStatement",
            "Effect": "Allow",
            "Action": "s3:CreateBucket",
            "Resource": "arn:aws:s3:::amazon-datazone*"
          },
          {
            "Sid": "RamCreateResourceStatement",
            "Effect": "Allow",
            "Action": [
              "ram:CreateResourceShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "ram:RequestedResourceType": "datazone:Domain"
              }
            }
          },
          {
            "Sid": "RamResourceStatement",
            "Effect": "Allow",
            "Action": [
              "ram:DeleteResourceShare",
              "ram:AssociateResourceShare",
              "ram:DisassociateResourceShare",
              "ram:RejectResourceShareInvitation"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ram:ResourceShareName": [
                  "DataZone*"
                ]
              }
            }
          },
          {
            "Sid": "RamResourceReadOnlyStatement",
            "Effect": "Allow",
            "Action": [
              "ram:GetResourceShares",
              "ram:GetResourceShareInvitations",
              "ram:GetResourceShareAssociations",
              "ram:ListResourceSharePermissions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMPassRoleStatement",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/AmazonDataZone*",
              "arn:aws:iam::*:role/service-role/AmazonDataZone*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:passedToService": "datazone.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMGetPolicyStatement",
            "Effect": "Allow",
            "Action": "iam:GetPolicy",
            "Resource": [
              "arn:aws:iam::*:policy/service-role/AmazonDataZoneRedshiftAccessPolicy*"
            ]
          },
          {
            "Sid": "DataZoneTagOnCreateDomainProjectTags",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AmazonDataZoneDomain",
                  "AmazonDataZoneProject"
                ]
              },
              "StringLike": {
                "aws:RequestTag/AmazonDataZoneDomain": "dzd_*",
                "aws:ResourceTag/AmazonDataZoneDomain": "dzd_*"
              }
            }
          },
          {
            "Sid": "DataZoneTagOnCreate",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AmazonDataZoneDomain"
                ]
              },
              "StringLike": {
                "aws:RequestTag/AmazonDataZoneDomain": "dzd_*",
                "aws:ResourceTag/AmazonDataZoneDomain": "dzd_*"
              }
            }
          },
          {
            "Sid": "CreateSecretStatement",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AmazonDataZoneDomain": "dzd_*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneRedshiftManageAccessRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "redshiftDataScopeDownPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift-data:BatchExecuteStatement",
              "redshift-data:DescribeTable",
              "redshift-data:ExecuteStatement",
              "redshift-data:ListTables",
              "redshift-data:ListSchemas",
              "redshift-data:ListDatabases"
            ],
            "Resource": [
              "arn:aws:redshift-serverless:*:*:workgroup/*",
              "arn:aws:redshift:*:*:cluster:*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "listSecretsPermission",
            "Effect": "Allow",
            "Action": "secretsmanager:ListSecrets",
            "Resource": "*"
          },
          {
            "Sid": "getWorkgroupPermission",
            "Effect": "Allow",
            "Action": "redshift-serverless:GetWorkgroup",
            "Resource": [
              "arn:aws:redshift-serverless:*:*:workgroup/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "getNamespacePermission",
            "Effect": "Allow",
            "Action": "redshift-serverless:GetNamespace",
            "Resource": [
              "arn:aws:redshift-serverless:*:*:namespace/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "redshiftDataPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift-data:DescribeStatement",
              "redshift-data:GetStatementResult",
              "redshift:DescribeClusters"
            ],
            "Resource": "*"
          },
          {
            "Sid": "dataSharesPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift:AuthorizeDataShare",
              "redshift:DescribeDataShares"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:datashare:*/datazone*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "associateDataShareConsumerPermission",
            "Effect": "Allow",
            "Action": "redshift:AssociateDataShareConsumer",
            "Resource": "arn:aws:redshift:*:*:datashare:*/datazone*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneRedshiftGlueProvisioningPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonDataZonePermissionsToCreateEnvironmentRole",
            "Effect": "Allow",
            "Action": [
              "iam:CreateRole",
              "iam:DetachRolePolicy",
              "iam:DeleteRolePolicy",
              "iam:AttachRolePolicy",
              "iam:PutRolePolicy"
            ],
            "Resource": "arn:aws:iam::*:role/datazone*",
            "Condition": {
              "StringEquals": {
                "iam:PermissionsBoundary": "arn:aws:iam::aws:policy/AmazonDataZoneEnvironmentRolePermissionsBoundary",
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "IamPassRolePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/datazone*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "glue.amazonaws.com",
                  "lakeformation.amazonaws.com"
                ],
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZonePermissionsToManageCreatedEnvironmentRole",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole",
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/datazone*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneCFStackCreationForEnvironments",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:TagResource"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/DataZone*"
            ],
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": "AmazonDataZoneEnvironment"
              },
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "AmazonDataZoneCFStackManagementForEnvironments",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackEvents"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/DataZone*"
            ]
          },
          {
            "Sid": "AmazonDataZoneEnvironmentParameterValidation",
            "Effect": "Allow",
            "Action": [
              "lakeformation:GetDataLakeSettings",
              "lakeformation:PutDataLakeSettings",
              "lakeformation:RevokePermissions",
              "lakeformation:ListPermissions",
              "glue:CreateDatabase",
              "glue:GetDatabase",
              "athena:GetWorkGroup",
              "logs:DescribeLogGroups",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:GetWorkgroup",
              "redshift:DescribeClusters",
              "secretsmanager:ListSecrets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonDataZoneEnvironmentLakeFormationPermissions",
            "Effect": "Allow",
            "Action": [
              "lakeformation:RegisterResource",
              "lakeformation:DeregisterResource",
              "lakeformation:GrantPermissions",
              "lakeformation:ListResources"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentGlueDeletePermissions",
            "Effect": "Allow",
            "Action": [
              "glue:DeleteDatabase"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentAthenaDeletePermissions",
            "Effect": "Allow",
            "Action": [
              "athena:DeleteWorkGroup"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentAthenaResourceCreation",
            "Effect": "Allow",
            "Action": [
              "athena:CreateWorkGroup",
              "athena:TagResource",
              "iam:TagRole",
              "iam:TagPolicy",
              "logs:TagLogGroup"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": "AmazonDataZoneEnvironment"
              },
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              },
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentLogGroupCreation",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:DeleteLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:datazone-*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": "AmazonDataZoneEnvironment"
              },
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              },
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentLogGroupManagement",
            "Action": [
              "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:datazone-*",
            "Effect": "Allow",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentIAMPolicyManagement",
            "Effect": "Allow",
            "Action": [
              "iam:DeletePolicy",
              "iam:CreatePolicy",
              "iam:GetPolicy",
              "iam:ListPolicyVersions"
            ],
            "Resource": [
              "arn:aws:iam::*:policy/datazone*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentS3ValidationPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets",
              "s3:ListBucket"
            ],
            "Resource": "arn:aws:s3:::*"
          },
          {
            "Sid": "AmazonDataZoneEnvironmentKMSDecryptPermissions",
            "Effect": "Allow",
            "Action": [
              "kms:GenerateDataKey",
              "kms:Decrypt"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "PermissionsToTagAmazonDataZoneEnvironmentGlueResources",
            "Effect": "Allow",
            "Action": [
              "glue:TagResource"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": "AmazonDataZoneEnvironment"
              },
              "Null": {
                "aws:RequestTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "PermissionsToGetAmazonDataZoneEnvironmentBlueprintTemplates",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "*",
            "Condition": {
              "StringNotEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              },
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "RedshiftDataPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift-data:ListSchemas",
              "redshift-data:ExecuteStatement"
            ],
            "Resource": [
              "arn:aws:redshift-serverless:*:*:workgroup/*",
              "arn:aws:redshift:*:*:cluster:*"
            ]
          },
          {
            "Sid": "DescribeStatementPermissions",
            "Effect": "Allow",
            "Action": [
              "redshift-data:DescribeStatement"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetSecretValuePermissions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "secretsmanager:ResourceTag/AmazonDataZoneDomain": "dzd*"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneGlueManageAccessRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "GlueTagDatabasePermissions",
            "Effect": "Allow",
            "Action": [
              "glue:TagResource",
              "glue:UntagResource",
              "glue:GetTags"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              },
              "ForAnyValue:StringLikeIfExists": {
                "aws:TagKeys": "DataZoneDiscoverable_*"
              }
            }
          },
          {
            "Sid": "GlueDataQualityPermissions",
            "Effect": "Allow",
            "Action": [
              "glue:ListDataQualityResults",
              "glue:GetDataQualityResult"
            ],
            "Resource": "arn:aws:glue:*:*:dataQualityRuleset/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "GlueTableDatabasePermissions",
            "Effect": "Allow",
            "Action": [
              "glue:CreateTable",
              "glue:DeleteTable",
              "glue:GetDatabases",
              "glue:GetTables"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*",
              "arn:aws:glue:*:*:table/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "LakeformationResourceSharingPermissions",
            "Effect": "Allow",
            "Action": [
              "lakeformation:BatchGrantPermissions",
              "lakeformation:BatchRevokePermissions",
              "lakeformation:CreateDataCellsFilter",
              "lakeformation:CreateLakeFormationOptIn",
              "lakeformation:DeleteDataCellsFilter",
              "lakeformation:DeleteLakeFormationOptIn",
              "lakeformation:GrantPermissions",
              "lakeformation:GetDataCellsFilter",
              "lakeformation:GetResourceLFTags",
              "lakeformation:ListDataCellsFilter",
              "lakeformation:ListLakeFormationOptIns",
              "lakeformation:ListPermissions",
              "lakeformation:RegisterResource",
              "lakeformation:RevokePermissions",
              "lakeformation:UpdateDataCellsFilter",
              "glue:GetDatabase",
              "glue:GetTable",
              "organizations:DescribeOrganization",
              "ram:GetResourceShareInvitations",
              "ram:ListResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CrossAccountRAMResourceSharingPermissions",
            "Effect": "Allow",
            "Action": [
              "glue:DeleteResourcePolicy",
              "glue:PutResourcePolicy"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*",
              "arn:aws:glue:*:*:table/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "ram.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CrossAccountLakeFormationResourceSharingPermissions",
            "Effect": "Allow",
            "Action": [
              "ram:CreateResourceShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringEqualsIfExists": {
                "ram:RequestedResourceType": [
                  "glue:Table",
                  "glue:Database",
                  "glue:Catalog"
                ]
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "lakeformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CrossAccountRAMResourceShareInvitationPermission",
            "Effect": "Allow",
            "Action": [
              "ram:AcceptResourceShareInvitation"
            ],
            "Resource": "arn:aws:ram:*:*:resource-share-invitation/*"
          },
          {
            "Sid": "CrossAccountRAMResourceSharingViaLakeFormationPermissions",
            "Effect": "Allow",
            "Action": [
              "ram:AssociateResourceShare",
              "ram:DeleteResourceShare",
              "ram:DisassociateResourceShare",
              "ram:GetResourceShares",
              "ram:ListResourceSharePermissions",
              "ram:UpdateResourceShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ram:ResourceShareName": [
                  "LakeFormation*"
                ]
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "lakeformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CrossAccountRAMResourceSharingViaLakeFormationHybrid",
            "Effect": "Allow",
            "Action": "ram:AssociateResourceSharePermission",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ram:PermissionArn": "arn:aws:ram::aws:permission/AWSRAMLFEnabled*"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "lakeformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "KMSDecryptPermission",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/datazone:projectId": "proj-all"
              }
            }
          },
          {
            "Sid": "GetRoleForDataZone",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AmazonDataZone*",
              "arn:aws:iam::*:role/service-role/AmazonDataZone*"
            ]
          },
          {
            "Sid": "PassRoleForDataLocationRegistration",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AmazonDataZone*",
              "arn:aws:iam::*:role/service-role/AmazonDataZone*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lakeformation.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneFullUserAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonDataZoneUserOperations",
            "Effect": "Allow",
            "Action": [
              "datazone:AcceptPredictions",
              "datazone:AcceptSubscriptionRequest",
              "datazone:AddEntityOwner",
              "datazone:AddPolicyGrant",
              "datazone:CancelMetadataGenerationRun",
              "datazone:CancelSubscription",
              "datazone:CreateAsset",
              "datazone:CreateAssetFilter",
              "datazone:CreateAssetRevision",
              "datazone:CreateAssetType",
              "datazone:CreateDataProduct",
              "datazone:CreateDataProductRevision",
              "datazone:CreateDataSource",
              "datazone:CreateDomainUnit",
              "datazone:CreateEnvironment",
              "datazone:CreateEnvironmentBlueprint",
              "datazone:CreateEnvironmentProfile",
              "datazone:CreateFormType",
              "datazone:CreateGlossary",
              "datazone:CreateGlossaryTerm",
              "datazone:CreateListingChangeSet",
              "datazone:CreateProject",
              "datazone:CreateProjectMembership",
              "datazone:CreateSubscriptionGrant",
              "datazone:CreateSubscriptionRequest",
              "datazone:DeleteAsset",
              "datazone:DeleteAssetFilter",
              "datazone:DeleteAssetType",
              "datazone:DeleteDataProduct",
              "datazone:DeleteDataSource",
              "datazone:DeleteDomainUnit",
              "datazone:DeleteEnvironment",
              "datazone:DeleteEnvironmentBlueprint",
              "datazone:DeleteEnvironmentProfile",
              "datazone:DeleteFormType",
              "datazone:DeleteGlossary",
              "datazone:DeleteGlossaryTerm",
              "datazone:DeleteListing",
              "datazone:DeleteProject",
              "datazone:DeleteProjectMembership",
              "datazone:DeleteSubscriptionGrant",
              "datazone:DeleteSubscriptionRequest",
              "datazone:DeleteSubscriptionTarget",
              "datazone:DeleteTimeSeriesDataPoints",
              "datazone:GetAsset",
              "datazone:GetAssetFilter",
              "datazone:GetAssetType",
              "datazone:GetDataProduct",
              "datazone:GetDataSource",
              "datazone:GetDataSourceRun",
              "datazone:GetDomain",
              "datazone:GetDomainUnit",
              "datazone:GetEnvironment",
              "datazone:GetEnvironmentActionLink",
              "datazone:GetEnvironmentBlueprint",
              "datazone:GetEnvironmentCredentials",
              "datazone:GetEnvironmentProfile",
              "datazone:GetFormType",
              "datazone:GetGlossary",
              "datazone:GetGlossaryTerm",
              "datazone:GetGroupProfile",
              "datazone:GetIamPortalLoginUrl",
              "datazone:GetLineageNode",
              "datazone:GetListing",
              "datazone:GetMetadataGenerationRun",
              "datazone:GetProject",
              "datazone:GetSubscription",
              "datazone:GetSubscriptionEligibility",
              "datazone:GetSubscriptionGrant",
              "datazone:GetSubscriptionRequestDetails",
              "datazone:GetSubscriptionTarget",
              "datazone:GetTimeSeriesDataPoint",
              "datazone:GetUserProfile",
              "datazone:ListAccountEnvironments",
              "datazone:ListAssetFilters",
              "datazone:ListAssetRevisions",
              "datazone:ListDataProductRevisions",
              "datazone:ListDataSourceRunActivities",
              "datazone:ListDataSourceRuns",
              "datazone:ListDataSources",
              "datazone:ListDomainUnitsForParent",
              "datazone:ListEntityOwners",
              "datazone:ListEnvironmentBlueprintConfigurations",
              "datazone:ListEnvironmentBlueprints",
              "datazone:ListEnvironmentProfiles",
              "datazone:ListEnvironments",
              "datazone:ListGroupsForUser",
              "datazone:ListLineageNodeHistory",
              "datazone:ListMetadataGenerationRuns",
              "datazone:ListNotifications",
              "datazone:ListPolicyGrants",
              "datazone:ListProjectMemberships",
              "datazone:ListProjects",
              "datazone:ListSubscriptionGrants",
              "datazone:ListSubscriptionRequests",
              "datazone:ListSubscriptionTargets",
              "datazone:ListSubscriptions",
              "datazone:ListTimeSeriesDataPoints",
              "datazone:ListWarehouseMetadata",
              "datazone:PostTimeSeriesDataPoints",
              "datazone:RejectPredictions",
              "datazone:RejectSubscriptionRequest",
              "datazone:RemoveEntityOwner",
              "datazone:RemovePolicyGrant",
              "datazone:RevokeSubscription",
              "datazone:Search",
              "datazone:SearchGroupProfiles",
              "datazone:SearchListings",
              "datazone:SearchTypes",
              "datazone:SearchUserProfiles",
              "datazone:StartDataSourceRun",
              "datazone:StartMetadataGenerationRun",
              "datazone:UpdateAssetFilter",
              "datazone:UpdateDataSource",
              "datazone:UpdateDomainUnit",
              "datazone:UpdateEnvironment",
              "datazone:UpdateEnvironmentBlueprint",
              "datazone:UpdateEnvironmentDeploymentStatus",
              "datazone:UpdateEnvironmentProfile",
              "datazone:UpdateGlossary",
              "datazone:UpdateGlossaryTerm",
              "datazone:UpdateProject",
              "datazone:UpdateSubscriptionGrantStatus",
              "datazone:UpdateSubscriptionRequest"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RAMResourceShareOperations",
            "Effect": "Allow",
            "Action": "ram:GetResourceShareAssociations",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneDomainExecutionRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DomainExecutionRoleStatement",
            "Effect": "Allow",
            "Action": [
              "datazone:AcceptPredictions",
              "datazone:AcceptSubscriptionRequest",
              "datazone:AddEntityOwner",
              "datazone:AddPolicyGrant",
              "datazone:CancelMetadataGenerationRun",
              "datazone:CancelSubscription",
              "datazone:CreateAsset",
              "datazone:CreateAssetFilter",
              "datazone:CreateAssetRevision",
              "datazone:CreateAssetType",
              "datazone:CreateDataProduct",
              "datazone:CreateDataProductRevision",
              "datazone:CreateDataSource",
              "datazone:CreateDomainUnit",
              "datazone:CreateEnvironment",
              "datazone:CreateEnvironmentBlueprint",
              "datazone:CreateEnvironmentProfile",
              "datazone:CreateFormType",
              "datazone:CreateGlossary",
              "datazone:CreateGlossaryTerm",
              "datazone:CreateListingChangeSet",
              "datazone:CreateProject",
              "datazone:CreateProjectMembership",
              "datazone:CreateSubscriptionGrant",
              "datazone:CreateSubscriptionRequest",
              "datazone:DeleteAsset",
              "datazone:DeleteAssetFilter",
              "datazone:DeleteAssetType",
              "datazone:DeleteDataProduct",
              "datazone:DeleteDataSource",
              "datazone:DeleteDomainUnit",
              "datazone:DeleteEnvironment",
              "datazone:DeleteEnvironmentBlueprint",
              "datazone:DeleteEnvironmentProfile",
              "datazone:DeleteFormType",
              "datazone:DeleteGlossary",
              "datazone:DeleteGlossaryTerm",
              "datazone:DeleteListing",
              "datazone:DeleteProject",
              "datazone:DeleteProjectMembership",
              "datazone:DeleteSubscriptionGrant",
              "datazone:DeleteSubscriptionRequest",
              "datazone:DeleteSubscriptionTarget",
              "datazone:DeleteTimeSeriesDataPoints",
              "datazone:GetAsset",
              "datazone:GetAssetFilter",
              "datazone:GetAssetType",
              "datazone:GetDataProduct",
              "datazone:GetDataSource",
              "datazone:GetDataSourceRun",
              "datazone:GetDomain",
              "datazone:GetDomainUnit",
              "datazone:GetEnvironment",
              "datazone:GetEnvironmentAction",
              "datazone:GetEnvironmentActionLink",
              "datazone:GetEnvironmentBlueprint",
              "datazone:GetEnvironmentCredentials",
              "datazone:GetEnvironmentProfile",
              "datazone:GetFormType",
              "datazone:GetGlossary",
              "datazone:GetGlossaryTerm",
              "datazone:GetGroupProfile",
              "datazone:GetLineageNode",
              "datazone:GetListing",
              "datazone:GetMetadataGenerationRun",
              "datazone:GetProject",
              "datazone:GetSubscription",
              "datazone:GetSubscriptionEligibility",
              "datazone:GetSubscriptionGrant",
              "datazone:GetSubscriptionRequestDetails",
              "datazone:GetSubscriptionTarget",
              "datazone:GetTimeSeriesDataPoint",
              "datazone:GetUserProfile",
              "datazone:ListAccountEnvironments",
              "datazone:ListAssetFilters",
              "datazone:ListAssetRevisions",
              "datazone:ListDataProductRevisions",
              "datazone:ListDataSourceRunActivities",
              "datazone:ListDataSourceRuns",
              "datazone:ListDataSources",
              "datazone:ListDomainUnitsForParent",
              "datazone:ListEntityOwners",
              "datazone:ListEnvironmentActions",
              "datazone:ListEnvironmentBlueprintConfigurationSummaries",
              "datazone:ListEnvironmentBlueprintConfigurations",
              "datazone:ListEnvironmentBlueprints",
              "datazone:ListEnvironmentProfiles",
              "datazone:ListEnvironments",
              "datazone:ListGroupsForUser",
              "datazone:ListLineageNodeHistory",
              "datazone:ListMetadataGenerationRuns",
              "datazone:ListNotifications",
              "datazone:ListPolicyGrants",
              "datazone:ListProjectMemberships",
              "datazone:ListProjects",
              "datazone:ListSubscriptionGrants",
              "datazone:ListSubscriptionRequests",
              "datazone:ListSubscriptionTargets",
              "datazone:ListSubscriptions",
              "datazone:ListTimeSeriesDataPoints",
              "datazone:ListWarehouseMetadata",
              "datazone:RejectPredictions",
              "datazone:RejectSubscriptionRequest",
              "datazone:RemoveEntityOwner",
              "datazone:RemovePolicyGrant",
              "datazone:RevokeSubscription",
              "datazone:Search",
              "datazone:SearchGroupProfiles",
              "datazone:SearchListings",
              "datazone:SearchTypes",
              "datazone:SearchUserProfiles",
              "datazone:StartDataSourceRun",
              "datazone:StartMetadataGenerationRun",
              "datazone:UpdateAssetFilter",
              "datazone:UpdateDataSource",
              "datazone:UpdateDomainUnit",
              "datazone:UpdateEnvironment",
              "datazone:UpdateEnvironmentBlueprint",
              "datazone:UpdateEnvironmentDeploymentStatus",
              "datazone:UpdateEnvironmentProfile",
              "datazone:UpdateGlossary",
              "datazone:UpdateGlossaryTerm",
              "datazone:UpdateProject",
              "datazone:UpdateSubscriptionGrantStatus",
              "datazone:UpdateSubscriptionRequest"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RAMResourceShareStatement",
            "Effect": "Allow",
            "Action": "ram:GetResourceShareAssociations",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSS3OnOutpostsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeVpcs",
              "ec2:DescribeCoipPools",
              "ec2:GetCoipPoolUsage",
              "ec2:DescribeAddresses",
              "ec2:DescribeLocalGatewayRouteTableVpcAssociations"
            ],
            "Resource": "*",
            "Sid": "DescribeVpcResources"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Sid": "CreateNetworkInterface"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": "S3 On Outposts"
              }
            },
            "Sid": "CreateTagsForCreateNetworkInterface"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:ipv4pool-ec2/*"
            ],
            "Sid": "AllocateIpAddress"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:AllocateAddress"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:elastic-ip/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": "S3 On Outposts"
              }
            },
            "Sid": "CreateTagsForAllocateIpAddress"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DisassociateAddress",
              "ec2:ReleaseAddress",
              "ec2:AssociateAddress"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/CreatedBy": "S3 On Outposts"
              }
            },
            "Sid": "ReleaseVpcResources"
          },
          {
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateNetworkInterface",
                  "AllocateAddress"
                ],
                "aws:RequestTag/CreatedBy": [
                  "S3 On Outposts"
                ]
              }
            },
            "Sid": "CreateTags"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerCanvasDirectDeployAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SageMakerEndpointPerms",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateEndpoint",
              "sagemaker:CreateEndpointConfig",
              "sagemaker:DeleteEndpoint",
              "sagemaker:DescribeEndpoint",
              "sagemaker:DescribeEndpointConfig",
              "sagemaker:InvokeEndpoint",
              "sagemaker:UpdateEndpoint"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:Canvas*",
              "arn:aws:sagemaker:*:*:canvas*"
            ]
          },
          {
            "Sid": "ReadCWInvocationMetrics",
            "Effect": "Allow",
            "Action": "cloudwatch:GetMetricData",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmplifyBackendDeployFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CDKPreDeploy",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackEvents",
              "cloudformation:GetTemplate",
              "cloudformation:ListStackResources",
              "cloudformation:GetTemplateSummary",
              "cloudformation:DeleteStack"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/amplify-*",
              "arn:aws:cloudformation:*:*:stack/CDKToolkit/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AmplifyMetadata",
            "Effect": "Allow",
            "Action": [
              "amplify:ListApps",
              "cloudformation:ListStacks",
              "ssm:DescribeParameters",
              "appsync:GetIntrospectionSchema",
              "amplify:GetBackendEnvironment"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AmplifyHotSwappableResources",
            "Effect": "Allow",
            "Action": [
              "appsync:GetSchemaCreationStatus",
              "appsync:StartSchemaCreation",
              "appsync:UpdateResolver",
              "appsync:ListFunctions",
              "appsync:UpdateFunction",
              "appsync:UpdateApiKey"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AmplifyHotSwappableFunctionResource",
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction",
              "lambda:UpdateFunctionCode",
              "lambda:GetFunction",
              "lambda:UpdateFunctionConfiguration"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:amplify-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AmplifySandboxLambdaLogsStreamingListTags",
            "Effect": "Allow",
            "Action": [
              "lambda:ListTags"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:amplify-*"
            ]
          },
          {
            "Sid": "AmplifySandboxLambdaLogsStreamingFilterLogEvents",
            "Effect": "Allow",
            "Action": [
              "logs:FilterLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/lambda/amplify-*:*"
            ]
          },
          {
            "Sid": "AmplifySchema",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*amplify*",
              "arn:aws:s3:::cdk-*-assets-*-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "CDKDeploy",
            "Effect": "Allow",
            "Action": [
              "sts:AssumeRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/cdk-*-deploy-role-*-*",
              "arn:aws:iam::*:role/cdk-*-file-publishing-role-*-*",
              "arn:aws:iam::*:role/cdk-*-image-publishing-role-*-*",
              "arn:aws:iam::*:role/cdk-*-lookup-role-*-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AmplifySSM",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParametersByPath",
              "ssm:GetParameters",
              "ssm:GetParameter"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:parameter/amplify/*",
              "arn:aws:ssm:*:*:parameter/cdk-bootstrap/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AmplifyModifySSMParam",
            "Effect": "Allow",
            "Action": [
              "ssm:PutParameter",
              "ssm:DeleteParameter",
              "ssm:DeleteParameters"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/amplify/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AmplifyDiscoverRDSVpcConfig",
            "Effect": "Allow",
            "Action": [
              "rds:DescribeDBProxies",
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters",
              "ec2:DescribeSubnets",
              "rds:DescribeDBSubnetGroups"
            ],
            "Resource": [
              "arn:aws:rds:*:*:db:*",
              "arn:aws:rds:*:*:cluster:*",
              "arn:aws:rds:*:*:db-proxy:*",
              "arn:aws:rds:*:*:subgrp:*",
              "arn:aws:ec2:*:*:subnet/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonConnectSynchronizationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowConnectActions",
            "Effect": "Allow",
            "Action": [
              "connect:CreateUser*",
              "connect:UpdateUser*",
              "connect:DeleteUser*",
              "connect:DescribeUser*",
              "connect:ListUser*",
              "connect:CreateRoutingProfile",
              "connect:UpdateRoutingProfile*",
              "connect:DeleteRoutingProfile",
              "connect:DescribeRoutingProfile",
              "connect:ListRoutingProfile*",
              "connect:CreateAgentStatus",
              "connect:UpdateAgentStatus",
              "connect:DescribeAgentStatus",
              "connect:ListAgentStatuses",
              "connect:CreateQuickConnect",
              "connect:UpdateQuickConnect*",
              "connect:DeleteQuickConnect",
              "connect:DescribeQuickConnect",
              "connect:ListQuickConnects",
              "connect:CreateHoursOfOperation",
              "connect:UpdateHoursOfOperation",
              "connect:DeleteHoursOfOperation",
              "connect:DescribeHoursOfOperation",
              "connect:ListHoursOfOperations",
              "connect:CreateQueue",
              "connect:UpdateQueue*",
              "connect:DeleteQueue",
              "connect:DescribeQueue",
              "connect:ListQueue*",
              "connect:CreatePrompt",
              "connect:UpdatePrompt",
              "connect:DeletePrompt",
              "connect:DescribePrompt",
              "connect:ListPrompts",
              "connect:GetPromptFile",
              "connect:CreateSecurityProfile",
              "connect:UpdateSecurityProfile",
              "connect:DeleteSecurityProfile",
              "connect:DescribeSecurityProfile",
              "connect:ListSecurityProfile*",
              "connect:CreateContactFlow*",
              "connect:UpdateContactFlow*",
              "connect:DeleteContactFlow*",
              "connect:DescribeContactFlow*",
              "connect:ListContactFlow*",
              "connect:BatchGetFlowAssociation",
              "connect:CreatePredefinedAttribute",
              "connect:UpdatePredefinedAttribute",
              "connect:DeletePredefinedAttribute",
              "connect:DescribePredefinedAttribute",
              "connect:ListPredefinedAttributes",
              "connect:ListTagsForResource",
              "connect:TagResource",
              "connect:UntagResource",
              "connect:ListTrafficDistributionGroups",
              "connect:ListPhoneNumbersV2",
              "connect:UpdatePhoneNumber",
              "connect:DescribePhoneNumber",
              "connect:AssociatePhoneNumberContactFlow",
              "connect:DisassociatePhoneNumberContactFlow",
              "connect:AssociateRoutingProfileQueues",
              "connect:DisassociateQueueQuickConnects",
              "connect:AssociateQueueQuickConnects",
              "connect:DisassociateUserProficiencies",
              "connect:AssociateUserProficiencies",
              "connect:DisassociateRoutingProfileQueues",
              "connect:CreateAuthenticationProfile",
              "connect:UpdateAuthenticationProfile",
              "connect:DescribeAuthenticationProfile",
              "connect:ListAuthenticationProfiles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowPutMetricsForConnectNamespace",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/Connect"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerCanvasDataPrepFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SageMakerListFeatureGroupOperation",
            "Effect": "Allow",
            "Action": "sagemaker:ListFeatureGroups",
            "Resource": "*"
          },
          {
            "Sid": "SageMakerFeatureGroupOperations",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateFeatureGroup",
              "sagemaker:DescribeFeatureGroup"
            ],
            "Resource": "arn:aws:sagemaker:*:*:feature-group/*"
          },
          {
            "Sid": "SageMakerProcessingJobOperations",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateProcessingJob",
              "sagemaker:DescribeProcessingJob",
              "sagemaker:AddTags"
            ],
            "Resource": "arn:aws:sagemaker:*:*:processing-job/*canvas-data-prep*"
          },
          {
            "Sid": "SageMakerProcessingJobListOperation",
            "Effect": "Allow",
            "Action": "sagemaker:ListProcessingJobs",
            "Resource": "*"
          },
          {
            "Sid": "SageMakerPipelineOperations",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribePipeline",
              "sagemaker:CreatePipeline",
              "sagemaker:UpdatePipeline",
              "sagemaker:DeletePipeline",
              "sagemaker:StartPipelineExecution",
              "sagemaker:ListPipelineExecutionSteps",
              "sagemaker:DescribePipelineExecution"
            ],
            "Resource": "arn:aws:sagemaker:*:*:pipeline/*canvas-data-prep*"
          },
          {
            "Sid": "KMSListOperations",
            "Effect": "Allow",
            "Action": "kms:ListAliases",
            "Resource": "*"
          },
          {
            "Sid": "KMSOperations",
            "Effect": "Allow",
            "Action": "kms:DescribeKey",
            "Resource": "arn:aws:kms:*:*:key/*"
          },
          {
            "Sid": "S3Operations",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:GetBucketCors",
              "s3:GetBucketLocation",
              "s3:AbortMultipartUpload"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*Sagemaker*",
              "arn:aws:s3:::*sagemaker*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "S3GetObjectOperation",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/SageMaker": "true"
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "S3ListOperations",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMListOperations",
            "Effect": "Allow",
            "Action": "iam:ListRoles",
            "Resource": "*"
          },
          {
            "Sid": "IAMGetOperations",
            "Effect": "Allow",
            "Action": "iam:GetRole",
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Sid": "IAMPassOperation",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "arn:aws:iam::*:role/*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "sagemaker.amazonaws.com",
                  "events.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "EventBridgePutOperation",
            "Effect": "Allow",
            "Action": [
              "events:PutRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-data-prep-job": "true"
              }
            }
          },
          {
            "Sid": "EventBridgeOperations",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:PutTargets"
            ],
            "Resource": "arn:aws:events:*:*:rule/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
              }
            }
          },
          {
            "Sid": "EventBridgeTagBasedOperations",
            "Effect": "Allow",
            "Action": [
              "events:TagResource"
            ],
            "Resource": "arn:aws:events:*:*:rule/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-data-prep-job": "true",
                "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
              }
            }
          },
          {
            "Sid": "EventBridgeListTagOperation",
            "Effect": "Allow",
            "Action": "events:ListTagsForResource",
            "Resource": "*"
          },
          {
            "Sid": "GlueOperations",
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:SearchTables"
            ],
            "Resource": [
              "arn:aws:glue:*:*:table/*",
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/*"
            ]
          },
          {
            "Sid": "EMROperations",
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:ListInstanceGroups"
            ],
            "Resource": "arn:aws:elasticmapreduce:*:*:cluster/*"
          },
          {
            "Sid": "EMRListOperation",
            "Effect": "Allow",
            "Action": "elasticmapreduce:ListClusters",
            "Resource": "*"
          },
          {
            "Sid": "AthenaListDataCatalogOperation",
            "Effect": "Allow",
            "Action": "athena:ListDataCatalogs",
            "Resource": "*"
          },
          {
            "Sid": "AthenaQueryExecutionOperations",
            "Effect": "Allow",
            "Action": [
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:StartQueryExecution",
              "athena:StopQueryExecution"
            ],
            "Resource": "arn:aws:athena:*:*:workgroup/*"
          },
          {
            "Sid": "AthenaDataCatalogOperations",
            "Effect": "Allow",
            "Action": [
              "athena:ListDatabases",
              "athena:ListTableMetadata"
            ],
            "Resource": "arn:aws:athena:*:*:datacatalog/*"
          },
          {
            "Sid": "RedshiftOperations",
            "Effect": "Allow",
            "Action": [
              "redshift-data:DescribeStatement",
              "redshift-data:CancelStatement",
              "redshift-data:GetStatementResult"
            ],
            "Resource": "*"
          },
          {
            "Sid": "RedshiftArnBasedOperations",
            "Effect": "Allow",
            "Action": [
              "redshift-data:ExecuteStatement",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables"
            ],
            "Resource": "arn:aws:redshift:*:*:cluster:*"
          },
          {
            "Sid": "RedshiftGetCredentialsOperation",
            "Effect": "Allow",
            "Action": "redshift:GetClusterCredentials",
            "Resource": [
              "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
              "arn:aws:redshift:*:*:dbname:*"
            ]
          },
          {
            "Sid": "SecretsManagerARNBasedOperation",
            "Effect": "Allow",
            "Action": "secretsmanager:CreateSecret",
            "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
          },
          {
            "Sid": "SecretManagerTagBasedOperation",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/SageMaker": "true",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "RDSOperation",
            "Effect": "Allow",
            "Action": "rds:DescribeDBInstances",
            "Resource": "*"
          },
          {
            "Sid": "LoggingOperation",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/sagemaker/studio:*"
          },
          {
            "Sid": "EMRServerlessCreateApplicationOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:CreateApplication",
            "Resource": "arn:aws:emr-serverless:*:*:/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessListApplicationOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:ListApplications",
            "Resource": "arn:aws:emr-serverless:*:*:/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessApplicationOperations",
            "Effect": "Allow",
            "Action": [
              "emr-serverless:UpdateApplication",
              "emr-serverless:GetApplication"
            ],
            "Resource": "arn:aws:emr-serverless:*:*:/applications/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessStartJobRunOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:StartJobRun",
            "Resource": "arn:aws:emr-serverless:*:*:/applications/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessListJobRunOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:ListJobRuns",
            "Resource": "arn:aws:emr-serverless:*:*:/applications/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessJobRunOperations",
            "Effect": "Allow",
            "Action": [
              "emr-serverless:GetJobRun",
              "emr-serverless:CancelJobRun"
            ],
            "Resource": "arn:aws:emr-serverless:*:*:/applications/*/jobruns/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EMRServerlessTagResourceOperation",
            "Effect": "Allow",
            "Action": "emr-serverless:TagResource",
            "Resource": "arn:aws:emr-serverless:*:*:/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-resource": "True",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "IAMPassOperationForEMRServerless",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AmazonSageMakerCanvasEMRSExecutionAccess-*",
              "arn:aws:iam::*:role/AmazonSageMakerCanvasEMRSExecutionAccess-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "emr-serverless.amazonaws.com",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDataLifecycleManagerSSMFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowSSMReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "ssm:GetCommandInvocation",
              "ssm:ListCommands",
              "ssm:DescribeInstanceInformation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowTaggedSSMDocumentsOnly",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:DescribeDocument",
              "ssm:GetDocument"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/DLMScriptsAccess": "true"
              }
            }
          },
          {
            "Sid": "AllowSpecificAWSOwnedSSMDocuments",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:DescribeDocument",
              "ssm:GetDocument"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSEC2-CreateVssSnapshot",
              "arn:aws:ssm:*:*:document/AWSSystemsManagerSAP-CreateDLMSnapshotForSAPHANA"
            ]
          },
          {
            "Sid": "AllowAllEC2Instances",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIAMIdentityCenterAllowListForIdentityContext",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "TrustedIdentityPropagation",
            "Effect": "Deny",
            "NotAction": [
              "aoss:APIAccessAll",
              "athena:BatchGetNamedQuery",
              "athena:BatchGetPreparedStatement",
              "athena:BatchGetQueryExecution",
              "athena:CreateNamedQuery",
              "athena:CreatePreparedStatement",
              "athena:DeleteNamedQuery",
              "athena:DeletePreparedStatement",
              "athena:GetNamedQuery",
              "athena:GetPreparedStatement",
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:GetQueryResultsStream",
              "athena:GetQueryRuntimeStatistics",
              "athena:GetWorkGroup",
              "athena:ListNamedQueries",
              "athena:ListPreparedStatements",
              "athena:ListQueryExecutions",
              "athena:StartQueryExecution",
              "athena:StopQueryExecution",
              "athena:UpdateNamedQuery",
              "athena:UpdatePreparedStatement",
              "athena:GetDatabase",
              "athena:GetDataCatalog",
              "athena:GetTableMetadata",
              "athena:ListDatabases",
              "athena:ListDataCatalogs",
              "athena:ListTableMetadata",
              "athena:ListWorkGroups",
              "elasticmapreduce:GetClusterSessionCredentials",
              "elasticmapreduce:AddJobFlowSteps",
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:CancelSteps",
              "elasticmapreduce:DescribeStep",
              "elasticmapreduce:ListSteps",
              "es:ESHttpHead",
              "es:ESHttpPost",
              "es:ESHttpGet",
              "es:ESHttpPatch",
              "es:ESHttpDelete",
              "es:ESHttpPut",
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetTableVersions",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:BatchGetPartition",
              "glue:GetColumnStatisticsForPartition",
              "glue:GetColumnStatisticsForTable",
              "glue:SearchTables",
              "glue:CreateDatabase",
              "glue:UpdateDatabase",
              "glue:DeleteDatabase",
              "glue:CreateTable",
              "glue:DeleteTable",
              "glue:BatchDeleteTable",
              "glue:UpdateTable",
              "glue:BatchCreatePartition",
              "glue:CreatePartition",
              "glue:DeletePartition",
              "glue:BatchDeletePartition",
              "glue:UpdatePartition",
              "glue:BatchUpdatePartition",
              "glue:DeleteColumnStatisticsForPartition",
              "glue:DeleteColumnStatisticsForTable",
              "glue:UpdateColumnStatisticsForPartition",
              "glue:UpdateColumnStatisticsForTable",
              "lakeformation:GetDataAccess",
              "s3:GetAccessGrantsInstanceForPrefix",
              "s3:GetDataAccess",
              "q:StartConversation",
              "q:SendMessage",
              "q:ListConversations",
              "q:GetConversation",
              "q:StartTroubleshootingAnalysis",
              "q:GetTroubleshootingResults",
              "q:StartTroubleshootingResolutionExplanation",
              "q:UpdateTroubleshootingCommandResult",
              "qapps:CreateQApp",
              "qapps:PredictProblemStatementFromConversation",
              "qapps:PredictQAppFromProblemStatement",
              "qapps:CopyQApp",
              "qapps:GetQApp",
              "qapps:ListQApps",
              "qapps:UpdateQApp",
              "qapps:DeleteQApp",
              "qapps:AssociateQAppWithUser",
              "qapps:DisassociateQAppFromUser",
              "qapps:ImportDocumentToQApp",
              "qapps:ImportDocumentToQAppSession",
              "qapps:CreateLibraryItem",
              "qapps:GetLibraryItem",
              "qapps:UpdateLibraryItem",
              "qapps:CreateLibraryItemReview",
              "qapps:ListLibraryItems",
              "qapps:CreateSubscriptionToken",
              "qapps:StartQAppSession",
              "qapps:StopQAppSession",
              "qapps:PredictQApp",
              "qapps:ImportDocument",
              "qapps:AssociateLibraryItemReview",
              "qapps:DisassociateLibraryItemReview",
              "qapps:GetQAppSession",
              "qapps:UpdateQAppSession",
              "qapps:GetQAppSessionMetadata",
              "qapps:UpdateQAppSessionMetadata",
              "qapps:TagResource",
              "qbusiness:Chat",
              "qbusiness:ChatSync",
              "qbusiness:ListConversations",
              "qbusiness:ListMessages",
              "qbusiness:DeleteConversation",
              "qbusiness:PutFeedback",
              "sts:SetContext"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchApplicationSignalsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "XRayPermission",
            "Effect": "Allow",
            "Action": [
              "xray:GetServiceGraph"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "CWLogsPermission",
            "Effect": "Allow",
            "Action": [
              "logs:StartQuery",
              "logs:GetQueryResults"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/appsignals/*:*",
              "arn:aws:logs:*:*:log-group:/aws/application-signals/data:*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "CWListMetricsPermission",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:ListMetrics"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "CWGetMetricDataPermission",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "TagsPermission",
            "Effect": "Allow",
            "Action": [
              "tag:GetResources"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "EC2AutoScalingPermission",
            "Effect": "Allow",
            "Action": [
              "autoscaling:DescribeAutoScalingGroups"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "PartnerCentralAccountManagementUserRoleAssociation",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PassPartnerCentralRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/PartnerCentralRoleFor*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "partnercentral-account-management.amazonaws.com"
              }
            }
          },
          {
            "Sid": "PartnerUserRoleAssociation",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "partnercentral-account-management:AssociatePartnerUser",
              "partnercentral-account-management:DisassociatePartnerUser"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRolePolicyForBackupRestoreTesting",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "BackupActions",
            "Effect": "Allow",
            "Action": [
              "backup:DescribeRecoveryPoint",
              "backup:DescribeRestoreJob",
              "backup:DescribeProtectedResource",
              "backup:GetRecoveryPointRestoreMetadata",
              "backup:ListBackupVaults",
              "backup:ListProtectedResources",
              "backup:ListProtectedResourcesByBackupVault",
              "backup:ListRecoveryPointsByBackupVault",
              "backup:ListRecoveryPointsByResource",
              "backup:ListTags",
              "backup:StartRestoreJob"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IamPassRole",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "backup.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DescribeActions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeSnapshotTierStatus",
              "ec2:DescribeTags",
              "ec2:DescribeVolumes",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
              "fsx:DescribeFileSystems",
              "fsx:DescribeVolumes",
              "fsx:ListTagsForResource",
              "rds:DescribeDBInstances",
              "rds:DescribeDBClusters",
              "rds:DescribeDBInstanceAutomatedBackups",
              "rds:DescribeDBClusterAutomatedBackups",
              "rds:ListTagsForResource",
              "redshift:DescribeClusters"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DeleteActions",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume",
              "ec2:TerminateInstances",
              "elasticfilesystem:DeleteFilesystem",
              "elasticfilesystem:DeleteMountTarget",
              "rds:DeleteDBCluster",
              "rds:DeleteDBInstance",
              "fsx:DeleteFileSystem",
              "fsx:DeleteVolume"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/awsbackup-restore-test": "false"
              }
            }
          },
          {
            "Sid": "DdbDeleteActions",
            "Effect": "Allow",
            "Action": [
              "dynamodb:DeleteTable",
              "dynamodb:DescribeTable"
            ],
            "Resource": "arn:aws:dynamodb:*:*:table/awsbackup-restore-test-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "RedshiftDeleteActions",
            "Effect": "Allow",
            "Action": "redshift:DeleteCluster",
            "Resource": "arn:aws:redshift:*:*:cluster:awsbackup-restore-test-*"
          },
          {
            "Sid": "S3DeleteActions",
            "Effect": "Allow",
            "Action": [
              "s3:DeleteBucket",
              "s3:GetLifecycleConfiguration",
              "s3:PutLifecycleConfiguration"
            ],
            "Resource": "arn:aws:s3:::awsbackup-restore-test-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "TimestreamDeleteActions",
            "Effect": "Allow",
            "Action": "timestream:DeleteTable",
            "Resource": "arn:aws:timestream:*:*:database/*/table/awsbackup-restore-test-*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIncidentManagerIncidentAccessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "IncidentAccessPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStackEvents",
              "cloudformation:DescribeStackResources",
              "codedeploy:BatchGetDeployments",
              "codedeploy:ListDeployments",
              "codedeploy:ListDeploymentTargets",
              "autoscaling:DescribeAutoScalingInstances"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSIoTTwinMakerServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SiteWiseAssetReadAccess",
            "Effect": "Allow",
            "Action": [
              "iotsitewise:DescribeAsset"
            ],
            "Resource": [
              "arn:aws:iotsitewise:*:*:asset/*"
            ]
          },
          {
            "Sid": "SiteWiseAssetModelReadAccess",
            "Effect": "Allow",
            "Action": [
              "iotsitewise:DescribeAssetModel"
            ],
            "Resource": [
              "arn:aws:iotsitewise:*:*:asset-model/*"
            ]
          },
          {
            "Sid": "SiteWiseAssetModelAndAssetListAccess",
            "Effect": "Allow",
            "Action": [
              "iotsitewise:ListAssets",
              "iotsitewise:ListAssetModels"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "TwinMakerAccess",
            "Effect": "Allow",
            "Action": [
              "iottwinmaker:GetEntity",
              "iottwinmaker:CreateEntity",
              "iottwinmaker:UpdateEntity",
              "iottwinmaker:DeleteEntity",
              "iottwinmaker:ListEntities",
              "iottwinmaker:GetComponentType",
              "iottwinmaker:CreateComponentType",
              "iottwinmaker:UpdateComponentType",
              "iottwinmaker:DeleteComponentType",
              "iottwinmaker:ListComponentTypes"
            ],
            "Resource": [
              "arn:aws:iottwinmaker:*:*:workspace/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "iottwinmaker:linkedServices": [
                  "IOTSITEWISE"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSResourceExplorerOrganizationsAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "resource-explorer-2:*",
              "ec2:DescribeRegions",
              "ram:ListResources",
              "ram:GetResourceShares",
              "organizations:ListAccounts",
              "organizations:ListRoots",
              "organizations:ListOrganizationalUnitsForParent",
              "organizations:ListAccountsForParent",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:DescribeOrganization"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ResourceExplorerGetSLRAccess",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/resource-explorer-2.amazonaws.com/AWSServiceRoleForResourceExplorer"
          },
          {
            "Sid": "ResourceExplorerCreateSLRAccess",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": [
                  "resource-explorer-2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "OrganizationsAdministratorAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess",
              "organizations:DisableAWSServiceAccess",
              "organizations:RegisterDelegatedAdministrator",
              "organizations:DeregisterDelegatedAdministrator"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "organizations:ServicePrincipal": [
                  "resource-explorer-2.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSrePostPrivateCloudWatchAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchPublishMetrics",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/rePostPrivate",
                  "AWS/Usage"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceDeploymentServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ManageMarketplaceDeploymentSecrets",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:PutSecretValue",
              "secretsmanager:DescribeSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:RemoveRegionsFromReplication"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:marketplace-deployment*!*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "ListSecrets",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:ListSecrets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "TagMarketplaceDeploymentSecrets",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:marketplace-deployment!*",
            "Condition": {
              "Null": {
                "aws:RequestTag/expirationDate": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "expirationDate"
                ]
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGitSyncServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AccessGitRepos",
            "Effect": "Allow",
            "Action": [
              "codestar-connections:UseConnection",
              "codeconnections:UseConnection"
            ],
            "Resource": [
              "arn:aws:codestar-connections:*:*:connection/*",
              "arn:aws:codeconnections:*:*:connection/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "EC2ImageBuilderLifecycleExecutionPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "Ec2ImagePermission",
            "Effect": "Allow",
            "Action": [
              "ec2:EnableImage",
              "ec2:DeregisterImage",
              "ec2:EnableImageDeprecation",
              "ec2:DescribeImageAttribute",
              "ec2:DisableImage",
              "ec2:DisableImageDeprecation"
            ],
            "Resource": "arn:aws:ec2:*::image/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Sid": "EC2DeleteSnapshotPermission",
            "Effect": "Allow",
            "Action": "ec2:DeleteSnapshot",
            "Resource": "arn:aws:ec2:*::snapshot/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/CreatedBy": "EC2 Image Builder"
              }
            }
          },
          {
            "Sid": "EC2TagsPermission",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteTags",
              "ec2:CreateTags"
            ],
            "Resource": [
              "arn:aws:ec2:*::snapshot/*",
              "arn:aws:ec2:*::image/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/DeprecatedBy": "EC2 Image Builder",
                "aws:ResourceTag/CreatedBy": "EC2 Image Builder"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "DeprecatedBy"
              }
            }
          },
          {
            "Sid": "ECRImagePermission",
            "Effect": "Allow",
            "Action": [
              "ecr:BatchGetImage",
              "ecr:BatchDeleteImage"
            ],
            "Resource": "arn:aws:ecr:*:*:repository/*",
            "Condition": {
              "StringEquals": {
                "ecr:ResourceTag/LifecycleExecutionAccess": "EC2 Image Builder"
              }
            }
          },
          {
            "Sid": "ImageBuilderEC2TagServicePermission",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "tag:GetResources",
              "imagebuilder:DeleteImage"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonInspector2AgentlessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "InstanceIdentification",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "ec2:DescribeSnapshots"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetSnapshotData",
            "Effect": "Allow",
            "Action": [
              "ebs:ListSnapshotBlocks",
              "ebs:GetSnapshotBlock"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/InspectorScan": "*"
              }
            }
          },
          {
            "Sid": "CreateSnapshotsAnyInstanceOrVolume",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshots",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:volume/*"
            ]
          },
          {
            "Sid": "DenyCreateSnapshotsOnExcludedInstances",
            "Effect": "Deny",
            "Action": "ec2:CreateSnapshots",
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/InspectorEc2Exclusion": "true"
              }
            }
          },
          {
            "Sid": "CreateSnapshotsOnAnySnapshotOnlyWithTag",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshots",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:TagKeys": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "InspectorScan"
              }
            }
          },
          {
            "Sid": "CreateOnlyInspectorScanTagOnlyUsingCreateSnapshots",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "ec2:CreateAction": "CreateSnapshots"
              },
              "Null": {
                "aws:TagKeys": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": "InspectorScan"
              }
            }
          },
          {
            "Sid": "DeleteOnlySnapshotsTaggedForScanning",
            "Effect": "Allow",
            "Action": "ec2:DeleteSnapshot",
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/InspectorScan": "*"
              }
            }
          },
          {
            "Sid": "DenyKmsDecryptForExcludedKeys",
            "Effect": "Deny",
            "Action": "kms:Decrypt",
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/InspectorEc2Exclusion": "true"
              }
            }
          },
          {
            "Sid": "DecryptSnapshotBlocksVolContext",
            "Effect": "Allow",
            "Action": "kms:Decrypt",
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              },
              "StringLike": {
                "kms:ViaService": "ec2.*.amazonaws.com",
                "kms:EncryptionContext:aws:ebs:id": "vol-*"
              }
            }
          },
          {
            "Sid": "DecryptSnapshotBlocksSnapContext",
            "Effect": "Allow",
            "Action": "kms:Decrypt",
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              },
              "StringLike": {
                "kms:ViaService": "ec2.*.amazonaws.com",
                "kms:EncryptionContext:aws:ebs:id": "snap-*"
              }
            }
          },
          {
            "Sid": "DescribeKeysForEbsOperations",
            "Effect": "Allow",
            "Action": "kms:DescribeKey",
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              },
              "StringLike": {
                "kms:ViaService": "ec2.*.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ListKeyResourceTags",
            "Effect": "Allow",
            "Action": "kms:ListResourceTags",
            "Resource": "arn:aws:kms:*:*:key/*"
          }
        ]
      }
    },
    {
      "PolicyName": "CostOptimizationHubServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AwsOrgsAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListParents",
              "organizations:DescribeOrganizationalUnit"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AwsOrgsScopedAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:ListDelegatedAdministrators"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "organizations:ServicePrincipal": [
                  "cost-optimization-hub.bcm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CostExplorerAccess",
            "Effect": "Allow",
            "Action": [
              "ce:ListCostAllocationTags",
              "ce:GetCostAndUsage"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonPrometheusScraperServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DeleteSLR",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole"
            ],
            "Resource": "arn:aws:iam::*:role/aws-service-role/scraper.aps.amazonaws.com/AWSServiceRoleForAmazonPrometheusScraper*"
          },
          {
            "Sid": "NetworkDiscovery",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ENIManagement",
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AMPAgentlessScraper"
                ]
              }
            }
          },
          {
            "Sid": "TagManagement",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "CreateNetworkInterface"
              },
              "Null": {
                "aws:RequestTag/AMPAgentlessScraper": "false"
              }
            }
          },
          {
            "Sid": "ENIUpdating",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteNetworkInterface",
              "ec2:ModifyNetworkInterfaceAttribute"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AMPAgentlessScraper": "false"
              }
            }
          },
          {
            "Sid": "EKSAccess",
            "Effect": "Allow",
            "Action": "eks:DescribeCluster",
            "Resource": "arn:aws:eks:*:*:cluster/*"
          },
          {
            "Sid": "DeleteEKSAccessEntry",
            "Effect": "Allow",
            "Action": "eks:DeleteAccessEntry",
            "Resource": "arn:aws:eks:*:*:access-entry/*/role/*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": "${aws:ResourceAccount}"
              },
              "ArnLike": {
                "eks:principalArn": "arn:aws:iam::*:role/aws-service-role/scraper.aps.amazonaws.com/AWSServiceRoleForAmazonPrometheusScraper*"
              }
            }
          },
          {
            "Sid": "APSWriting",
            "Effect": "Allow",
            "Action": "aps:RemoteWrite",
            "Resource": "arn:aws:aps:*:*:workspace/*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": "${aws:ResourceAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSRepostSpaceSupportOperationsPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RepostSpaceSupportOperations",
            "Effect": "Allow",
            "Action": [
              "support:AddAttachmentsToSet",
              "support:AddCommunicationToCase",
              "support:CreateCase",
              "support:DescribeCases",
              "support:DescribeCommunications",
              "support:ResolveCase"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSElasticDisasterRecoveryConsoleFullAccess_v2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ConsoleFullAccess1",
            "Effect": "Allow",
            "Action": [
              "drs:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess2",
            "Effect": "Allow",
            "Action": [
              "kms:ListAliases",
              "kms:DescribeKey"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess3",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeImages",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeInstanceAttribute",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSnapshots",
              "ec2:DescribeSubnets",
              "ec2:DescribeVolumes",
              "ec2:GetEbsEncryptionByDefault",
              "ec2:GetEbsDefaultKmsKeyId",
              "ec2:DescribeKeyPairs",
              "ec2:DescribeCapacityReservations",
              "ec2:DescribeHosts",
              "ec2:GetInstanceTypesFromInstanceRequirements"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess4",
            "Effect": "Allow",
            "Action": "license-manager:ListLicenseConfigurations",
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess5",
            "Effect": "Allow",
            "Action": "resource-groups:ListGroups",
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess6",
            "Effect": "Allow",
            "Action": "elasticloadbalancing:DescribeLoadBalancers",
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess7",
            "Effect": "Allow",
            "Action": [
              "iam:ListInstanceProfiles",
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess8",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryConversionServerRole",
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceRole",
              "arn:aws:iam::*:role/service-role/AWSElasticDisasterRecoveryRecoveryInstanceWithLaunchActionsRole"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "ec2.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess9",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess10",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplateVersion",
              "ec2:ModifyLaunchTemplate",
              "ec2:DeleteLaunchTemplateVersions",
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess11",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateLaunchTemplate"
            ],
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess12",
            "Effect": "Allow",
            "Action": [
              "ec2:DeleteVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess13",
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances",
              "ec2:TerminateInstances",
              "ec2:ModifyInstanceAttribute",
              "ec2:GetConsoleOutput",
              "ec2:GetConsoleScreenshot"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess14",
            "Effect": "Allow",
            "Action": [
              "ec2:RevokeSecurityGroupEgress",
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupEgress"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess15",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess16",
            "Effect": "Allow",
            "Action": "ec2:CreateSecurityGroup",
            "Resource": "arn:aws:ec2:*:*:vpc/*"
          },
          {
            "Sid": "ConsoleFullAccess17",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSecurityGroup"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess18",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess19",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot"
            ],
            "Resource": "arn:aws:ec2:*:*:snapshot/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess20",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess21",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume",
              "ec2:AttachVolume",
              "ec2:StartInstances",
              "ec2:GetConsoleOutput",
              "ec2:GetConsoleScreenshot"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "ec2:ResourceTag/AWSDRS": "AllowLaunchingIntoThisInstance"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess22",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Null": {
                "ec2:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess23",
            "Effect": "Allow",
            "Action": [
              "ec2:DetachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess24",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess25",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess26",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateSecurityGroup",
                  "CreateVolume",
                  "CreateSnapshot",
                  "RunInstances"
                ]
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess27",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:launch-template/*",
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateLaunchTemplate"
                ]
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess28",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:ListStacks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess29",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess30",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeInstanceInformation",
              "ssm:DescribeParameters"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess31",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand",
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:automation-definition/AWS-CreateImage:$DEFAULT",
              "arn:aws:ssm:*:*:document/AWSMigration-ValidateNetworkConnectivity",
              "arn:aws:ssm:*:*:document/AWSMigration-VerifyMountedVolumes",
              "arn:aws:ssm:*:*:document/AWSMigration-ValidateHttpResponse",
              "arn:aws:ssm:*:*:document/AWSMigration-ValidateDiskSpace",
              "arn:aws:ssm:*:*:document/AWSMigration-VerifyProcessIsRunning",
              "arn:aws:ssm:*:*:document/AWSMigration-LinuxTimeSyncSetting",
              "arn:aws:ssm:*:*:document/AWSEC2-ApplicationInsightsCloudwatchAgentInstallAndConfigure"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess32",
            "Effect": "Allow",
            "Action": [
              "ssm:SendCommand"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              },
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess33",
            "Effect": "Allow",
            "Action": [
              "ssm:ListDocuments",
              "ssm:ListCommandInvocations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsoleFullAccess34",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameter",
              "ssm:PutParameter"
            ],
            "Resource": "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecoveryService-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess35",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeDocument",
              "ssm:GetDocument"
            ],
            "Resource": "arn:aws:ssm:*:*:document/*"
          },
          {
            "Sid": "ConsoleFullAccess36",
            "Effect": "Allow",
            "Action": [
              "ssm:GetParameters"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:parameter/ManagedByAWSElasticDisasterRecovery-*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess37",
            "Effect": "Allow",
            "Action": [
              "ssm:GetAutomationExecution"
            ],
            "Resource": "arn:aws:ssm:*:*:automation-execution/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess38",
            "Effect": "Allow",
            "Action": [
              "ec2:AssociateIamInstanceProfile"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "Null": {
                "aws:ResourceTag/AWSElasticDisasterRecoveryManaged": "false"
              },
              "Bool": {
                "aws:ViaAWSService": "true"
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess39",
            "Effect": "Allow",
            "Action": "ec2:CreateFleet",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:fleet/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:image/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ConsoleFullAccess40",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateFleet"
                ]
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "drs.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOneEnterpriseFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "FullAccessStatementID",
            "Effect": "Allow",
            "Action": [
              "one:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOneEnterpriseReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReadOnlyAccessStatementID",
            "Effect": "Allow",
            "Action": [
              "one:Get*",
              "one:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOneEnterpriseInstallerAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "InstallerAccessStatementID",
            "Effect": "Allow",
            "Action": [
              "one:CreateDeviceActivationQrCode",
              "one:GetDeviceInstance",
              "one:GetSite",
              "one:GetSiteAddress",
              "one:ListDeviceInstances",
              "one:ListSites"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonQFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowAmazonQFullAccess",
            "Effect": "Allow",
            "Action": [
              "q:StartConversation",
              "q:SendMessage",
              "q:GetConversation",
              "q:ListConversations",
              "q:PassRequest",
              "q:StartTroubleshootingAnalysis",
              "q:GetTroubleshootingResults",
              "q:StartTroubleshootingResolutionExplanation",
              "q:UpdateTroubleshootingCommandResult",
              "q:GetIdentityMetadata",
              "q:CreateAssignment",
              "q:DeleteAssignment"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowCloudControlReadAccess",
            "Effect": "Allow",
            "Action": [
              "cloudformation:GetResource",
              "cloudformation:ListResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSetTrustedIdentity",
            "Effect": "Allow",
            "Action": [
              "sts:SetContext"
            ],
            "Resource": "arn:aws:sts::*:self"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForNeptuneGraphPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "GraphMetrics",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/Neptune",
                  "AWS/Usage"
                ]
              }
            }
          },
          {
            "Sid": "GraphLogGroup",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/neptune/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "GraphLogEvents",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerClusterInstanceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudwatchLogStreamPublishPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:DescribeLogStreams"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/sagemaker/Clusters/*:log-stream:*"
            ]
          },
          {
            "Sid": "CloudwatchLogGroupCreationPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/sagemaker/Clusters/*"
            ]
          },
          {
            "Sid": "CloudwatchPutMetricDataAccess",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "/aws/sagemaker/Clusters"
              }
            }
          },
          {
            "Sid": "DataRetrievalFromS3BucketPermissions",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "SSMConnectivityPermissions",
            "Effect": "Allow",
            "Action": [
              "ssmmessages:CreateControlChannel",
              "ssmmessages:CreateDataChannel",
              "ssmmessages:OpenControlChannel",
              "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSZonalAutoshiftPracticeRunSLRPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "MonitoringPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms",
              "health:DescribeEvents"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ZonalShiftManagementPermissions",
            "Effect": "Allow",
            "Action": [
              "arc-zonal-shift:CancelZonalShift",
              "arc-zonal-shift:GetManagedResource",
              "arc-zonal-shift:StartZonalShift",
              "arc-zonal-shift:UpdateZonalShift"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCleanRoomsMLReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CleanRoomsConsoleNavigation",
            "Effect": "Allow",
            "Action": [
              "cleanrooms:GetCollaboration",
              "cleanrooms:GetConfiguredAudienceModelAssociation",
              "cleanrooms:GetMembership",
              "cleanrooms:ListAnalysisTemplates",
              "cleanrooms:ListCollaborationAnalysisTemplates",
              "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
              "cleanrooms:ListCollaborations",
              "cleanrooms:ListConfiguredTableAssociations",
              "cleanrooms:ListConfiguredTables",
              "cleanrooms:ListMembers",
              "cleanrooms:ListMemberships",
              "cleanrooms:ListProtectedQueries",
              "cleanrooms:ListSchemas",
              "cleanrooms:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CleanRoomsMLRead",
            "Effect": "Allow",
            "Action": [
              "cleanrooms-ml:Get*",
              "cleanrooms-ml:List*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCleanRoomsMLFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CleanRoomsMLFullAccess",
            "Effect": "Allow",
            "Action": [
              "cleanrooms-ml:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PassServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/cleanrooms-ml*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "cleanrooms-ml.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CleanRoomsConsoleNavigation",
            "Effect": "Allow",
            "Action": [
              "cleanrooms:GetCollaboration",
              "cleanrooms:GetConfiguredAudienceModelAssociation",
              "cleanrooms:GetMembership",
              "cleanrooms:ListAnalysisTemplates",
              "cleanrooms:ListCollaborationAnalysisTemplates",
              "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
              "cleanrooms:ListCollaborations",
              "cleanrooms:ListConfiguredTableAssociations",
              "cleanrooms:ListConfiguredTables",
              "cleanrooms:ListMembers",
              "cleanrooms:ListMemberships",
              "cleanrooms:ListProtectedQueries",
              "cleanrooms:ListSchemas",
              "cleanrooms:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CollaborationMembershipCheck",
            "Effect": "Allow",
            "Action": [
              "cleanrooms:ListMembers"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cleanrooms-ml.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AssociateModels",
            "Effect": "Allow",
            "Action": [
              "cleanrooms:CreateConfiguredAudienceModelAssociation"
            ],
            "Resource": "*"
          },
          {
            "Sid": "TagAssociations",
            "Effect": "Allow",
            "Action": [
              "cleanrooms:TagResource"
            ],
            "Resource": "arn:aws:cleanrooms:*:*:membership/*/configuredaudiencemodelassociation/*"
          },
          {
            "Sid": "ListRolesToPickServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetRoleAndListRolePoliciesToInspectServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:ListRolePolicies",
              "iam:ListAttachedRolePolicies"
            ],
            "Resource": [
              "arn:aws:iam::*:role/service-role/cleanrooms-ml*",
              "arn:aws:iam::*:role/role/cleanrooms-ml*"
            ]
          },
          {
            "Sid": "ListPoliciesToInspectServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "iam:ListPolicies"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetPolicyToInspectServiceRolePolicy",
            "Effect": "Allow",
            "Action": [
              "iam:GetPolicy",
              "iam:GetPolicyVersion"
            ],
            "Resource": "arn:aws:iam::*:policy/*cleanroomsml*"
          },
          {
            "Sid": "ConsoleDisplayTables",
            "Effect": "Allow",
            "Action": [
              "glue:GetDatabase",
              "glue:GetDatabases",
              "glue:GetTable",
              "glue:GetTables",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:GetSchema",
              "glue:GetSchemaVersion",
              "glue:BatchGetPartition"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsolePickOutputBucket",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConsolePickS3Location",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketLocation"
            ],
            "Resource": "arn:aws:s3:::*cleanrooms-ml*"
          }
        ]
      }
    },
    {
      "PolicyName": "NeptuneGraphReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowReadOnlyPermissionsForNeptuneGraph",
            "Effect": "Allow",
            "Action": [
              "neptune-graph:Get*",
              "neptune-graph:List*",
              "neptune-graph:Read*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadOnlyPermissionsForEC2",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcAttribute",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeAvailabilityZones"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadOnlyPermissionsForKMS",
            "Effect": "Allow",
            "Action": [
              "kms:ListKeys",
              "kms:ListAliases"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadOnlyPermissionsForCloudwatch",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:ListMetrics",
              "cloudwatch:GetMetricStatistics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowReadOnlyPermissionsForLogs",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogStreams",
              "logs:GetLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "IVSReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "IVSReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "ivs:BatchGetChannel",
              "ivs:GetChannel",
              "ivs:GetComposition",
              "ivs:GetEncoderConfiguration",
              "ivs:GetParticipant",
              "ivs:GetPlaybackKeyPair",
              "ivs:GetPlaybackRestrictionPolicy",
              "ivs:GetRecordingConfiguration",
              "ivs:GetStage",
              "ivs:GetStageSession",
              "ivs:GetStorageConfiguration",
              "ivs:GetStream",
              "ivs:GetStreamSession",
              "ivs:ListChannels",
              "ivs:ListCompositions",
              "ivs:ListEncoderConfigurations",
              "ivs:ListParticipants",
              "ivs:ListParticipantEvents",
              "ivs:ListPlaybackKeyPairs",
              "ivs:ListPlaybackRestrictionPolicies",
              "ivs:ListRecordingConfigurations",
              "ivs:ListStages",
              "ivs:ListStageSessions",
              "ivs:ListStorageConfigurations",
              "ivs:ListStreamKeys",
              "ivs:ListStreams",
              "ivs:ListStreamSessions",
              "ivs:ListTagsForResource"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMSKReplicatorExecutionRole",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ClusterPermissions",
            "Effect": "Allow",
            "Action": [
              "kafka-cluster:Connect",
              "kafka-cluster:DescribeCluster",
              "kafka-cluster:AlterCluster",
              "kafka-cluster:DescribeTopic",
              "kafka-cluster:CreateTopic",
              "kafka-cluster:AlterTopic",
              "kafka-cluster:WriteData",
              "kafka-cluster:ReadData",
              "kafka-cluster:AlterGroup",
              "kafka-cluster:DescribeGroup",
              "kafka-cluster:DescribeTopicDynamicConfiguration",
              "kafka-cluster:AlterTopicDynamicConfiguration",
              "kafka-cluster:WriteDataIdempotently"
            ],
            "Resource": [
              "arn:aws:kafka:*:*:cluster/*"
            ]
          },
          {
            "Sid": "TopicPermissions",
            "Effect": "Allow",
            "Action": [
              "kafka-cluster:DescribeTopic",
              "kafka-cluster:CreateTopic",
              "kafka-cluster:AlterTopic",
              "kafka-cluster:WriteData",
              "kafka-cluster:ReadData",
              "kafka-cluster:DescribeTopicDynamicConfiguration",
              "kafka-cluster:AlterTopicDynamicConfiguration",
              "kafka-cluster:AlterCluster"
            ],
            "Resource": [
              "arn:aws:kafka:*:*:topic/*/*"
            ]
          },
          {
            "Sid": "GroupPermissions",
            "Effect": "Allow",
            "Action": [
              "kafka-cluster:AlterGroup",
              "kafka-cluster:DescribeGroup"
            ],
            "Resource": [
              "arn:aws:kafka:*:*:group/*/*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonBedrockFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "BedrockAll",
            "Effect": "Allow",
            "Action": [
              "bedrock:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DescribeKey",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": "arn:*:kms:*:::*"
          },
          {
            "Sid": "APIsWithAllResourceAccess",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PassRoleToBedrock",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "arn:aws:iam::*:role/*AmazonBedrock*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "bedrock.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonBedrockReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonBedrockReadOnly",
            "Effect": "Allow",
            "Action": [
              "bedrock:GetFoundationModel",
              "bedrock:ListFoundationModels",
              "bedrock:GetModelInvocationLoggingConfiguration",
              "bedrock:GetProvisionedModelThroughput",
              "bedrock:ListProvisionedModelThroughputs",
              "bedrock:GetModelCustomizationJob",
              "bedrock:ListModelCustomizationJobs",
              "bedrock:ListCustomModels",
              "bedrock:GetCustomModel",
              "bedrock:ListTagsForResource",
              "bedrock:GetFoundationModelAvailability",
              "bedrock:GetGuardrail",
              "bedrock:ListGuardrails",
              "bedrock:GetEvaluationJob",
              "bedrock:ListEvaluationJobs",
              "bedrock:GetModelInvocationJob",
              "bedrock:ListModelInvocationJobs"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CostOptimizationHubReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CostOptimizationHubReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "cost-optimization-hub:ListEnrollmentStatuses",
              "cost-optimization-hub:GetPreferences",
              "cost-optimization-hub:GetRecommendation",
              "cost-optimization-hub:ListRecommendations",
              "cost-optimization-hub:ListRecommendationSummaries"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "IVSFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "IVSFullAccess",
            "Effect": "Allow",
            "Action": [
              "ivs:*",
              "ivschat:*"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CostOptimizationHubAdminAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CostOptimizationHubAdminAccess",
            "Effect": "Allow",
            "Action": [
              "cost-optimization-hub:ListEnrollmentStatuses",
              "cost-optimization-hub:UpdateEnrollmentStatus",
              "cost-optimization-hub:GetPreferences",
              "cost-optimization-hub:UpdatePreferences",
              "cost-optimization-hub:GetRecommendation",
              "cost-optimization-hub:ListRecommendations",
              "cost-optimization-hub:ListRecommendationSummaries"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowCreationOfServiceLinkedRoleForCostOptimizationHub",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/cost-optimization-hub.bcm.amazonaws.com/AWSServiceRoleForCostOptimizationHub"
            ],
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "cost-optimization-hub.bcm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowAWSServiceAccessForCostOptimizationHub",
            "Effect": "Allow",
            "Action": [
              "organizations:EnableAWSServiceAccess"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "organizations:ServicePrincipal": [
                  "cost-optimization-hub.bcm.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchNetworkMonitorServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PublishCw",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/NetworkMonitor"
              }
            }
          },
          {
            "Sid": "DescribeAny",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeNetworkInterfaceAttribute",
              "ec2:DescribeVpcs",
              "ec2:DescribeNetworkInterfacePermissions",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DeleteModifyEc2Resources",
            "Effect": "Allow",
            "Action": [
              "ec2:AuthorizeSecurityGroupEgress",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:RevokeSecurityGroupEgress",
              "ec2:ModifyNetworkInterfaceAttribute",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteSecurityGroup"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/ManagedByCloudWatchNetworkMonitor": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchDashboardsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonOpenSearchDashboardsServiceRoleAllowedActions",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/AOSD"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSArtifactReportsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ArtifactReportActions",
            "Effect": "Allow",
            "Action": [
              "artifact:Get",
              "artifact:GetReport",
              "artifact:GetReportMetadata",
              "artifact:GetTermForReport",
              "artifact:ListReports"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSGrafanaWorkspacePermissionManagementV2",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AWSGrafanaPermissions",
            "Effect": "Allow",
            "Action": [
              "grafana:DescribeWorkspace",
              "grafana:DescribeWorkspaceAuthentication",
              "grafana:UpdatePermissions",
              "grafana:ListPermissions",
              "grafana:ListWorkspaces"
            ],
            "Resource": "arn:aws:grafana:*:*:/workspaces*"
          },
          {
            "Sid": "IAMIdentityCenterPermissions",
            "Effect": "Allow",
            "Action": [
              "sso:DescribeRegisteredRegions",
              "sso:GetSharedSsoConfiguration",
              "sso:ListDirectoryAssociations",
              "sso:GetManagedApplicationInstance",
              "sso:ListProfiles",
              "sso:GetProfile",
              "sso:ListProfileAssociations",
              "sso-directory:DescribeUser",
              "sso-directory:DescribeGroup"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonECSInfrastructureRolePolicyForVolumes",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateEBSManagedVolume",
            "Effect": "Allow",
            "Action": "ec2:CreateVolume",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "ArnLike": {
                "aws:RequestTag/AmazonECSCreated": "arn:aws:ecs:*:*:task/*"
              },
              "StringEquals": {
                "aws:RequestTag/AmazonECSManaged": "true"
              }
            }
          },
          {
            "Sid": "TagOnCreateVolume",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "ArnLike": {
                "aws:RequestTag/AmazonECSCreated": "arn:aws:ecs:*:*:task/*"
              },
              "StringEquals": {
                "ec2:CreateAction": "CreateVolume",
                "aws:RequestTag/AmazonECSManaged": "true"
              }
            }
          },
          {
            "Sid": "DescribeVolumesForLifecycle",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVolumes",
              "ec2:DescribeAvailabilityZones"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ManageEBSVolumeLifecycle",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume",
              "ec2:DetachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AmazonECSManaged": "true"
              }
            }
          },
          {
            "Sid": "ManageVolumeAttachmentsForEC2",
            "Effect": "Allow",
            "Action": [
              "ec2:AttachVolume",
              "ec2:DetachVolume"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*"
          },
          {
            "Sid": "DeleteEBSManagedVolume",
            "Effect": "Allow",
            "Action": "ec2:DeleteVolume",
            "Resource": "arn:aws:ec2:*:*:volume/*",
            "Condition": {
              "ArnLike": {
                "aws:ResourceTag/AmazonECSCreated": "arn:aws:ecs:*:*:task/*"
              },
              "StringEquals": {
                "aws:ResourceTag/AmazonECSManaged": "true"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonECSInfrastructureRolePolicyForServiceConnectTransportLayerSecurity",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateSecret",
            "Effect": "Allow",
            "Action": "secretsmanager:CreateSecret",
            "Resource": "arn:aws:secretsmanager:*:*:secret:ecs-sc!*",
            "Condition": {
              "ArnLike": {
                "aws:RequestTag/AmazonECSCreated": [
                  "arn:aws:ecs:*:*:service/*/*",
                  "arn:aws:ecs:*:*:task-set/*/*"
                ]
              },
              "StringEquals": {
                "aws:RequestTag/AmazonECSManaged": "true",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "TagOnCreateSecret",
            "Effect": "Allow",
            "Action": "secretsmanager:TagResource",
            "Resource": "arn:aws:secretsmanager:*:*:secret:ecs-sc!*",
            "Condition": {
              "ArnLike": {
                "aws:RequestTag/AmazonECSCreated": [
                  "arn:aws:ecs:*:*:service/*/*",
                  "arn:aws:ecs:*:*:task-set/*/*"
                ]
              },
              "StringEquals": {
                "aws:RequestTag/AmazonECSManaged": "true",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "RotateTLSCertificateSecret",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:UpdateSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:PutSecretValue",
              "secretsmanager:DeleteSecret",
              "secretsmanager:RotateSecret",
              "secretsmanager:UpdateSecretVersionStage"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:ecs-sc!*",
            "Condition": {
              "StringEquals": {
                "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "ecs-sc",
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "ManagePrivateCertificateAuthority",
            "Effect": "Allow",
            "Action": [
              "acm-pca:GetCertificate",
              "acm-pca:GetCertificateAuthorityCertificate",
              "acm-pca:DescribeCertificateAuthority"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AmazonECSManaged": "true"
              }
            }
          },
          {
            "Sid": "ManagePrivateCertificateAuthorityForIssuingEndEntityCertificate",
            "Effect": "Allow",
            "Action": [
              "acm-pca:IssueCertificate"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/AmazonECSManaged": "true",
                "acm-pca:TemplateArn": "arn:aws:acm-pca:::template/EndEntityCertificate/V1"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSecurityLakeMetastoreManager",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowWriteLambdaLogs",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/lambda/AmazonSecurityLake*",
              "arn:aws:logs:*:*:/aws/lambda/AmazonSecurityLake*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowGlueManage",
            "Effect": "Allow",
            "Action": [
              "glue:CreatePartition",
              "glue:BatchCreatePartition",
              "glue:GetTable",
              "glue:UpdateTable"
            ],
            "Resource": [
              "arn:aws:glue:*:*:table/amazon_security_lake_glue_db*/*",
              "arn:aws:glue:*:*:database/amazon_security_lake_glue_db*",
              "arn:aws:glue:*:*:catalog"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowToReadFromSqs",
            "Effect": "Allow",
            "Action": [
              "sqs:ReceiveMessage",
              "sqs:DeleteMessage",
              "sqs:GetQueueAttributes"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:AmazonSecurityLake*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowMetaDataReadWrite",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:PutObject",
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-security-data-lake*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AllowMetaDataCleanup",
            "Effect": "Allow",
            "Action": [
              "s3:DeleteObject"
            ],
            "Resource": [
              "arn:aws:s3:::aws-security-data-lake*/metadata/*.avro",
              "arn:aws:s3:::aws-security-data-lake*/metadata/*.metadata.json"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonInspector2ManagedCisPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PermissionsForCISScans",
            "Effect": "Allow",
            "Action": [
              "inspector2:StartCisSession",
              "inspector2:StopCisSession",
              "inspector2:SendCisSessionTelemetry",
              "inspector2:SendCisSessionHealth"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonLexReplicationPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ReplicationServicePolicyStatement1",
            "Effect": "Allow",
            "Action": [
              "lex:BuildBotLocale",
              "lex:ListBotLocales",
              "lex:CreateBotAlias",
              "lex:UpdateBotAlias",
              "lex:DeleteBotAlias",
              "lex:DescribeBotAlias",
              "lex:CreateBotVersion",
              "lex:DeleteBotVersion",
              "lex:DescribeBotVersion",
              "lex:CreateExport",
              "lex:DescribeBot",
              "lex:UpdateExport",
              "lex:DescribeExport",
              "lex:DescribeBotLocale",
              "lex:DescribeIntent",
              "lex:ListIntents",
              "lex:DescribeSlotType",
              "lex:ListSlotTypes",
              "lex:DescribeSlot",
              "lex:ListSlots",
              "lex:DescribeCustomVocabulary",
              "lex:StartImport",
              "lex:DescribeImport",
              "lex:CreateBot",
              "lex:UpdateBot",
              "lex:DeleteBot",
              "lex:CreateBotLocale",
              "lex:UpdateBotLocale",
              "lex:DeleteBotLocale",
              "lex:CreateIntent",
              "lex:UpdateIntent",
              "lex:DeleteIntent",
              "lex:CreateSlotType",
              "lex:UpdateSlotType",
              "lex:DeleteSlotType",
              "lex:CreateSlot",
              "lex:UpdateSlot",
              "lex:DeleteSlot",
              "lex:CreateCustomVocabulary",
              "lex:UpdateCustomVocabulary",
              "lex:DeleteCustomVocabulary",
              "lex:DeleteBotChannel",
              "lex:DeleteResourcePolicy"
            ],
            "Resource": [
              "arn:aws:lex:*:*:bot/*",
              "arn:aws:lex:*:*:bot-alias/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "ReplicationServicePolicyStatement2",
            "Effect": "Allow",
            "Action": [
              "lex:CreateUploadUrl",
              "lex:ListBots"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "ReplicationServicePolicyStatement3",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": "lexv2.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerCanvasBedrockAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "S3CanvasAccess",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-*/Canvas",
              "arn:aws:s3:::sagemaker-*/Canvas/*"
            ]
          },
          {
            "Sid": "S3BucketAccess",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForPrivateMarketplaceAdminPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PrivateMarketplaceCatalogDescribePermissions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:DescribeEntity"
            ],
            "Resource": [
              "arn:aws:aws-marketplace:*:*:AWSMarketplace/Experience/*",
              "arn:aws:aws-marketplace:*:*:AWSMarketplace/Audience/*",
              "arn:aws:aws-marketplace:*:*:AWSMarketplace/ProcurementPolicy/*",
              "arn:aws:aws-marketplace:*:*:AWSMarketplace/BrandingSettings/*"
            ]
          },
          {
            "Sid": "PrivateMarketplaceCatalogDescribeChangeSetPermissions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:DescribeChangeSet"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PrivateMarketplaceCatalogListPermissions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:ListEntities",
              "aws-marketplace:ListChangeSets"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PrivateMarketplaceStartChangeSetPermissions",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:StartChangeSet"
            ],
            "Condition": {
              "StringEquals": {
                "catalog:ChangeType": [
                  "AssociateAudience",
                  "DisassociateAudience"
                ]
              }
            },
            "Resource": [
              "arn:aws:aws-marketplace:*:*:AWSMarketplace/Experience/*",
              "arn:aws:aws-marketplace:*:*:AWSMarketplace/ChangeSet/*"
            ]
          },
          {
            "Sid": "PrivateMarketplaceOrganizationPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeAccount",
              "organizations:DescribeOrganizationalUnit",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListChildren"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRDSCustomInstanceProfileRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ssmAgentPermission1",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateInstanceInformation"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "ssmAgentPermission2",
            "Effect": "Allow",
            "Action": [
              "ssm:GetManifest",
              "ssm:PutConfigurePackageResult"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ssmAgentPermission3",
            "Effect": "Allow",
            "Action": [
              "ssm:GetDocument",
              "ssm:DescribeDocument"
            ],
            "Resource": "arn:aws:ssm:*:*:document/*"
          },
          {
            "Sid": "ssmAgentPermission4",
            "Effect": "Allow",
            "Action": [
              "ssmmessages:CreateControlChannel",
              "ssmmessages:OpenControlChannel"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ssmAgentPermission5",
            "Effect": "Allow",
            "Action": [
              "ec2messages:AcknowledgeMessage",
              "ec2messages:DeleteMessage",
              "ec2messages:FailMessage",
              "ec2messages:GetEndpoint",
              "ec2messages:GetMessages",
              "ec2messages:SendReply"
            ],
            "Resource": "*"
          },
          {
            "Sid": "createEc2SnapshotPermission1",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot",
              "ec2:CreateSnapshots"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "createEc2SnapshotPermission2",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshot",
              "ec2:CreateSnapshots"
            ],
            "Resource": [
              "arn:aws:ec2:*::snapshot/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "createEc2SnapshotPermission3",
            "Effect": "Allow",
            "Action": "ec2:CreateSnapshots",
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "createTagForEc2SnapshotPermission",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ],
                "ec2:CreateAction": [
                  "CreateSnapshot",
                  "CreateSnapshots"
                ]
              }
            }
          },
          {
            "Sid": "rdsCustomS3ObjectPermission",
            "Effect": "Allow",
            "Action": [
              "s3:putObject",
              "s3:getObject",
              "s3:getObjectVersion",
              "s3:AbortMultipartUpload",
              "s3:ListMultipartUploadParts"
            ],
            "Resource": [
              "arn:aws:s3:::do-not-delete-rds-custom-*/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "rdsCustomS3BucketPermission",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucketVersions",
              "s3:ListBucketMultipartUploads"
            ],
            "Resource": [
              "arn:aws:s3:::do-not-delete-rds-custom-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "readSecretsFromCpPermission",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue",
              "secretsmanager:DescribeSecret"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": [
                  "custom-oracle",
                  "custom-sqlserver",
                  "custom-oracle-rac"
                ]
              }
            }
          },
          {
            "Sid": "createSecretsOnDpPermission",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AWSRDSCustom": "custom-oracle-rac"
              }
            }
          },
          {
            "Sid": "publishCwMetricsPermission",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "rdscustom/rds-custom-sqlserver-agent",
                  "RDSCustomForOracle/Agent"
                ]
              }
            }
          },
          {
            "Sid": "putEventsToEventBusPermission",
            "Effect": "Allow",
            "Action": "events:PutEvents",
            "Resource": "arn:aws:events:*:*:event-bus/default"
          },
          {
            "Sid": "cwlUploadPermission",
            "Effect": "Allow",
            "Action": [
              "logs:PutRetentionPolicy",
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:CreateLogStream",
              "logs:CreateLogGroup"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:rds-custom-instance-*"
          },
          {
            "Sid": "sendMessageToSqsQueuePermission",
            "Effect": "Allow",
            "Action": [
              "sqs:SendMessage",
              "sqs:ReceiveMessage",
              "sqs:DeleteMessage",
              "sqs:GetQueueUrl"
            ],
            "Resource": [
              "arn:aws:sqs:*:*:do-not-delete-rds-custom-*"
            ],
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": "custom-sqlserver"
              }
            }
          },
          {
            "Sid": "managePrivateIpOnEniPermission",
            "Effect": "Allow",
            "Action": [
              "ec2:AssignPrivateIpAddresses",
              "ec2:UnassignPrivateIpAddresses"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AWSRDSCustom": "custom-oracle-rac"
              }
            }
          },
          {
            "Sid": "kmsPermissionWithSecret",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "kms:EncryptionContext:SecretARN": "arn:aws:secretsmanager:*:*:secret:do-not-delete-rds-custom-*"
              },
              "StringLike": {
                "kms:ViaService": "secretsmanager.*.amazonaws.com"
              }
            }
          },
          {
            "Sid": "kmsPermissionWithS3",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "kms:EncryptionContext:aws:s3:arn": "arn:aws:s3:::do-not-delete-rds-custom-*"
              },
              "StringLike": {
                "kms:ViaService": "s3.*.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSMarketplaceResaleAuthorizationServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowResaleAuthorizationShareActionsRAMCreate",
            "Effect": "Allow",
            "Action": [
              "ram:CreateResourceShare"
            ],
            "Resource": [
              "arn:aws:ram:*:*:*"
            ],
            "Condition": {
              "StringEquals": {
                "ram:RequestedResourceType": "aws-marketplace:Entity"
              },
              "ArnLike": {
                "ram:ResourceArn": "arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"
              },
              "Null": {
                "ram:Principal": "true"
              }
            }
          },
          {
            "Sid": "AllowResaleAuthorizationShareActionsRAMAssociate",
            "Effect": "Allow",
            "Action": [
              "ram:AssociateResourceShare"
            ],
            "Resource": [
              "arn:aws:ram:*:*:*"
            ],
            "Condition": {
              "Null": {
                "ram:Principal": "false"
              },
              "StringEquals": {
                "ram:ResourceShareName": "AWSMarketplaceResaleAuthorization"
              }
            }
          },
          {
            "Sid": "AllowResaleAuthorizationShareActionsRAMAccept",
            "Effect": "Allow",
            "Action": [
              "ram:AcceptResourceShareInvitation"
            ],
            "Resource": [
              "arn:aws:ram:*:*:*"
            ],
            "Condition": {
              "StringEquals": {
                "ram:ResourceShareName": "AWSMarketplaceResaleAuthorization"
              }
            }
          },
          {
            "Sid": "AllowResaleAuthorizationShareActionsRAMGet",
            "Effect": "Allow",
            "Action": [
              "ram:GetResourceShareInvitations",
              "ram:GetResourceShareAssociations"
            ],
            "Resource": [
              "arn:aws:ram:*:*:*"
            ]
          },
          {
            "Sid": "AllowResaleAuthorizationShareActionsMarketplace",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:PutResourcePolicy",
              "aws-marketplace:GetResourcePolicy"
            ],
            "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "ram.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AllowResaleAuthorizationShareActionsMarketplaceDescribe",
            "Effect": "Allow",
            "Action": [
              "aws-marketplace:DescribeEntity"
            ],
            "Resource": "arn:aws:aws-marketplace:*:*:AWSMarketplace/ResaleAuthorization/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTimestreamInfluxDBServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DescribeNetworkStatement",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeNetworkInterfaces"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CreateEniInSubnetStatement",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ]
          },
          {
            "Sid": "CreateEniStatement",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AmazonTimestreamInfluxDBManaged": "false"
              }
            }
          },
          {
            "Sid": "CreateTagWithEniStatement",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AmazonTimestreamInfluxDBManaged": "false"
              },
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateNetworkInterface"
                ]
              }
            }
          },
          {
            "Sid": "ManageEniStatement",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface"
            ],
            "Resource": "arn:aws:ec2:*:*:network-interface/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonTimestreamInfluxDBManaged": "false"
              }
            }
          },
          {
            "Sid": "PutCloudWatchMetricsStatement",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/Timestream/InfluxDB",
                  "AWS/Usage"
                ]
              }
            },
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ManageSecretStatement",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:DeleteSecret"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:READONLY-InfluxDB-auth-parameters-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonTimestreamInfluxDBFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "TimestreamInfluxDBStatement",
            "Effect": "Allow",
            "Action": [
              "timestream-influxdb:CreateDbParameterGroup",
              "timestream-influxdb:GetDbParameterGroup",
              "timestream-influxdb:ListDbParameterGroups",
              "timestream-influxdb:CreateDbInstance",
              "timestream-influxdb:DeleteDbInstance",
              "timestream-influxdb:GetDbInstance",
              "timestream-influxdb:ListDbInstances",
              "timestream-influxdb:TagResource",
              "timestream-influxdb:UntagResource",
              "timestream-influxdb:ListTagsForResource",
              "timestream-influxdb:UpdateDbInstance"
            ],
            "Resource": [
              "arn:aws:timestream-influxdb:*:*:*"
            ]
          },
          {
            "Sid": "ServiceLinkedRoleStatement",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/timestream-influxdb.amazonaws.com/AWSServiceRoleForTimestreamInfluxDB",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "timestream-influxdb.amazonaws.com"
              }
            }
          },
          {
            "Sid": "NetworkValidationStatement",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeSecurityGroups"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CreateEniInSubnetStatement",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateNetworkInterface"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:security-group/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "BucketValidationStatement",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:GetBucketPolicy"
            ],
            "Resource": [
              "arn:aws:s3:::*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSEC2VssSnapshotPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DescribeInstanceInfo",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstanceAttribute"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:SourceInstanceARN": "*${ec2:InstanceId}"
              }
            }
          },
          {
            "Sid": "CreateSnapshotsWithTag",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshots"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:snapshot/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AwsVssConfig": "*"
              }
            }
          },
          {
            "Sid": "CreateSnapshotsAccessInstance",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshots"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:SourceInstanceARN": "*${ec2:InstanceId}"
              }
            }
          },
          {
            "Sid": "CreateSnapshotsAccessVolume",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateSnapshots"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*"
            ]
          },
          {
            "Sid": "CreateImageWithTag",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateImage"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:image/*"
            ],
            "Condition": {
              "StringLike": {
                "aws:RequestTag/AwsVssConfig": "*"
              }
            }
          },
          {
            "Sid": "CreateImageAccessInstance",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateImage"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:SourceInstanceARN": "*${ec2:InstanceId}"
              }
            }
          },
          {
            "Sid": "CreateTagsOnResourceCreation",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:image/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": [
                  "CreateImage",
                  "CreateSnapshots"
                ]
              }
            }
          },
          {
            "Sid": "CreateTagsAfterResourceCreation",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:image/*"
            ],
            "Condition": {
              "StringLike": {
                "ec2:ResourceTag/AwsVssConfig": "*"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AppConsistent",
                  "Device"
                ]
              }
            }
          },
          {
            "Sid": "DescribeImagesAndSnapshots",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeSnapshots"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightAssetBundleExportPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "TagReadAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:ListTagsForResource"
            ],
            "Resource": "arn:aws:quicksight:*:*:*/*"
          },
          {
            "Sid": "DashboardReadAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeDashboard",
              "quicksight:DescribeDashboardPermissions"
            ],
            "Resource": "arn:aws:quicksight:*:*:dashboard/*"
          },
          {
            "Sid": "AnalysisReadAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeAnalysis",
              "quicksight:DescribeAnalysisPermissions"
            ],
            "Resource": "arn:aws:quicksight:*:*:analysis/*"
          },
          {
            "Sid": "DataSetReadAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeDataSet",
              "quicksight:DescribeDataSetRefreshProperties",
              "quicksight:ListRefreshSchedules",
              "quicksight:DescribeDataSetPermissions"
            ],
            "Resource": "arn:aws:quicksight:*:*:dataset/*"
          },
          {
            "Sid": "DataSourceReadAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeDataSource",
              "quicksight:DescribeDataSourcePermissions"
            ],
            "Resource": "arn:aws:quicksight:*:*:datasource/*"
          },
          {
            "Sid": "ThemeReadAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeTheme",
              "quicksight:DescribeThemePermissions"
            ],
            "Resource": "arn:aws:quicksight:*:*:theme/*"
          },
          {
            "Sid": "VPCConnectionReadAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeVPCConnection",
              "quicksight:ListVPCConnections"
            ],
            "Resource": "arn:aws:quicksight:*:*:vpcConnection/*"
          },
          {
            "Sid": "RefreshScheduleReadAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeRefreshSchedule"
            ],
            "Resource": "arn:aws:quicksight:*:*:dataset/*/refresh-schedule/*"
          },
          {
            "Sid": "AssetBundleExportOperations",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeAssetBundleExportJob",
              "quicksight:ListAssetBundleExportJobs",
              "quicksight:StartAssetBundleExportJob"
            ],
            "Resource": "arn:aws:quicksight:*:*:asset-bundle-export-job/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSightAssetBundleImportPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "TagWriteAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:ListTagsForResource",
              "quicksight:TagResource",
              "quicksight:UntagResource"
            ],
            "Resource": "arn:aws:quicksight:*:*:*/*"
          },
          {
            "Sid": "DashboardWriteAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:CreateDashboard",
              "quicksight:DeleteDashboard",
              "quicksight:DescribeDashboard",
              "quicksight:UpdateDashboard",
              "quicksight:UpdateDashboardPublishedVersion",
              "quicksight:DescribeDashboardPermissions",
              "quicksight:UpdateDashboardPermissions",
              "quicksight:UpdateDashboardLinks"
            ],
            "Resource": "arn:aws:quicksight:*:*:dashboard/*"
          },
          {
            "Sid": "AnalysisWriteAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:CreateAnalysis",
              "quicksight:DeleteAnalysis",
              "quicksight:DescribeAnalysis",
              "quicksight:UpdateAnalysis",
              "quicksight:DescribeAnalysisPermissions",
              "quicksight:UpdateAnalysisPermissions"
            ],
            "Resource": "arn:aws:quicksight:*:*:analysis/*"
          },
          {
            "Sid": "DataSetWriteAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:CreateDataSet",
              "quicksight:DeleteDataSet",
              "quicksight:DescribeDataSet",
              "quicksight:PassDataSet",
              "quicksight:UpdateDataSet",
              "quicksight:DeleteDataSetRefreshProperties",
              "quicksight:DescribeDataSetRefreshProperties",
              "quicksight:PutDataSetRefreshProperties",
              "quicksight:UpdateDataSetPermissions",
              "quicksight:DescribeDataSetPermissions",
              "quicksight:ListRefreshSchedules"
            ],
            "Resource": "arn:aws:quicksight:*:*:dataset/*"
          },
          {
            "Sid": "DataSourceWriteAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:CreateDataSource",
              "quicksight:DescribeDataSource",
              "quicksight:DeleteDataSource",
              "quicksight:PassDataSource",
              "quicksight:UpdateDataSource",
              "quicksight:UpdateDataSourcePermissions",
              "quicksight:DescribeDataSourcePermissions"
            ],
            "Resource": "arn:aws:quicksight:*:*:datasource/*"
          },
          {
            "Sid": "ThemeWriteAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:CreateTheme",
              "quicksight:DeleteTheme",
              "quicksight:DescribeTheme",
              "quicksight:UpdateTheme",
              "quicksight:DescribeThemePermissions",
              "quicksight:UpdateThemePermissions"
            ],
            "Resource": "arn:aws:quicksight:*:*:theme/*"
          },
          {
            "Sid": "RefreshScheduleWriteAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:CreateRefreshSchedule",
              "quicksight:DescribeRefreshSchedule",
              "quicksight:DeleteRefreshSchedule",
              "quicksight:UpdateRefreshSchedule"
            ],
            "Resource": "arn:aws:quicksight:*:*:dataset/*/refresh-schedule/*"
          },
          {
            "Sid": "VPCConnectionWriteAccess",
            "Effect": "Allow",
            "Action": [
              "quicksight:ListVPCConnections",
              "quicksight:CreateVPCConnection",
              "quicksight:DescribeVPCConnection",
              "quicksight:DeleteVPCConnection",
              "quicksight:UpdateVPCConnection"
            ],
            "Resource": "arn:aws:quicksight:*:*:vpcConnection/*"
          },
          {
            "Sid": "AssetBundleImportOperations",
            "Effect": "Allow",
            "Action": [
              "quicksight:DescribeAssetBundleImportJob",
              "quicksight:ListAssetBundleImportJobs",
              "quicksight:StartAssetBundleImportJob"
            ],
            "Resource": "arn:aws:quicksight:*:*:asset-bundle-import-job/*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeadlineCloud-UserAccessFarms",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AdditionalPermissions",
            "Effect": "Allow",
            "Action": [
              "identitystore:DescribeGroup",
              "identitystore:DescribeUser",
              "identitystore:ListGroupMembershipsForMember",
              "deadline:GetApplicationVersion",
              "ec2:DescribeInstanceTypes",
              "identitystore:ListUsers"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "OwnerLevelPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssociateMemberToFarm",
              "deadline:AssociateMemberToFleet",
              "deadline:AssociateMemberToJob",
              "deadline:AssociateMemberToQueue",
              "deadline:CreateBudget",
              "deadline:DeleteBudget",
              "deadline:DisassociateMemberFromFarm",
              "deadline:DisassociateMemberFromFleet",
              "deadline:DisassociateMemberFromJob",
              "deadline:DisassociateMemberFromQueue",
              "deadline:GetBudget",
              "deadline:GetSessionsStatisticsAggregation",
              "deadline:ListBudgets",
              "deadline:StartSessionsStatisticsAggregation",
              "deadline:UpdateBudget"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FarmMembershipLevels": [
                  "OWNER"
                ]
              }
            }
          },
          {
            "Sid": "ManagerLevelMemberAssociation",
            "Effect": "Allow",
            "Action": [
              "deadline:AssociateMemberToFarm",
              "deadline:AssociateMemberToFleet",
              "deadline:AssociateMemberToJob",
              "deadline:AssociateMemberToQueue"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FarmMembershipLevels": [
                  "MANAGER"
                ]
              },
              "StringEquals": {
                "deadline:AssociatedMembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER",
                  ""
                ],
                "deadline:MembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER"
                ]
              }
            }
          },
          {
            "Sid": "ManagerLevelMemberDisassociation",
            "Effect": "Allow",
            "Action": [
              "deadline:DisassociateMemberFromFarm",
              "deadline:DisassociateMemberFromFleet",
              "deadline:DisassociateMemberFromJob",
              "deadline:DisassociateMemberFromQueue"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FarmMembershipLevels": [
                  "MANAGER"
                ]
              },
              "StringEquals": {
                "deadline:AssociatedMembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER",
                  ""
                ]
              }
            }
          },
          {
            "Sid": "OwnerManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:ListFarmMembers",
              "deadline:ListFleetMembers",
              "deadline:ListJobMembers",
              "deadline:ListQueueMembers",
              "deadline:UpdateJob",
              "deadline:UpdateSession",
              "deadline:UpdateStep",
              "deadline:UpdateTask"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FarmMembershipLevels": [
                  "OWNER",
                  "MANAGER"
                ]
              }
            }
          },
          {
            "Sid": "OwnerManagerContributorPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssumeQueueRoleForUser",
              "deadline:CreateJob"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FarmMembershipLevels": [
                  "OWNER",
                  "MANAGER",
                  "CONTRIBUTOR"
                ]
              }
            }
          },
          {
            "Sid": "AllLevelsPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssumeFleetRoleForRead",
              "deadline:AssumeQueueRoleForRead",
              "deadline:GetFarm",
              "deadline:GetFleet",
              "deadline:GetJob",
              "deadline:GetQueue",
              "deadline:GetQueueEnvironment",
              "deadline:GetQueueFleetAssociation",
              "deadline:GetSession",
              "deadline:GetSessionAction",
              "deadline:GetStep",
              "deadline:GetStorageProfile",
              "deadline:GetStorageProfileForQueue",
              "deadline:GetTask",
              "deadline:GetWorker",
              "deadline:ListQueueEnvironments",
              "deadline:ListQueueFleetAssociations",
              "deadline:ListSessionActions",
              "deadline:ListSessions",
              "deadline:ListSessionsForWorker",
              "deadline:ListStepConsumers",
              "deadline:ListStepDependencies",
              "deadline:ListSteps",
              "deadline:ListStorageProfiles",
              "deadline:ListStorageProfilesForQueue",
              "deadline:ListTasks",
              "deadline:ListWorkers",
              "deadline:SearchJobs",
              "deadline:SearchSteps",
              "deadline:SearchTasks",
              "deadline:SearchWorkers"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FarmMembershipLevels": [
                  "OWNER",
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER"
                ]
              }
            }
          },
          {
            "Sid": "ListBasedOnMembership",
            "Effect": "Allow",
            "Action": [
              "deadline:ListFarms",
              "deadline:ListFleets",
              "deadline:ListJobs",
              "deadline:ListQueues"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "deadline:RequesterPrincipalId": "${deadline:PrincipalId}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeadlineCloud-UserAccessFleets",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AdditionalPermissions",
            "Effect": "Allow",
            "Action": [
              "identitystore:DescribeGroup",
              "identitystore:DescribeUser",
              "identitystore:ListGroupMembershipsForMember",
              "deadline:GetApplicationVersion",
              "ec2:DescribeInstanceTypes",
              "identitystore:ListUsers"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "OwnerLevelPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssociateMemberToFleet",
              "deadline:DisassociateMemberFromFleet"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FleetMembershipLevels": [
                  "OWNER"
                ]
              }
            }
          },
          {
            "Sid": "ManagerLevelMemberAssociation",
            "Effect": "Allow",
            "Action": [
              "deadline:AssociateMemberToFleet"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FleetMembershipLevels": [
                  "MANAGER"
                ]
              },
              "StringEquals": {
                "deadline:AssociatedMembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER",
                  ""
                ],
                "deadline:MembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER"
                ]
              }
            }
          },
          {
            "Sid": "ManagerLevelMemberDisassociation",
            "Effect": "Allow",
            "Action": [
              "deadline:DisassociateMemberFromFleet"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FleetMembershipLevels": [
                  "MANAGER"
                ]
              },
              "StringEquals": {
                "deadline:AssociatedMembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER",
                  ""
                ]
              }
            }
          },
          {
            "Sid": "OwnerManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:ListFleetMembers"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FleetMembershipLevels": [
                  "OWNER",
                  "MANAGER"
                ]
              }
            }
          },
          {
            "Sid": "AllLevelsPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssumeFleetRoleForRead",
              "deadline:GetFleet",
              "deadline:GetQueueFleetAssociation",
              "deadline:GetWorker",
              "deadline:ListQueueFleetAssociations",
              "deadline:ListSessionsForWorker",
              "deadline:ListWorkers",
              "deadline:SearchWorkers"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:FleetMembershipLevels": [
                  "OWNER",
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER"
                ]
              }
            }
          },
          {
            "Sid": "ListBasedOnMembership",
            "Effect": "Allow",
            "Action": [
              "deadline:ListFleets"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "deadline:RequesterPrincipalId": "${deadline:PrincipalId}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeadlineCloud-UserAccessJobs",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AdditionalPermissions",
            "Effect": "Allow",
            "Action": [
              "identitystore:DescribeGroup",
              "identitystore:DescribeUser",
              "identitystore:ListGroupMembershipsForMember",
              "deadline:GetApplicationVersion",
              "ec2:DescribeInstanceTypes",
              "identitystore:ListUsers"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "OwnerLevelPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssociateMemberToJob",
              "deadline:DisassociateMemberFromJob"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:JobMembershipLevels": [
                  "OWNER"
                ]
              }
            }
          },
          {
            "Sid": "ManagerLevelMemberAssociation",
            "Effect": "Allow",
            "Action": [
              "deadline:AssociateMemberToJob"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:JobMembershipLevels": [
                  "MANAGER"
                ]
              },
              "StringEquals": {
                "deadline:AssociatedMembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER",
                  ""
                ],
                "deadline:MembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER"
                ]
              }
            }
          },
          {
            "Sid": "ManagerLevelMemberDisassociation",
            "Effect": "Allow",
            "Action": [
              "deadline:DisassociateMemberFromJob"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:JobMembershipLevels": [
                  "MANAGER"
                ]
              },
              "StringEquals": {
                "deadline:AssociatedMembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER",
                  ""
                ]
              }
            }
          },
          {
            "Sid": "OwnerManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:ListJobMembers",
              "deadline:UpdateJob",
              "deadline:UpdateSession",
              "deadline:UpdateStep",
              "deadline:UpdateTask"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:JobMembershipLevels": [
                  "OWNER",
                  "MANAGER"
                ]
              }
            }
          },
          {
            "Sid": "AllLevelsPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:GetJob",
              "deadline:GetSession",
              "deadline:GetSessionAction",
              "deadline:GetStep",
              "deadline:GetTask",
              "deadline:ListSessionActions",
              "deadline:ListSessions",
              "deadline:ListStepConsumers",
              "deadline:ListStepDependencies",
              "deadline:ListSteps",
              "deadline:ListTasks",
              "deadline:SearchSteps",
              "deadline:SearchTasks"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:JobMembershipLevels": [
                  "OWNER",
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER"
                ]
              }
            }
          },
          {
            "Sid": "ListBasedOnMembership",
            "Effect": "Allow",
            "Action": [
              "deadline:ListJobs"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "deadline:RequesterPrincipalId": "${deadline:PrincipalId}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeadlineCloud-UserAccessQueues",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AdditionalPermissions",
            "Effect": "Allow",
            "Action": [
              "identitystore:DescribeGroup",
              "identitystore:DescribeUser",
              "identitystore:ListGroupMembershipsForMember",
              "deadline:GetApplicationVersion",
              "ec2:DescribeInstanceTypes",
              "identitystore:ListUsers"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "OwnerLevelPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssociateMemberToJob",
              "deadline:AssociateMemberToQueue",
              "deadline:DisassociateMemberFromJob",
              "deadline:DisassociateMemberFromQueue"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:QueueMembershipLevels": [
                  "OWNER"
                ]
              }
            }
          },
          {
            "Sid": "ManagerLevelMemberAssociation",
            "Effect": "Allow",
            "Action": [
              "deadline:AssociateMemberToJob",
              "deadline:AssociateMemberToQueue"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:QueueMembershipLevels": [
                  "MANAGER"
                ]
              },
              "StringEquals": {
                "deadline:AssociatedMembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER",
                  ""
                ],
                "deadline:MembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER"
                ]
              }
            }
          },
          {
            "Sid": "ManagerLevelMemberDisassociation",
            "Effect": "Allow",
            "Action": [
              "deadline:DisassociateMemberFromJob",
              "deadline:DisassociateMemberFromQueue"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:QueueMembershipLevels": [
                  "MANAGER"
                ]
              },
              "StringEquals": {
                "deadline:AssociatedMembershipLevel": [
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER",
                  ""
                ]
              }
            }
          },
          {
            "Sid": "OwnerManagerPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:ListJobMembers",
              "deadline:ListQueueMembers",
              "deadline:UpdateJob",
              "deadline:UpdateSession",
              "deadline:UpdateStep",
              "deadline:UpdateTask"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:QueueMembershipLevels": [
                  "OWNER",
                  "MANAGER"
                ]
              }
            }
          },
          {
            "Sid": "OwnerManagerContributorPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssumeQueueRoleForUser",
              "deadline:CreateJob"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:QueueMembershipLevels": [
                  "OWNER",
                  "MANAGER",
                  "CONTRIBUTOR"
                ]
              }
            }
          },
          {
            "Sid": "AllLevelsPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssumeQueueRoleForRead",
              "deadline:GetJob",
              "deadline:GetQueue",
              "deadline:GetQueueEnvironment",
              "deadline:GetQueueFleetAssociation",
              "deadline:GetSession",
              "deadline:GetSessionAction",
              "deadline:GetStep",
              "deadline:GetStorageProfileForQueue",
              "deadline:GetTask",
              "deadline:ListQueueEnvironments",
              "deadline:ListQueueFleetAssociations",
              "deadline:ListSessionActions",
              "deadline:ListSessions",
              "deadline:ListStepConsumers",
              "deadline:ListStepDependencies",
              "deadline:ListSteps",
              "deadline:ListStorageProfilesForQueue",
              "deadline:ListTasks",
              "deadline:SearchJobs",
              "deadline:SearchSteps",
              "deadline:SearchTasks"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "deadline:QueueMembershipLevels": [
                  "OWNER",
                  "MANAGER",
                  "CONTRIBUTOR",
                  "VIEWER"
                ]
              }
            }
          },
          {
            "Sid": "ListBasedOnMembership",
            "Effect": "Allow",
            "Action": [
              "deadline:ListJobs",
              "deadline:ListQueues"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "deadline:RequesterPrincipalId": "${deadline:PrincipalId}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeadlineCloud-FleetWorker",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "RunTasksPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:AssumeFleetRoleForWorker",
              "deadline:UpdateWorker",
              "deadline:UpdateWorkerSchedule",
              "deadline:BatchGetJobEntity",
              "deadline:AssumeQueueRoleForWorker"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": "${aws:ResourceAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSDeadlineCloud-WorkerHost",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "JoinFleetPermissions",
            "Effect": "Allow",
            "Action": [
              "deadline:CreateWorker",
              "deadline:AssumeFleetRoleForWorker"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": "${aws:ResourceAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "SplitCostAllocationDataServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AwsOrganizationsAccess",
            "Effect": "Allow",
            "Action": [
              "organizations:DescribeOrganization",
              "organizations:ListAccounts",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListParents"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonManagedServiceForPrometheusAccess",
            "Effect": "Allow",
            "Action": [
              "aps:ListWorkspaces",
              "aps:QueryMetrics"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneSageMakerEnvironmentRolePermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowAllNonAdminSageMakerActions",
            "Effect": "Allow",
            "Action": [
              "sagemaker:*",
              "sagemaker-geospatial:*"
            ],
            "NotResource": [
              "arn:aws:sagemaker:*:*:domain/*",
              "arn:aws:sagemaker:*:*:user-profile/*",
              "arn:aws:sagemaker:*:*:app/*",
              "arn:aws:sagemaker:*:*:space/*",
              "arn:aws:sagemaker:*:*:flow-definition/*"
            ]
          },
          {
            "Sid": "AllowSageMakerProfileManagement",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateUserProfile",
              "sagemaker:DescribeUserProfile",
              "sagemaker:UpdateUserProfile",
              "sagemaker:CreatePresignedDomainUrl"
            ],
            "Resource": "arn:aws:sagemaker:*:*:*/*"
          },
          {
            "Sid": "AllowLakeFormation",
            "Effect": "Allow",
            "Action": [
              "lakeformation:GetDataAccess"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAddTagsForAppAndSpace",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddTags"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:app/*",
              "arn:aws:sagemaker:*:*:space/*"
            ],
            "Condition": {
              "StringEquals": {
                "sagemaker:TaggingAction": [
                  "CreateApp",
                  "CreateSpace"
                ]
              }
            }
          },
          {
            "Sid": "AllowStudioActions",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreatePresignedDomainUrl",
              "sagemaker:DescribeApp",
              "sagemaker:DescribeDomain",
              "sagemaker:DescribeSpace",
              "sagemaker:DescribeUserProfile",
              "sagemaker:ListApps",
              "sagemaker:ListDomains",
              "sagemaker:ListSpaces",
              "sagemaker:ListUserProfiles"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAppActionsForUserProfile",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateApp",
              "sagemaker:DeleteApp"
            ],
            "Resource": "arn:aws:sagemaker:*:*:app/*/*/*/*",
            "Condition": {
              "Null": {
                "sagemaker:OwnerUserProfileArn": "true"
              }
            }
          },
          {
            "Sid": "AllowAppActionsForSharedSpaces",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateApp",
              "sagemaker:DeleteApp"
            ],
            "Resource": "arn:aws:sagemaker:*:*:app/${sagemaker:DomainId}/*/*/*",
            "Condition": {
              "StringEquals": {
                "sagemaker:SpaceSharingType": [
                  "Shared"
                ]
              }
            }
          },
          {
            "Sid": "AllowMutatingActionsOnSharedSpacesWithoutOwner",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateSpace",
              "sagemaker:DeleteSpace",
              "sagemaker:UpdateSpace"
            ],
            "Resource": "arn:aws:sagemaker:*:*:space/${sagemaker:DomainId}/*",
            "Condition": {
              "Null": {
                "sagemaker:OwnerUserProfileArn": "true"
              }
            }
          },
          {
            "Sid": "RestrictMutatingActionsOnSpacesToOwnerUserProfile",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateSpace",
              "sagemaker:DeleteSpace",
              "sagemaker:UpdateSpace"
            ],
            "Resource": "arn:aws:sagemaker:*:*:space/${sagemaker:DomainId}/*",
            "Condition": {
              "ArnLike": {
                "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
              },
              "StringEquals": {
                "sagemaker:SpaceSharingType": [
                  "Private",
                  "Shared"
                ]
              }
            }
          },
          {
            "Sid": "RestrictMutatingActionsOnPrivateSpaceAppsToOwnerUserProfile",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateApp",
              "sagemaker:DeleteApp"
            ],
            "Resource": "arn:aws:sagemaker:*:*:app/${sagemaker:DomainId}/*/*/*",
            "Condition": {
              "ArnLike": {
                "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
              },
              "StringEquals": {
                "sagemaker:SpaceSharingType": [
                  "Private"
                ]
              }
            }
          },
          {
            "Sid": "AllowFlowDefinitionActions",
            "Effect": "Allow",
            "Action": "sagemaker:*",
            "Resource": [
              "arn:aws:sagemaker:*:*:flow-definition/*"
            ],
            "Condition": {
              "StringEqualsIfExists": {
                "sagemaker:WorkteamType": [
                  "private-crowd",
                  "vendor-crowd"
                ]
              }
            }
          },
          {
            "Sid": "AllowAWSServiceActions",
            "Effect": "Allow",
            "Action": [
              "sqlworkbench:*",
              "datazone:*",
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeleteScheduledAction",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScheduledActions",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:PutScheduledAction",
              "application-autoscaling:RegisterScalableTarget",
              "aws-marketplace:ViewSubscriptions",
              "cloudformation:GetTemplateSummary",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:PutMetricData",
              "codecommit:BatchGetRepositories",
              "codecommit:CreateRepository",
              "codecommit:GetRepository",
              "codecommit:List*",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcs",
              "ecr:BatchCheckLayerAvailability",
              "ecr:BatchGetImage",
              "ecr:Describe*",
              "ecr:GetAuthorizationToken",
              "ecr:GetDownloadUrlForLayer",
              "ecr:StartImageScan",
              "elastic-inference:Connect",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
              "fsx:DescribeFileSystems",
              "groundtruthlabeling:*",
              "iam:GetRole",
              "iam:ListRoles",
              "kms:DescribeKey",
              "kms:ListAliases",
              "lambda:ListFunctions",
              "logs:CreateLogDelivery",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DeleteLogDelivery",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",
              "logs:GetLogDelivery",
              "logs:GetLogEvents",
              "logs:ListLogDeliveries",
              "logs:PutLogEvents",
              "logs:UpdateLogDelivery",
              "redshift-data:BatchExecuteStatement",
              "redshift-data:CancelStatement",
              "redshift-data:DescribeStatement",
              "redshift-data:DescribeTable",
              "redshift-data:ExecuteStatement",
              "redshift-data:GetStatementResult",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables",
              "redshift-serverless:GetCredentials",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:GetWorkgroup",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListWorkgroups",
              "secretsmanager:ListSecrets",
              "servicecatalog:Describe*",
              "servicecatalog:List*",
              "servicecatalog:ScanProvisionedProducts",
              "servicecatalog:SearchProducts",
              "servicecatalog:SearchProvisionedProducts",
              "sns:ListTopics",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowRAMInvitation",
            "Effect": "Allow",
            "Action": "ram:AcceptResourceShareInvitation",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "ram:ResourceShareName": "dzd_*"
              }
            }
          },
          {
            "Sid": "AllowECRActions",
            "Effect": "Allow",
            "Action": [
              "ecr:SetRepositoryPolicy",
              "ecr:CompleteLayerUpload",
              "ecr:CreateRepository",
              "ecr:BatchDeleteImage",
              "ecr:UploadLayerPart",
              "ecr:DeleteRepositoryPolicy",
              "ecr:InitiateLayerUpload",
              "ecr:DeleteRepository",
              "ecr:PutImage",
              "ecr:TagResource",
              "ecr:UntagResource"
            ],
            "Resource": [
              "arn:aws:ecr:*:*:repository/sagemaker*",
              "arn:aws:ecr:*:*:repository/datazone*"
            ]
          },
          {
            "Sid": "AllowCodeCommitActions",
            "Effect": "Allow",
            "Action": [
              "codecommit:GitPull",
              "codecommit:GitPush"
            ],
            "Resource": [
              "arn:aws:codecommit:*:*:*sagemaker*",
              "arn:aws:codecommit:*:*:*SageMaker*",
              "arn:aws:codecommit:*:*:*Sagemaker*"
            ]
          },
          {
            "Sid": "AllowCodeBuildActions",
            "Action": [
              "codebuild:BatchGetBuilds",
              "codebuild:StartBuild"
            ],
            "Resource": [
              "arn:aws:codebuild:*:*:project/sagemaker*",
              "arn:aws:codebuild:*:*:build/*"
            ],
            "Effect": "Allow"
          },
          {
            "Sid": "AllowStepFunctionsActions",
            "Action": [
              "states:DescribeExecution",
              "states:GetExecutionHistory",
              "states:StartExecution",
              "states:StopExecution",
              "states:UpdateStateMachine"
            ],
            "Resource": [
              "arn:aws:states:*:*:statemachine:*sagemaker*",
              "arn:aws:states:*:*:execution:*sagemaker*:*"
            ],
            "Effect": "Allow"
          },
          {
            "Sid": "AllowSecretManagerActions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:CreateSecret",
              "secretsmanager:PutResourcePolicy"
            ],
            "Resource": [
              "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
            ]
          },
          {
            "Sid": "AllowServiceCatalogProvisionProduct",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:ProvisionProduct"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowServiceCatalogTerminateUpdateProvisionProduct",
            "Effect": "Allow",
            "Action": [
              "servicecatalog:TerminateProvisionedProduct",
              "servicecatalog:UpdateProvisionedProduct"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "servicecatalog:userLevel": "self"
              }
            }
          },
          {
            "Sid": "AllowS3ObjectActions",
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:GetObject",
              "s3:PutObject",
              "s3:PutObjectRetention",
              "s3:ReplicateObject",
              "s3:RestoreObject",
              "s3:GetBucketAcl",
              "s3:PutObjectAcl"
            ],
            "Resource": [
              "arn:aws:s3:::SageMaker-DataZone*",
              "arn:aws:s3:::DataZone-SageMaker*",
              "arn:aws:s3:::Sagemaker-DataZone*",
              "arn:aws:s3:::DataZone-Sagemaker*",
              "arn:aws:s3:::sagemaker-datazone*",
              "arn:aws:s3:::datazone-sagemaker*",
              "arn:aws:s3:::amazon-datazone*"
            ]
          },
          {
            "Sid": "AllowS3GetObjectWithSageMakerExistingObjectTag",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*"
            ],
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/SageMaker": "true"
              }
            }
          },
          {
            "Sid": "AllowS3GetObjectWithServiceCatalogProvisioningExistingObjectTag",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject"
            ],
            "Resource": [
              "arn:aws:s3:::*"
            ],
            "Condition": {
              "StringEquals": {
                "s3:ExistingObjectTag/servicecatalog:provisioning": "true"
              }
            }
          },
          {
            "Sid": "AllowS3BucketActions",
            "Effect": "Allow",
            "Action": [
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:GetBucketCors",
              "s3:PutBucketCors"
            ],
            "Resource": [
              "arn:aws:s3:::SageMaker-DataZone*",
              "arn:aws:s3:::DataZone-SageMaker*",
              "arn:aws:s3:::Sagemaker-DataZone*",
              "arn:aws:s3:::DataZone-Sagemaker*",
              "arn:aws:s3:::sagemaker-datazone*",
              "arn:aws:s3:::datazone-sagemaker*",
              "arn:aws:s3:::amazon-datazone*"
            ]
          },
          {
            "Sid": "ReadSageMakerJumpstartArtifacts",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": [
              "arn:aws:s3:::jumpstart-cache-prod-us-west-2/*",
              "arn:aws:s3:::jumpstart-cache-prod-us-east-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-us-east-2/*",
              "arn:aws:s3:::jumpstart-cache-prod-eu-west-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-eu-central-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-south-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-2/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-1/*",
              "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-2/*"
            ]
          },
          {
            "Sid": "AllowLambdaInvokeFunction",
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:*SageMaker*",
              "arn:aws:lambda:*:*:function:*sagemaker*",
              "arn:aws:lambda:*:*:function:*Sagemaker*",
              "arn:aws:lambda:*:*:function:*LabelingFunction*"
            ]
          },
          {
            "Sid": "AllowCreateServiceLinkedRoleForSageMakerApplicationAutoscaling",
            "Action": "iam:CreateServiceLinkedRole",
            "Effect": "Allow",
            "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
              }
            }
          },
          {
            "Sid": "AllowSNSActions",
            "Effect": "Allow",
            "Action": [
              "sns:Subscribe",
              "sns:CreateTopic",
              "sns:Publish"
            ],
            "Resource": [
              "arn:aws:sns:*:*:*SageMaker*",
              "arn:aws:sns:*:*:*Sagemaker*",
              "arn:aws:sns:*:*:*sagemaker*"
            ]
          },
          {
            "Sid": "AllowPassRoleForSageMakerRoles",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/sm-provisioning/datazone_usr_sagemaker_execution_role_*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "glue.amazonaws.com",
                  "bedrock.amazonaws.com",
                  "states.amazonaws.com",
                  "lakeformation.amazonaws.com",
                  "events.amazonaws.com",
                  "sagemaker.amazonaws.com",
                  "forecast.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "CrossAccountKmsOperations",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:Decrypt",
              "kms:ListKeys"
            ],
            "Resource": "*",
            "Condition": {
              "StringNotEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "KmsOperationsWithResourceTag",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey",
              "kms:Decrypt",
              "kms:ListKeys",
              "kms:Encrypt",
              "kms:GenerateDataKey",
              "kms:RetireGrant"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "AllowAthenaActions",
            "Effect": "Allow",
            "Action": [
              "athena:BatchGetNamedQuery",
              "athena:BatchGetPreparedStatement",
              "athena:BatchGetQueryExecution",
              "athena:CreateNamedQuery",
              "athena:CreateNotebook",
              "athena:CreatePreparedStatement",
              "athena:CreatePresignedNotebookUrl",
              "athena:DeleteNamedQuery",
              "athena:DeleteNotebook",
              "athena:DeletePreparedStatement",
              "athena:ExportNotebook",
              "athena:GetDatabase",
              "athena:GetDataCatalog",
              "athena:GetNamedQuery",
              "athena:GetPreparedStatement",
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:GetQueryResultsStream",
              "athena:GetQueryRuntimeStatistics",
              "athena:GetTableMetadata",
              "athena:GetWorkGroup",
              "athena:ImportNotebook",
              "athena:ListDatabases",
              "athena:ListDataCatalogs",
              "athena:ListEngineVersions",
              "athena:ListNamedQueries",
              "athena:ListPreparedStatements",
              "athena:ListQueryExecutions",
              "athena:ListTableMetadata",
              "athena:ListTagsForResource",
              "athena:ListWorkGroups",
              "athena:StartCalculationExecution",
              "athena:StartQueryExecution",
              "athena:StartSession",
              "athena:StopCalculationExecution",
              "athena:StopQueryExecution",
              "athena:TerminateSession",
              "athena:UpdateNamedQuery",
              "athena:UpdateNotebook",
              "athena:UpdateNotebookMetadata",
              "athena:UpdatePreparedStatement"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowGlueCreateDatabase",
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/default"
            ]
          },
          {
            "Sid": "AllowRedshiftGetClusterCredentials",
            "Effect": "Allow",
            "Action": [
              "redshift:GetClusterCredentials"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
              "arn:aws:redshift:*:*:dbname:*"
            ]
          },
          {
            "Sid": "AllowListTags",
            "Effect": "Allow",
            "Action": [
              "sagemaker:ListTags"
            ],
            "Resource": [
              "arn:aws:sagemaker:*:*:user-profile/*",
              "arn:aws:sagemaker:*:*:domain/*"
            ]
          },
          {
            "Sid": "AllowCloudformationListStackResources",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStackResources"
            ],
            "Resource": "arn:aws:cloudformation:*:*:stack/SC-*"
          },
          {
            "Sid": "AllowGlueActions",
            "Effect": "Allow",
            "Action": [
              "glue:GetColumnStatisticsForPartition",
              "glue:GetColumnStatisticsForTable",
              "glue:ListJobs",
              "glue:CreateSession",
              "glue:RunStatement",
              "glue:BatchCreatePartition",
              "glue:CreatePartitionIndex",
              "glue:CreateTable",
              "glue:BatchGetWorkflows",
              "glue:BatchUpdatePartition",
              "glue:BatchDeletePartition",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:UpdateTable",
              "glue:DeleteTableVersion",
              "glue:DeleteTable",
              "glue:DeleteColumnStatisticsForPartition",
              "glue:DeleteColumnStatisticsForTable",
              "glue:DeletePartitionIndex",
              "glue:UpdateColumnStatisticsForPartition",
              "glue:UpdateColumnStatisticsForTable",
              "glue:BatchDeleteTableVersion",
              "glue:BatchDeleteTable",
              "glue:CreatePartition",
              "glue:DeletePartition",
              "glue:UpdatePartition",
              "glue:CreateBlueprint",
              "glue:CreateJob",
              "glue:CreateConnection",
              "glue:CreateCrawler",
              "glue:CreateDataQualityRuleset",
              "glue:CreateWorkflow",
              "glue:GetDatabases",
              "glue:GetTables",
              "glue:GetTable",
              "glue:SearchTables",
              "glue:NotifyEvent",
              "glue:ListSchemas",
              "glue:BatchGetJobs",
              "glue:GetConnection",
              "glue:GetDatabase"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AllowGlueActionsWithEnvironmentTag",
            "Effect": "Allow",
            "Action": [
              "glue:SearchTables",
              "glue:NotifyEvent",
              "glue:StartBlueprintRun",
              "glue:PutWorkflowRunProperties",
              "glue:StopCrawler",
              "glue:DeleteJob",
              "glue:DeleteWorkflow",
              "glue:UpdateCrawler",
              "glue:DeleteBlueprint",
              "glue:UpdateWorkflow",
              "glue:StartCrawler",
              "glue:ResetJobBookmark",
              "glue:UpdateJob",
              "glue:StartWorkflowRun",
              "glue:StopCrawlerSchedule",
              "glue:ResumeWorkflowRun",
              "glue:ListSchemas",
              "glue:DeleteCrawler",
              "glue:UpdateBlueprint",
              "glue:BatchStopJobRun",
              "glue:StopWorkflowRun",
              "glue:BatchGetJobs",
              "glue:BatchGetWorkflows",
              "glue:UpdateCrawlerSchedule",
              "glue:DeleteConnection",
              "glue:UpdateConnection",
              "glue:GetConnection",
              "glue:GetDatabase",
              "glue:GetTable",
              "glue:GetPartition",
              "glue:GetPartitions",
              "glue:BatchDeleteConnection",
              "glue:StartCrawlerSchedule",
              "glue:StartJobRun",
              "glue:CreateWorkflow",
              "glue:*DataQuality*"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "AllowGlueDefaultAccess",
            "Effect": "Allow",
            "Action": [
              "glue:BatchGet*",
              "glue:Get*",
              "glue:SearchTables",
              "glue:List*",
              "glue:RunStatement"
            ],
            "Resource": [
              "arn:aws:glue:*:*:catalog",
              "arn:aws:glue:*:*:database/default",
              "arn:aws:glue:*:*:connection/dz-sm-*",
              "arn:aws:glue:*:*:session/*"
            ]
          },
          {
            "Sid": "AllowRedshiftClusterActions",
            "Effect": "Allow",
            "Action": [
              "redshift:GetClusterCredentialsWithIAM",
              "redshift:DescribeClusters"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:cluster:*",
              "arn:aws:redshift:*:*:dbname:*"
            ]
          },
          {
            "Sid": "AllowCreateClusterUser",
            "Effect": "Allow",
            "Action": [
              "redshift:CreateClusterUser"
            ],
            "Resource": [
              "arn:aws:redshift:*:*:dbuser:*"
            ]
          },
          {
            "Sid": "AllowCreateSecretActions",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/AmazonDataZoneDomain": "dzd_*",
                "aws:RequestTag/AmazonDataZoneDomain": "dzd_*"
              },
              "Null": {
                "aws:TagKeys": "false",
                "aws:ResourceTag/AmazonDataZoneProject": "false",
                "aws:ResourceTag/AmazonDataZoneDomain": "false",
                "aws:RequestTag/AmazonDataZoneDomain": "false",
                "aws:RequestTag/AmazonDataZoneProject": "false"
              },
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "AmazonDataZoneDomain",
                  "AmazonDataZoneProject"
                ]
              }
            }
          },
          {
            "Sid": "ForecastOperations",
            "Effect": "Allow",
            "Action": [
              "forecast:CreateExplainabilityExport",
              "forecast:CreateExplainability",
              "forecast:CreateForecastEndpoint",
              "forecast:CreateAutoPredictor",
              "forecast:CreateDatasetImportJob",
              "forecast:CreateDatasetGroup",
              "forecast:CreateDataset",
              "forecast:CreateForecast",
              "forecast:CreateForecastExportJob",
              "forecast:CreatePredictorBacktestExportJob",
              "forecast:CreatePredictor",
              "forecast:DescribeExplainabilityExport",
              "forecast:DescribeExplainability",
              "forecast:DescribeAutoPredictor",
              "forecast:DescribeForecastEndpoint",
              "forecast:DescribeDatasetImportJob",
              "forecast:DescribeDataset",
              "forecast:DescribeForecast",
              "forecast:DescribeForecastExportJob",
              "forecast:DescribePredictorBacktestExportJob",
              "forecast:GetAccuracyMetrics",
              "forecast:InvokeForecastEndpoint",
              "forecast:GetRecentForecastContext",
              "forecast:DescribePredictor",
              "forecast:TagResource",
              "forecast:DeleteResourceTree"
            ],
            "Resource": [
              "arn:aws:forecast:*:*:*Canvas*"
            ]
          },
          {
            "Sid": "RDSOperation",
            "Effect": "Allow",
            "Action": "rds:DescribeDBInstances",
            "Resource": "*"
          },
          {
            "Sid": "AllowEventBridgeRule",
            "Effect": "Allow",
            "Action": [
              "events:PutRule"
            ],
            "Resource": "arn:aws:events:*:*:rule/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-data-prep-job": "true"
              }
            }
          },
          {
            "Sid": "EventBridgeOperations",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:PutTargets"
            ],
            "Resource": "arn:aws:events:*:*:rule/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
              }
            }
          },
          {
            "Sid": "EventBridgeTagBasedOperations",
            "Effect": "Allow",
            "Action": [
              "events:TagResource"
            ],
            "Resource": "arn:aws:events:*:*:rule/*",
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/sagemaker:is-canvas-data-prep-job": "true",
                "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
              }
            }
          },
          {
            "Sid": "EventBridgeListTagOperation",
            "Effect": "Allow",
            "Action": "events:ListTagsForResource",
            "Resource": "*"
          },
          {
            "Sid": "AllowEMR",
            "Effect": "Allow",
            "Action": [
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ListClusters"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSSOAction",
            "Effect": "Allow",
            "Action": [
              "sso:CreateApplicationAssignment",
              "sso:AssociateProfile"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DenyNotAction",
            "Effect": "Deny",
            "NotAction": [
              "sagemaker:*",
              "sagemaker-geospatial:*",
              "sqlworkbench:*",
              "datazone:*",
              "forecast:*",
              "application-autoscaling:DeleteScalingPolicy",
              "application-autoscaling:DeleteScheduledAction",
              "application-autoscaling:DeregisterScalableTarget",
              "application-autoscaling:DescribeScalableTargets",
              "application-autoscaling:DescribeScalingActivities",
              "application-autoscaling:DescribeScalingPolicies",
              "application-autoscaling:DescribeScheduledActions",
              "application-autoscaling:PutScalingPolicy",
              "application-autoscaling:PutScheduledAction",
              "application-autoscaling:RegisterScalableTarget",
              "athena:BatchGetNamedQuery",
              "athena:BatchGetPreparedStatement",
              "athena:BatchGetQueryExecution",
              "athena:CreateNamedQuery",
              "athena:CreateNotebook",
              "athena:CreatePreparedStatement",
              "athena:CreatePresignedNotebookUrl",
              "athena:DeleteNamedQuery",
              "athena:DeleteNotebook",
              "athena:DeletePreparedStatement",
              "athena:ExportNotebook",
              "athena:GetDatabase",
              "athena:GetDataCatalog",
              "athena:GetNamedQuery",
              "athena:GetPreparedStatement",
              "athena:GetQueryExecution",
              "athena:GetQueryResults",
              "athena:GetQueryResultsStream",
              "athena:GetQueryRuntimeStatistics",
              "athena:GetTableMetadata",
              "athena:GetWorkGroup",
              "athena:ImportNotebook",
              "athena:ListDatabases",
              "athena:ListDataCatalogs",
              "athena:ListEngineVersions",
              "athena:ListNamedQueries",
              "athena:ListPreparedStatements",
              "athena:ListQueryExecutions",
              "athena:ListTableMetadata",
              "athena:ListTagsForResource",
              "athena:ListWorkGroups",
              "athena:StartCalculationExecution",
              "athena:StartQueryExecution",
              "athena:StartSession",
              "athena:StopCalculationExecution",
              "athena:StopQueryExecution",
              "athena:TerminateSession",
              "athena:UpdateNamedQuery",
              "athena:UpdateNotebook",
              "athena:UpdateNotebookMetadata",
              "athena:UpdatePreparedStatement",
              "aws-marketplace:ViewSubscriptions",
              "cloudformation:GetTemplateSummary",
              "cloudformation:ListStackResources",
              "cloudwatch:DeleteAlarms",
              "cloudwatch:DescribeAlarms",
              "cloudwatch:GetMetricData",
              "cloudwatch:GetMetricStatistics",
              "cloudwatch:ListMetrics",
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:PutMetricData",
              "codebuild:BatchGetBuilds",
              "codebuild:StartBuild",
              "codecommit:BatchGetRepositories",
              "codecommit:CreateRepository",
              "codecommit:GetRepository",
              "codecommit:List*",
              "codecommit:GitPull",
              "codecommit:GitPush",
              "ec2:CreateNetworkInterface",
              "ec2:CreateNetworkInterfacePermission",
              "ec2:DeleteNetworkInterface",
              "ec2:DeleteNetworkInterfacePermission",
              "ec2:DescribeDhcpOptions",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeRouteTables",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcEndpoints",
              "ec2:DescribeVpcEndpointServices",
              "ec2:DescribeVpcs",
              "ecr:BatchCheckLayerAvailability",
              "ecr:BatchGetImage",
              "ecr:CreateRepository",
              "ecr:Describe*",
              "ecr:GetAuthorizationToken",
              "ecr:GetDownloadUrlForLayer",
              "ecr:SetRepositoryPolicy",
              "ecr:CompleteLayerUpload",
              "ecr:BatchDeleteImage",
              "ecr:UploadLayerPart",
              "ecr:DeleteRepositoryPolicy",
              "ecr:InitiateLayerUpload",
              "ecr:DeleteRepository",
              "ecr:PutImage",
              "ecr:StartImageScan",
              "ecr:TagResource",
              "ecr:UntagResource",
              "elastic-inference:Connect",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
              "elasticmapreduce:DescribeCluster",
              "elasticmapreduce:ListInstanceGroups",
              "elasticmapreduce:ListClusters",
              "events:PutRule",
              "events:DescribeRule",
              "events:PutTargets",
              "events:TagResource",
              "events:ListTagsForResource",
              "fsx:DescribeFileSystems",
              "glue:SearchTables",
              "glue:NotifyEvent",
              "glue:StartBlueprintRun",
              "glue:PutWorkflowRunProperties",
              "glue:StopCrawler",
              "glue:DeleteJob",
              "glue:DeleteWorkflow",
              "glue:UpdateCrawler",
              "glue:DeleteBlueprint",
              "glue:UpdateWorkflow",
              "glue:StartCrawler",
              "glue:ResetJobBookmark",
              "glue:UpdateJob",
              "glue:StartWorkflowRun",
              "glue:StopCrawlerSchedule",
              "glue:ResumeWorkflowRun",
              "glue:DeleteCrawler",
              "glue:UpdateBlueprint",
              "glue:BatchStopJobRun",
              "glue:StopWorkflowRun",
              "glue:BatchGet*",
              "glue:UpdateCrawlerSchedule",
              "glue:DeleteConnection",
              "glue:UpdateConnection",
              "glue:Get*",
              "glue:BatchDeleteConnection",
              "glue:StartCrawlerSchedule",
              "glue:StartJobRun",
              "glue:CreateWorkflow",
              "glue:*DataQuality*",
              "glue:List*",
              "glue:CreateSession",
              "glue:RunStatement",
              "glue:BatchCreatePartition",
              "glue:CreateDatabase",
              "glue:CreatePartitionIndex",
              "glue:CreateTable",
              "glue:BatchUpdatePartition",
              "glue:BatchDeletePartition",
              "glue:UpdateTable",
              "glue:DeleteTableVersion",
              "glue:DeleteTable",
              "glue:DeleteColumnStatisticsForPartition",
              "glue:DeleteColumnStatisticsForTable",
              "glue:DeletePartitionIndex",
              "glue:UpdateColumnStatisticsForPartition",
              "glue:UpdateColumnStatisticsForTable",
              "glue:BatchDeleteTableVersion",
              "glue:BatchDeleteTable",
              "glue:CreatePartition",
              "glue:DeletePartition",
              "glue:UpdatePartition",
              "glue:CreateBlueprint",
              "glue:CreateJob",
              "glue:CreateConnection",
              "glue:CreateCrawler",
              "groundtruthlabeling:*",
              "iam:CreateServiceLinkedRole",
              "iam:GetRole",
              "iam:ListRoles",
              "iam:PassRole",
              "kms:DescribeKey",
              "kms:ListAliases",
              "kms:Decrypt",
              "kms:ListKeys",
              "kms:Encrypt",
              "kms:GenerateDataKey",
              "kms:RetireGrant",
              "lakeformation:GetDataAccess",
              "lambda:ListFunctions",
              "lambda:InvokeFunction",
              "logs:CreateLogDelivery",
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:DeleteLogDelivery",
              "logs:Describe*",
              "logs:GetLogDelivery",
              "logs:GetLogEvents",
              "logs:ListLogDeliveries",
              "logs:PutLogEvents",
              "logs:UpdateLogDelivery",
              "ram:AcceptResourceShareInvitation",
              "rds:DescribeDBInstances",
              "redshift:CreateClusterUser",
              "redshift:GetClusterCredentials",
              "redshift:GetClusterCredentialsWithIAM",
              "redshift:DescribeClusters",
              "redshift-data:BatchExecuteStatement",
              "redshift-data:CancelStatement",
              "redshift-data:DescribeStatement",
              "redshift-data:DescribeTable",
              "redshift-data:ExecuteStatement",
              "redshift-data:GetStatementResult",
              "redshift-data:ListSchemas",
              "redshift-data:ListTables",
              "redshift-serverless:ListNamespaces",
              "redshift-serverless:ListWorkgroups",
              "redshift-serverless:GetNamespace",
              "redshift-serverless:GetWorkgroup",
              "redshift-serverless:GetCredentials",
              "s3:GetBucketAcl",
              "s3:PutObjectAcl",
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:AbortMultipartUpload",
              "s3:CreateBucket",
              "s3:GetBucketLocation",
              "s3:ListBucket",
              "s3:ListAllMyBuckets",
              "s3:GetBucketCors",
              "s3:PutBucketCors",
              "s3:DeleteObjectVersion",
              "s3:PutObjectRetention",
              "s3:ReplicateObject",
              "s3:RestoreObject",
              "secretsmanager:ListSecrets",
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:CreateSecret",
              "secretsmanager:PutResourcePolicy",
              "secretsmanager:TagResource",
              "servicecatalog:Describe*",
              "servicecatalog:List*",
              "servicecatalog:ScanProvisionedProducts",
              "servicecatalog:SearchProducts",
              "servicecatalog:SearchProvisionedProducts",
              "servicecatalog:ProvisionProduct",
              "servicecatalog:TerminateProvisionedProduct",
              "servicecatalog:UpdateProvisionedProduct",
              "sns:ListTopics",
              "sns:Subscribe",
              "sns:CreateTopic",
              "sns:Publish",
              "states:DescribeExecution",
              "states:GetExecutionHistory",
              "states:StartExecution",
              "states:StopExecution",
              "states:UpdateStateMachine",
              "tag:GetResources",
              "sso:CreateApplicationAssignment",
              "sso:AssociateProfile"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneSageMakerProvisioningRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateSageMakerStudio",
            "Effect": "Allow",
            "Action": [
              "sagemaker:CreateDomain"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              },
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "AmazonDataZoneEnvironment"
                ]
              },
              "Null": {
                "aws:TagKeys": "false",
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false",
                "aws:RequestTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "DeleteSageMakerStudio",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DeleteDomain"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              },
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "AmazonDataZoneEnvironment"
                ]
              },
              "Null": {
                "aws:TagKeys": "false",
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentSageMakerDescribePermissions",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeDomain"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "IamPassRolePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/sm-provisioning/datazone_usr*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "glue.amazonaws.com",
                  "lakeformation.amazonaws.com",
                  "sagemaker.amazonaws.com"
                ],
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZonePermissionsToCreateEnvironmentRole",
            "Effect": "Allow",
            "Action": [
              "iam:CreateRole",
              "iam:DetachRolePolicy",
              "iam:DeleteRolePolicy",
              "iam:AttachRolePolicy",
              "iam:PutRolePolicy"
            ],
            "Resource": [
              "arn:aws:iam::*:role/sm-provisioning/datazone_usr*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ],
                "iam:PermissionsBoundary": "arn:aws:iam::aws:policy/AmazonDataZoneSageMakerEnvironmentRolePermissionsBoundary"
              }
            }
          },
          {
            "Sid": "AmazonDataZonePermissionsToManageEnvironmentRole",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:GetRolePolicy",
              "iam:DeleteRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/sm-provisioning/datazone_usr*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZonePermissionsToCreateSageMakerServiceRole",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/sagemaker.amazonaws.com/AWSServiceRoleForAmazonSageMakerNotebooks"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentParameterValidation",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "sagemaker:ListDomains"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonDataZoneEnvironmentKMSKeyValidation",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": "arn:aws:kms:*:*:key/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "AmazonDataZoneEnvironmentGluePermissions",
            "Effect": "Allow",
            "Action": [
              "glue:CreateConnection",
              "glue:DeleteConnection"
            ],
            "Resource": [
              "arn:aws:glue:*:*:connection/dz-sm-athena-glue-connection-*",
              "arn:aws:glue:*:*:connection/dz-sm-redshift-cluster-connection-*",
              "arn:aws:glue:*:*:connection/dz-sm-redshift-serverless-connection-*",
              "arn:aws:glue:*:*:catalog"
            ],
            "Condition": {
              "StringEquals": {
                "aws:CalledViaFirst": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonDataZoneSageMakerManageAccessRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonSageMakerReadPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:DescribeFeatureGroup",
              "sagemaker:ListModelPackages",
              "sagemaker:DescribeModelPackage",
              "sagemaker:DescribeModelPackageGroup",
              "sagemaker:DescribeAlgorithm",
              "sagemaker:ListTags",
              "sagemaker:DescribeDomain",
              "sagemaker:GetModelPackageGroupPolicy",
              "sagemaker:Search"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerTaggingPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:AddTags",
              "sagemaker:DeleteTags"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringLike": {
                "aws:TagKeys": [
                  "sagemaker:shared-with:*"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerModelPackageGroupPolicyPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:PutModelPackageGroupPolicy",
              "sagemaker:DeleteModelPackageGroupPolicy"
            ],
            "Resource": [
              "arn:*:sagemaker:*:*:model-package-group/*"
            ]
          },
          {
            "Sid": "AmazonSageMakerRAMPermission",
            "Effect": "Allow",
            "Action": [
              "ram:GetResourceShares",
              "ram:GetResourceShareInvitations",
              "ram:GetResourceShareAssociations"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AmazonSageMakerRAMResourcePolicyPermission",
            "Effect": "Allow",
            "Action": [
              "sagemaker:PutResourcePolicy",
              "sagemaker:GetResourcePolicy",
              "sagemaker:DeleteResourcePolicy"
            ],
            "Resource": [
              "arn:*:sagemaker:*:*:feature-group/*"
            ]
          },
          {
            "Sid": "AmazonSageMakerRAMTagResourceSharePermission",
            "Effect": "Allow",
            "Action": [
              "ram:TagResource"
            ],
            "Resource": "arn:*:ram:*:*:resource-share/*",
            "Condition": {
              "Null": {
                "aws:RequestTag/AwsDataZoneDomainId": "false"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerRAMDeleteResourceSharePermission",
            "Effect": "Allow",
            "Action": [
              "ram:DeleteResourceShare"
            ],
            "Resource": "arn:*:ram:*:*:resource-share/*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AwsDataZoneDomainId": "false"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerRAMCreateResourceSharePermission",
            "Effect": "Allow",
            "Action": [
              "ram:CreateResourceShare"
            ],
            "Resource": "*",
            "Condition": {
              "StringLikeIfExists": {
                "ram:RequestedResourceType": [
                  "sagemaker:*"
                ]
              },
              "Null": {
                "aws:RequestTag/AwsDataZoneDomainId": "false"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerS3BucketPolicyPermission",
            "Effect": "Allow",
            "Action": [
              "s3:DeleteBucketPolicy",
              "s3:PutBucketPolicy",
              "s3:GetBucketPolicy"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-datazone*",
              "arn:aws:s3:::SageMaker-DataZone*",
              "arn:aws:s3:::datazone-sagemaker*",
              "arn:aws:s3:::DataZone-SageMaker*",
              "arn:aws:s3:::amazon-datazone*"
            ]
          },
          {
            "Sid": "AmazonSageMakerS3Permission",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::sagemaker-datazone*",
              "arn:aws:s3:::SageMaker-DataZone*",
              "arn:aws:s3:::datazone-sagemaker*",
              "arn:aws:s3:::DataZone-SageMaker*",
              "arn:aws:s3:::amazon-datazone*"
            ]
          },
          {
            "Sid": "AmazonSageMakerECRPermission",
            "Effect": "Allow",
            "Action": [
              "ecr:GetRepositoryPolicy",
              "ecr:SetRepositoryPolicy",
              "ecr:DeleteRepositoryPolicy"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
              }
            }
          },
          {
            "Sid": "AmazonSageMakerKMSReadPermission",
            "Effect": "Allow",
            "Action": [
              "kms:DescribeKey"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "AmazonDataZoneEnvironment"
                ]
              }
            }
          },
          {
            "Sid": "AmazonSageMakerKMSGrantPermission",
            "Effect": "Allow",
            "Action": [
              "kms:CreateGrant"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:TagKeys": [
                  "AmazonDataZoneEnvironment"
                ]
              },
              "ForAllValues:StringEquals": {
                "kms:GrantOperations": [
                  "Decrypt"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForAmazonQDeveloper",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "sid1",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": [
                  "AWS/Q"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSServiceRoleForUserSubscriptions",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SubscriptionManagementPolicy",
            "Effect": "Allow",
            "Action": [
              "identitystore:DescribeGroup",
              "identitystore:DescribeUser",
              "identitystore:IsMemberInGroups",
              "identitystore:ListGroupMemberships",
              "organizations:DescribeOrganization",
              "sso:DescribeApplication",
              "sso:DescribeInstance",
              "sso:ListInstances"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "QBusinessServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "QBusinessPutMetricDataPermission",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricData"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/QBusiness"
              }
            }
          },
          {
            "Sid": "QBusinessCreateLogGroupPermission",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/qbusiness/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "QBusinessDescribeLogGroupsPermission",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "QBusinessLogStreamPermission",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogStreams",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/qbusiness/*:log-stream:*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53ProfilesReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonRoute53ProfilesReadOnlyAccess",
            "Effect": "Allow",
            "Action": [
              "route53profiles:GetProfile",
              "route53profiles:GetProfileAssociation",
              "route53profiles:GetProfileResourceAssociation",
              "route53profiles:ListProfileAssociations",
              "route53profiles:ListProfileResourceAssociations",
              "route53profiles:ListProfiles",
              "route53profiles:ListTagsForResource",
              "route53resolver:GetFirewallConfig",
              "route53resolver:GetResolverConfig",
              "route53resolver:GetResolverDnssecConfig",
              "route53resolver:GetResolverQueryLogConfig"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonRoute53ProfilesFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonRoute53ProfilesFullAccess",
            "Effect": "Allow",
            "Action": [
              "route53profiles:AssociateProfile",
              "route53profiles:AssociateResourceToProfile",
              "route53profiles:CreateProfile",
              "route53profiles:DeleteProfile",
              "route53profiles:DisassociateProfile",
              "route53profiles:DisassociateResourceFromProfile",
              "route53profiles:GetProfile",
              "route53profiles:GetProfileAssociation",
              "route53profiles:GetProfileResourceAssociation",
              "route53profiles:ListProfileAssociations",
              "route53profiles:ListProfileResourceAssociations",
              "route53profiles:ListProfiles",
              "route53profiles:ListTagsForResource",
              "route53profiles:TagResource",
              "route53profiles:UntagResource",
              "route53profiles:UpdateProfileResourceAssociation",
              "route53resolver:GetFirewallConfig",
              "route53resolver:GetFirewallRuleGroup",
              "route53resolver:GetResolverConfig",
              "route53resolver:GetResolverDnssecConfig",
              "route53resolver:GetResolverQueryLogConfig",
              "route53resolver:GetResolverRule",
              "ec2:DescribeVpcs",
              "route53:GetHostedZone"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonOpenSearchDirectQueryGlueCreateAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AmazonOpenSearchDirectQueryGlueCreateAccess",
            "Effect": "Allow",
            "Action": [
              "glue:CreateDatabase",
              "glue:CreatePartition",
              "glue:CreateTable",
              "glue:BatchCreatePartition"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "EC2FastLaunchFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "EC2FastLaunch",
            "Effect": "Allow",
            "Action": [
              "ec2:EnableFastLaunch",
              "ec2:DisableFastLaunch",
              "ec2:DescribeFastLaunchImages"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2ReadOnly",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeSnapshots",
              "ec2:DescribeVolumes",
              "ec2:DescribeRegions",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "ec2:DescribeInstances",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeTags"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2LaunchInstance",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:subnet/*",
              "arn:aws:ec2:*:*:network-interface/*",
              "arn:aws:ec2:*::image/*",
              "arn:aws:ec2:*:*:key-pair/*",
              "arn:aws:ec2:*:*:security-group/*",
              "arn:aws:ec2:*:*:launch-template/*"
            ]
          },
          {
            "Sid": "EC2LaunchInstanceWithVolAndInstance",
            "Effect": "Allow",
            "Action": [
              "ec2:RunInstances"
            ],
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:instance/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:RequestTag/CreatedBy": "EC2 Fast Launch"
              }
            }
          },
          {
            "Sid": "EC2Tags",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ec2:*:*:snapshot/*",
              "arn:aws:ec2:*:*:launch-template/*",
              "arn:aws:ec2:*:*:vpc/*",
              "arn:aws:ec2:*:*:subnet/*"
            ],
            "Condition": {
              "StringEquals": {
                "ec2:CreateAction": "RunInstances"
              }
            }
          },
          {
            "Sid": "IAMSLR",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/ec2fastlaunch.amazonaws.com/AWSServiceRoleForEC2FastLaunch",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "ec2fastlaunch.amazonaws.com"
              }
            }
          },
          {
            "Sid": "IAMSLRPassRole",
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": [
              "arn:aws:iam::*:instance-profile/*",
              "arn:aws:iam::*:role/*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ec2.amazonaws.com.cn"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSESServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowPutMetricDataToSESCloudWatchNamespaces",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "cloudwatch:namespace": [
                  "AWS/SES",
                  "AWS/SES/MailManager",
                  "AWS/SES/Addons"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchApplicationSignalsReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchApplicationSignalsReadOnlyAccessPermissions",
            "Effect": "Allow",
            "Action": [
              "application-signals:BatchGetServiceLevelObjectiveBudgetReport",
              "application-signals:GetService",
              "application-signals:GetServiceLevelObjective",
              "application-signals:ListServiceLevelObjectives",
              "application-signals:ListServiceDependencies",
              "application-signals:ListServiceDependents",
              "application-signals:ListServiceOperations",
              "application-signals:ListServices",
              "application-signals:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsGetRolePermissions",
            "Effect": "Allow",
            "Action": "iam:GetRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/application-signals.cloudwatch.amazonaws.com/AWSServiceRoleForCloudWatchApplicationSignals"
          },
          {
            "Sid": "CloudWatchApplicationSignalsLogGroupPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:StartQuery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/application-signals/data:*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsLogsPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:StopQuery",
              "logs:GetQueryResults"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsAlarmsReadPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsMetricsReadPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsSyntheticsReadPermissions",
            "Effect": "Allow",
            "Action": [
              "synthetics:DescribeCanaries",
              "synthetics:DescribeCanariesLastRun",
              "synthetics:GetCanaryRuns"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsRumReadPermissions",
            "Effect": "Allow",
            "Action": [
              "rum:BatchGetRumMetricDefinitions",
              "rum:GetAppMonitor",
              "rum:GetAppMonitorData",
              "rum:ListAppMonitors"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsXrayReadPermissions",
            "Effect": "Allow",
            "Action": [
              "xray:GetTraceSummaries"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "CloudWatchApplicationSignalsFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CloudWatchApplicationSignalsFullAccessPermissions",
            "Effect": "Allow",
            "Action": "application-signals:*",
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsAlarmsPermissions",
            "Effect": "Allow",
            "Action": "cloudwatch:DescribeAlarms",
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsMetricsPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:GetMetricData",
              "cloudwatch:ListMetrics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsLogGroupPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:StartQuery"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/application-signals/data:*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsLogsPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:StopQuery",
              "logs:GetQueryResults"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsSyntheticsPermissions",
            "Effect": "Allow",
            "Action": [
              "synthetics:DescribeCanaries",
              "synthetics:DescribeCanariesLastRun",
              "synthetics:GetCanaryRuns"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsRumPermissions",
            "Effect": "Allow",
            "Action": [
              "rum:BatchCreateRumMetricDefinitions",
              "rum:BatchDeleteRumMetricDefinitions",
              "rum:BatchGetRumMetricDefinitions",
              "rum:GetAppMonitor",
              "rum:GetAppMonitorData",
              "rum:ListAppMonitors",
              "rum:PutRumMetricsDestination",
              "rum:UpdateRumMetricDefinition"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsXrayPermissions",
            "Effect": "Allow",
            "Action": "xray:GetTraceSummaries",
            "Resource": "*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsPutMetricAlarmPermissions",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricAlarm",
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:SLO-AttainmentGoalAlarm-*",
              "arn:aws:cloudwatch:*:*:alarm:SLO-WarningAlarm-*",
              "arn:aws:cloudwatch:*:*:alarm:SLI-HealthAlarm-*"
            ]
          },
          {
            "Sid": "CloudWatchApplicationSignalsCreateServiceLinkedRolePermissions",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/application-signals.cloudwatch.amazonaws.com/AWSServiceRoleForCloudWatchApplicationSignals",
            "Condition": {
              "StringLike": {
                "iam:AWSServiceName": "application-signals.cloudwatch.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CloudWatchApplicationSignalsGetRolePermissions",
            "Effect": "Allow",
            "Action": "iam:GetRole",
            "Resource": "arn:aws:iam::*:role/aws-service-role/application-signals.cloudwatch.amazonaws.com/AWSServiceRoleForCloudWatchApplicationSignals"
          },
          {
            "Sid": "CloudWatchApplicationSignalsSnsWritePermissions",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic",
              "sns:Subscribe"
            ],
            "Resource": "arn:aws:sns:*:*:cloudwatch-application-signals-*"
          },
          {
            "Sid": "CloudWatchApplicationSignalsSnsReadPermissions",
            "Effect": "Allow",
            "Action": "sns:ListTopics",
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSBCMDataExportsServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CostOptimizationRecommendationAccess",
            "Effect": "Allow",
            "Action": [
              "cost-optimization-hub:ListEnrollmentStatuses",
              "cost-optimization-hub:ListRecommendations"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "OpensearchIngestionSelfManagedVpcePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DescribeEc2Resources",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeVpcEndpoints"
            ],
            "Resource": "*"
          },
          {
            "Sid": "CwPermissionsForOsiNamespace",
            "Effect": "Allow",
            "Action": "cloudwatch:PutMetricData",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "cloudwatch:namespace": "AWS/OSIS"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSApplicationAutoscalingWorkSpacesPoolPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "WorkSpacesActionsOnAllPools",
            "Effect": "Allow",
            "Action": [
              "workspaces:DescribeWorkspacesPools",
              "workspaces:UpdateWorkspacesPool"
            ],
            "Resource": [
              "*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "CloudWatchActionsOnAllAlarms",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:DescribeAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "CloudWatchActionsOnTargetTrackingAlarms",
            "Effect": "Allow",
            "Action": [
              "cloudwatch:PutMetricAlarm",
              "cloudwatch:DeleteAlarms"
            ],
            "Resource": [
              "arn:aws:cloudwatch:*:*:alarm:TargetTracking*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "ECRTemplateServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateRepositoryWithTemplate",
            "Effect": "Allow",
            "Action": [
              "ecr:CreateRepository"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesSecureBrowserReadOnly",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "WorkSpacesSecureBrowser",
            "Effect": "Allow",
            "Action": [
              "workspaces-web:GetBrowserSettings",
              "workspaces-web:GetIdentityProvider",
              "workspaces-web:GetNetworkSettings",
              "workspaces-web:GetPortal",
              "workspaces-web:GetPortalServiceProviderMetadata",
              "workspaces-web:GetTrustStore",
              "workspaces-web:GetTrustStoreCertificate",
              "workspaces-web:GetUserSettings",
              "workspaces-web:GetUserAccessLoggingSettings",
              "workspaces-web:GetIpAccessSettings",
              "workspaces-web:ListBrowserSettings",
              "workspaces-web:ListIdentityProviders",
              "workspaces-web:ListNetworkSettings",
              "workspaces-web:ListPortals",
              "workspaces-web:ListTagsForResource",
              "workspaces-web:ListTrustStoreCertificates",
              "workspaces-web:ListTrustStores",
              "workspaces-web:ListUserSettings",
              "workspaces-web:ListUserAccessLoggingSettings",
              "workspaces-web:ListIpAccessSettings"
            ],
            "Resource": "arn:aws:workspaces-web:*:*:*"
          },
          {
            "Sid": "Dependencies",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "kinesis:ListStreams"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "SSMQuickSetupRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "SSMResourceDataSyncPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:ListResourceDataSync"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMResourceDataSyncGetOpsSummaryPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:GetOpsSummary"
            ],
            "Resource": "arn:aws:ssm:*:*:resource-data-sync/AWS-QuickSetup-*"
          },
          {
            "Sid": "SSMAssociationsReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:ListAssociations",
              "ssm:DescribeAssociationExecutions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "QuickSetupSSMDocumentsReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeDocument",
              "ssm:GetDocument"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetupType-*",
              "arn:aws:ssm:*:*:document/*-AWSQuickSetupType-*"
            ]
          },
          {
            "Sid": "OrganizationReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "organizations:ListRoots",
              "organizations:ListAWSServiceAccessForOrganization",
              "organizations:ListDelegatedAdministrators",
              "organizations:ListAccountsForParent",
              "organizations:ListOrganizationalUnitsForParent"
            ],
            "Resource": "*"
          },
          {
            "Sid": "QuickSetupStackSetReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStackSet",
              "cloudformation:DescribeStackSetOperation",
              "cloudformation:ListStackInstances",
              "cloudformation:ListStackSetOperations",
              "cloudformation:ListStackSetOperationResults"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stackset/AWS-QuickSetup-*",
              "arn:aws:cloudformation:*:*:stackset/SSMQuickSetup*",
              "arn:aws:cloudformation:*:*:stack/StackSet-AWS-QuickSetup-*",
              "arn:aws:cloudformation:*:*:stack/StackSet-SSMQuickSetup*"
            ]
          },
          {
            "Sid": "QuickSetupStackSetDeletePermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DeleteStackInstances",
              "cloudformation:DeleteStackSet"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stackset/AWS-QuickSetup-*",
              "arn:aws:cloudformation:*:*:stackset/SSMQuickSetup*",
              "arn:aws:cloudformation:*:*:stack/StackSet-AWS-QuickSetup-*",
              "arn:aws:cloudformation:*:*:stack/StackSet-SSMQuickSetup*",
              "arn:aws:cloudformation:*:*:stackset-target/AWS-QuickSetup-*",
              "arn:aws:cloudformation:*:*:stackset-target/SSMQuickSetup*",
              "arn:aws:cloudformation:*:*:type/resource/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupPatchPolicyBaselineAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "QuickSetupPatchingBaselineOverridesS3SameAccountReadOnlyAccess",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::aws-quicksetup-patchpolicy-*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalAccount": [
                  "${aws:ResourceAccount}"
                ]
              }
            }
          },
          {
            "Sid": "QuickSetupPatchingBaselineOverridesS3OrganizationReadOnlyAccess",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::aws-quicksetup-patchpolicy-*",
            "Condition": {
              "StringEquals": {
                "aws:PrincipalOrgID": [
                  "${aws:ResourceOrgID}"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSystemsManagerEnableConfigRecordingExecutionPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "S3BucketCreatePermissions",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:PutBucketPublicAccessBlock",
              "s3:ListBucket",
              "s3:PutBucketPolicy",
              "s3:PutEncryptionConfiguration"
            ],
            "Resource": [
              "arn:aws:s3:::aws-quick-setup-config-recording-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "SNSTopicsListPermissions",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DefaultSNSTopicCreatePermissions",
            "Effect": "Allow",
            "Action": [
              "sns:CreateTopic"
            ],
            "Resource": "arn:aws:sns:*:*:ConfigRecording-Default-Topic"
          },
          {
            "Sid": "ConfigureAndStartConfigurationRecorderPermissions",
            "Effect": "Allow",
            "Action": [
              "config:DescribeConfigurationRecorders",
              "config:DescribeDeliveryChannels",
              "config:PutConfigurationRecorder",
              "config:PutDeliveryChannel",
              "config:StartConfigurationRecorder"
            ],
            "Resource": "*"
          },
          {
            "Sid": "GetAndPassConfigSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole",
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig",
              "arn:aws:iam::*:role/AWSServiceRoleForConfig"
            ]
          },
          {
            "Sid": "CreateConfigSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "config.amazonaws.com"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AWSSystemsManagerEnableExplorerExecutionPolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateSystemsManagerSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ReadOnlyPermissionsForEnablingExplorer",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "config:DescribeConfigurationRecorders",
              "compute-optimizer:GetEnrollmentStatus",
              "support:DescribeTrustedAdvisorChecks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMExplorerServiceSettingsPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/EC2",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/Association",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupDevOpsGuruPermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CreateSystemsManagerSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CreateDevOpsGuruSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/devops-guru.amazonaws.com/AWSServiceRoleForDevOpsGuru"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "devops-guru.amazonaws.com"
              }
            }
          },
          {
            "Sid": "CloudformationReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "cloudformation:ListStacks",
              "cloudformation:DescribeStacks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DevOpsGuruNotificationChannelPermissions",
            "Effect": "Allow",
            "Action": [
              "devops-guru:AddNotificationChannel"
            ],
            "Resource": [
              "arn:aws:sns:*:*:DevOpsGuru-Default-Topic",
              "arn:aws:devops-guru:*:*:/channels"
            ]
          },
          {
            "Sid": "DevOpsGuruConfigurationPermissions",
            "Effect": "Allow",
            "Action": [
              "devops-guru:UpdateResourceCollection",
              "devops-guru:UpdateServiceIntegration"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SNSReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "sns:ListTopics"
            ],
            "Resource": "*"
          },
          {
            "Sid": "DevOpsGuruDefaultSNSTopicConfigurationPermissions",
            "Effect": "Allow",
            "Action": [
              "sns:AddPermission",
              "sns:CreateTopic",
              "sns:GetTopicAttributes",
              "sns:Publish",
              "sns:SetTopicAttributes",
              "sns:RemovePermission"
            ],
            "Resource": "arn:aws:sns:*:*:DevOpsGuru-Default-Topic"
          },
          {
            "Sid": "ReadOnlyPermissionsForEnablingExplorer",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "config:DescribeConfigurationRecorders",
              "compute-optimizer:GetEnrollmentStatus",
              "support:DescribeTrustedAdvisorChecks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMExplorerServiceSettingsPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/EC2",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/Association",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupPatchPolicyPermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PatchingAutomationRoleGetPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-AutomationRole-*"
            ]
          },
          {
            "Sid": "PatchingAutomationRolePassPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-AutomationRole-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DefaultInstanceRolePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateRole",
              "iam:DeleteRole",
              "iam:UpdateRole",
              "iam:GetRole"
            ],
            "Condition": {
              "StringLike": {
                "aws:PrincipalTag/QuickSetupManagerID": "*"
              },
              "ArnLike": {
                "aws:PrincipalArn": "arn:aws:iam::*:role/AWS-QuickSetup-AutomationRole-*"
              }
            },
            "Resource": [
              "arn:aws:iam::*:role/AmazonSSMRoleForInstancesQuickSetup"
            ]
          },
          {
            "Sid": "DefaultInstanceRolePassPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AmazonSSMRoleForInstancesQuickSetup"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com",
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "PoliciesAttachPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:AttachRolePolicy",
              "iam:DetachRolePolicy"
            ],
            "Condition": {
              "ArnEquals": {
                "iam:PolicyARN": [
                  "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                  "arn:aws:iam::aws:policy/AWSQuickSetupPatchPolicyBaselineAccess"
                ]
              },
              "StringLike": {
                "aws:PrincipalTag/QuickSetupManagerID": "*"
              },
              "ArnLike": {
                "aws:PrincipalArn": "arn:aws:iam::*:role/AWS-QuickSetup-AutomationRole-*"
              }
            },
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Sid": "CreateSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "InstanceRoleAddPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:AddRoleToInstanceProfile"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "ManagedInstanceRoleUpdatePermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateManagedInstanceRole"
            ],
            "Resource": "*"
          },
          {
            "Sid": "IAMReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetInstanceProfile",
              "iam:GetRolePolicy",
              "iam:ListInstanceProfilesForRole",
              "iam:ListRoles"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "InstanceProfileCreatePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
            ]
          },
          {
            "Sid": "InstanceProfileAssociationPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:AssociateIamInstanceProfile"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "ec2:InstanceProfile": "true"
              },
              "ArnLike": {
                "ec2:NewInstanceProfile": "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
              }
            }
          },
          {
            "Sid": "InstanceProfileDisassociationPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateIamInstanceProfile"
            ],
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ec2:InstanceProfile": "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
              }
            }
          },
          {
            "Sid": "SSMAssociationsPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeAssociationExecutions",
              "ssm:UpdateAssociation",
              "ssm:DescribeAssociation"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetup-*",
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:managed-instance/*",
              "arn:aws:ssm:*:*:association/*"
            ]
          },
          {
            "Sid": "BaselineS3Permissions",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:Put*",
              "s3:Get*",
              "s3:List*",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:DeleteBucket"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": [
                  "${aws:PrincipalAccount}"
                ]
              }
            },
            "Resource": "arn:aws:s3:::aws-quicksetup-patchpolicy-*"
          },
          {
            "Sid": "PatchingFunctionsPermissions",
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction"
            ],
            "Resource": [
              "arn:aws:lambda:*:*:function:baseline-overrides-*",
              "arn:aws:lambda:*:*:function:delete-name-tags-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": [
                  "${aws:PrincipalAccount}"
                ]
              }
            }
          },
          {
            "Sid": "LoggingPermissions",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/lambda/baseline-overrides-*",
              "arn:aws:logs:*:*:log-group:/aws/lambda/delete-name-tags-*"
            ]
          },
          {
            "Sid": "SSMTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:AddTagsToResource",
              "ssm:RemoveTagsFromResource"
            ],
            "Resource": "arn:aws:ssm:*:*:managed-instance/*",
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": "QSConfigName-*"
              }
            }
          },
          {
            "Sid": "EC2TaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:CreateTags",
              "ec2:DeleteTags"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": "QSConfigName-*"
              }
            }
          },
          {
            "Sid": "RoleTaggingPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:TagRole",
              "iam:UntagRole"
            ],
            "Resource": "*",
            "Condition": {
              "ForAllValues:StringLike": {
                "aws:TagKeys": "QSConfigId-*"
              }
            }
          },
          {
            "Sid": "PatchingReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:GetPatchBaseline",
              "ssm:GetInventory",
              "ssm:DescribeInstanceInformation",
              "ssm:DescribeAssociation",
              "ssm:GetAutomationExecution",
              "ssm:ListTagsForResource",
              "ec2:DescribeIamInstanceProfileAssociations",
              "ec2:DescribeInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "PatchingAutomationsStartPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:automation-definition/AWS-EnableExplorer*",
              "arn:aws:ssm:*:*:automation-definition/AWS-RunPatchBaseline*",
              "arn:aws:ssm:*:*:automation-definition/AWS-AttachIAMToInstance*",
              "arn:aws:ssm:*:*:automation-definition/QuickSetup-*",
              "arn:aws:ssm:*:*:automation-definition/AWSQuickSetup-*"
            ]
          },
          {
            "Sid": "ReadOnlyPermissionsForEnablingExplorer",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "config:DescribeConfigurationRecorders",
              "compute-optimizer:GetEnrollmentStatus",
              "support:DescribeTrustedAdvisorChecks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ExplorerServiceSettingsPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/EC2",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/Association",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupSSMHostMgmtPermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "HostManagementAutomationRoleGetPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-HostMgmtRole-*"
            ]
          },
          {
            "Sid": "HostManagementAutomationRolePassPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-HostMgmtRole-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DefaultInstanceRoleManagePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateRole",
              "iam:DeleteRole",
              "iam:UpdateRole",
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AmazonSSMRoleForInstancesQuickSetup"
            ],
            "Condition": {
              "StringLike": {
                "aws:PrincipalTag/QuickSetupManagerID": "*"
              },
              "ArnLike": {
                "aws:PrincipalArn": "arn:aws:iam::*:role/AWS-QuickSetup-HostMgmtRole-*"
              }
            }
          },
          {
            "Sid": "DefaultInstanceRolePassToEC2Permissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AmazonSSMRoleForInstancesQuickSetup"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DefaultInstanceRolePassToSSMPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AmazonSSMRoleForInstancesQuickSetup"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "InstanceManagementPoliciesAttachPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:AttachRolePolicy",
              "iam:DetachRolePolicy"
            ],
            "Condition": {
              "ArnEquals": {
                "iam:PolicyARN": [
                  "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
                  "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation"
                ]
              },
              "StringLike": {
                "aws:PrincipalTag/QuickSetupManagerID": "*"
              },
              "ArnLike": {
                "aws:PrincipalArn": "arn:aws:iam::*:role/AWS-QuickSetup-HostMgmtRole-*"
              }
            },
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Sid": "CreateSystemsManagerSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DefaultInstanceRoleAddPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:AddRoleToInstanceProfile"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "IAMReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetInstanceProfile",
              "iam:GetRolePolicy",
              "iam:ListInstanceProfilesForRole",
              "iam:ListRoles"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DefaultInstanceProfileCreatePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
            ]
          },
          {
            "Sid": "DefaultInstanceProfileAssociationPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:AssociateIamInstanceProfile"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "ec2:InstanceProfile": "true"
              },
              "ArnLike": {
                "ec2:NewInstanceProfile": "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
              }
            }
          },
          {
            "Sid": "DefaultInstanceProfileDisassociationPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateIamInstanceProfile"
            ],
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ec2:InstanceProfile": "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
              }
            }
          },
          {
            "Sid": "ConfigurationAutomationsStartPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:automation-definition/AWSQuickSetup-HostMgmt-*",
              "arn:aws:ssm:*:*:automation-definition/AWSQuickSetup-CreateAndAttachIAMToInstance-*",
              "arn:aws:ssm:*:*:automation-definition/AWSQuickSetup-UpdateExistingInstanceProfile-*",
              "arn:aws:ssm:*:*:automation-definition/AWSQuickSetup-InstallAndManageCloudWatchDocument-*",
              "arn:aws:ssm:*:*:automation-definition/UpdateCloudWatchDocument-*",
              "arn:aws:ssm:*:*:automation-definition/AWSEC2-UpdateLaunchAgent-*",
              "arn:aws:ssm:*:*:automation-definition/AWS-AttachIAMToInstance*",
              "arn:aws:ssm:*:*:automation-definition/AWS-GatherSoftwareInventory*",
              "arn:aws:ssm:*:*:automation-definition/AWS-RunPatchBaselineAssociation*",
              "arn:aws:ssm:*:*:automation-definition/AWS-UpdateSSMAgent*"
            ]
          },
          {
            "Sid": "ReadOnlyPermissionsForEnablingHostManagementBySSM",
            "Effect": "Allow",
            "Action": [
              "ssm:ListTagsForResource",
              "ssm:GetAutomationExecution",
              "ec2:DescribeIamInstanceProfileAssociations",
              "ec2:DescribeInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ReadOnlyPermissionsForEnablingExplorer",
            "Effect": "Allow",
            "Action": [
              "config:DescribeConfigurationRecorders",
              "compute-optimizer:GetEnrollmentStatus",
              "support:DescribeTrustedAdvisorChecks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMExplorerServiceSettingsPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/EC2",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/Association",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupDistributorPermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "DistributorAutomationRoleGetPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-RoleForDistributor-*"
            ]
          },
          {
            "Sid": "DistributorAutomationRolePassPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-RoleForDistributor-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DefaultInstanceRoleManagePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateRole",
              "iam:DeleteRole",
              "iam:UpdateRole",
              "iam:GetRole"
            ],
            "Condition": {
              "StringLike": {
                "aws:PrincipalTag/QuickSetupManagerID": "*"
              },
              "ArnLike": {
                "aws:PrincipalArn": "arn:aws:iam::*:role/AWS-QuickSetup-RoleForDistributor-*"
              }
            },
            "Resource": [
              "arn:aws:iam::*:role/AmazonSSMRoleForInstancesQuickSetup"
            ]
          },
          {
            "Sid": "DefaultInstanceRolePassToEC2Permissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AmazonSSMRoleForInstancesQuickSetup"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DefaultInstanceRolePassToSSMPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AmazonSSMRoleForInstancesQuickSetup"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "InstanceManagementPoliciesAttachPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:AttachRolePolicy",
              "iam:DetachRolePolicy"
            ],
            "Condition": {
              "ArnEquals": {
                "iam:PolicyARN": [
                  "arn:aws:iam::aws:policy/AmazonElasticFileSystemsUtils",
                  "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                ]
              },
              "StringLike": {
                "aws:PrincipalTag/QuickSetupManagerID": "*"
              },
              "ArnLike": {
                "aws:PrincipalArn": "arn:aws:iam::*:role/AWS-QuickSetup-RoleForDistributor-*"
              }
            },
            "Resource": "arn:aws:iam::*:role/*"
          },
          {
            "Sid": "CreateSystemsManagerSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "DefaultInstanceRoleAddPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:AddRoleToInstanceProfile"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "IAMReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetInstanceProfile",
              "iam:GetRolePolicy",
              "iam:ListInstanceProfilesForRole",
              "iam:ListRoles"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "DefaultInstanceProfileCreatePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateInstanceProfile"
            ],
            "Resource": [
              "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
            ]
          },
          {
            "Sid": "DefaultInstanceProfileAssociationPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:AssociateIamInstanceProfile"
            ],
            "Resource": "*",
            "Condition": {
              "Null": {
                "ec2:InstanceProfile": "true"
              },
              "ArnLike": {
                "ec2:NewInstanceProfile": "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
              }
            }
          },
          {
            "Sid": "DefaultInstanceProfileDisassociationPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DisassociateIamInstanceProfile"
            ],
            "Resource": "*",
            "Condition": {
              "ArnLike": {
                "ec2:InstanceProfile": "arn:aws:iam::*:instance-profile/AmazonSSMRoleForInstancesQuickSetup"
              }
            }
          },
          {
            "Sid": "ConfigurationAutomationsStartPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:automation-definition/AWSQuickSetup-Distributor-*",
              "arn:aws:ssm:*:*:automation-definition/UpdateCloudWatchDocument-Distributor-*",
              "arn:aws:ssm:*:*:automation-definition/AWS-ConfigureAWSPackage*",
              "arn:aws:ssm:*:*:automation-definition/AWS-AttachIAMToInstance*"
            ]
          },
          {
            "Sid": "ReadOnlyPermissionsForEnablingHostManagementBySSM",
            "Effect": "Allow",
            "Action": [
              "ssm:ListTagsForResource",
              "ssm:GetAutomationExecution",
              "ec2:DescribeIamInstanceProfileAssociations",
              "ec2:DescribeInstances"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ReadOnlyPermissionsForEnablingExplorer",
            "Effect": "Allow",
            "Action": [
              "config:DescribeConfigurationRecorders",
              "compute-optimizer:GetEnrollmentStatus",
              "support:DescribeTrustedAdvisorChecks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMExplorerServiceSettingsPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/EC2",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/Association",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupCFGCPacksPermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ConfigurationRoleGetPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-CFGCPacks*"
            ]
          },
          {
            "Sid": "ConfigurationRolePassToSSMPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-CFGCPacks*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "PutCPackPermissions",
            "Effect": "Allow",
            "Action": [
              "config:PutConformancePack"
            ],
            "Resource": [
              "arn:aws:config:*:*:conformance-pack/AWS-QuickSetup-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": [
                  "${aws:PrincipalAccount}"
                ]
              }
            }
          },
          {
            "Sid": "DescribeCPacksPermissions",
            "Effect": "Allow",
            "Action": [
              "config:DescribeConformancePackStatus"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ConformancePacksSLRCreatePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "config-conforms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SystemsManagerSLRCreatePermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "EnableExplorerReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "config:DescribeConfigurationRecorders",
              "compute-optimizer:GetEnrollmentStatus",
              "support:DescribeTrustedAdvisorChecks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "ServiceSettingsForExplorerUpdatePermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/EC2",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/Association",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupSchedulerPermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ConfigurationAutomationRoleGetPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:GetRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-Scheduler-*"
            ]
          },
          {
            "Sid": "ConfigurationAutomationRolePassPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-Scheduler-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "SystemsManagerCalendarReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:GetCalendarState"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetup-ChangeCalendar-*"
            ]
          },
          {
            "Sid": "EC2ReadOnlyPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceStatus",
              "ec2:DescribeRegions",
              "ec2:DescribeTags",
              "tag:GetResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "EC2StartStopPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:StartInstances",
              "ec2:StopInstances"
            ],
            "Resource": "arn:aws:ec2:*:*:instance/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AutomationStartPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:StartAutomationExecution"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:automation-definition/AWSQuickSetup-StartStateManagerAssociations-*"
            ]
          },
          {
            "Sid": "AssociationsStartOncePermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:StartAssociationsOnce"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:association/*"
            ]
          },
          {
            "Sid": "CreateSystemsManagerSLRPermissions",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ReadOnlyPermissionsForEnablingExplorer",
            "Effect": "Allow",
            "Action": [
              "iam:ListRoles",
              "config:DescribeConfigurationRecorders",
              "compute-optimizer:GetEnrollmentStatus",
              "support:DescribeTrustedAdvisorChecks"
            ],
            "Resource": "*"
          },
          {
            "Sid": "SSMExplorerServiceSettingsPermissions",
            "Effect": "Allow",
            "Action": [
              "ssm:UpdateServiceSetting",
              "ssm:GetServiceSetting"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/ssm-patchmanager",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsitem/EC2",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ExplorerOnboarded",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/Association",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ComputeOptimizer",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/ConfigCompliance",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/OpsData-TrustedAdvisor",
              "arn:aws:ssm:*:*:servicesetting/ssm/opsdata/SupportCenterCase"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupDeploymentRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CfnRead",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackDriftDetectionStatus",
              "cloudformation:ListStacks"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CfnManage",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:UpdateStack",
              "cloudformation:DeleteStack",
              "cloudformation:CreateChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DescribeStackResourceDrifts",
              "cloudformation:DetectStackDrift",
              "cloudformation:DetectStackResourceDrift"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/StackSet-AWS-QuickSetup-*"
            ]
          },
          {
            "Sid": "RGroupsGet",
            "Effect": "Allow",
            "Action": [
              "resource-groups:GetGroupQuery"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CPacksRead",
            "Effect": "Allow",
            "Action": [
              "config:DescribeConformancePacks",
              "config:DescribeConformancePackStatus"
            ],
            "Resource": "*"
          },
          {
            "Sid": "OpsPacksManage",
            "Effect": "Allow",
            "Action": [
              "config:PutConformancePack",
              "config:DeleteConformancePack"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": "arn:aws:config:*:*:conformance-pack/AWS-QuickSetup-*"
          },
          {
            "Sid": "QSDocsManage",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateDocument",
              "ssm:UpdateDocument",
              "ssm:UpdateDocumentDefaultVersion",
              "ssm:DeleteDocument",
              "ssm:AddTagsToResource",
              "ssm:RemoveTagsFromResource",
              "ssm:ListTagsForResource"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetup-*",
              "arn:aws:ssm:*:*:document/AWSOperationsPack-*",
              "arn:aws:ssm:*:*:document/AWSOperationsPackInstance-*"
            ]
          },
          {
            "Sid": "QSDocsRead",
            "Effect": "Allow",
            "Action": [
              "ssm:GetDocument"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetup-*",
              "arn:aws:ssm:*:*:document/AWSOperationsPack*",
              "arn:aws:ssm:*::document/AWSConformancePacks-*",
              "arn:aws:ssm:*::document/AWSEC2-UpdateLaunchAgent",
              "arn:aws:ssm:*::document/AWS-ConfigureAWSPackage",
              "arn:aws:ssm:*::document/AWS-EnableExplorer",
              "arn:aws:ssm:*::document/AWS-GatherSoftwareInventory",
              "arn:aws:ssm:*::document/AWS-RunPatchBaselineAssociation",
              "arn:aws:ssm:*::document/AWS-UpdateSSMAgent"
            ]
          },
          {
            "Sid": "QSAssociationsManage",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateAssociation",
              "ssm:UpdateAssociation",
              "ssm:DeleteAssociation",
              "ssm:DescribeAssociation"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetup-*",
              "arn:aws:ssm:*:*:document/AWSOperationsPack*",
              "arn:aws:ssm:*::document/AWSEC2-UpdateLaunchAgent",
              "arn:aws:ssm:*::document/AWS-ConfigureAWSPackage",
              "arn:aws:ssm:*::document/AWS-EnableExplorer",
              "arn:aws:ssm:*::document/AWS-GatherSoftwareInventory",
              "arn:aws:ssm:*::document/AWS-RunPatchBaselineAssociation",
              "arn:aws:ssm:*::document/AWS-UpdateSSMAgent",
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:managed-instance/*",
              "arn:aws:ssm:*:*:association/*"
            ]
          },
          {
            "Sid": "EventRulesManage",
            "Effect": "Allow",
            "Action": [
              "events:DescribeRule",
              "events:PutRule",
              "events:DeleteRule",
              "events:ListTargetsByRule",
              "events:PutTargets",
              "events:RemoveTargets"
            ],
            "Resource": [
              "arn:aws:events:*:*:rule/*QuickSetup-*"
            ]
          },
          {
            "Sid": "CPacksSLRCreate",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/config-conforms.amazonaws.com/AWSServiceRoleForConfigConforms"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "config-conforms.amazonaws.com"
              }
            }
          },
          {
            "Sid": "SSMSLRCreate",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "QSConfigRoleManage",
            "Effect": "Allow",
            "Action": [
              "iam:CreateRole",
              "iam:GetRole",
              "iam:UpdateRole",
              "iam:DeleteRole",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "iam:ListRolePolicies",
              "iam:ListRoleTags",
              "iam:TagRole",
              "iam:UntagRole"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-*",
              "arn:aws:iam::*:role/AWSOperationsPack-*"
            ]
          },
          {
            "Sid": "QSConfigRolePass",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-*",
              "arn:aws:iam::*:role/AWSOperationsPack-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com",
                  "events.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DocDescribe",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeDocument"
            ],
            "Resource": "*",
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "LegacyDocClean",
            "Effect": "Allow",
            "Action": [
              "ssm:DeleteDocument"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/QuickSetupID": "*"
              }
            }
          },
          {
            "Sid": "LegacyIAMClean",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole",
              "iam:DeleteRolePolicy"
            ],
            "Resource": "arn:aws:iam::*:role/*QuickSetup-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/QuickSetupID": "*"
              }
            }
          },
          {
            "Sid": "QSConfigRoleBounded",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRolePolicy",
              "iam:PutRolePolicy",
              "iam:PutRolePermissionsBoundary"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PermissionsBoundary": [
                  "arn:aws:iam::aws:policy/AWSQuickSetupCFGCPacksPermissionsBoundary",
                  "arn:aws:iam::aws:policy/AWSQuickSetupCFGRecordingPermissionsBoundary",
                  "arn:aws:iam::aws:policy/AWSQuickSetupDevOpsGuruPermissionsBoundary",
                  "arn:aws:iam::aws:policy/AWSQuickSetupDistributorPermissionsBoundary",
                  "arn:aws:iam::aws:policy/AWSQuickSetupSchedulerPermissionsBoundary",
                  "arn:aws:iam::aws:policy/AWSQuickSetupSSMHostMgmtPermissionsBoundary"
                ]
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-*",
              "arn:aws:iam::*:role/AWSOperationsPack-*"
            ]
          },
          {
            "Sid": "QSConfigRoleManagedPolicies",
            "Effect": "Allow",
            "Action": [
              "iam:AttachRolePolicy",
              "iam:DetachRolePolicy"
            ],
            "Condition": {
              "ArnEquals": {
                "iam:PolicyARN": [
                  "arn:aws:iam::aws:policy/AWSSystemsManagerEnableExplorerExecutionPolicy",
                  "arn:aws:iam::aws:policy/AWSSystemsManagerEnableConfigRecordingExecutionPolicy"
                ]
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-*",
              "arn:aws:iam::*:role/AWSOperationsPack-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AWSQuickSetupPatchPolicyDeploymentRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "CfnRead",
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStacks",
              "cloudformation:DescribeStackDriftDetectionStatus",
              "cloudformation:ListStacks"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "CfnManage",
            "Effect": "Allow",
            "Action": [
              "cloudformation:CreateStack",
              "cloudformation:UpdateStack",
              "cloudformation:DeleteStack",
              "cloudformation:CreateChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:DescribeStackResourceDrifts",
              "cloudformation:DetectStackDrift",
              "cloudformation:DetectStackResourceDrift"
            ],
            "Resource": [
              "arn:aws:cloudformation:*:*:stack/StackSet-AWS-QuickSetup-*"
            ]
          },
          {
            "Sid": "RGroupsGet",
            "Effect": "Allow",
            "Action": [
              "resource-groups:GetGroupQuery"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "S3BucketsList",
            "Effect": "Allow",
            "Action": [
              "s3:ListAllMyBuckets"
            ],
            "Resource": [
              "*"
            ]
          },
          {
            "Sid": "AccessLogsBucketManage",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:DeleteBucket",
              "s3:DeleteBucketPolicy",
              "s3:Put*",
              "s3:Get*",
              "s3:List*"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            },
            "Resource": [
              "arn:aws:s3:::aws-quicksetup-patchpolicy-access-log-*"
            ]
          },
          {
            "Sid": "LambdaManage",
            "Effect": "Allow",
            "Action": [
              "lambda:CreateFunction",
              "lambda:UpdateFunction*",
              "lambda:GetFunction",
              "lambda:ListTags",
              "lambda:TagResource",
              "lambda:DeleteFunction",
              "lambda:InvokeFunction",
              "lambda:UntagResource"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              },
              "StringEquals": {
                "aws:ResourceAccount": [
                  "${aws:PrincipalAccount}"
                ]
              }
            },
            "Resource": [
              "arn:aws:lambda:*:*:function:baseline-overrides-*",
              "arn:aws:lambda:*:*:function:delete-name-tags-*"
            ]
          },
          {
            "Sid": "LogGroupsDescribe",
            "Effect": "Allow",
            "Action": [
              "logs:DescribeLogGroups"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LogGroupsManage",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:TagResource",
              "logs:PutRetentionPolicy",
              "logs:DeleteLogGroup",
              "logs:ListTagsForResource",
              "logs:UntagResource"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/lambda/baseline-overrides-*",
              "arn:aws:logs:*:*:log-group:/aws/lambda/delete-name-tags-*"
            ]
          },
          {
            "Sid": "QSDocsManage",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateDocument",
              "ssm:UpdateDocument",
              "ssm:DescribeDocument",
              "ssm:UpdateDocumentDefaultVersion",
              "ssm:DeleteDocument",
              "ssm:AddTagsToResource",
              "ssm:RemoveTagsFromResource",
              "ssm:ListTagsForResource"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetup-*",
              "arn:aws:ssm:*:*:document/QuickSetup-*"
            ]
          },
          {
            "Sid": "QSDocsGet",
            "Effect": "Allow",
            "Action": [
              "ssm:GetDocument"
            ],
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetup-*",
              "arn:aws:ssm:*:*:document/QuickSetup-*",
              "arn:aws:ssm:*::document/AWS-EnableExplorer",
              "arn:aws:ssm:*::document/AWS-RunPatchBaseline"
            ]
          },
          {
            "Sid": "QSAssociationsManage",
            "Effect": "Allow",
            "Action": [
              "ssm:CreateAssociation",
              "ssm:UpdateAssociation",
              "ssm:DeleteAssociation",
              "ssm:DescribeAssociation"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:ssm:*:*:document/AWSQuickSetup-*",
              "arn:aws:ssm:*:*:document/QuickSetup-*",
              "arn:aws:ssm:*::document/AWS-EnableExplorer",
              "arn:aws:ssm:*::document/AWS-RunPatchBaseline",
              "arn:aws:ec2:*:*:instance/*",
              "arn:aws:ssm:*:*:managed-instance/*",
              "arn:aws:ssm:*:*:association/*"
            ]
          },
          {
            "Sid": "SSMSLRCreate",
            "Effect": "Allow",
            "Action": [
              "iam:CreateServiceLinkedRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM"
            ],
            "Condition": {
              "StringEquals": {
                "iam:AWSServiceName": "ssm.amazonaws.com"
              }
            }
          },
          {
            "Sid": "ConfigRoleManage",
            "Effect": "Allow",
            "Action": [
              "iam:TagRole",
              "iam:UntagRole",
              "iam:GetRole",
              "iam:UpdateRole",
              "iam:DeleteRole",
              "iam:GetRolePolicy",
              "iam:ListAttachedRolePolicies",
              "iam:ListRolePolicies",
              "iam:ListRoleTags"
            ],
            "Condition": {
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-*"
            ]
          },
          {
            "Sid": "ConfigRolePassToSSM",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "ssm.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "ConfigRolePassToLambda",
            "Effect": "Allow",
            "Action": [
              "iam:PassRole"
            ],
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-*"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PassedToService": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          },
          {
            "Sid": "DocDescribe",
            "Effect": "Allow",
            "Action": [
              "ssm:DescribeDocument"
            ],
            "Resource": "*"
          },
          {
            "Sid": "LegacyDocClean",
            "Effect": "Allow",
            "Action": [
              "ssm:DeleteDocument"
            ],
            "Resource": "*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/QuickSetupID": "*"
              }
            }
          },
          {
            "Sid": "LegacyIAMClean",
            "Effect": "Allow",
            "Action": [
              "iam:DeleteRole",
              "iam:DeleteRolePolicy"
            ],
            "Resource": "arn:aws:iam::*:role/*QuickSetup-*",
            "Condition": {
              "StringLike": {
                "aws:ResourceTag/QuickSetupID": "*"
              }
            }
          },
          {
            "Sid": "ConfigRoleBoundedManage",
            "Effect": "Allow",
            "Action": [
              "iam:CreateRole",
              "iam:AttachRolePolicy",
              "iam:DeleteRolePolicy",
              "iam:DetachRolePolicy",
              "iam:PutRolePolicy",
              "iam:PutRolePermissionsBoundary"
            ],
            "Condition": {
              "StringEquals": {
                "iam:PermissionsBoundary": "arn:aws:iam::aws:policy/AWSQuickSetupPatchPolicyPermissionsBoundary"
              },
              "ForAnyValue:StringEquals": {
                "aws:CalledVia": [
                  "cloudformation.amazonaws.com"
                ]
              }
            },
            "Resource": [
              "arn:aws:iam::*:role/AWS-QuickSetup-*"
            ]
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesPoolServiceAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "ProvisioningWorkSpacesPoolPermissions",
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeRouteTables",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "WorkSpacesPoolS3Permissions",
            "Effect": "Allow",
            "Action": [
              "s3:CreateBucket",
              "s3:ListBucket",
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:GetObjectVersion",
              "s3:DeleteObjectVersion",
              "s3:GetBucketPolicy",
              "s3:PutBucketPolicy",
              "s3:PutEncryptionConfiguration"
            ],
            "Resource": [
              "arn:aws:s3:::wspool-logs-*",
              "arn:aws:s3:::wspool-app-settings-*",
              "arn:aws:s3:::wspool-home-folder-*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonQDeveloperAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowAmazonQDeveloperAccess",
            "Effect": "Allow",
            "Action": [
              "q:StartConversation",
              "q:SendMessage",
              "q:GetConversation",
              "q:ListConversations",
              "q:PassRequest",
              "q:StartTroubleshootingAnalysis",
              "q:StartTroubleshootingResolutionExplanation",
              "q:GetTroubleshootingResults",
              "q:UpdateTroubleshootingCommandResult",
              "q:GetIdentityMetaData"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowCloudControlReadAccess",
            "Effect": "Allow",
            "Action": [
              "cloudformation:GetResource",
              "cloudformation:ListResources"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowSetTrustedIdentity",
            "Effect": "Allow",
            "Action": [
              "sts:SetContext"
            ],
            "Resource": "arn:aws:sts::*:self"
          }
        ]
      }
    },
    {
      "PolicyName": "AppStudioServiceRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AppStudioResourcePermissionsForCloudWatch",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": [
              "arn:aws:logs:*:*:log-group:/aws/appstudio/*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AppStudioResourcePermissionsForSecretsManager",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:CreateSecret",
              "secretsmanager:DeleteSecret",
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:PutSecretValue",
              "secretsmanager:UpdateSecret",
              "secretsmanager:TagResource"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:appstudio-*",
            "Condition": {
              "ForAllValues:StringEquals": {
                "aws:TagKeys": [
                  "IsAppStudioSecret"
                ]
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}",
                "aws:ResourceTag/IsAppStudioSecret": "true"
              }
            }
          },
          {
            "Sid": "AppStudioResourcePermissionsForSSO",
            "Effect": "Allow",
            "Action": [
              "sso:GetManagedApplicationInstance",
              "sso-directory:DescribeUsers",
              "sso-directory:ListMembersInGroup"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesThinClientReadOnlyAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowThinClientReadAccess",
            "Effect": "Allow",
            "Action": [
              "thinclient:GetDevice",
              "thinclient:GetEnvironment",
              "thinclient:GetSoftwareSet",
              "thinclient:ListDevices",
              "thinclient:ListDeviceSessions",
              "thinclient:ListEnvironments",
              "thinclient:ListSoftwareSets",
              "thinclient:ListTagsForResource"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowWorkSpacesAccess",
            "Effect": "Allow",
            "Action": [
              "workspaces:DescribeWorkspaceDirectories"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowWorkSpacesWebAccess",
            "Effect": "Allow",
            "Action": [
              "workspaces-web:GetPortal",
              "workspaces-web:GetUserSettings",
              "workspaces-web:ListPortals"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAppStreamAccess",
            "Effect": "Allow",
            "Action": [
              "appstream:DescribeStacks"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonSageMakerCanvasEMRServerlessExecutionRolePolicy",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "S3Operations",
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:GetBucketCors",
              "s3:GetBucketLocation",
              "s3:AbortMultipartUpload"
            ],
            "Resource": [
              "arn:aws:s3:::*SageMaker*",
              "arn:aws:s3:::*sagemaker*"
            ],
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "S3GetObjectOperation",
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::*",
            "Condition": {
              "StringEqualsIgnoreCase": {
                "s3:ExistingObjectTag/SageMaker": "true"
              },
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "S3ListOperations",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:ListAllMyBuckets"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonBedrockStudioPermissionsBoundary",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AccessS3Buckets",
            "Effect": "Allow",
            "Action": [
              "s3:ListBucket",
              "s3:ListBucketVersions",
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:GetObjectVersion",
              "s3:DeleteObjectVersion"
            ],
            "Resource": "arn:aws:s3:::br-studio-${aws:PrincipalAccount}-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "AccessOpenSearchCollections",
            "Effect": "Allow",
            "Action": "aoss:APIAccessAll",
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}"
              }
            }
          },
          {
            "Sid": "InvokeBedrockModels",
            "Effect": "Allow",
            "Action": [
              "bedrock:InvokeModel",
              "bedrock:InvokeModelWithResponseStream"
            ],
            "Resource": "arn:aws:bedrock:*::foundation-model/*"
          },
          {
            "Sid": "AccessBedrockResources",
            "Effect": "Allow",
            "Action": [
              "bedrock:InvokeAgent",
              "bedrock:Retrieve",
              "bedrock:StartIngestionJob",
              "bedrock:GetIngestionJob",
              "bedrock:ListIngestionJobs",
              "bedrock:ApplyGuardrail",
              "bedrock:ListPrompts",
              "bedrock:GetPrompt",
              "bedrock:CreatePrompt",
              "bedrock:DeletePrompt",
              "bedrock:CreatePromptVersion",
              "bedrock:InvokeFlow",
              "bedrock:ListTagsForResource",
              "bedrock:TagResource",
              "bedrock:UntagResource"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}",
                "aws:ResourceTag/AmazonBedrockManaged": "true"
              },
              "Null": {
                "aws:ResourceTag/AmazonDataZoneProject": "false"
              }
            }
          },
          {
            "Sid": "RetrieveAndGenerate",
            "Effect": "Allow",
            "Action": "bedrock:RetrieveAndGenerate",
            "Resource": "*"
          },
          {
            "Sid": "WriteLogs",
            "Effect": "Allow",
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/br-studio-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}",
                "aws:ResourceTag/AmazonBedrockManaged": "true"
              },
              "Null": {
                "aws:ResourceTag/AmazonDataZoneProject": "false"
              }
            }
          },
          {
            "Sid": "InvokeLambdaFunctions",
            "Effect": "Allow",
            "Action": "lambda:InvokeFunction",
            "Resource": "arn:aws:lambda:*:*:function:br-studio-*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}",
                "aws:ResourceTag/AmazonBedrockManaged": "true"
              },
              "Null": {
                "aws:ResourceTag/AmazonDataZoneProject": "false"
              }
            }
          },
          {
            "Sid": "AccessSecretsManagerSecrets",
            "Effect": "Allow",
            "Action": [
              "secretsmanager:DescribeSecret",
              "secretsmanager:GetSecretValue",
              "secretsmanager:PutSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:*:*:secret:br-studio/*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}",
                "aws:ResourceTag/AmazonBedrockManaged": "true"
              },
              "Null": {
                "aws:ResourceTag/AmazonDataZoneProject": "false"
              }
            }
          },
          {
            "Sid": "UseKmsKeyWithBedrock",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}",
                "aws:ResourceTag/EnableBedrock": "true"
              },
              "Null": {
                "kms:EncryptionContext:aws:bedrock:arn": "false"
              }
            }
          },
          {
            "Sid": "UseKmsKeyWithAwsServices",
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt",
              "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringEquals": {
                "aws:ResourceAccount": "${aws:PrincipalAccount}",
                "aws:ResourceTag/EnableBedrock": "true"
              },
              "StringLike": {
                "kms:ViaService": [
                  "s3.*.amazonaws.com",
                  "secretsmanager.*.amazonaws.com"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "PolicyName": "AmazonWorkSpacesThinClientFullAccess",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "AllowThinClientFullAccess",
            "Effect": "Allow",
            "Action": [
              "thinclient:*"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowWorkSpacesAccess",
            "Effect": "Allow",
            "Action": [
              "workspaces:DescribeWorkspaceDirectories"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowWorkSpacesWebAccess",
            "Effect": "Allow",
            "Action": [
              "workspaces-web:GetPortal",
              "workspaces-web:GetUserSettings",
              "workspaces-web:ListPortals"
            ],
            "Resource": "*"
          },
          {
            "Sid": "AllowAppStreamAccess",
            "Effect": "Allow",
            "Action": [
              "appstream:DescribeStacks"
            ],
            "Resource": "*"
          }
        ]
      }
    },
    {
      "PolicyName": "AWSCompromisedKeyQuarantineV3",
      "PolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Deny",
            "Action": [
              "cloudtrail:LookupEvents",
              "ec2:RequestSpotInstances",
              "ec2:RunInstances",
              "ec2:StartInstances",
              "iam:AddUserToGroup",
              "iam:AttachGroupPolicy",
              "iam:AttachRolePolicy",
              "iam:AttachUserPolicy",
              "iam:ChangePassword",
              "iam:CreateAccessKey",
              "iam:CreateInstanceProfile",
              "iam:CreateLoginProfile",
              "iam:CreatePolicyVersion",
              "iam:CreateRole",
              "iam:CreateUser",
              "iam:DetachUserPolicy",
              "iam:PassRole",
              "iam:PutGroupPolicy",
              "iam:PutRolePolicy",
              "iam:PutUserPermissionsBoundary",
              "iam:PutUserPolicy",
              "iam:SetDefaultPolicyVersion",
              "iam:UpdateAccessKey",
              "iam:UpdateAccountPasswordPolicy",
              "iam:UpdateAssumeRolePolicy",
              "iam:UpdateLoginProfile",
              "iam:UpdateUser",
              "lambda:AddLayerVersionPermission",
              "lambda:AddPermission",
              "lambda:CreateFunction",
              "lambda:GetPolicy",
              "lambda:ListTags",
              "lambda:PutProvisionedConcurrencyConfig",
              "lambda:TagResource",
              "lambda:UntagResource",
              "lambda:UpdateFunctionCode",
              "lightsail:Create*",
              "lightsail:Delete*",
              "lightsail:DownloadDefaultKeyPair",
              "lightsail:GetInstanceAccessDetails",
              "lightsail:Start*",
              "lightsail:Update*",
              "organizations:CreateAccount",
              "organizations:CreateOrganization",
              "organizations:InviteAccountToOrganization",
              "s3:DeleteBucket",
              "s3:DeleteObject",
              "s3:DeleteObjectVersion",
              "s3:PutLifecycleConfiguration",
              "s3:PutBucketAcl",
              "s3:PutBucketOwnershipControls",
              "s3:DeleteBucketPolicy",
              "s3:ObjectOwnerOverrideToBucketOwner",
              "s3:PutAccountPublicAccessBlock",
              "s3:PutBucketPolicy",
              "s3:ListAllMyBuckets",
              "ec2:PurchaseReservedInstancesOffering",
              "ec2:AcceptReservedInstancesExchangeQuote",
              "ec2:CreateReservedInstancesListing",
              "savingsplans:CreateSavingsPlan"
            ],
            "Resource": [
              "*"
            ]
          }
        ]
      }
    }
  ],
  "azure": [
    {
      "RoleName": "AcrPush",
      "Description": "acr push",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerRegistry/registries/pull/read",
            "Microsoft.ContainerRegistry/registries/push/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Service Contributor",
      "Description": "Can manage service and the APIs",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AcrPull",
      "Description": "acr pull",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerRegistry/registries/pull/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AcrImageSigner",
      "Description": "acr image signer",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerRegistry/registries/sign/write"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerRegistry/registries/trustedCollections/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AcrDelete",
      "Description": "acr delete",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerRegistry/registries/artifacts/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AcrQuarantineReader",
      "Description": "acr quarantine data reader",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerRegistry/registries/quarantine/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerRegistry/registries/quarantinedArtifacts/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AcrQuarantineWriter",
      "Description": "acr quarantine data writer",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerRegistry/registries/quarantine/read",
            "Microsoft.ContainerRegistry/registries/quarantine/write"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerRegistry/registries/quarantinedArtifacts/read",
            "Microsoft.ContainerRegistry/registries/quarantinedArtifacts/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Service Operator Role",
      "Description": "Can manage service but not the APIs",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/*/read",
            "Microsoft.ApiManagement/service/backup/action",
            "Microsoft.ApiManagement/service/delete",
            "Microsoft.ApiManagement/service/managedeployments/action",
            "Microsoft.ApiManagement/service/read",
            "Microsoft.ApiManagement/service/restore/action",
            "Microsoft.ApiManagement/service/updatecertificate/action",
            "Microsoft.ApiManagement/service/updatehostname/action",
            "Microsoft.ApiManagement/service/write",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [
            "Microsoft.ApiManagement/service/users/keys/read"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Service Reader Role",
      "Description": "Read-only access to service and APIs",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/*/read",
            "Microsoft.ApiManagement/service/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [
            "Microsoft.ApiManagement/service/users/keys/read"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Application Insights Component Contributor",
      "Description": "Can manage Application Insights components",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/generateLiveToken/read",
            "Microsoft.Insights/metricAlerts/*",
            "Microsoft.Insights/components/*",
            "Microsoft.Insights/scheduledqueryrules/*",
            "Microsoft.Insights/topology/read",
            "Microsoft.Insights/transactions/read",
            "Microsoft.Insights/webtests/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Application Insights Snapshot Debugger",
      "Description": "Gives user permission to use Application Insights Snapshot Debugger features",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/components/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Attestation Reader",
      "Description": "Can read the attestation provider properties",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Attestation/attestationProviders/attestation/read",
            "Microsoft.Attestation/attestationProviders/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Automation Job Operator",
      "Description": "Create and Manage Jobs using Automation Runbooks.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/read",
            "Microsoft.Automation/automationAccounts/jobs/read",
            "Microsoft.Automation/automationAccounts/jobs/resume/action",
            "Microsoft.Automation/automationAccounts/jobs/stop/action",
            "Microsoft.Automation/automationAccounts/jobs/streams/read",
            "Microsoft.Automation/automationAccounts/jobs/suspend/action",
            "Microsoft.Automation/automationAccounts/jobs/write",
            "Microsoft.Automation/automationAccounts/jobs/output/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Automation Runbook Operator",
      "Description": "Read Runbook properties - to be able to create Jobs of the runbook.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Automation/automationAccounts/runbooks/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Automation Operator",
      "Description": "Automation Operators are able to start, stop, suspend, and resume jobs",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Automation/automationAccounts/hybridRunbookWorkerGroups/read",
            "Microsoft.Automation/automationAccounts/jobs/read",
            "Microsoft.Automation/automationAccounts/jobs/resume/action",
            "Microsoft.Automation/automationAccounts/jobs/stop/action",
            "Microsoft.Automation/automationAccounts/jobs/streams/read",
            "Microsoft.Automation/automationAccounts/jobs/suspend/action",
            "Microsoft.Automation/automationAccounts/jobs/write",
            "Microsoft.Automation/automationAccounts/jobSchedules/read",
            "Microsoft.Automation/automationAccounts/jobSchedules/write",
            "Microsoft.Automation/automationAccounts/linkedWorkspace/read",
            "Microsoft.Automation/automationAccounts/read",
            "Microsoft.Automation/automationAccounts/runbooks/read",
            "Microsoft.Automation/automationAccounts/schedules/read",
            "Microsoft.Automation/automationAccounts/schedules/write",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Automation/automationAccounts/jobs/output/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Avere Contributor",
      "Description": "Can create and manage an Avere vFXT cluster.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Compute/*/read",
            "Microsoft.Compute/availabilitySets/*",
            "Microsoft.Compute/proximityPlacementGroups/*",
            "Microsoft.Compute/virtualMachines/*",
            "Microsoft.Compute/disks/*",
            "Microsoft.Network/*/read",
            "Microsoft.Network/networkInterfaces/*",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/subnets/joinViaServiceEndpoint/action",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/*/read",
            "Microsoft.Storage/storageAccounts/*",
            "Microsoft.Support/*",
            "Microsoft.Resources/subscriptions/resourceGroups/resources/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/delete",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Avere Operator",
      "Description": "Used by the Avere vFXT cluster to manage the cluster",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/delete",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/write"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/delete",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Cluster Admin Role",
      "Description": "List cluster admin credential action.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerService/managedClusters/listClusterAdminCredential/action",
            "Microsoft.ContainerService/managedClusters/accessProfiles/listCredential/action",
            "Microsoft.ContainerService/managedClusters/read",
            "Microsoft.ContainerService/managedClusters/runcommand/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Cluster User Role",
      "Description": "List cluster user credential action.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerService/managedClusters/listClusterUserCredential/action",
            "Microsoft.ContainerService/managedClusters/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Maps Data Reader",
      "Description": "Grants access to read map related data from an Azure maps account.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Maps/accounts/*/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Stack Registration Owner",
      "Description": "Lets you manage Azure Stack registrations.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureStack/edgeSubscriptions/read",
            "Microsoft.AzureStack/registrations/products/*/action",
            "Microsoft.AzureStack/registrations/products/read",
            "Microsoft.AzureStack/registrations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Backup Contributor",
      "Description": "Lets you manage backups, but can't delete vaults and give access to others",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.RecoveryServices/locations/*",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/operationResults/*",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/*",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/refreshContainers/action",
            "Microsoft.RecoveryServices/Vaults/backupJobs/*",
            "Microsoft.RecoveryServices/Vaults/backupJobsExport/action",
            "Microsoft.RecoveryServices/Vaults/backupOperationResults/*",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/*",
            "Microsoft.RecoveryServices/Vaults/backupProtectableItems/*",
            "Microsoft.RecoveryServices/Vaults/backupProtectedItems/*",
            "Microsoft.RecoveryServices/Vaults/backupProtectionContainers/*",
            "Microsoft.RecoveryServices/Vaults/backupSecurityPIN/*",
            "Microsoft.RecoveryServices/Vaults/backupUsageSummaries/read",
            "Microsoft.RecoveryServices/Vaults/certificates/*",
            "Microsoft.RecoveryServices/Vaults/extendedInformation/*",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/read",
            "Microsoft.RecoveryServices/Vaults/monitoringConfigurations/*",
            "Microsoft.RecoveryServices/Vaults/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/*",
            "Microsoft.RecoveryServices/Vaults/usages/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.RecoveryServices/Vaults/backupstorageconfig/*",
            "Microsoft.RecoveryServices/Vaults/backupconfig/*",
            "Microsoft.RecoveryServices/Vaults/backupValidateOperation/action",
            "Microsoft.RecoveryServices/Vaults/write",
            "Microsoft.RecoveryServices/Vaults/backupOperations/read",
            "Microsoft.RecoveryServices/Vaults/backupEngines/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/backupProtectionIntent/*",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectableContainers/read",
            "Microsoft.RecoveryServices/vaults/operationStatus/read",
            "Microsoft.RecoveryServices/vaults/operationResults/read",
            "Microsoft.RecoveryServices/locations/backupStatus/action",
            "Microsoft.RecoveryServices/locations/backupPreValidateProtection/action",
            "Microsoft.RecoveryServices/locations/backupValidateFeatures/action",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/write",
            "Microsoft.RecoveryServices/operations/read",
            "Microsoft.RecoveryServices/locations/operationStatus/read",
            "Microsoft.RecoveryServices/Vaults/backupProtectionIntents/read",
            "Microsoft.Support/*",
            "Microsoft.DataProtection/locations/getBackupStatus/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/write",
            "Microsoft.DataProtection/backupVaults/backupInstances/delete",
            "Microsoft.DataProtection/backupVaults/backupInstances/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/read",
            "Microsoft.DataProtection/backupVaults/deletedBackupInstances/read",
            "Microsoft.DataProtection/backupVaults/deletedBackupInstances/undelete/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/backup/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/validateRestore/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/restore/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/crossRegionRestore/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/validateCrossRegionRestore/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchCrossRegionRestoreJobs/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchCrossRegionRestoreJob/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchSecondaryRecoveryPoints/action",
            "Microsoft.DataProtection/backupVaults/backupPolicies/write",
            "Microsoft.DataProtection/backupVaults/backupPolicies/delete",
            "Microsoft.DataProtection/backupVaults/backupPolicies/read",
            "Microsoft.DataProtection/backupVaults/backupPolicies/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/recoveryPoints/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/recoveryPoints/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/findRestorableTimeRanges/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/operationResults/read",
            "Microsoft.DataProtection/backupVaults/write",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/backupVaults/operationResults/read",
            "Microsoft.DataProtection/backupVaults/operationStatus/read",
            "Microsoft.DataProtection/locations/checkNameAvailability/action",
            "Microsoft.DataProtection/locations/checkFeatureSupport/action",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/locations/operationStatus/read",
            "Microsoft.DataProtection/locations/operationResults/read",
            "Microsoft.DataProtection/backupVaults/validateForBackup/action",
            "Microsoft.DataProtection/operations/read",
            "Microsoft.RecoveryServices/Vaults/backupResourceGuardProxies/delete",
            "Microsoft.RecoveryServices/Vaults/backupResourceGuardProxies/read",
            "Microsoft.RecoveryServices/Vaults/backupResourceGuardProxies/unlockDelete/action",
            "Microsoft.RecoveryServices/Vaults/backupResourceGuardProxies/write",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/read",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/write",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/delete",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/unlockDelete/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Billing Reader",
      "Description": "Allows read access to billing data",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Billing/*/read",
            "Microsoft.Commerce/*/read",
            "Microsoft.Consumption/*/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.CostManagement/*/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Backup Reader",
      "Description": "Can view backup services, but can't make changes",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.RecoveryServices/locations/allocatedStamp/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/operationsStatus/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/read",
            "Microsoft.RecoveryServices/Vaults/backupJobs/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupJobs/read",
            "Microsoft.RecoveryServices/Vaults/backupJobsExport/action",
            "Microsoft.RecoveryServices/Vaults/backupOperationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/read",
            "Microsoft.RecoveryServices/Vaults/backupProtectedItems/read",
            "Microsoft.RecoveryServices/Vaults/backupProtectionContainers/read",
            "Microsoft.RecoveryServices/Vaults/backupUsageSummaries/read",
            "Microsoft.RecoveryServices/Vaults/extendedInformation/read",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/read",
            "Microsoft.RecoveryServices/Vaults/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/read",
            "Microsoft.RecoveryServices/Vaults/backupstorageconfig/read",
            "Microsoft.RecoveryServices/Vaults/backupconfig/read",
            "Microsoft.RecoveryServices/Vaults/backupOperations/read",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/operations/read",
            "Microsoft.RecoveryServices/Vaults/backupEngines/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/backupProtectionIntent/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/items/read",
            "Microsoft.RecoveryServices/locations/backupStatus/action",
            "Microsoft.RecoveryServices/Vaults/monitoringConfigurations/*",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/write",
            "Microsoft.RecoveryServices/operations/read",
            "Microsoft.RecoveryServices/locations/operationStatus/read",
            "Microsoft.RecoveryServices/Vaults/backupProtectionIntents/read",
            "Microsoft.RecoveryServices/Vaults/usages/read",
            "Microsoft.RecoveryServices/locations/backupValidateFeatures/action",
            "Microsoft.RecoveryServices/locations/backupCrrJobs/action",
            "Microsoft.RecoveryServices/locations/backupCrrJob/action",
            "Microsoft.RecoveryServices/locations/backupCrrOperationResults/read",
            "Microsoft.RecoveryServices/locations/backupCrrOperationsStatus/read",
            "Microsoft.DataProtection/locations/getBackupStatus/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/write",
            "Microsoft.DataProtection/backupVaults/backupInstances/read",
            "Microsoft.DataProtection/backupVaults/deletedBackupInstances/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/backup/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/validateRestore/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/restore/action",
            "Microsoft.DataProtection/backupVaults/backupPolicies/read",
            "Microsoft.DataProtection/backupVaults/backupPolicies/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/recoveryPoints/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/recoveryPoints/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/operationResults/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/findRestorableTimeRanges/action",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/backupVaults/operationResults/read",
            "Microsoft.DataProtection/backupVaults/operationStatus/read",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/locations/operationStatus/read",
            "Microsoft.DataProtection/locations/operationResults/read",
            "Microsoft.DataProtection/backupVaults/validateForBackup/action",
            "Microsoft.DataProtection/operations/read",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchCrossRegionRestoreJobs/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchCrossRegionRestoreJob/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchSecondaryRecoveryPoints/action",
            "Microsoft.DataProtection/locations/checkFeatureSupport/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Blockchain Member Node Access (Preview)",
      "Description": "Allows for access to Blockchain Member nodes",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Blockchain/blockchainMembers/transactionNodes/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Blockchain/blockchainMembers/transactionNodes/connect/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "BizTalk Contributor",
      "Description": "Lets you manage BizTalk services, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.BizTalkServices/BizTalk/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "CDN Endpoint Contributor",
      "Description": "Can manage CDN endpoints, but can't grant access to other users.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Cdn/edgenodes/read",
            "Microsoft.Cdn/operationresults/*",
            "Microsoft.Cdn/profiles/endpoints/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "CDN Profile Contributor",
      "Description": "Can manage CDN and Azure Front Door standard and premium profiles and their endpoints, but can't grant access to other users.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Cdn/edgenodes/read",
            "Microsoft.Cdn/operationresults/*",
            "Microsoft.Cdn/profiles/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "CDN Profile Reader",
      "Description": "Can view CDN profiles and their endpoints, but can't make changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Cdn/edgenodes/read",
            "Microsoft.Cdn/operationresults/*",
            "Microsoft.Cdn/profiles/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Cdn/profiles/afdendpoints/validateCustomDomain/action",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Cdn/profiles/CheckResourceUsage/action",
            "Microsoft.Cdn/profiles/endpoints/CheckResourceUsage/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Classic Network Contributor",
      "Description": "Lets you manage classic networks, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ClassicNetwork/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Classic Storage Account Contributor",
      "Description": "Lets you manage classic storage accounts, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ClassicStorage/storageAccounts/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Classic Storage Account Key Operator Service Role",
      "Description": "Classic Storage Account Key Operators are allowed to list and regenerate keys on Classic Storage Accounts",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ClassicStorage/storageAccounts/listkeys/action",
            "Microsoft.ClassicStorage/storageAccounts/regeneratekey/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "ClearDB MySQL DB Contributor",
      "Description": "Lets you manage ClearDB MySQL databases, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "successbricks.cleardb/databases/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Classic Virtual Machine Contributor",
      "Description": "Lets you manage classic virtual machines, but not access to them, and not the virtual network or storage account they\u2019re connected to.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ClassicCompute/domainNames/*",
            "Microsoft.ClassicCompute/virtualMachines/*",
            "Microsoft.ClassicNetwork/networkSecurityGroups/join/action",
            "Microsoft.ClassicNetwork/reservedIps/link/action",
            "Microsoft.ClassicNetwork/reservedIps/read",
            "Microsoft.ClassicNetwork/virtualNetworks/join/action",
            "Microsoft.ClassicNetwork/virtualNetworks/read",
            "Microsoft.ClassicStorage/storageAccounts/disks/read",
            "Microsoft.ClassicStorage/storageAccounts/images/read",
            "Microsoft.ClassicStorage/storageAccounts/listKeys/action",
            "Microsoft.ClassicStorage/storageAccounts/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services User",
      "Description": "Lets you read and list keys of Cognitive Services.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.CognitiveServices/accounts/listkeys/action",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Insights/diagnosticSettings/read",
            "Microsoft.Insights/logDefinitions/read",
            "Microsoft.Insights/metricdefinitions/read",
            "Microsoft.Insights/metrics/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Data Reader (Preview)",
      "Description": "Lets you read Cognitive Services data.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/*/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Contributor",
      "Description": "Lets you create, read, update, delete and manage keys of Cognitive Services.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.CognitiveServices/*",
            "Microsoft.Features/features/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Features/providers/features/register/action",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/diagnosticSettings/*",
            "Microsoft.Insights/logDefinitions/read",
            "Microsoft.Insights/metricdefinitions/read",
            "Microsoft.Insights/metrics/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "CosmosBackupOperator",
      "Description": "Can submit restore request for a Cosmos DB database or a container for an account",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DocumentDB/databaseAccounts/backup/action",
            "Microsoft.DocumentDB/databaseAccounts/restore/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Contributor",
      "Description": "Grants full access to manage all resources, but does not allow you to assign roles in Azure RBAC, manage assignments in Azure Blueprints, or share image galleries.",
      "Permissions": [
        {
          "actions": [
            "*"
          ],
          "not_actions": [
            "Microsoft.Authorization/*/Delete",
            "Microsoft.Authorization/*/Write",
            "Microsoft.Authorization/elevateAccess/Action",
            "Microsoft.Blueprint/blueprintAssignments/write",
            "Microsoft.Blueprint/blueprintAssignments/delete",
            "Microsoft.Compute/galleries/share/action",
            "Microsoft.Purview/consents/write",
            "Microsoft.Purview/consents/delete",
            "Microsoft.Resources/deploymentStacks/manageDenySetting/action"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cosmos DB Account Reader Role",
      "Description": "Can read Azure Cosmos DB Accounts data",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.DocumentDB/*/read",
            "Microsoft.DocumentDB/databaseAccounts/readonlykeys/action",
            "Microsoft.Insights/MetricDefinitions/read",
            "Microsoft.Insights/Metrics/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cost Management Contributor",
      "Description": "Can view costs and manage cost configuration (e.g. budgets, exports)",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Consumption/*",
            "Microsoft.CostManagement/*",
            "Microsoft.Billing/billingPeriods/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Advisor/configurations/read",
            "Microsoft.Advisor/recommendations/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Billing/billingProperty/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cost Management Reader",
      "Description": "Can view cost data and configuration (e.g. budgets, exports)",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Consumption/*/read",
            "Microsoft.CostManagement/*/read",
            "Microsoft.Billing/billingPeriods/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Advisor/configurations/read",
            "Microsoft.Advisor/recommendations/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Billing/billingProperty/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Data Box Contributor",
      "Description": "Lets you manage everything under Data Box Service except giving access to others.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Databox/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Data Box Reader",
      "Description": "Lets you manage Data Box Service except creating order or editing order details and giving access to others.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Databox/*/read",
            "Microsoft.Databox/jobs/listsecrets/action",
            "Microsoft.Databox/jobs/listcredentials/action",
            "Microsoft.Databox/locations/availableSkus/action",
            "Microsoft.Databox/locations/validateInputs/action",
            "Microsoft.Databox/locations/regionConfiguration/action",
            "Microsoft.Databox/locations/validateAddress/action",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Data Factory Contributor",
      "Description": "Create and manage data factories, as well as child resources within them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.DataFactory/dataFactories/*",
            "Microsoft.DataFactory/factories/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.EventGrid/eventSubscriptions/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Data Purger",
      "Description": "Can purge analytics data",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/components/*/read",
            "Microsoft.Insights/components/purge/action",
            "Microsoft.OperationalInsights/workspaces/*/read",
            "Microsoft.OperationalInsights/workspaces/purge/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Data Lake Analytics Developer",
      "Description": "Lets you submit, monitor, and manage your own jobs but not create or delete Data Lake Analytics accounts.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.BigAnalytics/accounts/*",
            "Microsoft.DataLakeAnalytics/accounts/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [
            "Microsoft.BigAnalytics/accounts/Delete",
            "Microsoft.BigAnalytics/accounts/TakeOwnership/action",
            "Microsoft.BigAnalytics/accounts/Write",
            "Microsoft.DataLakeAnalytics/accounts/Delete",
            "Microsoft.DataLakeAnalytics/accounts/TakeOwnership/action",
            "Microsoft.DataLakeAnalytics/accounts/Write",
            "Microsoft.DataLakeAnalytics/accounts/dataLakeStoreAccounts/Write",
            "Microsoft.DataLakeAnalytics/accounts/dataLakeStoreAccounts/Delete",
            "Microsoft.DataLakeAnalytics/accounts/storageAccounts/Write",
            "Microsoft.DataLakeAnalytics/accounts/storageAccounts/Delete",
            "Microsoft.DataLakeAnalytics/accounts/firewallRules/Write",
            "Microsoft.DataLakeAnalytics/accounts/firewallRules/Delete",
            "Microsoft.DataLakeAnalytics/accounts/computePolicies/Write",
            "Microsoft.DataLakeAnalytics/accounts/computePolicies/Delete"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DevTest Labs User",
      "Description": "Lets you connect, start, restart, and shutdown your virtual machines in your Azure DevTest Labs.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Compute/availabilitySets/read",
            "Microsoft.Compute/virtualMachines/*/read",
            "Microsoft.Compute/virtualMachines/deallocate/action",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/restart/action",
            "Microsoft.Compute/virtualMachines/start/action",
            "Microsoft.DevTestLab/*/read",
            "Microsoft.DevTestLab/labs/claimAnyVm/action",
            "Microsoft.DevTestLab/labs/createEnvironment/action",
            "Microsoft.DevTestLab/labs/ensureCurrentUserProfile/action",
            "Microsoft.DevTestLab/labs/formulas/delete",
            "Microsoft.DevTestLab/labs/formulas/read",
            "Microsoft.DevTestLab/labs/formulas/write",
            "Microsoft.DevTestLab/labs/policySets/evaluatePolicies/action",
            "Microsoft.DevTestLab/labs/virtualMachines/claim/action",
            "Microsoft.DevTestLab/labs/virtualmachines/listApplicableSchedules/action",
            "Microsoft.DevTestLab/labs/virtualMachines/getRdpFileContents/action",
            "Microsoft.Network/loadBalancers/backendAddressPools/join/action",
            "Microsoft.Network/loadBalancers/inboundNatRules/join/action",
            "Microsoft.Network/networkInterfaces/*/read",
            "Microsoft.Network/networkInterfaces/join/action",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/publicIPAddresses/*/read",
            "Microsoft.Network/publicIPAddresses/join/action",
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/storageAccounts/listKeys/action"
          ],
          "not_actions": [
            "Microsoft.Compute/virtualMachines/vmSizes/read"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DocumentDB Account Contributor",
      "Description": "Lets you manage DocumentDB accounts, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.DocumentDb/databaseAccounts/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Network/virtualNetworks/subnets/joinViaServiceEndpoint/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DNS Zone Contributor",
      "Description": "Lets you manage DNS zones and record sets in Azure DNS, but does not let you control who has access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Network/dnsZones/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "EventGrid EventSubscription Contributor",
      "Description": "Lets you manage EventGrid event subscription operations.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.EventGrid/eventSubscriptions/*",
            "Microsoft.EventGrid/topicTypes/eventSubscriptions/read",
            "Microsoft.EventGrid/locations/eventSubscriptions/read",
            "Microsoft.EventGrid/locations/topicTypes/eventSubscriptions/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "EventGrid EventSubscription Reader",
      "Description": "Lets you read EventGrid event subscriptions.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.EventGrid/eventSubscriptions/read",
            "Microsoft.EventGrid/topicTypes/eventSubscriptions/read",
            "Microsoft.EventGrid/locations/eventSubscriptions/read",
            "Microsoft.EventGrid/locations/topicTypes/eventSubscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Graph Owner",
      "Description": "Create and manage all aspects of the Enterprise Graph - Ontology, Schema mapping, Conflation and Conversational AI and Ingestions",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EnterpriseKnowledgeGraph/services/conflation/read",
            "Microsoft.EnterpriseKnowledgeGraph/services/conflation/write",
            "Microsoft.EnterpriseKnowledgeGraph/services/sourceschema/read",
            "Microsoft.EnterpriseKnowledgeGraph/services/sourceschema/write",
            "Microsoft.EnterpriseKnowledgeGraph/services/knowledge/read",
            "Microsoft.EnterpriseKnowledgeGraph/services/knowledge/write",
            "Microsoft.EnterpriseKnowledgeGraph/services/intentclassification/read",
            "Microsoft.EnterpriseKnowledgeGraph/services/intentclassification/write",
            "Microsoft.EnterpriseKnowledgeGraph/services/ingestion/read",
            "Microsoft.EnterpriseKnowledgeGraph/services/ingestion/write",
            "Microsoft.EnterpriseKnowledgeGraph/services/ontology/read",
            "Microsoft.EnterpriseKnowledgeGraph/services/ontology/write",
            "Microsoft.EnterpriseKnowledgeGraph/services/delete",
            "Microsoft.EnterpriseKnowledgeGraph/operations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "HDInsight Domain Services Contributor",
      "Description": "Can Read, Create, Modify and Delete Domain Services related operations needed for HDInsight Enterprise Security Package",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AAD/*/read",
            "Microsoft.AAD/domainServices/*/read",
            "Microsoft.AAD/domainServices/oucontainer/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Intelligent Systems Account Contributor",
      "Description": "Lets you manage Intelligent Systems accounts, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.IntelligentSystems/accounts/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Contributor",
      "Description": "Lets you manage key vaults, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.KeyVault/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [
            "Microsoft.KeyVault/locations/deletedVaults/purge/action",
            "Microsoft.KeyVault/hsmPools/*",
            "Microsoft.KeyVault/managedHsms/*"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Knowledge Consumer",
      "Description": "Knowledge Read permission to consume Enterprise Graph Knowledge using entity search and graph query",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EnterpriseKnowledgeGraph/services/knowledge/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Lab Creator",
      "Description": "Lets you create new labs under your Azure Lab Accounts.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.LabServices/labAccounts/*/read",
            "Microsoft.LabServices/labAccounts/createLab/action",
            "Microsoft.LabServices/labAccounts/getPricingAndAvailability/action",
            "Microsoft.LabServices/labAccounts/getRestrictionsAndUsage/action",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.LabServices/labPlans/images/read",
            "Microsoft.LabServices/labPlans/read",
            "Microsoft.LabServices/labPlans/saveImage/action",
            "Microsoft.LabServices/labs/read",
            "Microsoft.LabServices/labs/schedules/read",
            "Microsoft.LabServices/labs/users/read",
            "Microsoft.LabServices/labs/virtualMachines/read",
            "Microsoft.LabServices/locations/usages/read",
            "Microsoft.LabServices/skus/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.LabServices/labPlans/createLab/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Log Analytics Reader",
      "Description": "Log Analytics Reader can view and search all monitoring data as well as and view monitoring settings, including viewing the configuration of Azure diagnostics on all Azure resources.",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.OperationalInsights/workspaces/analytics/query/action",
            "Microsoft.OperationalInsights/workspaces/search/action",
            "Microsoft.Support/*"
          ],
          "not_actions": [
            "Microsoft.OperationalInsights/workspaces/sharedKeys/read"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Log Analytics Contributor",
      "Description": "Log Analytics Contributor can read all monitoring data and edit monitoring settings. Editing monitoring settings includes adding the VM extension to VMs; reading storage account keys to be able to configure collection of logs from Azure Storage; adding solutions; and configuring Azure diagnostics on all Azure resources.",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.ClassicCompute/virtualMachines/extensions/*",
            "Microsoft.ClassicStorage/storageAccounts/listKeys/action",
            "Microsoft.Compute/virtualMachines/extensions/*",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/diagnosticSettings/*",
            "Microsoft.OperationalInsights/*",
            "Microsoft.OperationsManagement/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/*",
            "Microsoft.Storage/storageAccounts/listKeys/action",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Logic App Operator",
      "Description": "Lets you read, enable and disable logic app.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*/read",
            "Microsoft.Insights/metricAlerts/*/read",
            "Microsoft.Insights/diagnosticSettings/*/read",
            "Microsoft.Insights/metricDefinitions/*/read",
            "Microsoft.Logic/*/read",
            "Microsoft.Logic/workflows/disable/action",
            "Microsoft.Logic/workflows/enable/action",
            "Microsoft.Logic/workflows/validate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Web/connectionGateways/*/read",
            "Microsoft.Web/connections/*/read",
            "Microsoft.Web/customApis/*/read",
            "Microsoft.Web/serverFarms/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Logic App Contributor",
      "Description": "Lets you manage logic app, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ClassicStorage/storageAccounts/listKeys/action",
            "Microsoft.ClassicStorage/storageAccounts/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metricAlerts/*",
            "Microsoft.Insights/diagnosticSettings/*",
            "Microsoft.Insights/logdefinitions/*",
            "Microsoft.Insights/metricDefinitions/*",
            "Microsoft.Logic/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/storageAccounts/listkeys/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Support/*",
            "Microsoft.Web/connectionGateways/*",
            "Microsoft.Web/connections/*",
            "Microsoft.Web/customApis/*",
            "Microsoft.Web/serverFarms/join/action",
            "Microsoft.Web/serverFarms/read",
            "Microsoft.Web/sites/functions/listSecrets/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Managed Application Operator Role",
      "Description": "Lets you read and perform actions on Managed Application resources",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.Solutions/applications/read",
            "Microsoft.Solutions/*/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Managed Applications Reader",
      "Description": "Lets you read resources in a managed app and request JIT access.",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Solutions/jitRequests/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Managed Identity Operator",
      "Description": "Read and Assign User Assigned Identity",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ManagedIdentity/userAssignedIdentities/*/read",
            "Microsoft.ManagedIdentity/userAssignedIdentities/*/assign/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Managed Identity Contributor",
      "Description": "Create, Read, Update, and Delete User Assigned Identity",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ManagedIdentity/userAssignedIdentities/read",
            "Microsoft.ManagedIdentity/userAssignedIdentities/write",
            "Microsoft.ManagedIdentity/userAssignedIdentities/delete",
            "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials/read",
            "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials/write",
            "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials/delete",
            "Microsoft.ManagedIdentity/userAssignedIdentities/revokeTokens/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Management Group Contributor",
      "Description": "Management Group Contributor Role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Management/managementGroups/delete",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Management/managementGroups/subscriptions/delete",
            "Microsoft.Management/managementGroups/subscriptions/write",
            "Microsoft.Management/managementGroups/write",
            "Microsoft.Management/managementGroups/subscriptions/read",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Management Group Reader",
      "Description": "Management Group Reader Role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Management/managementGroups/subscriptions/read",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Monitoring Reader",
      "Description": "Can read all monitoring data.",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.OperationalInsights/workspaces/search/action",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Network Contributor",
      "Description": "Lets you manage networks, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Network/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "New Relic APM Account Contributor",
      "Description": "Lets you manage New Relic Application Performance Management accounts and applications, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "NewRelic.APM/accounts/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Owner",
      "Description": "Grants full access to manage all resources, including the ability to assign roles in Azure RBAC.",
      "Permissions": [
        {
          "actions": [
            "*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "PowerAppsReaderWithReshare",
      "Description": "PowerAppsReadersWithReshare can use the resource and re-share it with other users, but cannot edit the resource or re-share it with edit permissions.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.PowerApps/*/permissions/write",
            "Microsoft.PowerApps/*/read"
          ],
          "not_actions": [
            "Microsoft.PowerApps/*/delete",
            "Microsoft.PowerApps/*/write"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "PowerApps Administrator",
      "Description": "The user has access to perform administrative actions on all PowerApps resources within the tenant.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.PowerApps/actions/admin/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Reader",
      "Description": "View all resources, but does not allow you to make any changes.",
      "Permissions": [
        {
          "actions": [
            "*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Redis Cache Contributor",
      "Description": "Lets you manage Redis caches, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Cache/register/action",
            "Microsoft.Cache/redis/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Reader and Data Access",
      "Description": "Lets you view everything but will not let you delete or create a storage account or contained resource. It will also allow read/write access to all data contained in a storage account via access to storage account keys.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/listKeys/action",
            "Microsoft.Storage/storageAccounts/ListAccountSas/action",
            "Microsoft.Storage/storageAccounts/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Resource Policy Contributor",
      "Description": "Users with rights to create/modify resource policy, create support ticket and read resources/hierarchy.",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.Authorization/policyassignments/*",
            "Microsoft.Authorization/policydefinitions/*",
            "Microsoft.Authorization/policyexemptions/*",
            "Microsoft.Authorization/policysetdefinitions/*",
            "Microsoft.PolicyInsights/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Scheduler Job Collections Contributor",
      "Description": "Lets you manage Scheduler job collections, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Scheduler/jobcollections/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Search Service Contributor",
      "Description": "Lets you manage Search services, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Search/searchServices/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Security Manager (Legacy)",
      "Description": "This is a legacy role. Please use Security Administrator instead",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ClassicCompute/*/read",
            "Microsoft.ClassicCompute/virtualMachines/*/write",
            "Microsoft.ClassicNetwork/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Security/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Security Reader",
      "Description": "Security Reader Role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.operationalInsights/workspaces/*/read",
            "Microsoft.Resources/deployments/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Security/*/read",
            "Microsoft.IoTSecurity/*/read",
            "Microsoft.Support/*/read",
            "Microsoft.Security/iotDefenderSettings/packageDownloads/action",
            "Microsoft.Security/iotDefenderSettings/downloadManagerActivation/action",
            "Microsoft.Security/iotSensors/downloadResetPassword/action",
            "Microsoft.IoTSecurity/defenderSettings/packageDownloads/action",
            "Microsoft.IoTSecurity/defenderSettings/downloadManagerActivation/action",
            "Microsoft.Management/managementGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Spatial Anchors Account Contributor",
      "Description": "Lets you manage spatial anchors in your account, but not delete them",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/SpatialAnchorsAccounts/create/action",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/discovery/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/properties/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/query/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/submitdiag/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Site Recovery Contributor",
      "Description": "Lets you manage Site Recovery service except vault creation and role assignment",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.RecoveryServices/locations/allocatedStamp/read",
            "Microsoft.RecoveryServices/locations/allocateStamp/action",
            "Microsoft.RecoveryServices/Vaults/certificates/write",
            "Microsoft.RecoveryServices/Vaults/extendedInformation/*",
            "Microsoft.RecoveryServices/Vaults/read",
            "Microsoft.RecoveryServices/Vaults/refreshContainers/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/*",
            "Microsoft.RecoveryServices/vaults/replicationAlertSettings/*",
            "Microsoft.RecoveryServices/vaults/replicationEvents/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/*",
            "Microsoft.RecoveryServices/vaults/replicationJobs/*",
            "Microsoft.RecoveryServices/vaults/replicationPolicies/*",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/*",
            "Microsoft.RecoveryServices/vaults/replicationVaultSettings/*",
            "Microsoft.RecoveryServices/Vaults/storageConfig/*",
            "Microsoft.RecoveryServices/Vaults/tokenInfo/read",
            "Microsoft.RecoveryServices/Vaults/usages/read",
            "Microsoft.RecoveryServices/Vaults/vaultTokens/read",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/*",
            "Microsoft.RecoveryServices/Vaults/monitoringConfigurations/notificationConfiguration/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.RecoveryServices/vaults/replicationOperationStatus/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Site Recovery Operator",
      "Description": "Lets you failover and failback but not perform other Site Recovery management operations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.RecoveryServices/locations/allocatedStamp/read",
            "Microsoft.RecoveryServices/locations/allocateStamp/action",
            "Microsoft.RecoveryServices/Vaults/extendedInformation/read",
            "Microsoft.RecoveryServices/Vaults/read",
            "Microsoft.RecoveryServices/Vaults/refreshContainers/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/read",
            "Microsoft.RecoveryServices/vaults/replicationAlertSettings/read",
            "Microsoft.RecoveryServices/vaults/replicationEvents/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/checkConsistency/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/reassociateGateway/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/renewcertificate/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectableItems/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/applyRecoveryPoint/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/failoverCommit/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/plannedFailover/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/recoveryPoints/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/repairReplication/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/reProtect/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/switchprotection/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/testFailover/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/testFailoverCleanup/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/unplannedFailover/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/updateMobilityService/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders/refreshProvider/action",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters/read",
            "Microsoft.RecoveryServices/vaults/replicationJobs/*",
            "Microsoft.RecoveryServices/vaults/replicationPolicies/read",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/failoverCommit/action",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/plannedFailover/action",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/read",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/reProtect/action",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/testFailover/action",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/testFailoverCleanup/action",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/unplannedFailover/action",
            "Microsoft.RecoveryServices/vaults/replicationVaultSettings/read",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/*",
            "Microsoft.RecoveryServices/Vaults/monitoringConfigurations/notificationConfiguration/read",
            "Microsoft.RecoveryServices/Vaults/storageConfig/read",
            "Microsoft.RecoveryServices/Vaults/tokenInfo/read",
            "Microsoft.RecoveryServices/Vaults/usages/read",
            "Microsoft.RecoveryServices/Vaults/vaultTokens/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Spatial Anchors Account Reader",
      "Description": "Lets you locate and read properties of spatial anchors in your account",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/SpatialAnchorsAccounts/discovery/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/properties/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/query/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/submitdiag/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Site Recovery Reader",
      "Description": "Lets you view Site Recovery status but not perform other management operations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.RecoveryServices/locations/allocatedStamp/read",
            "Microsoft.RecoveryServices/Vaults/extendedInformation/read",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/read",
            "Microsoft.RecoveryServices/Vaults/monitoringConfigurations/notificationConfiguration/read",
            "Microsoft.RecoveryServices/Vaults/read",
            "Microsoft.RecoveryServices/Vaults/refreshContainers/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/read",
            "Microsoft.RecoveryServices/vaults/replicationAlertSettings/read",
            "Microsoft.RecoveryServices/vaults/replicationEvents/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectableItems/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems/recoveryPoints/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationRecoveryServicesProviders/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationStorageClassifications/replicationStorageClassificationMappings/read",
            "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationvCenters/read",
            "Microsoft.RecoveryServices/vaults/replicationJobs/read",
            "Microsoft.RecoveryServices/vaults/replicationPolicies/read",
            "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans/read",
            "Microsoft.RecoveryServices/vaults/replicationVaultSettings/read",
            "Microsoft.RecoveryServices/Vaults/storageConfig/read",
            "Microsoft.RecoveryServices/Vaults/tokenInfo/read",
            "Microsoft.RecoveryServices/Vaults/usages/read",
            "Microsoft.RecoveryServices/Vaults/vaultTokens/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Spatial Anchors Account Owner",
      "Description": "Lets you manage spatial anchors in your account, including deleting them",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/SpatialAnchorsAccounts/create/action",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/delete",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/discovery/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/properties/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/query/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/submitdiag/read",
            "Microsoft.MixedReality/SpatialAnchorsAccounts/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SQL Managed Instance Contributor",
      "Description": "Lets you manage SQL Managed Instances and required network configuration, but can\u2019t give access to others.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Network/networkSecurityGroups/*",
            "Microsoft.Network/routeTables/*",
            "Microsoft.Sql/locations/*/read",
            "Microsoft.Sql/locations/instanceFailoverGroups/*",
            "Microsoft.Sql/managedInstances/*",
            "Microsoft.Support/*",
            "Microsoft.Network/virtualNetworks/subnets/*",
            "Microsoft.Network/virtualNetworks/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read"
          ],
          "not_actions": [
            "Microsoft.Sql/managedInstances/azureADOnlyAuthentications/delete",
            "Microsoft.Sql/managedInstances/azureADOnlyAuthentications/write"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SQL DB Contributor",
      "Description": "Lets you manage SQL databases, but not access to them. Also, you can't manage their security-related policies or their parent SQL servers.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Sql/locations/*/read",
            "Microsoft.Sql/servers/databases/*",
            "Microsoft.Sql/servers/read",
            "Microsoft.Support/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read"
          ],
          "not_actions": [
            "Microsoft.Sql/servers/databases/ledgerDigestUploads/write",
            "Microsoft.Sql/servers/databases/ledgerDigestUploads/disable/action",
            "Microsoft.Sql/managedInstances/databases/currentSensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/recommendedSensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/securityAlertPolicies/*",
            "Microsoft.Sql/managedInstances/databases/sensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/vulnerabilityAssessments/*",
            "Microsoft.Sql/managedInstances/securityAlertPolicies/*",
            "Microsoft.Sql/managedInstances/vulnerabilityAssessments/*",
            "Microsoft.Sql/servers/databases/auditingSettings/*",
            "Microsoft.Sql/servers/databases/auditRecords/read",
            "Microsoft.Sql/servers/databases/currentSensitivityLabels/*",
            "Microsoft.Sql/servers/databases/dataMaskingPolicies/*",
            "Microsoft.Sql/servers/databases/extendedAuditingSettings/*",
            "Microsoft.Sql/servers/databases/recommendedSensitivityLabels/*",
            "Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels/*",
            "Microsoft.Sql/servers/databases/securityAlertPolicies/*",
            "Microsoft.Sql/servers/databases/securityMetrics/*",
            "Microsoft.Sql/servers/databases/sensitivityLabels/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessments/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessmentScans/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessmentSettings/*",
            "Microsoft.Sql/servers/vulnerabilityAssessments/*"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SQL Security Manager",
      "Description": "Lets you manage the security-related policies of SQL servers and databases, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Network/virtualNetworks/subnets/joinViaServiceEndpoint/action",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Sql/locations/administratorAzureAsyncOperation/read",
            "Microsoft.Sql/managedInstances/advancedThreatProtectionSettings/read",
            "Microsoft.Sql/managedInstances/advancedThreatProtectionSettings/write",
            "Microsoft.Sql/managedInstances/databases/advancedThreatProtectionSettings/read",
            "Microsoft.Sql/managedInstances/databases/advancedThreatProtectionSettings/write",
            "Microsoft.Sql/managedInstances/advancedThreatProtectionSettings/read",
            "Microsoft.Sql/managedInstances/advancedThreatProtectionSettings/write",
            "Microsoft.Sql/managedInstances/databases/advancedThreatProtectionSettings/read",
            "Microsoft.Sql/managedInstances/databases/advancedThreatProtectionSettings/write",
            "Microsoft.Sql/managedInstances/databases/currentSensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/recommendedSensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/securityAlertPolicies/*",
            "Microsoft.Sql/managedInstances/databases/sensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/vulnerabilityAssessments/*",
            "Microsoft.Sql/servers/advancedThreatProtectionSettings/read",
            "Microsoft.Sql/servers/advancedThreatProtectionSettings/write",
            "Microsoft.Sql/managedInstances/securityAlertPolicies/*",
            "Microsoft.Sql/managedInstances/databases/transparentDataEncryption/*",
            "Microsoft.Sql/managedInstances/vulnerabilityAssessments/*",
            "Microsoft.Sql/managedInstances/serverConfigurationOptions/read",
            "Microsoft.Sql/managedInstances/serverConfigurationOptions/write",
            "Microsoft.Sql/locations/serverConfigurationOptionAzureAsyncOperation/read",
            "Microsoft.Sql/servers/advancedThreatProtectionSettings/read",
            "Microsoft.Sql/servers/advancedThreatProtectionSettings/write",
            "Microsoft.Sql/servers/auditingSettings/*",
            "Microsoft.Sql/servers/extendedAuditingSettings/read",
            "Microsoft.Sql/servers/databases/advancedThreatProtectionSettings/read",
            "Microsoft.Sql/servers/databases/advancedThreatProtectionSettings/write",
            "Microsoft.Sql/servers/databases/advancedThreatProtectionSettings/read",
            "Microsoft.Sql/servers/databases/advancedThreatProtectionSettings/write",
            "Microsoft.Sql/servers/databases/auditingSettings/*",
            "Microsoft.Sql/servers/databases/auditRecords/read",
            "Microsoft.Sql/servers/databases/currentSensitivityLabels/*",
            "Microsoft.Sql/servers/databases/dataMaskingPolicies/*",
            "Microsoft.Sql/servers/databases/extendedAuditingSettings/read",
            "Microsoft.Sql/servers/databases/read",
            "Microsoft.Sql/servers/databases/recommendedSensitivityLabels/*",
            "Microsoft.Sql/servers/databases/schemas/read",
            "Microsoft.Sql/servers/databases/schemas/tables/columns/read",
            "Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels/*",
            "Microsoft.Sql/servers/databases/schemas/tables/read",
            "Microsoft.Sql/servers/databases/securityAlertPolicies/*",
            "Microsoft.Sql/servers/databases/securityMetrics/*",
            "Microsoft.Sql/servers/databases/sensitivityLabels/*",
            "Microsoft.Sql/servers/databases/transparentDataEncryption/*",
            "Microsoft.Sql/servers/databases/sqlvulnerabilityAssessments/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessments/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessmentScans/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessmentSettings/*",
            "Microsoft.Sql/servers/devOpsAuditingSettings/*",
            "Microsoft.Sql/servers/firewallRules/*",
            "Microsoft.Sql/servers/read",
            "Microsoft.Sql/servers/securityAlertPolicies/*",
            "Microsoft.Sql/servers/sqlvulnerabilityAssessments/*",
            "Microsoft.Sql/servers/vulnerabilityAssessments/*",
            "Microsoft.Support/*",
            "Microsoft.Sql/servers/azureADOnlyAuthentications/*",
            "Microsoft.Sql/managedInstances/read",
            "Microsoft.Sql/managedInstances/azureADOnlyAuthentications/*",
            "Microsoft.Security/sqlVulnerabilityAssessments/*",
            "Microsoft.Sql/managedInstances/administrators/read",
            "Microsoft.Sql/servers/administrators/read",
            "Microsoft.Sql/servers/databases/ledgerDigestUploads/*",
            "Microsoft.Sql/locations/ledgerDigestUploadsAzureAsyncOperation/read",
            "Microsoft.Sql/locations/ledgerDigestUploadsOperationResults/read",
            "Microsoft.Sql/servers/externalPolicyBasedAuthorizations/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Account Contributor",
      "Description": "Lets you manage storage accounts, including accessing storage account keys which provide full access to storage account data.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/diagnosticSettings/*",
            "Microsoft.Network/virtualNetworks/subnets/joinViaServiceEndpoint/action",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/storageAccounts/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SQL Server Contributor",
      "Description": "Lets you manage SQL servers and databases, but not access to them, and not their security -related policies.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Sql/locations/*/read",
            "Microsoft.Sql/servers/*",
            "Microsoft.Support/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read"
          ],
          "not_actions": [
            "Microsoft.Sql/managedInstances/databases/currentSensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/recommendedSensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/schemas/tables/columns/sensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/securityAlertPolicies/*",
            "Microsoft.Sql/managedInstances/databases/sensitivityLabels/*",
            "Microsoft.Sql/managedInstances/databases/vulnerabilityAssessments/*",
            "Microsoft.Sql/managedInstances/securityAlertPolicies/*",
            "Microsoft.Sql/managedInstances/vulnerabilityAssessments/*",
            "Microsoft.Sql/servers/auditingSettings/*",
            "Microsoft.Sql/servers/databases/auditingSettings/*",
            "Microsoft.Sql/servers/databases/auditRecords/read",
            "Microsoft.Sql/servers/databases/currentSensitivityLabels/*",
            "Microsoft.Sql/servers/databases/dataMaskingPolicies/*",
            "Microsoft.Sql/servers/databases/extendedAuditingSettings/*",
            "Microsoft.Sql/servers/databases/recommendedSensitivityLabels/*",
            "Microsoft.Sql/servers/databases/schemas/tables/columns/sensitivityLabels/*",
            "Microsoft.Sql/servers/databases/securityAlertPolicies/*",
            "Microsoft.Sql/servers/databases/securityMetrics/*",
            "Microsoft.Sql/servers/databases/sensitivityLabels/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessments/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessmentScans/*",
            "Microsoft.Sql/servers/databases/vulnerabilityAssessmentSettings/*",
            "Microsoft.Sql/servers/devOpsAuditingSettings/*",
            "Microsoft.Sql/servers/extendedAuditingSettings/*",
            "Microsoft.Sql/servers/securityAlertPolicies/*",
            "Microsoft.Sql/servers/vulnerabilityAssessments/*",
            "Microsoft.Sql/servers/azureADOnlyAuthentications/delete",
            "Microsoft.Sql/servers/azureADOnlyAuthentications/write",
            "Microsoft.Sql/servers/externalPolicyBasedAuthorizations/delete",
            "Microsoft.Sql/servers/externalPolicyBasedAuthorizations/write"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Account Key Operator Service Role",
      "Description": "Storage Account Key Operators are allowed to list and regenerate keys on Storage Accounts",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/listkeys/action",
            "Microsoft.Storage/storageAccounts/regeneratekey/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Blob Data Contributor",
      "Description": "Allows for read, write and delete access to Azure Storage blob containers and data",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/delete",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/write",
            "Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/delete",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/move/action",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/add/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Blob Data Owner",
      "Description": "Allows for full access to Azure Storage blob containers and data, including assigning POSIX access control.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/*",
            "Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Blob Data Reader",
      "Description": "Allows for read access to Azure Storage blob containers and data",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Queue Data Contributor",
      "Description": "Allows for read, write, and delete access to Azure Storage queues and queue messages",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/queueServices/queues/delete",
            "Microsoft.Storage/storageAccounts/queueServices/queues/read",
            "Microsoft.Storage/storageAccounts/queueServices/queues/write"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/queueServices/queues/messages/delete",
            "Microsoft.Storage/storageAccounts/queueServices/queues/messages/read",
            "Microsoft.Storage/storageAccounts/queueServices/queues/messages/write",
            "Microsoft.Storage/storageAccounts/queueServices/queues/messages/process/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Queue Data Message Processor",
      "Description": "Allows for peek, receive, and delete access to Azure Storage queue messages",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/queueServices/queues/messages/read",
            "Microsoft.Storage/storageAccounts/queueServices/queues/messages/process/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Queue Data Message Sender",
      "Description": "Allows for sending of Azure Storage queue messages",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/queueServices/queues/messages/add/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Queue Data Reader",
      "Description": "Allows for read access to Azure Storage queues and queue messages",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/queueServices/queues/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/queueServices/queues/messages/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Support Request Contributor",
      "Description": "Lets you create and manage Support requests",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Traffic Manager Contributor",
      "Description": "Lets you manage Traffic Manager profiles, but does not let you control who has access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Network/trafficManagerProfiles/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "User Access Administrator",
      "Description": "Lets you manage user access to Azure resources.",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.Authorization/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Virtual Machine Contributor",
      "Description": "Lets you manage virtual machines, but not access to them, and not the virtual network or storage account they're connected to.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Compute/availabilitySets/*",
            "Microsoft.Compute/locations/*",
            "Microsoft.Compute/virtualMachines/*",
            "Microsoft.Compute/virtualMachineScaleSets/*",
            "Microsoft.Compute/cloudServices/*",
            "Microsoft.Compute/disks/write",
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/delete",
            "Microsoft.DevTestLab/schedules/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Network/applicationGateways/backendAddressPools/join/action",
            "Microsoft.Network/loadBalancers/backendAddressPools/join/action",
            "Microsoft.Network/loadBalancers/inboundNatPools/join/action",
            "Microsoft.Network/loadBalancers/inboundNatRules/join/action",
            "Microsoft.Network/loadBalancers/probes/join/action",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/locations/*",
            "Microsoft.Network/networkInterfaces/*",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/publicIPAddresses/join/action",
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.RecoveryServices/locations/*",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/backupProtectionIntent/write",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/*/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/write",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/read",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/write",
            "Microsoft.RecoveryServices/Vaults/read",
            "Microsoft.RecoveryServices/Vaults/usages/read",
            "Microsoft.RecoveryServices/Vaults/write",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.SerialConsole/serialPorts/connect/action",
            "Microsoft.SqlVirtualMachine/*",
            "Microsoft.Storage/storageAccounts/listKeys/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Web Plan Contributor",
      "Description": "Lets you manage the web plans for websites, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Web/serverFarms/*",
            "Microsoft.Web/hostingEnvironments/Join/Action",
            "Microsoft.Insights/autoscalesettings/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Website Contributor",
      "Description": "Lets you manage websites (not web plans), but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/components/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Web/certificates/*",
            "Microsoft.Web/listSitesAssignedToHostName/read",
            "Microsoft.Web/register/action",
            "Microsoft.Web/serverFarms/join/action",
            "Microsoft.Web/serverFarms/read",
            "Microsoft.Web/sites/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Service Bus Data Owner",
      "Description": "Allows for full access to Azure Service Bus resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ServiceBus/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ServiceBus/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Event Hubs Data Owner",
      "Description": "Allows for full access to Azure Event Hubs resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EventHub/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventHub/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Attestation Contributor",
      "Description": "Can read write or delete the attestation provider instance",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Attestation/attestationProviders/attestation/read",
            "Microsoft.Attestation/attestationProviders/attestation/write",
            "Microsoft.Attestation/attestationProviders/attestation/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "HDInsight Cluster Operator",
      "Description": "Lets you read and modify HDInsight cluster configurations.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HDInsight/*/read",
            "Microsoft.HDInsight/clusters/getGatewaySettings/action",
            "Microsoft.HDInsight/clusters/updateGatewaySettings/action",
            "Microsoft.HDInsight/clusters/configurations/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cosmos DB Operator",
      "Description": "Lets you manage Azure Cosmos DB accounts, but not access data in them. Prevents access to account keys and connection strings.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DocumentDb/databaseAccounts/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Network/virtualNetworks/subnets/joinViaServiceEndpoint/action"
          ],
          "not_actions": [
            "Microsoft.DocumentDB/databaseAccounts/dataTransferJobs/*",
            "Microsoft.DocumentDB/databaseAccounts/readonlyKeys/*",
            "Microsoft.DocumentDB/databaseAccounts/regenerateKey/*",
            "Microsoft.DocumentDB/databaseAccounts/listKeys/*",
            "Microsoft.DocumentDB/databaseAccounts/listConnectionStrings/*",
            "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions/write",
            "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions/delete",
            "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments/write",
            "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments/delete",
            "Microsoft.DocumentDB/databaseAccounts/mongodbRoleDefinitions/write",
            "Microsoft.DocumentDB/databaseAccounts/mongodbRoleDefinitions/delete",
            "Microsoft.DocumentDB/databaseAccounts/mongodbUserDefinitions/write",
            "Microsoft.DocumentDB/databaseAccounts/mongodbUserDefinitions/delete"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Hybrid Server Resource Administrator",
      "Description": "Can read, write, delete, and re-onboard Hybrid servers to the Hybrid Resource Provider.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridCompute/machines/*",
            "Microsoft.HybridCompute/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Hybrid Server Onboarding",
      "Description": "Can onboard new Hybrid servers to the Hybrid Resource Provider.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Event Hubs Data Receiver",
      "Description": "Allows receive access to Azure Event Hubs resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EventHub/*/eventhubs/consumergroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventHub/*/receive/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Event Hubs Data Sender",
      "Description": "Allows send access to Azure Event Hubs resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EventHub/*/eventhubs/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventHub/*/send/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Service Bus Data Receiver",
      "Description": "Allows for receive access to Azure Service Bus resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ServiceBus/*/queues/read",
            "Microsoft.ServiceBus/*/topics/read",
            "Microsoft.ServiceBus/*/topics/subscriptions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ServiceBus/*/receive/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Service Bus Data Sender",
      "Description": "Allows for send access to Azure Service Bus resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ServiceBus/*/queues/read",
            "Microsoft.ServiceBus/*/topics/read",
            "Microsoft.ServiceBus/*/topics/subscriptions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ServiceBus/*/send/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage File Data SMB Share Reader",
      "Description": "Allows for read access to Azure File Share over SMB",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage File Data SMB Share Contributor",
      "Description": "Allows for read, write, and delete access in Azure Storage file shares over SMB",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/read",
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/write",
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Private DNS Zone Contributor",
      "Description": "Lets you manage private DNS zone resources, but not the virtual networks they are linked to.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Network/privateDnsZones/*",
            "Microsoft.Network/privateDnsOperationResults/*",
            "Microsoft.Network/privateDnsOperationStatuses/*",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/join/action",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Blob Delegator",
      "Description": "Allows for generation of a user delegation key which can be used to sign SAS tokens",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization User",
      "Description": "Allows user to use the applications in an application group.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DesktopVirtualization/applicationGroups/useApplications/action",
            "Microsoft.DesktopVirtualization/appAttachPackages/useApplications/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage File Data SMB Share Elevated Contributor",
      "Description": "Allows for read, write, delete and modify NTFS permission access in Azure Storage file shares over SMB",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/read",
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/write",
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/delete",
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/modifypermissions/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Blueprint Contributor",
      "Description": "Can manage blueprint definitions, but not assign them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Blueprint/blueprints/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Blueprint Operator",
      "Description": "Can assign existing published blueprints, but cannot create new blueprints. NOTE: this only works if the assignment is done with a user-assigned managed identity.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Blueprint/blueprintAssignments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Microsoft Sentinel Contributor",
      "Description": "Microsoft Sentinel Contributor",
      "Permissions": [
        {
          "actions": [
            "Microsoft.SecurityInsights/*",
            "Microsoft.OperationalInsights/workspaces/analytics/query/action",
            "Microsoft.OperationalInsights/workspaces/*/read",
            "Microsoft.OperationalInsights/workspaces/savedSearches/*",
            "Microsoft.OperationsManagement/solutions/read",
            "Microsoft.OperationalInsights/workspaces/query/read",
            "Microsoft.OperationalInsights/workspaces/query/*/read",
            "Microsoft.OperationalInsights/workspaces/dataSources/read",
            "Microsoft.OperationalInsights/querypacks/*/read",
            "Microsoft.Insights/workbooks/*",
            "Microsoft.Insights/myworkbooks/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [
            "Microsoft.SecurityInsights/ConfidentialWatchlists/*",
            "Microsoft.OperationalInsights/workspaces/query/ConfidentialWatchlist/*"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Microsoft Sentinel Responder",
      "Description": "Microsoft Sentinel Responder",
      "Permissions": [
        {
          "actions": [
            "Microsoft.SecurityInsights/*/read",
            "Microsoft.SecurityInsights/dataConnectorsCheckRequirements/action",
            "Microsoft.SecurityInsights/automationRules/*",
            "Microsoft.SecurityInsights/cases/*",
            "Microsoft.SecurityInsights/incidents/*",
            "Microsoft.SecurityInsights/entities/runPlaybook/action",
            "Microsoft.SecurityInsights/threatIntelligence/indicators/appendTags/action",
            "Microsoft.SecurityInsights/threatIntelligence/indicators/query/action",
            "Microsoft.SecurityInsights/threatIntelligence/bulkTag/action",
            "Microsoft.SecurityInsights/threatIntelligence/indicators/appendTags/action",
            "Microsoft.SecurityInsights/threatIntelligence/indicators/replaceTags/action",
            "Microsoft.SecurityInsights/threatIntelligence/queryIndicators/action",
            "Microsoft.SecurityInsights/businessApplicationAgents/systems/undoAction/action",
            "Microsoft.OperationalInsights/workspaces/analytics/query/action",
            "Microsoft.OperationalInsights/workspaces/*/read",
            "Microsoft.OperationalInsights/workspaces/dataSources/read",
            "Microsoft.OperationalInsights/workspaces/savedSearches/read",
            "Microsoft.OperationsManagement/solutions/read",
            "Microsoft.OperationalInsights/workspaces/query/read",
            "Microsoft.OperationalInsights/workspaces/query/*/read",
            "Microsoft.OperationalInsights/workspaces/dataSources/read",
            "Microsoft.OperationalInsights/querypacks/*/read",
            "Microsoft.Insights/workbooks/read",
            "Microsoft.Insights/myworkbooks/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [
            "Microsoft.SecurityInsights/cases/*/Delete",
            "Microsoft.SecurityInsights/incidents/*/Delete",
            "Microsoft.SecurityInsights/ConfidentialWatchlists/*",
            "Microsoft.OperationalInsights/workspaces/query/ConfidentialWatchlist/*"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Microsoft Sentinel Reader",
      "Description": "Microsoft Sentinel Reader",
      "Permissions": [
        {
          "actions": [
            "Microsoft.SecurityInsights/*/read",
            "Microsoft.SecurityInsights/dataConnectorsCheckRequirements/action",
            "Microsoft.SecurityInsights/threatIntelligence/indicators/query/action",
            "Microsoft.SecurityInsights/threatIntelligence/queryIndicators/action",
            "Microsoft.OperationalInsights/workspaces/analytics/query/action",
            "Microsoft.OperationalInsights/workspaces/*/read",
            "Microsoft.OperationalInsights/workspaces/LinkedServices/read",
            "Microsoft.OperationalInsights/workspaces/savedSearches/read",
            "Microsoft.OperationsManagement/solutions/read",
            "Microsoft.OperationalInsights/workspaces/query/read",
            "Microsoft.OperationalInsights/workspaces/query/*/read",
            "Microsoft.OperationalInsights/querypacks/*/read",
            "Microsoft.OperationalInsights/workspaces/dataSources/read",
            "Microsoft.Insights/workbooks/read",
            "Microsoft.Insights/myworkbooks/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/templateSpecs/*/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [
            "Microsoft.SecurityInsights/ConfidentialWatchlists/*",
            "Microsoft.OperationalInsights/workspaces/query/ConfidentialWatchlist/*"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Policy Insights Data Writer (Preview)",
      "Description": "Allows read access to resource policies and write access to resource component policy events.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/policyassignments/read",
            "Microsoft.Authorization/policydefinitions/read",
            "Microsoft.Authorization/policyexemptions/read",
            "Microsoft.Authorization/policysetdefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.PolicyInsights/checkDataPolicyCompliance/action",
            "Microsoft.PolicyInsights/policyEvents/logDataEvents/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SignalR AccessKey Reader",
      "Description": "Read SignalR Service Access Keys",
      "Permissions": [
        {
          "actions": [
            "Microsoft.SignalRService/*/read",
            "Microsoft.SignalRService/SignalR/listkeys/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SignalR/Web PubSub Contributor",
      "Description": "Create, Read, Update, and Delete SignalR service resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.SignalRService/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Connected Machine Onboarding",
      "Description": "Can onboard Azure Connected Machines.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridCompute/privateLinkScopes/read",
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Managed Services Registration assignment Delete Role",
      "Description": "Managed Services Registration Assignment Delete Role allows the managing tenant users to delete the registration assignment assigned to their tenant.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ManagedServices/registrationAssignments/read",
            "Microsoft.ManagedServices/registrationAssignments/delete",
            "Microsoft.ManagedServices/operationStatuses/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "App Configuration Data Owner",
      "Description": "Allows full access to App Configuration data.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppConfiguration/configurationStores/*/read",
            "Microsoft.AppConfiguration/configurationStores/*/write",
            "Microsoft.AppConfiguration/configurationStores/*/delete",
            "Microsoft.AppConfiguration/configurationStores/*/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "App Configuration Data Reader",
      "Description": "Allows read access to App Configuration data.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppConfiguration/configurationStores/*/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Kubernetes Cluster - Azure Arc Onboarding",
      "Description": "Role definition to authorize any user/service to create connectedClusters resource",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Kubernetes/connectedClusters/Write",
            "Microsoft.Kubernetes/connectedClusters/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Experimentation Contributor",
      "Description": "Experimentation Contributor",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Experimentation/experimentWorkspaces/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/read",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/write",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/delete",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/experiment/action",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/emergencystop/action",
            "Microsoft.Experimentation/experimentWorkspaces/read",
            "Microsoft.Experimentation/experimentWorkspaces/write",
            "Microsoft.Experimentation/experimentWorkspaces/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services QnA Maker Reader",
      "Description": "Let\u2019s you read and test a KB only.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/download/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/generateanswer/action",
            "Microsoft.CognitiveServices/accounts/QnAMaker/alterations/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/endpointkeys/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/endpointsettings/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/download/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/generateanswer/action",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/alterations/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/endpointkeys/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/endpointsettings/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/download/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/generateanswer/action",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/alterations/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/endpointkeys/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/endpointsettings/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services QnA Maker Editor",
      "Description": "Let\u2019s you create, edit, import and export a KB. You cannot publish or delete a KB.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/download/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/create/write",
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/write",
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/generateanswer/action",
            "Microsoft.CognitiveServices/accounts/QnAMaker/knowledgebases/train/action",
            "Microsoft.CognitiveServices/accounts/QnAMaker/alterations/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/alterations/write",
            "Microsoft.CognitiveServices/accounts/QnAMaker/endpointkeys/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/endpointkeys/refreshkeys/action",
            "Microsoft.CognitiveServices/accounts/QnAMaker/endpointsettings/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker/endpointsettings/write",
            "Microsoft.CognitiveServices/accounts/QnAMaker/operations/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/download/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/create/write",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/write",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/generateanswer/action",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/knowledgebases/train/action",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/alterations/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/alterations/write",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/endpointkeys/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/endpointkeys/refreshkeys/action",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/endpointsettings/read",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/endpointsettings/write",
            "Microsoft.CognitiveServices/accounts/QnAMaker.v2/operations/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/download/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/create/write",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/write",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/generateanswer/action",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/knowledgebases/train/action",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/alterations/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/alterations/write",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/endpointkeys/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/endpointkeys/refreshkeys/action",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/endpointsettings/read",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/endpointsettings/write",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnAMaker/operations/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Experimentation Administrator",
      "Description": "Experimentation Administrator",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Experimentation/experimentWorkspaces/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/admin/action",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/read",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/write",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/delete",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/experimentadmin/action",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/experiment/action",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/emergencystop/action",
            "Microsoft.Experimentation/experimentWorkspaces/read",
            "Microsoft.Experimentation/experimentWorkspaces/write",
            "Microsoft.Experimentation/experimentWorkspaces/delete",
            "Microsoft.Experimentation/experimentWorkspaces/admin/action",
            "Microsoft.Experimentation/experimentWorkspaces/metricwrite/action",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/metricwrite/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Remote Rendering Administrator",
      "Description": "Provides user with conversion, manage session, rendering and diagnostics capabilities for Azure Remote Rendering",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/RemoteRenderingAccounts/convert/action",
            "Microsoft.MixedReality/RemoteRenderingAccounts/convert/read",
            "Microsoft.MixedReality/RemoteRenderingAccounts/convert/delete",
            "Microsoft.MixedReality/RemoteRenderingAccounts/managesessions/read",
            "Microsoft.MixedReality/RemoteRenderingAccounts/managesessions/action",
            "Microsoft.MixedReality/RemoteRenderingAccounts/managesessions/delete",
            "Microsoft.MixedReality/RemoteRenderingAccounts/render/read",
            "Microsoft.MixedReality/RemoteRenderingAccounts/diagnostic/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Remote Rendering Client",
      "Description": "Provides user with manage session, rendering and diagnostics capabilities for Azure Remote Rendering.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/RemoteRenderingAccounts/managesessions/read",
            "Microsoft.MixedReality/RemoteRenderingAccounts/managesessions/action",
            "Microsoft.MixedReality/RemoteRenderingAccounts/managesessions/delete",
            "Microsoft.MixedReality/RemoteRenderingAccounts/render/read",
            "Microsoft.MixedReality/RemoteRenderingAccounts/diagnostic/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Managed Application Contributor Role",
      "Description": "Allows for creating managed application resources.",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.Solutions/applications/*",
            "Microsoft.Solutions/register/action",
            "Microsoft.Resources/subscriptions/resourceGroups/*",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Security Assessment Contributor",
      "Description": "Lets you push assessments to Security Center",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Security/assessments/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Tag Contributor",
      "Description": "Lets you manage tags on entities, without providing access to the entities themselves.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourceGroups/resources/read",
            "Microsoft.Resources/subscriptions/resources/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*",
            "Microsoft.Resources/tags/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Integration Service Environment Developer",
      "Description": "Allows developers to create and update workflows, integration accounts and API connections in integration service environments.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Support/*",
            "Microsoft.Logic/integrationServiceEnvironments/read",
            "Microsoft.Logic/integrationServiceEnvironments/*/join/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Integration Service Environment Contributor",
      "Description": "Lets you manage integration service environments, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Support/*",
            "Microsoft.Logic/integrationServiceEnvironments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Marketplace Admin",
      "Description": "Marketplace Admin grants full access to manage Private Azure Marketplace, including read and take action for private marketplace notifications, but does not allow to assign Marketplace Admin role to others",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Marketplace/privateStores/write",
            "Microsoft.Marketplace/privateStores/action",
            "Microsoft.Marketplace/privateStores/delete",
            "Microsoft.Marketplace/privateStores/*/read",
            "Microsoft.Marketplace/privateStores/*/write",
            "Microsoft.Marketplace/privateStores/*/action",
            "Microsoft.Marketplace/privateStores/*/delete",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Contributor Role",
      "Description": "Grants access to read and write Azure Kubernetes Service clusters",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ContainerService/locations/*",
            "Microsoft.ContainerService/managedClusters/*",
            "Microsoft.ContainerService/managedclustersnapshots/*",
            "Microsoft.ContainerService/snapshots/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Digital Twins Data Reader",
      "Description": "Read-only role for Digital Twins data-plane properties",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DigitalTwins/digitaltwins/read",
            "Microsoft.DigitalTwins/digitaltwins/relationships/read",
            "Microsoft.DigitalTwins/eventroutes/read",
            "Microsoft.DigitalTwins/jobs/import/read",
            "Microsoft.DigitalTwins/jobs/imports/read",
            "Microsoft.DigitalTwins/jobs/deletions/read",
            "Microsoft.DigitalTwins/models/read",
            "Microsoft.DigitalTwins/query/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Digital Twins Data Owner",
      "Description": "Full access role for Digital Twins data-plane",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DigitalTwins/digitaltwins/*",
            "Microsoft.DigitalTwins/digitaltwins/commands/*",
            "Microsoft.DigitalTwins/digitaltwins/relationships/*",
            "Microsoft.DigitalTwins/eventroutes/*",
            "Microsoft.DigitalTwins/jobs/*",
            "Microsoft.DigitalTwins/models/*",
            "Microsoft.DigitalTwins/query/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Hierarchy Settings Administrator",
      "Description": "Allows users to edit and delete Hierarchy Settings",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Management/managementGroups/settings/write",
            "Microsoft.Management/managementGroups/settings/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "FHIR Data Contributor",
      "Description": "Role allows user or principal full access to FHIR Data",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/services/fhir/resources/*",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/*"
          ],
          "not_data_actions": [
            "Microsoft.HealthcareApis/services/fhir/resources/smart/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/smart/action"
          ]
        }
      ]
    },
    {
      "RoleName": "FHIR Data Exporter",
      "Description": "Role allows user or principal to read and export FHIR Data",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/services/fhir/resources/read",
            "Microsoft.HealthcareApis/services/fhir/resources/export/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/read",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/export/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "FHIR Data Reader",
      "Description": "Role allows user or principal to read FHIR Data",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/services/fhir/resources/read",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "FHIR Data Writer",
      "Description": "Role allows user or principal to read and write FHIR Data",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/services/fhir/resources/read",
            "Microsoft.HealthcareApis/services/fhir/resources/write",
            "Microsoft.HealthcareApis/services/fhir/resources/delete",
            "Microsoft.HealthcareApis/services/fhir/resources/export/action",
            "Microsoft.HealthcareApis/services/fhir/resources/resourceValidate/action",
            "Microsoft.HealthcareApis/services/fhir/resources/reindex/action",
            "Microsoft.HealthcareApis/services/fhir/resources/convertData/action",
            "Microsoft.HealthcareApis/services/fhir/resources/editProfileDefinitions/action",
            "Microsoft.HealthcareApis/services/fhir/resources/import/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/read",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/write",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/delete",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/export/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/resourceValidate/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/reindex/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/convertData/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/editProfileDefinitions/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/import/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Experimentation Reader",
      "Description": "Experimentation Reader",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Experimentation/experimentWorkspaces/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Experimentation/experimentWorkspaces/read",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Object Understanding Account Owner",
      "Description": "Provides user with ingestion capabilities for Azure Object Understanding.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/ObjectUnderstandingAccounts/ingest/action",
            "Microsoft.MixedReality/ObjectUnderstandingAccounts/ingest/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Maps Data Contributor",
      "Description": "Grants access to read, write, and delete access to map related data from an Azure maps account.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Maps/accounts/*/read",
            "Microsoft.Maps/accounts/*/write",
            "Microsoft.Maps/accounts/*/delete",
            "Microsoft.Maps/accounts/*/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Custom Vision Contributor",
      "Description": "Full access to the project, including the ability to view, create, edit, or delete projects.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Custom Vision Deployment",
      "Description": "Publish, unpublish or export models. Deployment can view the project but can\u2019t update.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/*/read",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/predictions/*",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/iterations/publish/*",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/iterations/export/*",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/quicktest/*",
            "Microsoft.CognitiveServices/accounts/CustomVision/classify/*",
            "Microsoft.CognitiveServices/accounts/CustomVision/detect/*"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/export/read"
          ]
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Custom Vision Labeler",
      "Description": "View, edit training images and create, add, remove, or delete the image tags. Labelers can view the project but can\u2019t update anything other than training images and tags.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/*/read",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/predictions/query/action",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/images/*",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/tags/*",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/images/suggested/*",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/tagsandregions/suggestions/action"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/export/read"
          ]
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Custom Vision Reader",
      "Description": "Read-only actions in the project. Readers can\u2019t create or update the project.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/*/read",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/predictions/query/action"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/export/read"
          ]
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Custom Vision Trainer",
      "Description": "View, edit projects and train the models, including the ability to publish, unpublish, export the models. Trainers can\u2019t create or delete the project.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/*"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/action",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/delete",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/import/action",
            "Microsoft.CognitiveServices/accounts/CustomVision/projects/export/read"
          ]
        }
      ]
    },
    {
      "RoleName": "Key Vault Administrator",
      "Description": "Perform all data plane operations on a key vault and all objects in it, including certificates, keys, and secrets. Cannot manage key vault resources or manage role assignments. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.KeyVault/checkNameAvailability/read",
            "Microsoft.KeyVault/deletedVaults/read",
            "Microsoft.KeyVault/locations/*/read",
            "Microsoft.KeyVault/vaults/*/read",
            "Microsoft.KeyVault/operations/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Crypto User",
      "Description": "Perform cryptographic operations using keys. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/keys/read",
            "Microsoft.KeyVault/vaults/keys/update/action",
            "Microsoft.KeyVault/vaults/keys/backup/action",
            "Microsoft.KeyVault/vaults/keys/encrypt/action",
            "Microsoft.KeyVault/vaults/keys/decrypt/action",
            "Microsoft.KeyVault/vaults/keys/wrap/action",
            "Microsoft.KeyVault/vaults/keys/unwrap/action",
            "Microsoft.KeyVault/vaults/keys/sign/action",
            "Microsoft.KeyVault/vaults/keys/verify/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Secrets Officer",
      "Description": "Perform any action on the secrets of a key vault, except manage permissions. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.KeyVault/checkNameAvailability/read",
            "Microsoft.KeyVault/deletedVaults/read",
            "Microsoft.KeyVault/locations/*/read",
            "Microsoft.KeyVault/vaults/*/read",
            "Microsoft.KeyVault/operations/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/secrets/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Secrets User",
      "Description": "Read secret contents. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/secrets/getSecret/action",
            "Microsoft.KeyVault/vaults/secrets/readMetadata/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Certificates Officer",
      "Description": "Perform any action on the certificates of a key vault, except manage permissions. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.KeyVault/checkNameAvailability/read",
            "Microsoft.KeyVault/deletedVaults/read",
            "Microsoft.KeyVault/locations/*/read",
            "Microsoft.KeyVault/vaults/*/read",
            "Microsoft.KeyVault/operations/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/certificatecas/*",
            "Microsoft.KeyVault/vaults/certificates/*",
            "Microsoft.KeyVault/vaults/certificatecontacts/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Reader",
      "Description": "Read metadata of key vaults and its certificates, keys, and secrets. Cannot read sensitive values such as secret contents or key material. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.KeyVault/checkNameAvailability/read",
            "Microsoft.KeyVault/deletedVaults/read",
            "Microsoft.KeyVault/locations/*/read",
            "Microsoft.KeyVault/vaults/*/read",
            "Microsoft.KeyVault/operations/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/*/read",
            "Microsoft.KeyVault/vaults/secrets/readMetadata/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Crypto Service Encryption User",
      "Description": "Read metadata of keys and perform wrap/unwrap operations. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EventGrid/eventSubscriptions/write",
            "Microsoft.EventGrid/eventSubscriptions/read",
            "Microsoft.EventGrid/eventSubscriptions/delete"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/keys/read",
            "Microsoft.KeyVault/vaults/keys/wrap/action",
            "Microsoft.KeyVault/vaults/keys/unwrap/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc Kubernetes Viewer",
      "Description": "Lets you view all resources in cluster/namespace, except secrets.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Kubernetes/connectedClusters/apps/controllerrevisions/read",
            "Microsoft.Kubernetes/connectedClusters/apps/daemonsets/read",
            "Microsoft.Kubernetes/connectedClusters/apps/deployments/read",
            "Microsoft.Kubernetes/connectedClusters/apps/replicasets/read",
            "Microsoft.Kubernetes/connectedClusters/apps/statefulsets/read",
            "Microsoft.Kubernetes/connectedClusters/autoscaling/horizontalpodautoscalers/read",
            "Microsoft.Kubernetes/connectedClusters/batch/cronjobs/read",
            "Microsoft.Kubernetes/connectedClusters/batch/jobs/read",
            "Microsoft.Kubernetes/connectedClusters/configmaps/read",
            "Microsoft.Kubernetes/connectedClusters/endpoints/read",
            "Microsoft.Kubernetes/connectedClusters/events.k8s.io/events/read",
            "Microsoft.Kubernetes/connectedClusters/events/read",
            "Microsoft.Kubernetes/connectedClusters/extensions/daemonsets/read",
            "Microsoft.Kubernetes/connectedClusters/extensions/deployments/read",
            "Microsoft.Kubernetes/connectedClusters/extensions/ingresses/read",
            "Microsoft.Kubernetes/connectedClusters/extensions/networkpolicies/read",
            "Microsoft.Kubernetes/connectedClusters/extensions/replicasets/read",
            "Microsoft.Kubernetes/connectedClusters/limitranges/read",
            "Microsoft.Kubernetes/connectedClusters/namespaces/read",
            "Microsoft.Kubernetes/connectedClusters/networking.k8s.io/ingresses/read",
            "Microsoft.Kubernetes/connectedClusters/networking.k8s.io/networkpolicies/read",
            "Microsoft.Kubernetes/connectedClusters/persistentvolumeclaims/read",
            "Microsoft.Kubernetes/connectedClusters/pods/read",
            "Microsoft.Kubernetes/connectedClusters/policy/poddisruptionbudgets/read",
            "Microsoft.Kubernetes/connectedClusters/replicationcontrollers/read",
            "Microsoft.Kubernetes/connectedClusters/replicationcontrollers/read",
            "Microsoft.Kubernetes/connectedClusters/resourcequotas/read",
            "Microsoft.Kubernetes/connectedClusters/serviceaccounts/read",
            "Microsoft.Kubernetes/connectedClusters/services/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc Kubernetes Writer",
      "Description": "Lets you update everything in cluster/namespace, except (cluster)roles and (cluster)role bindings.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Kubernetes/connectedClusters/apps/controllerrevisions/read",
            "Microsoft.Kubernetes/connectedClusters/apps/daemonsets/*",
            "Microsoft.Kubernetes/connectedClusters/apps/deployments/*",
            "Microsoft.Kubernetes/connectedClusters/apps/replicasets/*",
            "Microsoft.Kubernetes/connectedClusters/apps/statefulsets/*",
            "Microsoft.Kubernetes/connectedClusters/autoscaling/horizontalpodautoscalers/*",
            "Microsoft.Kubernetes/connectedClusters/batch/cronjobs/*",
            "Microsoft.Kubernetes/connectedClusters/batch/jobs/*",
            "Microsoft.Kubernetes/connectedClusters/configmaps/*",
            "Microsoft.Kubernetes/connectedClusters/endpoints/*",
            "Microsoft.Kubernetes/connectedClusters/events.k8s.io/events/read",
            "Microsoft.Kubernetes/connectedClusters/events/read",
            "Microsoft.Kubernetes/connectedClusters/extensions/daemonsets/*",
            "Microsoft.Kubernetes/connectedClusters/extensions/deployments/*",
            "Microsoft.Kubernetes/connectedClusters/extensions/ingresses/*",
            "Microsoft.Kubernetes/connectedClusters/extensions/networkpolicies/*",
            "Microsoft.Kubernetes/connectedClusters/extensions/replicasets/*",
            "Microsoft.Kubernetes/connectedClusters/limitranges/read",
            "Microsoft.Kubernetes/connectedClusters/namespaces/read",
            "Microsoft.Kubernetes/connectedClusters/networking.k8s.io/ingresses/*",
            "Microsoft.Kubernetes/connectedClusters/networking.k8s.io/networkpolicies/*",
            "Microsoft.Kubernetes/connectedClusters/persistentvolumeclaims/*",
            "Microsoft.Kubernetes/connectedClusters/pods/*",
            "Microsoft.Kubernetes/connectedClusters/policy/poddisruptionbudgets/*",
            "Microsoft.Kubernetes/connectedClusters/replicationcontrollers/*",
            "Microsoft.Kubernetes/connectedClusters/replicationcontrollers/*",
            "Microsoft.Kubernetes/connectedClusters/resourcequotas/read",
            "Microsoft.Kubernetes/connectedClusters/secrets/*",
            "Microsoft.Kubernetes/connectedClusters/serviceaccounts/*",
            "Microsoft.Kubernetes/connectedClusters/services/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc Kubernetes Cluster Admin",
      "Description": "Lets you manage all resources in the cluster.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Kubernetes/connectedClusters/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc Kubernetes Admin",
      "Description": "Lets you manage all resources under cluster/namespace, except update or delete resource quotas and namespaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Kubernetes/connectedClusters/apps/controllerrevisions/read",
            "Microsoft.Kubernetes/connectedClusters/apps/daemonsets/*",
            "Microsoft.Kubernetes/connectedClusters/apps/deployments/*",
            "Microsoft.Kubernetes/connectedClusters/apps/replicasets/*",
            "Microsoft.Kubernetes/connectedClusters/apps/statefulsets/*",
            "Microsoft.Kubernetes/connectedClusters/authorization.k8s.io/localsubjectaccessreviews/write",
            "Microsoft.Kubernetes/connectedClusters/autoscaling/horizontalpodautoscalers/*",
            "Microsoft.Kubernetes/connectedClusters/batch/cronjobs/*",
            "Microsoft.Kubernetes/connectedClusters/batch/jobs/*",
            "Microsoft.Kubernetes/connectedClusters/configmaps/*",
            "Microsoft.Kubernetes/connectedClusters/endpoints/*",
            "Microsoft.Kubernetes/connectedClusters/events.k8s.io/events/read",
            "Microsoft.Kubernetes/connectedClusters/events/read",
            "Microsoft.Kubernetes/connectedClusters/extensions/daemonsets/*",
            "Microsoft.Kubernetes/connectedClusters/extensions/deployments/*",
            "Microsoft.Kubernetes/connectedClusters/extensions/ingresses/*",
            "Microsoft.Kubernetes/connectedClusters/extensions/networkpolicies/*",
            "Microsoft.Kubernetes/connectedClusters/extensions/replicasets/*",
            "Microsoft.Kubernetes/connectedClusters/limitranges/read",
            "Microsoft.Kubernetes/connectedClusters/namespaces/read",
            "Microsoft.Kubernetes/connectedClusters/networking.k8s.io/ingresses/*",
            "Microsoft.Kubernetes/connectedClusters/networking.k8s.io/networkpolicies/*",
            "Microsoft.Kubernetes/connectedClusters/persistentvolumeclaims/*",
            "Microsoft.Kubernetes/connectedClusters/pods/*",
            "Microsoft.Kubernetes/connectedClusters/policy/poddisruptionbudgets/*",
            "Microsoft.Kubernetes/connectedClusters/rbac.authorization.k8s.io/rolebindings/*",
            "Microsoft.Kubernetes/connectedClusters/rbac.authorization.k8s.io/roles/*",
            "Microsoft.Kubernetes/connectedClusters/replicationcontrollers/*",
            "Microsoft.Kubernetes/connectedClusters/replicationcontrollers/*",
            "Microsoft.Kubernetes/connectedClusters/resourcequotas/read",
            "Microsoft.Kubernetes/connectedClusters/secrets/*",
            "Microsoft.Kubernetes/connectedClusters/serviceaccounts/*",
            "Microsoft.Kubernetes/connectedClusters/services/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service RBAC Cluster Admin",
      "Description": "Lets you manage all resources in the cluster.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ContainerService/managedClusters/listClusterUserCredential/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerService/managedClusters/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service RBAC Admin",
      "Description": "Lets you manage all resources under cluster/namespace, except update or delete resource quotas and namespaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ContainerService/managedClusters/listClusterUserCredential/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerService/managedClusters/*"
          ],
          "not_data_actions": [
            "Microsoft.ContainerService/managedClusters/resourcequotas/write",
            "Microsoft.ContainerService/managedClusters/resourcequotas/delete",
            "Microsoft.ContainerService/managedClusters/namespaces/write",
            "Microsoft.ContainerService/managedClusters/namespaces/delete"
          ]
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service RBAC Reader",
      "Description": "Allows read-only access to see most objects in a namespace. It does not allow viewing roles or role bindings. This role does not allow viewing Secrets, since reading the contents of Secrets enables access to ServiceAccount credentials in the namespace, which would allow API access as any ServiceAccount in the namespace (a form of privilege escalation). Applying this role at cluster scope will give access across all namespaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerService/managedClusters/apps/controllerrevisions/read",
            "Microsoft.ContainerService/managedClusters/apps/daemonsets/read",
            "Microsoft.ContainerService/managedClusters/apps/deployments/read",
            "Microsoft.ContainerService/managedClusters/apps/replicasets/read",
            "Microsoft.ContainerService/managedClusters/apps/statefulsets/read",
            "Microsoft.ContainerService/managedClusters/autoscaling/horizontalpodautoscalers/read",
            "Microsoft.ContainerService/managedClusters/batch/cronjobs/read",
            "Microsoft.ContainerService/managedClusters/batch/jobs/read",
            "Microsoft.ContainerService/managedClusters/configmaps/read",
            "Microsoft.ContainerService/managedClusters/discovery.k8s.io/endpointslices/read",
            "Microsoft.ContainerService/managedClusters/endpoints/read",
            "Microsoft.ContainerService/managedClusters/events.k8s.io/events/read",
            "Microsoft.ContainerService/managedClusters/events/read",
            "Microsoft.ContainerService/managedClusters/extensions/daemonsets/read",
            "Microsoft.ContainerService/managedClusters/extensions/deployments/read",
            "Microsoft.ContainerService/managedClusters/extensions/ingresses/read",
            "Microsoft.ContainerService/managedClusters/extensions/networkpolicies/read",
            "Microsoft.ContainerService/managedClusters/extensions/replicasets/read",
            "Microsoft.ContainerService/managedClusters/limitranges/read",
            "Microsoft.ContainerService/managedClusters/metrics.k8s.io/pods/read",
            "Microsoft.ContainerService/managedClusters/metrics.k8s.io/nodes/read",
            "Microsoft.ContainerService/managedClusters/namespaces/read",
            "Microsoft.ContainerService/managedClusters/networking.k8s.io/ingresses/read",
            "Microsoft.ContainerService/managedClusters/networking.k8s.io/networkpolicies/read",
            "Microsoft.ContainerService/managedClusters/persistentvolumeclaims/read",
            "Microsoft.ContainerService/managedClusters/pods/read",
            "Microsoft.ContainerService/managedClusters/policy/poddisruptionbudgets/read",
            "Microsoft.ContainerService/managedClusters/replicationcontrollers/read",
            "Microsoft.ContainerService/managedClusters/resourcequotas/read",
            "Microsoft.ContainerService/managedClusters/serviceaccounts/read",
            "Microsoft.ContainerService/managedClusters/services/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service RBAC Writer",
      "Description": "Allows read/write access to most objects in a namespace.This role does not allow viewing or modifying roles or role bindings. However, this role allows accessing Secrets and running Pods as any ServiceAccount in the namespace, so it can be used to gain the API access levels of any ServiceAccount in the namespace. Applying this role at cluster scope will give access across all namespaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerService/managedClusters/apps/controllerrevisions/read",
            "Microsoft.ContainerService/managedClusters/apps/daemonsets/*",
            "Microsoft.ContainerService/managedClusters/apps/deployments/*",
            "Microsoft.ContainerService/managedClusters/apps/replicasets/*",
            "Microsoft.ContainerService/managedClusters/apps/statefulsets/*",
            "Microsoft.ContainerService/managedClusters/autoscaling/horizontalpodautoscalers/*",
            "Microsoft.ContainerService/managedClusters/batch/cronjobs/*",
            "Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/read",
            "Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/write",
            "Microsoft.ContainerService/managedClusters/coordination.k8s.io/leases/delete",
            "Microsoft.ContainerService/managedClusters/discovery.k8s.io/endpointslices/read",
            "Microsoft.ContainerService/managedClusters/batch/jobs/*",
            "Microsoft.ContainerService/managedClusters/configmaps/*",
            "Microsoft.ContainerService/managedClusters/endpoints/*",
            "Microsoft.ContainerService/managedClusters/events.k8s.io/events/read",
            "Microsoft.ContainerService/managedClusters/events/*",
            "Microsoft.ContainerService/managedClusters/extensions/daemonsets/*",
            "Microsoft.ContainerService/managedClusters/extensions/deployments/*",
            "Microsoft.ContainerService/managedClusters/extensions/ingresses/*",
            "Microsoft.ContainerService/managedClusters/extensions/networkpolicies/*",
            "Microsoft.ContainerService/managedClusters/extensions/replicasets/*",
            "Microsoft.ContainerService/managedClusters/limitranges/read",
            "Microsoft.ContainerService/managedClusters/metrics.k8s.io/pods/read",
            "Microsoft.ContainerService/managedClusters/metrics.k8s.io/nodes/read",
            "Microsoft.ContainerService/managedClusters/namespaces/read",
            "Microsoft.ContainerService/managedClusters/networking.k8s.io/ingresses/*",
            "Microsoft.ContainerService/managedClusters/networking.k8s.io/networkpolicies/*",
            "Microsoft.ContainerService/managedClusters/persistentvolumeclaims/*",
            "Microsoft.ContainerService/managedClusters/pods/*",
            "Microsoft.ContainerService/managedClusters/policy/poddisruptionbudgets/*",
            "Microsoft.ContainerService/managedClusters/replicationcontrollers/*",
            "Microsoft.ContainerService/managedClusters/resourcequotas/read",
            "Microsoft.ContainerService/managedClusters/secrets/*",
            "Microsoft.ContainerService/managedClusters/serviceaccounts/*",
            "Microsoft.ContainerService/managedClusters/services/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Services Hub Operator",
      "Description": "Services Hub Operator allows you to perform all read, write, and deletion operations related to Services Hub Connectors.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.ServicesHub/connectors/write",
            "Microsoft.ServicesHub/connectors/read",
            "Microsoft.ServicesHub/connectors/delete",
            "Microsoft.ServicesHub/connectors/checkAssessmentEntitlement/action",
            "Microsoft.ServicesHub/supportOfferingEntitlement/read",
            "Microsoft.ServicesHub/workspaces/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Object Understanding Account Reader",
      "Description": "Lets you read ingestion jobs for an object understanding account.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/ObjectUnderstandingAccounts/ingest/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SignalR REST API Owner",
      "Description": "Full access to Azure SignalR Service REST APIs",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SignalRService/SignalR/auth/clientToken/action",
            "Microsoft.SignalRService/SignalR/hub/*",
            "Microsoft.SignalRService/SignalR/group/*",
            "Microsoft.SignalRService/SignalR/clientConnection/*",
            "Microsoft.SignalRService/SignalR/user/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Collaborative Data Contributor",
      "Description": "Can manage data packages of a collaborative.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.IndustryDataLifecycle/custodianCollaboratives/*/read",
            "Microsoft.IndustryDataLifecycle/memberCollaboratives/*/read",
            "Microsoft.IndustryDataLifecycle/locations/dataPackages/*",
            "Microsoft.IndustryDataLifecycle/custodianCollaboratives/receivedDataPackages/*",
            "Microsoft.IndustryDataLifecycle/custodianCollaboratives/rejectDataPackage/action",
            "Microsoft.IndustryDataLifecycle/memberCollaboratives/sharedDataPackages/*",
            "Microsoft.IndustryDataLifecycle/custodianCollaboratives/dataModels/*",
            "Microsoft.IndustryDataLifecycle/custodianCollaboratives/auditLogs/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Device Update Reader",
      "Description": "Gives you read access to management and content operations, but does not allow making changes",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DeviceUpdate/accounts/instances/updates/read",
            "Microsoft.DeviceUpdate/accounts/instances/management/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Device Update Administrator",
      "Description": "Gives you full access to management and content operations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DeviceUpdate/accounts/instances/updates/read",
            "Microsoft.DeviceUpdate/accounts/instances/updates/write",
            "Microsoft.DeviceUpdate/accounts/instances/updates/delete",
            "Microsoft.DeviceUpdate/accounts/instances/management/read",
            "Microsoft.DeviceUpdate/accounts/instances/management/write",
            "Microsoft.DeviceUpdate/accounts/instances/management/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Device Update Content Administrator",
      "Description": "Gives you full access to content operations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DeviceUpdate/accounts/instances/updates/read",
            "Microsoft.DeviceUpdate/accounts/instances/updates/write",
            "Microsoft.DeviceUpdate/accounts/instances/updates/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Device Update Content Reader",
      "Description": "Gives you read access to content operations, but does not allow making changes",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DeviceUpdate/accounts/instances/updates/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Metrics Advisor Administrator",
      "Description": "Full access to the project, including the system level configuration.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/MetricsAdvisor/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Metrics Advisor User",
      "Description": "Access to the project.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/MetricsAdvisor/*"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/MetricsAdvisor/stats/*"
          ]
        }
      ]
    },
    {
      "RoleName": "Schema Registry Reader (Preview)",
      "Description": "Read and list Schema Registry groups and schemas.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EventHub/namespaces/schemagroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventHub/namespaces/schemas/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Schema Registry Contributor (Preview)",
      "Description": "Read, write, and delete Schema Registry groups and schemas.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EventHub/namespaces/schemagroups/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventHub/namespaces/schemas/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AgFood Platform Service Reader",
      "Description": "Provides read access to AgFood Platform Service",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/*/list/action",
            "Microsoft.AgFoodPlatform/*/read",
            "Microsoft.AgFoodPlatform/*/search/action",
            "Microsoft.AgFoodPlatform/*/download/action",
            "Microsoft.AgFoodPlatform/*/overlap/action",
            "Microsoft.AgFoodPlatform/*/checkConsent/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AgFood Platform Service Contributor",
      "Description": "Provides contribute access to AgFood Platform Service",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/*/action",
            "Microsoft.AgFoodPlatform/*/read",
            "Microsoft.AgFoodPlatform/*/write"
          ],
          "not_data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/farmers/write",
            "Microsoft.AgFoodPlatform/farmBeats/deletionJobs/*/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/write",
            "Microsoft.AgFoodPlatform/farmBeats/datasets/write",
            "Microsoft.AgFoodPlatform/farmBeats/datasetRecords/write",
            "Microsoft.AgFoodPlatform/farmBeats/datasets/access/*/action"
          ]
        }
      ]
    },
    {
      "RoleName": "AgFood Platform Service Admin",
      "Description": "Provides admin access to AgFood Platform Service",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Managed HSM contributor",
      "Description": "Lets you manage managed HSM pools, but not access to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.KeyVault/managedHSMs/*",
            "Microsoft.KeyVault/deletedManagedHsms/read",
            "Microsoft.KeyVault/locations/deletedManagedHsms/read",
            "Microsoft.KeyVault/locations/deletedManagedHsms/purge/action",
            "Microsoft.KeyVault/locations/managedHsmOperationResults/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Security Detonation Chamber Submitter",
      "Description": "Allowed to create submissions to Security Detonation Chamber",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SecurityDetonation/chambers/submissions/delete",
            "Microsoft.SecurityDetonation/chambers/submissions/write",
            "Microsoft.SecurityDetonation/chambers/submissions/read",
            "Microsoft.SecurityDetonation/chambers/submissions/files/read",
            "Microsoft.SecurityDetonation/chambers/submissions/accesskeyview/read",
            "Microsoft.SecurityDetonation/chambers/platforms/metadata/read",
            "Microsoft.SecurityDetonation/chambers/workflows/metadata/read",
            "Microsoft.SecurityDetonation/chambers/toolsets/metadata/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SignalR REST API Reader",
      "Description": "Read-only access to Azure SignalR Service REST APIs",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SignalRService/SignalR/group/read",
            "Microsoft.SignalRService/SignalR/clientConnection/read",
            "Microsoft.SignalRService/SignalR/user/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SignalR Service Owner",
      "Description": "Full access to Azure SignalR Service REST APIs",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SignalRService/SignalR/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Reservation Purchaser",
      "Description": "Lets you purchase reservations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Capacity/catalogs/read",
            "Microsoft.Capacity/register/action",
            "Microsoft.Compute/register/action",
            "Microsoft.Consumption/register/action",
            "Microsoft.Consumption/reservationRecommendationDetails/read",
            "Microsoft.Consumption/reservationRecommendations/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.SQL/register/action",
            "Microsoft.Support/supporttickets/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AzureML Metrics Writer (preview)",
      "Description": "Lets you write metrics to AzureML workspace",
      "Permissions": [
        {
          "actions": [
            "Microsoft.MachineLearningServices/workspaces/metrics/*/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Account Backup Contributor",
      "Description": "Lets you perform backup and restore operations using Azure Backup on the storage account.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Authorization/locks/read",
            "Microsoft.Authorization/locks/write",
            "Microsoft.Authorization/locks/delete",
            "Microsoft.Features/features/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/operations/read",
            "Microsoft.Storage/storageAccounts/objectReplicationPolicies/delete",
            "Microsoft.Storage/storageAccounts/objectReplicationPolicies/read",
            "Microsoft.Storage/storageAccounts/objectReplicationPolicies/write",
            "Microsoft.Storage/storageAccounts/objectReplicationPolicies/restorePointMarkers/write",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/write",
            "Microsoft.Storage/storageAccounts/blobServices/read",
            "Microsoft.Storage/storageAccounts/blobServices/write",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/restoreBlobRanges/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Experimentation Metric Contributor",
      "Description": "Allows for creation, writes and reads to the metric set via the metrics service APIs.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Experimentation/experimentWorkspaces/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/read",
            "Microsoft.Experimentation/experimentWorkspaces/experimentationGroups/metricwrite/action",
            "Microsoft.Experimentation/experimentWorkspaces/metricwrite/action",
            "Microsoft.Experimentation/experimentWorkspaces/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Project Babylon Data Curator",
      "Description": "The Microsoft.ProjectBabylon data curator can create, read, modify and delete catalog data objects and establish relationships between objects. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ProjectBabylon/accounts/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ProjectBabylon/accounts/data/read",
            "Microsoft.ProjectBabylon/accounts/data/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Project Babylon Data Reader",
      "Description": "The Microsoft.ProjectBabylon data reader can read catalog data objects. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ProjectBabylon/accounts/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ProjectBabylon/accounts/data/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Project Babylon Data Source Administrator",
      "Description": "The Microsoft.ProjectBabylon data source administrator can manage data sources and data scans. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ProjectBabylon/accounts/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ProjectBabylon/accounts/scan/read",
            "Microsoft.ProjectBabylon/accounts/scan/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Application Group Contributor",
      "Description": "Contributor of the Application Group.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/applicationgroups/*",
            "Microsoft.DesktopVirtualization/hostpools/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/read",
            "Microsoft.DesktopVirtualization/workspaces/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Reader",
      "Description": "Reader of Desktop Virtualization.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Contributor",
      "Description": "Contributor of Desktop Virtualization.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Workspace Contributor",
      "Description": "Contributor of the Desktop Virtualization Workspace.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/workspaces/*",
            "Microsoft.DesktopVirtualization/applicationgroups/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization User Session Operator",
      "Description": "Operator of the Desktop Virtualization Uesr Session.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/hostpools/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Session Host Operator",
      "Description": "Operator of the Desktop Virtualization Session Host.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/hostpools/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Host Pool Reader",
      "Description": "Reader of the Desktop Virtualization Host Pool.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/hostpools/*/read",
            "Microsoft.DesktopVirtualization/hostpools/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Host Pool Contributor",
      "Description": "Contributor of the Desktop Virtualization Host Pool.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/hostpools/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Application Group Reader",
      "Description": "Reader of the Desktop Virtualization Application Group.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/applicationgroups/*/read",
            "Microsoft.DesktopVirtualization/applicationgroups/read",
            "Microsoft.DesktopVirtualization/hostpools/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Application Group Contributor",
      "Description": "Contributor of the Desktop Virtualization Application Group.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/applicationgroups/*",
            "Microsoft.DesktopVirtualization/hostpools/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Workspace Reader",
      "Description": "Reader of the Desktop Virtualization Workspace.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/workspaces/read",
            "Microsoft.DesktopVirtualization/applicationgroups/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Disk Backup Reader",
      "Description": "Provides permission to backup vault to perform disk backup.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/beginGetAccess/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Disk Restore Operator",
      "Description": "Provides permission to backup vault to perform disk restore.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Compute/disks/write",
            "Microsoft.Compute/disks/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Disk Snapshot Contributor",
      "Description": "Provides permission to backup vault to manage disk snapshots.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Compute/snapshots/delete",
            "Microsoft.Compute/snapshots/write",
            "Microsoft.Compute/snapshots/read",
            "Microsoft.Compute/snapshots/beginGetAccess/action",
            "Microsoft.Compute/snapshots/endGetAccess/action",
            "Microsoft.Compute/disks/beginGetAccess/action",
            "Microsoft.Storage/storageAccounts/listkeys/action",
            "Microsoft.Storage/storageAccounts/write",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Microsoft.Kubernetes connected cluster role",
      "Description": "Microsoft.Kubernetes connected cluster role.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Kubernetes/connectedClusters/read",
            "Microsoft.Kubernetes/connectedClusters/write",
            "Microsoft.Kubernetes/connectedClusters/delete",
            "Microsoft.Kubernetes/registeredSubscriptions/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Security Detonation Chamber Submission Manager",
      "Description": "Allowed to create and manage submissions to Security Detonation Chamber",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SecurityDetonation/chambers/submissions/delete",
            "Microsoft.SecurityDetonation/chambers/submissions/write",
            "Microsoft.SecurityDetonation/chambers/submissions/read",
            "Microsoft.SecurityDetonation/chambers/submissions/files/read",
            "Microsoft.SecurityDetonation/chambers/submissions/accesskeyview/read",
            "Microsoft.SecurityDetonation/chambers/submissions/adminview/read",
            "Microsoft.SecurityDetonation/chambers/submissions/analystview/read",
            "Microsoft.SecurityDetonation/chambers/submissions/publicview/read",
            "Microsoft.SecurityDetonation/chambers/platforms/metadata/read",
            "Microsoft.SecurityDetonation/chambers/workflows/metadata/read",
            "Microsoft.SecurityDetonation/chambers/toolsets/metadata/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Security Detonation Chamber Publisher",
      "Description": "Allowed to publish and modify platforms, workflows and toolsets to Security Detonation Chamber",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SecurityDetonation/chambers/platforms/read",
            "Microsoft.SecurityDetonation/chambers/platforms/write",
            "Microsoft.SecurityDetonation/chambers/platforms/delete",
            "Microsoft.SecurityDetonation/chambers/platforms/metadata/read",
            "Microsoft.SecurityDetonation/chambers/workflows/read",
            "Microsoft.SecurityDetonation/chambers/workflows/write",
            "Microsoft.SecurityDetonation/chambers/workflows/delete",
            "Microsoft.SecurityDetonation/chambers/workflows/metadata/read",
            "Microsoft.SecurityDetonation/chambers/toolsets/read",
            "Microsoft.SecurityDetonation/chambers/toolsets/write",
            "Microsoft.SecurityDetonation/chambers/toolsets/delete",
            "Microsoft.SecurityDetonation/chambers/toolsets/metadata/read",
            "Microsoft.SecurityDetonation/chambers/publishRequests/read",
            "Microsoft.SecurityDetonation/chambers/publishRequests/cancel/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Collaborative Runtime Operator",
      "Description": "Can manage resources created by AICS at runtime",
      "Permissions": [
        {
          "actions": [
            "Microsoft.IndustryDataLifecycle/derivedModels/*",
            "Microsoft.IndustryDataLifecycle/pipelineSets/*",
            "Microsoft.IndustryDataLifecycle/modelMappings/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "CosmosRestoreOperator",
      "Description": "Can perform restore action for Cosmos DB database account with continuous backup mode",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DocumentDB/locations/restorableDatabaseAccounts/restore/action",
            "Microsoft.DocumentDB/locations/restorableDatabaseAccounts/*/read",
            "Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "FHIR Data Converter",
      "Description": "Role allows user or principal to convert data from legacy format to FHIR",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/services/fhir/resources/convertData/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/convertData/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Quota Request Operator",
      "Description": "Read and create quota requests, get quota request status, and create support tickets.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Capacity/resourceProviders/locations/serviceLimits/read",
            "Microsoft.Capacity/resourceProviders/locations/serviceLimits/write",
            "Microsoft.Capacity/resourceProviders/locations/serviceLimitsRequests/read",
            "Microsoft.Capacity/register/action",
            "Microsoft.Quota/usages/read",
            "Microsoft.Quota/quotas/read",
            "Microsoft.Quota/quotas/write",
            "Microsoft.Quota/quotaRequests/read",
            "Microsoft.Quota/register/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "EventGrid Contributor",
      "Description": "Lets you manage EventGrid operations.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.EventGrid/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Security Detonation Chamber Reader",
      "Description": "Allowed to query submission info and files from Security Detonation Chamber",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SecurityDetonation/chambers/submissions/read",
            "Microsoft.SecurityDetonation/chambers/submissions/files/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Object Anchors Account Reader",
      "Description": "Lets you read ingestion jobs for an object anchors account.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/ObjectAnchorsAccounts/ingest/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Object Anchors Account Owner",
      "Description": "Provides user with ingestion capabilities for an object anchors account.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/ObjectAnchorsAccounts/ingest/action",
            "Microsoft.MixedReality/ObjectAnchorsAccounts/ingest/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "WorkloadBuilder Migration Agent Role",
      "Description": "WorkloadBuilder Migration Agent Role.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.WorkloadBuilder/migrationAgents/Read",
            "Microsoft.WorkloadBuilder/migrationAgents/Write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Cloud Data Reader",
      "Description": "Allow read access to Azure Spring Cloud Data",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/*/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Speech Contributor",
      "Description": "Full access to Speech projects, including read, write and delete all entities, for real-time speech recognition and batch transcription tasks, real-time speech synthesis and long audio tasks, custom speech and custom voice.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/SpeechServices/*",
            "Microsoft.CognitiveServices/accounts/CustomVoice/*",
            "Microsoft.CognitiveServices/accounts/AudioContentCreation/*",
            "Microsoft.CognitiveServices/accounts/VideoTranslation/*",
            "Microsoft.CognitiveServices/accounts/CustomAvatar/*",
            "Microsoft.CognitiveServices/accounts/BatchAvatar/*",
            "Microsoft.CognitiveServices/accounts/BatchTextToSpeech/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Face Recognizer",
      "Description": "Lets you perform detect, verify, identify, group, and find similar operations on Face API. This role does not allow create or delete operations, which makes it well suited for endpoints that only need inferencing capabilities, following 'least privilege' best practices.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/Face/detect/action",
            "Microsoft.CognitiveServices/accounts/Face/verify/action",
            "Microsoft.CognitiveServices/accounts/Face/identify/action",
            "Microsoft.CognitiveServices/accounts/Face/group/action",
            "Microsoft.CognitiveServices/accounts/Face/findsimilars/action",
            "Microsoft.CognitiveServices/accounts/Face/detectliveness/multimodal/action",
            "Microsoft.CognitiveServices/accounts/Face/detectliveness/singlemodal/action",
            "Microsoft.CognitiveServices/accounts/Face/detectlivenesswithverify/singlemodal/action",
            "Microsoft.CognitiveServices/accounts/Face/*/sessions/action",
            "Microsoft.CognitiveServices/accounts/Face/*/sessions/delete",
            "Microsoft.CognitiveServices/accounts/Face/*/sessions/read",
            "Microsoft.CognitiveServices/accounts/Face/*/sessions/audit/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Media Services Account Administrator",
      "Description": "Create, read, modify, and delete Media Services accounts; read-only access to other Media Services resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Media/mediaservices/*/read",
            "Microsoft.Media/mediaservices/assets/listStreamingLocators/action",
            "Microsoft.Media/mediaservices/streamingLocators/listPaths/action",
            "Microsoft.Media/mediaservices/write",
            "Microsoft.Media/mediaservices/delete",
            "Microsoft.Media/mediaservices/privateEndpointConnectionsApproval/action",
            "Microsoft.Media/mediaservices/privateEndpointConnections/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Media Services Live Events Administrator",
      "Description": "Create, read, modify, and delete Live Events, Assets, Asset Filters, and Streaming Locators; read-only access to other Media Services resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Media/mediaservices/*/read",
            "Microsoft.Media/mediaservices/assets/*",
            "Microsoft.Media/mediaservices/assets/assetfilters/*",
            "Microsoft.Media/mediaservices/streamingLocators/*",
            "Microsoft.Media/mediaservices/liveEvents/*"
          ],
          "not_actions": [
            "Microsoft.Media/mediaservices/assets/getEncryptionKey/action",
            "Microsoft.Media/mediaservices/streamingLocators/listContentKeys/action"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Media Services Media Operator",
      "Description": "Create, read, modify, and delete Assets, Asset Filters, Streaming Locators, and Jobs; read-only access to other Media Services resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Media/mediaservices/*/read",
            "Microsoft.Media/mediaservices/assets/*",
            "Microsoft.Media/mediaservices/assets/assetfilters/*",
            "Microsoft.Media/mediaservices/streamingLocators/*",
            "Microsoft.Media/mediaservices/transforms/jobs/*"
          ],
          "not_actions": [
            "Microsoft.Media/mediaservices/assets/getEncryptionKey/action",
            "Microsoft.Media/mediaservices/streamingLocators/listContentKeys/action"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Media Services Policy Administrator",
      "Description": "Create, read, modify, and delete Account Filters, Streaming Policies, Content Key Policies, and Transforms; read-only access to other Media Services resources. Cannot create Jobs, Assets or Streaming resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Media/mediaservices/*/read",
            "Microsoft.Media/mediaservices/assets/listStreamingLocators/action",
            "Microsoft.Media/mediaservices/streamingLocators/listPaths/action",
            "Microsoft.Media/mediaservices/accountFilters/*",
            "Microsoft.Media/mediaservices/streamingPolicies/*",
            "Microsoft.Media/mediaservices/contentKeyPolicies/*",
            "Microsoft.Media/mediaservices/transforms/*"
          ],
          "not_actions": [
            "Microsoft.Media/mediaservices/contentKeyPolicies/getPolicyPropertiesWithSecrets/action"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Media Services Streaming Endpoints Administrator",
      "Description": "Create, read, modify, and delete Streaming Endpoints; read-only access to other Media Services resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Media/mediaservices/*/read",
            "Microsoft.Media/mediaservices/assets/listStreamingLocators/action",
            "Microsoft.Media/mediaservices/streamingLocators/listPaths/action",
            "Microsoft.Media/mediaservices/streamingEndpoints/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Stream Analytics Query Tester",
      "Description": "Lets you perform query testing without creating a stream analytics job first",
      "Permissions": [
        {
          "actions": [
            "Microsoft.StreamAnalytics/locations/TestQuery/action",
            "Microsoft.StreamAnalytics/locations/OperationResults/read",
            "Microsoft.StreamAnalytics/locations/SampleInput/action",
            "Microsoft.StreamAnalytics/locations/CompileQuery/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AnyBuild Builder",
      "Description": "Basic user role for AnyBuild. This role allows listing of agent information and execution of remote build capabilities.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AnyBuild/clusters/build/write",
            "Microsoft.AnyBuild/clusters/build/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "IoT Hub Data Reader",
      "Description": "Allows for full read access to IoT Hub data-plane properties",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Devices/IotHubs/*/read",
            "Microsoft.Devices/IotHubs/fileUpload/notifications/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "IoT Hub Twin Contributor",
      "Description": "Allows for read and write access to all IoT Hub device and module twins.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Devices/IotHubs/twins/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "IoT Hub Registry Contributor",
      "Description": "Allows for full access to IoT Hub device registry.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Devices/IotHubs/devices/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "IoT Hub Data Contributor",
      "Description": "Allows for full access to IoT Hub data plane operations.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Devices/IotHubs/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Test Base Reader",
      "Description": "Let you view and download packages and test results.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.TestBase/testBaseAccounts/packages/testResults/getDownloadUrl/action",
            "Microsoft.TestBase/testBaseAccounts/packages/testResults/getVideoDownloadUrl/action",
            "Microsoft.TestBase/testBaseAccounts/packages/getDownloadUrl/action",
            "Microsoft.TestBase/*/read",
            "Microsoft.TestBase/testBaseAccounts/customerEvents/write",
            "Microsoft.TestBase/testBaseAccounts/customerEvents/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Search Index Data Reader",
      "Description": "Grants read access to Azure Cognitive Search index data.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Search/searchServices/indexes/documents/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Search Index Data Contributor",
      "Description": "Grants full access to Azure Cognitive Search index data.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Search/searchServices/indexes/documents/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Table Data Reader",
      "Description": "Allows for read access to Azure Storage tables and entities",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/tableServices/tables/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/tableServices/tables/entities/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Table Data Contributor",
      "Description": "Allows for read, write and delete access to Azure Storage tables and entities",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/tableServices/tables/read",
            "Microsoft.Storage/storageAccounts/tableServices/tables/write",
            "Microsoft.Storage/storageAccounts/tableServices/tables/delete"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/tableServices/tables/entities/read",
            "Microsoft.Storage/storageAccounts/tableServices/tables/entities/write",
            "Microsoft.Storage/storageAccounts/tableServices/tables/entities/delete",
            "Microsoft.Storage/storageAccounts/tableServices/tables/entities/add/action",
            "Microsoft.Storage/storageAccounts/tableServices/tables/entities/update/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DICOM Data Reader",
      "Description": "Read and search DICOM data.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/workspaces/dicomservices/resources/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DICOM Data Owner",
      "Description": "Full access to DICOM data.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/workspaces/dicomservices/resources/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "EventGrid Data Sender",
      "Description": "Allows send access to event grid events.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.EventGrid/topics/read",
            "Microsoft.EventGrid/domains/read",
            "Microsoft.EventGrid/partnerNamespaces/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.EventGrid/namespaces/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventGrid/events/send/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Disk Pool Operator",
      "Description": "Used by the StoragePool Resource Provider to manage Disks added to a Disk Pool.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/disks/write",
            "Microsoft.Compute/disks/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AzureML Data Scientist",
      "Description": "Can perform all actions within an Azure Machine Learning workspace, except for creating or deleting compute resources and modifying the workspace itself.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.MachineLearningServices/workspaces/*/read",
            "Microsoft.MachineLearningServices/workspaces/*/action",
            "Microsoft.MachineLearningServices/workspaces/*/delete",
            "Microsoft.MachineLearningServices/workspaces/*/write"
          ],
          "not_actions": [
            "Microsoft.MachineLearningServices/workspaces/delete",
            "Microsoft.MachineLearningServices/workspaces/write",
            "Microsoft.MachineLearningServices/workspaces/computes/*/write",
            "Microsoft.MachineLearningServices/workspaces/computes/*/delete",
            "Microsoft.MachineLearningServices/workspaces/computes/listKeys/action",
            "Microsoft.MachineLearningServices/workspaces/listKeys/action",
            "Microsoft.MachineLearningServices/workspaces/hubs/write",
            "Microsoft.MachineLearningServices/workspaces/hubs/delete",
            "Microsoft.MachineLearningServices/workspaces/featurestores/write",
            "Microsoft.MachineLearningServices/workspaces/featurestores/delete"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Grafana Admin",
      "Description": "Manage server-wide settings and manage access to resources such as organizations, users, and licenses.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Dashboard/grafana/ActAsGrafanaAdmin/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Connected SQL Server Onboarding",
      "Description": "Microsoft.AzureArcData\u00a0service\u00a0role\u00a0to\u00a0access\u00a0the\u00a0resources\u00a0of\u00a0Microsoft.AzureArcData\u00a0stored\u00a0with\u00a0RPSAAS.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureArcData/sqlServerInstances/read",
            "Microsoft.AzureArcData/sqlServerInstances/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Relay Sender",
      "Description": "Allows for send access to Azure Relay resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Relay/*/wcfRelays/read",
            "Microsoft.Relay/*/hybridConnections/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Relay/*/send/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Relay Owner",
      "Description": "Allows for full access to Azure Relay resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Relay/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Relay/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Relay Listener",
      "Description": "Allows for listen access to Azure Relay resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Relay/*/wcfRelays/read",
            "Microsoft.Relay/*/hybridConnections/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Relay/*/listen/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Reservations Reader",
      "Description": "Lets one read all the reservations in a tenant",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Capacity/*/read",
            "Microsoft.Authorization/roleAssignments/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Reservations Administrator",
      "Description": "Lets one read and manage all the reservations in a tenant",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Capacity/*/read",
            "Microsoft.Capacity/*/action",
            "Microsoft.Capacity/*/write",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read",
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Grafana Viewer",
      "Description": "View dashboards, playlists, and query data sources.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Dashboard/grafana/ActAsGrafanaViewer/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Grafana Editor",
      "Description": "Create, edit, delete, or view dashboards; create, edit, or delete folders; and edit or view playlists.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Dashboard/grafana/ActAsGrafanaEditor/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Automation Contributor",
      "Description": "Manage azure automation resources and other resources using azure automation.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Automation/automationAccounts/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Insights/ActionGroups/*",
            "Microsoft.Insights/ActivityLogAlerts/*",
            "Microsoft.Insights/MetricAlerts/*",
            "Microsoft.Insights/ScheduledQueryRules/*",
            "Microsoft.Insights/diagnosticSettings/*",
            "Microsoft.OperationalInsights/workspaces/sharedKeys/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Kubernetes Extension Contributor",
      "Description": "Can create, update, get, list and delete Kubernetes Extensions, and get extension async operations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.KubernetesConfiguration/extensions/write",
            "Microsoft.KubernetesConfiguration/extensions/read",
            "Microsoft.KubernetesConfiguration/extensions/delete",
            "Microsoft.KubernetesConfiguration/extensions/operations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Device Provisioning Service Data Reader",
      "Description": "Allows for full read access to Device Provisioning Service data-plane properties.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Devices/provisioningServices/*/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Device Provisioning Service Data Contributor",
      "Description": "Allows for full access to Device Provisioning Service data-plane operations.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Devices/provisioningServices/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Trusted Signing Certificate Profile Signer",
      "Description": "Sign files with a certificate profile. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CodeSigning/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CodeSigning/certificateProfiles/Sign/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Cloud Service Registry Reader",
      "Description": "Allow read access to Azure Spring Cloud Service Registry",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/eurekaService/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Cloud Service Registry Contributor",
      "Description": "Allow read, write and delete access to Azure Spring Cloud Service Registry",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/eurekaService/read",
            "Microsoft.AppPlatform/Spring/eurekaService/write",
            "Microsoft.AppPlatform/Spring/eurekaService/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Cloud Config Server Reader",
      "Description": "Allow read access to Azure Spring Cloud Config Server",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/configService/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Cloud Config Server Contributor",
      "Description": "Allow read, write and delete access to Azure Spring Cloud Config Server",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/configService/read",
            "Microsoft.AppPlatform/Spring/configService/write",
            "Microsoft.AppPlatform/Spring/configService/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure VM Managed identities restore Contributor",
      "Description": "Azure VM Managed identities restore Contributors are allowed to perform Azure VM Restores with managed identities both user and system",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Maps Search and Render Data Reader",
      "Description": "Grants access to very limited set of data APIs for common visual web SDK scenarios. Specifically, render and search data APIs.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Maps/accounts/services/render/read",
            "Microsoft.Maps/accounts/services/search/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Maps Contributor",
      "Description": "Grants access all Azure Maps resource management.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Maps/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc VMware VM Contributor",
      "Description": "Arc VMware VM Contributor has permissions to perform all VM actions.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ConnectedVMwarevSphere/virtualmachines/*",
            "Microsoft.ConnectedVMwarevSphere/virtualmachineinstances/*",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridCompute/machines/delete",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action",
            "Microsoft.HybridCompute/machines/assessPatches/action",
            "Microsoft.HybridCompute/machines/installPatches/action",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.HybridCompute/machines/extensions/delete",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.HybridCompute/locations/operationresults/read",
            "Microsoft.HybridCompute/locations/operationstatus/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/softwarePatches/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/softwarePatches/read",
            "Microsoft.HybridCompute/locations/updateCenterOperationResults/read",
            "Microsoft.HybridCompute/machines/hybridIdentityMetadata/read",
            "Microsoft.HybridCompute/osType/agentVersions/read",
            "Microsoft.HybridCompute/osType/agentVersions/latest/read",
            "Microsoft.HybridCompute/machines/runcommands/read",
            "Microsoft.HybridCompute/machines/runcommands/write",
            "Microsoft.HybridCompute/machines/runcommands/delete",
            "Microsoft.HybridCompute/machines/licenseProfiles/read",
            "Microsoft.HybridCompute/machines/licenseProfiles/write",
            "Microsoft.HybridCompute/machines/licenseProfiles/delete",
            "Microsoft.HybridCompute/licenses/read",
            "Microsoft.HybridCompute/licenses/write",
            "Microsoft.HybridCompute/licenses/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc VMware Private Cloud User",
      "Description": "Azure Arc VMware Private Cloud User has permissions to use the VMware cloud resources to deploy VMs.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ConnectedVMwarevSphere/virtualnetworks/join/action",
            "Microsoft.ConnectedVMwarevSphere/virtualnetworks/Read",
            "Microsoft.ConnectedVMwarevSphere/virtualmachinetemplates/clone/action",
            "Microsoft.ConnectedVMwarevSphere/virtualmachinetemplates/Read",
            "Microsoft.ConnectedVMwarevSphere/resourcepools/deploy/action",
            "Microsoft.ConnectedVMwarevSphere/resourcepools/Read",
            "Microsoft.ConnectedVMwarevSphere/hosts/deploy/action",
            "Microsoft.ConnectedVMwarevSphere/hosts/Read",
            "Microsoft.ConnectedVMwarevSphere/clusters/deploy/action",
            "Microsoft.ConnectedVMwarevSphere/clusters/Read",
            "Microsoft.ConnectedVMwarevSphere/datastores/allocateSpace/action",
            "Microsoft.ConnectedVMwarevSphere/datastores/Read",
            "Microsoft.ExtendedLocation/customLocations/Read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.KubernetesConfiguration/extensions/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc VMware Administrator role ",
      "Description": "Arc VMware VM Contributor has permissions to perform all connected VMwarevSphere actions.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ConnectedVMwarevSphere/*",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridCompute/machines/delete",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action",
            "Microsoft.HybridCompute/machines/assessPatches/action",
            "Microsoft.HybridCompute/machines/installPatches/action",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.HybridCompute/machines/extensions/delete",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.HybridCompute/locations/operationresults/read",
            "Microsoft.HybridCompute/locations/operationstatus/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/softwarePatches/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/softwarePatches/read",
            "Microsoft.HybridCompute/locations/updateCenterOperationResults/read",
            "Microsoft.HybridCompute/machines/hybridIdentityMetadata/read",
            "Microsoft.HybridCompute/osType/agentVersions/read",
            "Microsoft.HybridCompute/osType/agentVersions/latest/read",
            "Microsoft.HybridCompute/machines/runcommands/read",
            "Microsoft.HybridCompute/machines/runcommands/write",
            "Microsoft.HybridCompute/machines/runcommands/delete",
            "Microsoft.HybridCompute/machines/licenseProfiles/read",
            "Microsoft.HybridCompute/machines/licenseProfiles/write",
            "Microsoft.HybridCompute/machines/licenseProfiles/delete",
            "Microsoft.HybridCompute/licenses/read",
            "Microsoft.HybridCompute/licenses/write",
            "Microsoft.HybridCompute/licenses/delete",
            "Microsoft.ExtendedLocation/customLocations/read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.KubernetesConfiguration/extensions/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services LUIS Owner",
      "Description": " Has access to all Read, Test, Write, Deploy and Delete functions under LUIS",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.CognitiveServices/accounts/listkeys/action",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/LUIS/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Language Reader",
      "Description": "Has access to Read and Test functions under Language portal",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/LanguageAuthoring/*/read",
            "Microsoft.CognitiveServices/accounts/ConversationalLanguageUnderstanding/*/read",
            "Microsoft.CognitiveServices/accounts/ConversationalLanguageUnderstanding/projects/export/action",
            "Microsoft.CognitiveServices/accounts/Language/*/read",
            "Microsoft.CognitiveServices/accounts/Language/*/projects/export/action",
            "Microsoft.CognitiveServices/accounts/Language/query-text/action",
            "Microsoft.CognitiveServices/accounts/Language/query-dataverse/action",
            "Microsoft.CognitiveServices/accounts/Language/analyze-text/jobs/action",
            "Microsoft.CognitiveServices/accounts/Language/analyze-text/action",
            "Microsoft.CognitiveServices/accounts/Language/analyze-text/jobscancel/action",
            "Microsoft.CognitiveServices/accounts/Language/analyze-conversations/action",
            "Microsoft.CognitiveServices/accounts/Language/analyze-conversations/jobscancel/action",
            "Microsoft.CognitiveServices/accounts/Language/analyze-conversations/jobs/action",
            "Microsoft.CognitiveServices/accounts/Language/query-knowledgebases/action",
            "Microsoft.CognitiveServices/accounts/Language/generate/action",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/*"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnaMaker/*"
          ]
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Language Writer",
      "Description": " Has access to all Read, Test, and Write functions under Language Portal",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/LanguageAuthoring/*",
            "Microsoft.CognitiveServices/accounts/ConversationalLanguageUnderstanding/*",
            "Microsoft.CognitiveServices/accounts/Language/*",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/*"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/LanguageAuthoring/projects/publish/action",
            "Microsoft.CognitiveServices/accounts/ConversationalLanguageUnderstanding/projects/deployments/write",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnaMaker/*",
            "Microsoft.CognitiveServices/accounts/Language/*/projects/delete",
            "Microsoft.CognitiveServices/accounts/Language/*/projects/deployments/write",
            "Microsoft.CognitiveServices/accounts/Language/*/projects/deployments/delete",
            "Microsoft.CognitiveServices/accounts/Language/*/projects/deployments/swap/action"
          ]
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Language Owner",
      "Description": "Has access to all Read, Test, Write, Deploy and Delete functions under Language portal",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.CognitiveServices/accounts/listkeys/action",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/LanguageAuthoring/*",
            "Microsoft.CognitiveServices/accounts/ConversationalLanguageUnderstanding/*",
            "Microsoft.CognitiveServices/accounts/Language/*",
            "Microsoft.CognitiveServices/accounts/TextAnalytics/*"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/TextAnalytics/QnaMaker/*"
          ]
        }
      ]
    },
    {
      "RoleName": "Cognitive Services LUIS Reader",
      "Description": "Has access to Read and Test functions under LUIS.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/LUIS/*/read",
            "Microsoft.CognitiveServices/accounts/LUIS/apps/testdatasets/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services LUIS Writer",
      "Description": "Has access to all Read, Test, and Write functions under LUIS",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/LUIS/*"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/LUIS/apps/delete",
            "Microsoft.CognitiveServices/accounts/LUIS/apps/move/action",
            "Microsoft.CognitiveServices/accounts/LUIS/apps/publish/action",
            "Microsoft.CognitiveServices/accounts/LUIS/apps/settings/write",
            "Microsoft.CognitiveServices/accounts/LUIS/apps/azureaccounts/action",
            "Microsoft.CognitiveServices/accounts/LUIS/apps/azureaccounts/delete"
          ]
        }
      ]
    },
    {
      "RoleName": "PlayFab Reader",
      "Description": "Provides read access to PlayFab resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.PlayFab/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Load Test Contributor",
      "Description": "View, create, update, delete and execute load tests. View and list load test resources but can not make any changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.LoadTestService/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.LoadTestService/loadtests/*",
            "Microsoft.LoadTestService/testProfiles/*",
            "Microsoft.LoadTestService/testProfileRuns/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Load Test Owner",
      "Description": "Execute all operations on load test resources and load tests",
      "Permissions": [
        {
          "actions": [
            "Microsoft.LoadTestService/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.LoadTestService/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "PlayFab Contributor",
      "Description": "Provides contributor access to PlayFab resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.PlayFab/*/read",
            "Microsoft.PlayFab/*/write",
            "Microsoft.PlayFab/*/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Load Test Reader",
      "Description": "View and list all load tests and load test resources but can not make any changes",
      "Permissions": [
        {
          "actions": [
            "Microsoft.LoadTestService/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.LoadTestService/loadtests/readTest/action",
            "Microsoft.LoadTestService/testProfiles/read",
            "Microsoft.LoadTestService/testProfileRuns/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Immersive Reader User",
      "Description": "Provides access to create Immersive Reader sessions and call APIs",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/ImmersiveReader/getcontentmodelforreader/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Lab Services Contributor",
      "Description": "The lab services contributor role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.LabServices/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.LabServices/labPlans/createLab/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Lab Services Reader",
      "Description": "The lab services reader role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.LabServices/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Lab Assistant",
      "Description": "The lab assistant role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.LabServices/labPlans/images/read",
            "Microsoft.LabServices/labPlans/read",
            "Microsoft.LabServices/labs/read",
            "Microsoft.LabServices/labs/schedules/read",
            "Microsoft.LabServices/labs/users/read",
            "Microsoft.LabServices/labs/users/invite/action",
            "Microsoft.LabServices/labs/virtualMachines/read",
            "Microsoft.LabServices/labs/virtualMachines/start/action",
            "Microsoft.LabServices/labs/virtualMachines/stop/action",
            "Microsoft.LabServices/labs/virtualMachines/reimage/action",
            "Microsoft.LabServices/labs/virtualMachines/redeploy/action",
            "Microsoft.LabServices/locations/usages/read",
            "Microsoft.LabServices/skus/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Lab Operator",
      "Description": "The lab operator role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.LabServices/labPlans/images/read",
            "Microsoft.LabServices/labPlans/read",
            "Microsoft.LabServices/labPlans/saveImage/action",
            "Microsoft.LabServices/labs/publish/action",
            "Microsoft.LabServices/labs/read",
            "Microsoft.LabServices/labs/schedules/read",
            "Microsoft.LabServices/labs/schedules/write",
            "Microsoft.LabServices/labs/schedules/delete",
            "Microsoft.LabServices/labs/users/read",
            "Microsoft.LabServices/labs/users/write",
            "Microsoft.LabServices/labs/users/delete",
            "Microsoft.LabServices/labs/users/invite/action",
            "Microsoft.LabServices/labs/virtualMachines/read",
            "Microsoft.LabServices/labs/virtualMachines/start/action",
            "Microsoft.LabServices/labs/virtualMachines/stop/action",
            "Microsoft.LabServices/labs/virtualMachines/reimage/action",
            "Microsoft.LabServices/labs/virtualMachines/redeploy/action",
            "Microsoft.LabServices/labs/virtualMachines/resetPassword/action",
            "Microsoft.LabServices/locations/usages/read",
            "Microsoft.LabServices/skus/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Lab Contributor",
      "Description": "The lab contributor role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.LabServices/labPlans/images/read",
            "Microsoft.LabServices/labPlans/read",
            "Microsoft.LabServices/labPlans/saveImage/action",
            "Microsoft.LabServices/labs/read",
            "Microsoft.LabServices/labs/write",
            "Microsoft.LabServices/labs/delete",
            "Microsoft.LabServices/labs/publish/action",
            "Microsoft.LabServices/labs/syncGroup/action",
            "Microsoft.LabServices/labs/schedules/read",
            "Microsoft.LabServices/labs/schedules/write",
            "Microsoft.LabServices/labs/schedules/delete",
            "Microsoft.LabServices/labs/users/read",
            "Microsoft.LabServices/labs/users/write",
            "Microsoft.LabServices/labs/users/delete",
            "Microsoft.LabServices/labs/users/invite/action",
            "Microsoft.LabServices/labs/virtualMachines/read",
            "Microsoft.LabServices/labs/virtualMachines/start/action",
            "Microsoft.LabServices/labs/virtualMachines/stop/action",
            "Microsoft.LabServices/labs/virtualMachines/reimage/action",
            "Microsoft.LabServices/labs/virtualMachines/redeploy/action",
            "Microsoft.LabServices/labs/virtualMachines/resetPassword/action",
            "Microsoft.LabServices/locations/usages/read",
            "Microsoft.LabServices/skus/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.LabServices/labPlans/createLab/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Security Admin",
      "Description": "Security Admin Role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Authorization/policyAssignments/*",
            "Microsoft.Authorization/policyDefinitions/*",
            "Microsoft.Authorization/policyExemptions/*",
            "Microsoft.Authorization/policySetDefinitions/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.operationalInsights/workspaces/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Security/*",
            "Microsoft.IoTSecurity/*",
            "Microsoft.IoTFirmwareDefense/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Web PubSub Service Owner",
      "Description": "Full access to Azure Web PubSub Service REST APIs",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SignalRService/WebPubSub/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Web PubSub Service Reader",
      "Description": "Read-only access to Azure Web PubSub Service REST APIs",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SignalRService/WebPubSub/*/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SignalR App Server",
      "Description": "Lets your app server access SignalR Service with AAD auth options.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.SignalRService/SignalR/auth/accessKey/action",
            "Microsoft.SignalRService/SignalR/serverConnection/write",
            "Microsoft.SignalRService/SignalR/clientConnection/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Virtual Machine User Login",
      "Description": "View Virtual Machines in the portal and login as a regular user.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Compute/virtualMachines/*/read",
            "Microsoft.HybridCompute/machines/*/read",
            "Microsoft.HybridConnectivity/endpoints/listCredentials/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Compute/virtualMachines/login/action",
            "Microsoft.HybridCompute/machines/login/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Virtual Machine Administrator Login",
      "Description": "View Virtual Machines in the portal and login as administrator",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Compute/virtualMachines/*/read",
            "Microsoft.HybridCompute/machines/*/read",
            "Microsoft.HybridConnectivity/endpoints/listCredentials/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Compute/virtualMachines/login/action",
            "Microsoft.Compute/virtualMachines/loginAsAdmin/action",
            "Microsoft.HybridCompute/machines/login/action",
            "Microsoft.HybridCompute/machines/loginAsAdmin/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Connected Machine Resource Administrator",
      "Description": "Can read, write, delete and re-onboard Azure Connected Machines.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridCompute/machines/*",
            "Microsoft.HybridCompute/machines/extensions/*",
            "Microsoft.HybridCompute/machines/licenseProfiles/*",
            "Microsoft.HybridCompute/machines/runCommands/*",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action",
            "Microsoft.HybridCompute/privateLinkScopes/*",
            "Microsoft.HybridCompute/licenses/*",
            "Microsoft.HybridCompute/locations/*",
            "Microsoft.HybridCompute/*/read",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Backup Operator",
      "Description": "Lets you manage backup services, except removal of backup, vault creation and giving access to others",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/backup/action",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/operationsStatus/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/provisionInstantItemRecovery/action",
            "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/accessToken/action",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/restore/action",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/recoveryPoints/revokeInstantItemRecovery/action",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/protectedItems/write",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/refreshContainers/action",
            "Microsoft.RecoveryServices/Vaults/backupJobs/*",
            "Microsoft.RecoveryServices/Vaults/backupJobsExport/action",
            "Microsoft.RecoveryServices/Vaults/backupOperationResults/*",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/read",
            "Microsoft.RecoveryServices/Vaults/backupProtectableItems/*",
            "Microsoft.RecoveryServices/Vaults/backupProtectedItems/read",
            "Microsoft.RecoveryServices/Vaults/backupProtectionContainers/read",
            "Microsoft.RecoveryServices/Vaults/backupUsageSummaries/read",
            "Microsoft.RecoveryServices/Vaults/certificates/write",
            "Microsoft.RecoveryServices/Vaults/extendedInformation/read",
            "Microsoft.RecoveryServices/Vaults/extendedInformation/write",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/read",
            "Microsoft.RecoveryServices/Vaults/monitoringConfigurations/*",
            "Microsoft.RecoveryServices/Vaults/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/operationResults/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/read",
            "Microsoft.RecoveryServices/Vaults/registeredIdentities/write",
            "Microsoft.RecoveryServices/Vaults/usages/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.RecoveryServices/Vaults/backupstorageconfig/*",
            "Microsoft.RecoveryServices/Vaults/backupValidateOperation/action",
            "Microsoft.RecoveryServices/Vaults/backupTriggerValidateOperation/action",
            "Microsoft.RecoveryServices/Vaults/backupValidateOperationResults/read",
            "Microsoft.RecoveryServices/Vaults/backupValidateOperationsStatuses/read",
            "Microsoft.RecoveryServices/Vaults/backupOperations/read",
            "Microsoft.RecoveryServices/Vaults/backupPolicies/operations/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/write",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/inquire/action",
            "Microsoft.RecoveryServices/Vaults/backupEngines/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/backupProtectionIntent/write",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/backupProtectionIntent/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectableContainers/read",
            "Microsoft.RecoveryServices/Vaults/backupFabrics/protectionContainers/items/read",
            "Microsoft.RecoveryServices/locations/backupStatus/action",
            "Microsoft.RecoveryServices/locations/backupPreValidateProtection/action",
            "Microsoft.RecoveryServices/locations/backupValidateFeatures/action",
            "Microsoft.RecoveryServices/locations/backupAadProperties/read",
            "Microsoft.RecoveryServices/locations/backupCrrJobs/action",
            "Microsoft.RecoveryServices/locations/backupCrrJob/action",
            "Microsoft.RecoveryServices/locations/backupCrossRegionRestore/action",
            "Microsoft.RecoveryServices/locations/backupCrrOperationResults/read",
            "Microsoft.RecoveryServices/locations/backupCrrOperationsStatus/read",
            "Microsoft.RecoveryServices/Vaults/monitoringAlerts/write",
            "Microsoft.RecoveryServices/operations/read",
            "Microsoft.RecoveryServices/locations/operationStatus/read",
            "Microsoft.RecoveryServices/Vaults/backupProtectionIntents/read",
            "Microsoft.Support/*",
            "Microsoft.DataProtection/backupVaults/backupInstances/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/operationResults/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/write",
            "Microsoft.DataProtection/backupVaults/deletedBackupInstances/read",
            "Microsoft.DataProtection/backupVaults/backupPolicies/read",
            "Microsoft.DataProtection/backupVaults/backupPolicies/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/recoveryPoints/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/recoveryPoints/read",
            "Microsoft.DataProtection/backupVaults/backupInstances/findRestorableTimeRanges/action",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/backupVaults/operationResults/read",
            "Microsoft.DataProtection/backupVaults/operationStatus/read",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/backupVaults/read",
            "Microsoft.DataProtection/locations/operationStatus/read",
            "Microsoft.DataProtection/locations/operationResults/read",
            "Microsoft.DataProtection/operations/read",
            "Microsoft.DataProtection/backupVaults/validateForBackup/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/backup/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/validateRestore/action",
            "Microsoft.DataProtection/backupVaults/backupInstances/restore/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/crossRegionRestore/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/validateCrossRegionRestore/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchCrossRegionRestoreJobs/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchCrossRegionRestoreJob/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/fetchSecondaryRecoveryPoints/action",
            "Microsoft.DataProtection/locations/checkFeatureSupport/action",
            "Microsoft.RecoveryServices/Vaults/backupResourceGuardProxies/delete",
            "Microsoft.RecoveryServices/Vaults/backupResourceGuardProxies/read",
            "Microsoft.RecoveryServices/Vaults/backupResourceGuardProxies/unlockDelete/action",
            "Microsoft.RecoveryServices/Vaults/backupResourceGuardProxies/write",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/read",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/write",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/delete",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/unlockDelete/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Workbook Contributor",
      "Description": "Can save shared workbooks.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/workbooks/write",
            "Microsoft.Insights/workbooks/delete",
            "Microsoft.Insights/workbooks/read",
            "Microsoft.Insights/workbooks/revisions/read",
            "Microsoft.Insights/workbooktemplates/write",
            "Microsoft.Insights/workbooktemplates/delete",
            "Microsoft.Insights/workbooktemplates/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Workbook Reader",
      "Description": "Can read workbooks.",
      "Permissions": [
        {
          "actions": [
            "microsoft.insights/workbooks/read",
            "microsoft.insights/workbooks/revisions/read",
            "microsoft.insights/workbooktemplates/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Monitoring Contributor",
      "Description": "Can read all monitoring data and update monitoring settings.",
      "Permissions": [
        {
          "actions": [
            "*/read",
            "Microsoft.AlertsManagement/alerts/*",
            "Microsoft.AlertsManagement/alertsSummary/*",
            "Microsoft.Insights/actiongroups/*",
            "Microsoft.Insights/activityLogAlerts/*",
            "Microsoft.Insights/AlertRules/*",
            "Microsoft.Insights/components/*",
            "Microsoft.Insights/createNotifications/*",
            "Microsoft.Insights/dataCollectionEndpoints/*",
            "Microsoft.Insights/dataCollectionRules/*",
            "Microsoft.Insights/dataCollectionRuleAssociations/*",
            "Microsoft.Insights/DiagnosticSettings/*",
            "Microsoft.Insights/eventtypes/*",
            "Microsoft.Insights/LogDefinitions/*",
            "Microsoft.Insights/metricalerts/*",
            "Microsoft.Insights/MetricDefinitions/*",
            "Microsoft.Insights/Metrics/*",
            "Microsoft.Insights/notificationStatus/*",
            "Microsoft.Insights/Register/Action",
            "Microsoft.Insights/scheduledqueryrules/*",
            "Microsoft.Insights/webtests/*",
            "Microsoft.Insights/workbooks/*",
            "Microsoft.Insights/workbooktemplates/*",
            "Microsoft.Insights/privateLinkScopes/*",
            "Microsoft.Insights/privateLinkScopeOperationStatuses/*",
            "Microsoft.OperationalInsights/workspaces/write",
            "Microsoft.OperationalInsights/workspaces/intelligencepacks/*",
            "Microsoft.OperationalInsights/workspaces/savedSearches/*",
            "Microsoft.OperationalInsights/workspaces/search/action",
            "Microsoft.OperationalInsights/workspaces/sharedKeys/action",
            "Microsoft.OperationalInsights/workspaces/storageinsightconfigs/*",
            "Microsoft.Support/*",
            "Microsoft.AlertsManagement/smartDetectorAlertRules/*",
            "Microsoft.AlertsManagement/actionRules/*",
            "Microsoft.AlertsManagement/smartGroups/*",
            "Microsoft.AlertsManagement/migrateFromSmartDetection/*",
            "Microsoft.AlertsManagement/investigations/*",
            "Microsoft.AlertsManagement/prometheusRuleGroups/*",
            "Microsoft.Monitor/investigations/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Monitoring Metrics Publisher",
      "Description": "Enables publishing metrics against Azure resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/Register/Action",
            "Microsoft.Support/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Insights/Metrics/Write",
            "Microsoft.Insights/Telemetry/Write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Purview role 1 (Deprecated)",
      "Description": "Deprecated role.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Purview/accounts/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Purview/accounts/data/read",
            "Microsoft.Purview/accounts/data/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Purview role 2 (Deprecated)",
      "Description": "Deprecated role.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Purview/accounts/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Purview/accounts/scan/read",
            "Microsoft.Purview/accounts/scan/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Purview role 3 (Deprecated)",
      "Description": "Deprecated role.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Purview/accounts/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Purview/accounts/data/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Autonomous Development Platform Data Contributor (Preview)",
      "Description": "Grants permissions to upload and manage new Autonomous Development Platform measurements.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AutonomousDevelopmentPlatform/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AutonomousDevelopmentPlatform/accounts/dataPools/discoveries/*",
            "Microsoft.AutonomousDevelopmentPlatform/accounts/dataPools/uploads/*",
            "Microsoft.AutonomousDevelopmentPlatform/accounts/dataPools/measurements/states/new/*",
            "Microsoft.AutonomousDevelopmentPlatform/accounts/dataPools/measurementCollections/*",
            "Microsoft.AutonomousDevelopmentPlatform/accounts/measurementCollections/*",
            "Microsoft.AutonomousDevelopmentPlatform/workspaces/read",
            "Microsoft.AutonomousDevelopmentPlatform/workspaces/discoveries/*",
            "Microsoft.AutonomousDevelopmentPlatform/workspaces/uploads/*",
            "Microsoft.AutonomousDevelopmentPlatform/workspaces/measurements/states/new/*",
            "Microsoft.AutonomousDevelopmentPlatform/workspaces/measurements/classifications/*",
            "Microsoft.AutonomousDevelopmentPlatform/workspaces/measurements/dataStreams/classifications/*",
            "Microsoft.AutonomousDevelopmentPlatform/workspaces/measurementCollections/*"
          ],
          "not_data_actions": [
            "Microsoft.AutonomousDevelopmentPlatform/accounts/dataPools/measurements/states/new/changeState/action",
            "Microsoft.AutonomousDevelopmentPlatform/workspaces/measurements/states/new/changeState/action"
          ]
        }
      ]
    },
    {
      "RoleName": "Autonomous Development Platform Data Owner (Preview)",
      "Description": "Grants full access to Autonomous Development Platform data.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AutonomousDevelopmentPlatform/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AutonomousDevelopmentPlatform/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Autonomous Development Platform Data Reader (Preview)",
      "Description": "Grants read access to Autonomous Development Platform data.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AutonomousDevelopmentPlatform/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AutonomousDevelopmentPlatform/*/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Crypto Officer",
      "Description": "Perform any action on the keys of a key vault, except manage permissions. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.KeyVault/checkNameAvailability/read",
            "Microsoft.KeyVault/deletedVaults/read",
            "Microsoft.KeyVault/locations/*/read",
            "Microsoft.KeyVault/vaults/*/read",
            "Microsoft.KeyVault/operations/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/keys/*",
            "Microsoft.KeyVault/vaults/keyrotationpolicies/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Device Update Deployments Reader",
      "Description": "Gives you read access to management operations, but does not allow making changes",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DeviceUpdate/accounts/instances/management/read",
            "Microsoft.DeviceUpdate/accounts/instances/updates/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Device Update Deployments Administrator",
      "Description": "Gives you full access to management operations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Insights/alertRules/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DeviceUpdate/accounts/instances/management/read",
            "Microsoft.DeviceUpdate/accounts/instances/management/write",
            "Microsoft.DeviceUpdate/accounts/instances/management/delete",
            "Microsoft.DeviceUpdate/accounts/instances/updates/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc VMware Private Clouds Onboarding",
      "Description": "Azure Arc VMware Private Clouds Onboarding role has permissions to provision all the required resources for onboard and deboard vCenter instances to Azure.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ConnectedVMwarevSphere/vcenters/Write",
            "Microsoft.ConnectedVMwarevSphere/vcenters/Read",
            "Microsoft.ConnectedVMwarevSphere/vcenters/Delete",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.KubernetesConfiguration/extensions/Write",
            "Microsoft.KubernetesConfiguration/extensions/Read",
            "Microsoft.KubernetesConfiguration/extensions/Delete",
            "Microsoft.KubernetesConfiguration/operations/read",
            "Microsoft.KubernetesConfiguration/extensions/operations/read",
            "Microsoft.ExtendedLocation/customLocations/Read",
            "Microsoft.ExtendedLocation/customLocations/Write",
            "Microsoft.ExtendedLocation/customLocations/Delete",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.ResourceConnector/appliances/Read",
            "Microsoft.ResourceConnector/appliances/Write",
            "Microsoft.ResourceConnector/appliances/Delete",
            "Microsoft.ResourceConnector/appliances/listClusterUserCredential/action",
            "Microsoft.BackupSolutions/vmwareapplications/write",
            "Microsoft.BackupSolutions/vmwareapplications/delete",
            "Microsoft.BackupSolutions/vmwareapplications/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Chamber Admin",
      "Description": "Lets you manage everything under your Modeling and Simulation Workbench chamber.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ModSimWorkbench/*/read",
            "Microsoft.ModSimWorkbench/workbenches/chambers/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [
            "Microsoft.ModSimWorkbench/workbenches/chambers/fileRequests/manage/action",
            "Microsoft.ModSimWorkbench/workbenches/chambers/connector/setCopyPaste/action"
          ],
          "data_actions": [
            "Microsoft.ModSimWorkbench/workbenches/chambers/upload/action",
            "Microsoft.ModSimWorkbench/workbenches/chambers/files/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Monitored Objects Contributor",
      "Description": "Can read and update Monitored Objects and associated Data Collection Rules.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/monitoredObjects/read",
            "Microsoft.Insights/monitoredObjects/write",
            "Microsoft.Insights/monitoredObjects/delete",
            "Microsoft.Insights/dataCollectionRuleAssociations/delete",
            "Microsoft.Insights/dataCollectionRuleAssociations/read",
            "Microsoft.Insights/dataCollectionRuleAssociations/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Microsoft Sentinel Automation Contributor",
      "Description": "Microsoft Sentinel Automation Contributor",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Logic/workflows/triggers/read",
            "Microsoft.Logic/workflows/triggers/listCallbackUrl/action",
            "Microsoft.Logic/workflows/runs/read",
            "Microsoft.Web/sites/hostruntime/webhooks/api/workflows/triggers/read",
            "Microsoft.Web/sites/hostruntime/webhooks/api/workflows/triggers/listCallbackUrl/action",
            "Microsoft.Web/sites/hostruntime/webhooks/api/workflows/runs/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "CDN Endpoint Reader",
      "Description": "Can view CDN endpoints, but can't make changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Cdn/edgenodes/read",
            "Microsoft.Cdn/operationresults/*",
            "Microsoft.Cdn/profiles/endpoints/*/read",
            "Microsoft.Cdn/profiles/afdendpoints/validateCustomDomain/action",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Chamber User",
      "Description": "Lets you view everything under your Modeling and Simulation Workbench chamber, but not make any changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ModSimWorkbench/workbenches/chambers/*/read",
            "Microsoft.ModSimWorkbench/workbenches/chambers/workloads/*",
            "Microsoft.ModSimWorkbench/workbenches/chambers/getUploadUri/action",
            "Microsoft.ModSimWorkbench/workbenches/chambers/fileRequests/getDownloadUri/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ModSimWorkbench/workbenches/chambers/upload/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Speech User",
      "Description": "Access to the real-time speech recognition and batch transcription APIs, real-time speech synthesis and long audio APIs, as well as to read the data/test/model/endpoint for custom models, but can\u2019t create, delete or modify the data/test/model/endpoint for custom models.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/SpeechServices/*/read",
            "Microsoft.CognitiveServices/accounts/SpeechServices/*/transcriptions/read",
            "Microsoft.CognitiveServices/accounts/SpeechServices/*/transcriptions/write",
            "Microsoft.CognitiveServices/accounts/SpeechServices/*/transcriptions/delete",
            "Microsoft.CognitiveServices/accounts/SpeechServices/*/frontend/action",
            "Microsoft.CognitiveServices/accounts/SpeechServices/text-dependent/*/action",
            "Microsoft.CognitiveServices/accounts/SpeechServices/text-independent/*/action",
            "Microsoft.CognitiveServices/accounts/CustomVoice/*/read",
            "Microsoft.CognitiveServices/accounts/CustomVoice/evaluations/*",
            "Microsoft.CognitiveServices/accounts/CustomVoice/longaudiosynthesis/*",
            "Microsoft.CognitiveServices/accounts/AudioContentCreation/*",
            "Microsoft.CognitiveServices/accounts/VideoTranslation/*",
            "Microsoft.CognitiveServices/accounts/CustomAvatar/*/read",
            "Microsoft.CognitiveServices/accounts/BatchAvatar/*",
            "Microsoft.CognitiveServices/accounts/BatchTextToSpeech/*"
          ],
          "not_data_actions": [
            "Microsoft.CognitiveServices/accounts/CustomVoice/datasets/files/read",
            "Microsoft.CognitiveServices/accounts/CustomVoice/datasets/utterances/read"
          ]
        }
      ]
    },
    {
      "RoleName": "Windows Admin Center Administrator Login",
      "Description": "Let's you manage the OS of your resource via Windows Admin Center as an administrator.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridCompute/machines/*/read",
            "Microsoft.HybridCompute/machines/extensions/*",
            "Microsoft.HybridCompute/machines/upgradeExtensions/action",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/networkSecurityGroups/defaultSecurityRules/read",
            "Microsoft.Network/networkWatchers/securityGroupView/action",
            "Microsoft.Network/networkSecurityGroups/securityRules/read",
            "Microsoft.Network/networkSecurityGroups/securityRules/write",
            "Microsoft.HybridConnectivity/endpoints/write",
            "Microsoft.HybridConnectivity/endpoints/read",
            "Microsoft.HybridConnectivity/endpoints/serviceConfigurations/write",
            "Microsoft.HybridConnectivity/endpoints/serviceConfigurations/read",
            "Microsoft.HybridConnectivity/endpoints/listManagedProxyDetails/action",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/patchAssessmentResults/latest/read",
            "Microsoft.Compute/virtualMachines/patchAssessmentResults/latest/softwarePatches/read",
            "Microsoft.Compute/virtualMachines/patchInstallationResults/read",
            "Microsoft.Compute/virtualMachines/patchInstallationResults/softwarePatches/read",
            "Microsoft.Compute/virtualMachines/extensions/read",
            "Microsoft.Compute/virtualMachines/instanceView/read",
            "Microsoft.Compute/virtualMachines/runCommands/read",
            "Microsoft.Compute/virtualMachines/vmSizes/read",
            "Microsoft.Compute/locations/publishers/artifacttypes/types/read",
            "Microsoft.Compute/locations/publishers/artifacttypes/types/versions/read",
            "Microsoft.Compute/diskAccesses/read",
            "Microsoft.Compute/galleries/images/read",
            "Microsoft.Compute/images/read",
            "Microsoft.AzureStackHCI/Clusters/Read",
            "Microsoft.AzureStackHCI/Clusters/ArcSettings/Read",
            "Microsoft.AzureStackHCI/Clusters/ArcSettings/Extensions/Read",
            "Microsoft.AzureStackHCI/Clusters/ArcSettings/Extensions/Write",
            "Microsoft.AzureStackHCI/Clusters/ArcSettings/Extensions/Delete",
            "Microsoft.AzureStackHCI/Operations/Read",
            "Microsoft.ConnectedVMwarevSphere/VirtualMachines/Read",
            "Microsoft.ConnectedVMwarevSphere/VirtualMachines/Extensions/Write",
            "Microsoft.ConnectedVMwarevSphere/VirtualMachines/Extensions/Read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HybridCompute/machines/WACLoginAsAdmin/action",
            "Microsoft.Compute/virtualMachines/WACloginAsAdmin/action",
            "Microsoft.AzureStackHCI/Clusters/WACloginAsAdmin/Action",
            "Microsoft.ConnectedVMwarevSphere/virtualmachines/WACloginAsAdmin/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Policy Add-on Deployment",
      "Description": "Deploy the Azure Policy add-on on Azure Kubernetes Service clusters",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/deployments/*",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/publicIPPrefixes/join/action",
            "Microsoft.Network/publicIPAddresses/join/action",
            "Microsoft.Compute/diskEncryptionSets/read",
            "Microsoft.Compute/proximityPlacementGroups/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Guest Configuration Resource Contributor",
      "Description": "Lets you read, write Guest Configuration Resource.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/write",
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/read",
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/*/read",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Domain Services Reader",
      "Description": "Can view Azure AD Domain Services and related network configurations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Insights/Logs/Read",
            "Microsoft.Insights/Metrics/read",
            "Microsoft.Insights/DiagnosticSettings/read",
            "Microsoft.Insights/DiagnosticSettingsCategories/Read",
            "Microsoft.AAD/domainServices/*/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/read",
            "Microsoft.Network/virtualNetworks/providers/Microsoft.Insights/diagnosticSettings/read",
            "Microsoft.Network/virtualNetworks/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/azureFirewalls/read",
            "Microsoft.Network/ddosProtectionPlans/read",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/loadBalancers/*/read",
            "Microsoft.Network/natGateways/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkSecurityGroups/defaultSecurityRules/read",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/networkSecurityGroups/securityRules/read",
            "Microsoft.Network/routeTables/read",
            "Microsoft.Network/routeTables/routes/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Domain Services Contributor",
      "Description": "Can manage Azure AD Domain Services and related network configurations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Insights/Logs/Read",
            "Microsoft.Insights/Metrics/Read",
            "Microsoft.Insights/DiagnosticSettings/*",
            "Microsoft.Insights/DiagnosticSettingsCategories/Read",
            "Microsoft.AAD/register/action",
            "Microsoft.AAD/unregister/action",
            "Microsoft.AAD/domainServices/*",
            "Microsoft.Network/register/action",
            "Microsoft.Network/unregister/action",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/write",
            "Microsoft.Network/virtualNetworks/delete",
            "Microsoft.Network/virtualNetworks/peer/action",
            "Microsoft.Network/virtualNetworks/join/action",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write",
            "Microsoft.Network/virtualNetworks/subnets/delete",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/read",
            "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/write",
            "Microsoft.Network/virtualNetworks/virtualNetworkPeerings/delete",
            "Microsoft.Network/virtualNetworks/providers/Microsoft.Insights/diagnosticSettings/read",
            "Microsoft.Network/virtualNetworks/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/azureFirewalls/read",
            "Microsoft.Network/ddosProtectionPlans/read",
            "Microsoft.Network/ddosProtectionPlans/join/action",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/loadBalancers/delete",
            "Microsoft.Network/loadBalancers/*/read",
            "Microsoft.Network/loadBalancers/backendAddressPools/join/action",
            "Microsoft.Network/loadBalancers/inboundNatRules/join/action",
            "Microsoft.Network/natGateways/join/action",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/networkInterfaces/delete",
            "Microsoft.Network/networkInterfaces/join/action",
            "Microsoft.Network/networkSecurityGroups/defaultSecurityRules/read",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/networkSecurityGroups/write",
            "Microsoft.Network/networkSecurityGroups/delete",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Network/networkSecurityGroups/securityRules/read",
            "Microsoft.Network/networkSecurityGroups/securityRules/write",
            "Microsoft.Network/networkSecurityGroups/securityRules/delete",
            "Microsoft.Network/routeTables/read",
            "Microsoft.Network/routeTables/write",
            "Microsoft.Network/routeTables/delete",
            "Microsoft.Network/routeTables/join/action",
            "Microsoft.Network/routeTables/routes/read",
            "Microsoft.Network/routeTables/routes/write",
            "Microsoft.Network/routeTables/routes/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DNS Resolver Contributor",
      "Description": "Lets you manage DNS resolver resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Network/dnsResolvers/read",
            "Microsoft.Network/dnsResolvers/write",
            "Microsoft.Network/dnsResolvers/delete",
            "Microsoft.Network/dnsResolvers/join/action",
            "Microsoft.Network/dnsResolvers/inboundEndpoints/read",
            "Microsoft.Network/dnsResolvers/inboundEndpoints/write",
            "Microsoft.Network/dnsResolvers/inboundEndpoints/delete",
            "Microsoft.Network/dnsResolvers/inboundEndpoints/join/action",
            "Microsoft.Network/dnsResolvers/outboundEndpoints/read",
            "Microsoft.Network/dnsResolvers/outboundEndpoints/write",
            "Microsoft.Network/dnsResolvers/outboundEndpoints/delete",
            "Microsoft.Network/dnsResolvers/outboundEndpoints/join/action",
            "Microsoft.Network/dnsForwardingRulesets/read",
            "Microsoft.Network/dnsForwardingRulesets/write",
            "Microsoft.Network/dnsForwardingRulesets/delete",
            "Microsoft.Network/dnsForwardingRulesets/join/action",
            "Microsoft.Network/dnsForwardingRulesets/forwardingRules/read",
            "Microsoft.Network/dnsForwardingRulesets/forwardingRules/write",
            "Microsoft.Network/dnsForwardingRulesets/forwardingRules/delete",
            "Microsoft.Network/dnsForwardingRulesets/virtualNetworkLinks/read",
            "Microsoft.Network/dnsForwardingRulesets/virtualNetworkLinks/write",
            "Microsoft.Network/dnsForwardingRulesets/virtualNetworkLinks/delete",
            "Microsoft.Network/locations/dnsResolverOperationResults/read",
            "Microsoft.Network/locations/dnsResolverOperationStatuses/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/join/action",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/join/action",
            "Microsoft.Network/virtualNetworks/joinLoadBalancer/action",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/subnets/joinLoadBalancer/action",
            "Microsoft.Network/natGateways/join/action",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Network/routeTables/join/action",
            "Microsoft.Network/serviceEndpointPolicies/join/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc Enabled Kubernetes Cluster User Role",
      "Description": "List cluster user credentials action.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Kubernetes/connectedClusters/listClusterUserCredentials/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*",
            "Microsoft.Kubernetes/connectedClusters/listClusterUserCredential/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Data Operator for Managed Disks",
      "Description": "Provides permissions to upload data to empty managed disks, read, or export data of managed disks (not attached to running VMs) and snapshots using SAS URIs and Azure AD authentication.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Compute/disks/download/action",
            "Microsoft.Compute/disks/upload/action",
            "Microsoft.Compute/snapshots/download/action",
            "Microsoft.Compute/snapshots/upload/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AgFood Platform Sensor Partner Contributor",
      "Description": "Provides contribute access to manage sensor related entities in AgFood Platform Service",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/sensorPartnerScope/*"
          ],
          "not_data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/sensorPartnerScope/sensors/delete"
          ]
        }
      ]
    },
    {
      "RoleName": "Compute Gallery Sharing Admin",
      "Description": "This role allows user to share gallery to another subscription/tenant or share it to the public.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/galleries/share/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Scheduled Patching Contributor",
      "Description": "Provides access to manage maintenance configurations with maintenance scope InGuestPatch and corresponding configuration assignments",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Maintenance/maintenanceConfigurations/read",
            "Microsoft.Maintenance/maintenanceConfigurations/write",
            "Microsoft.Maintenance/maintenanceConfigurations/delete",
            "Microsoft.Maintenance/configurationAssignments/read",
            "Microsoft.Maintenance/configurationAssignments/write",
            "Microsoft.Maintenance/configurationAssignments/delete",
            "Microsoft.Maintenance/configurationAssignments/maintenanceScope/InGuestPatch/read",
            "Microsoft.Maintenance/configurationAssignments/maintenanceScope/InGuestPatch/write",
            "Microsoft.Maintenance/configurationAssignments/maintenanceScope/InGuestPatch/delete",
            "Microsoft.Maintenance/maintenanceConfigurations/maintenanceScope/InGuestPatch/read",
            "Microsoft.Maintenance/maintenanceConfigurations/maintenanceScope/InGuestPatch/write",
            "Microsoft.Maintenance/maintenanceConfigurations/maintenanceScope/InGuestPatch/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DevCenter Dev Box User",
      "Description": "Provides access to create and manage dev boxes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DevCenter/projects/read",
            "Microsoft.DevCenter/projects/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DevCenter/projects/users/devboxes/userStop/action",
            "Microsoft.DevCenter/projects/users/devboxes/userStart/action",
            "Microsoft.DevCenter/projects/users/devboxes/userGetRemoteConnection/action",
            "Microsoft.DevCenter/projects/users/devboxes/userRead/action",
            "Microsoft.DevCenter/projects/users/devboxes/userWrite/action",
            "Microsoft.DevCenter/projects/users/devboxes/userDelete/action",
            "Microsoft.DevCenter/projects/users/devboxes/userUpcomingActionRead/action",
            "Microsoft.DevCenter/projects/users/devboxes/userUpcomingActionManage/action",
            "Microsoft.DevCenter/projects/users/devboxes/userActionRead/action",
            "Microsoft.DevCenter/projects/users/devboxes/userActionManage/action",
            "Microsoft.DevCenter/projects/users/devboxes/userCustomize/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DevCenter Project Admin",
      "Description": "Provides access to manage project resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DevCenter/projects/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [
            "Microsoft.DevCenter/projects/write",
            "Microsoft.DevCenter/projects/delete"
          ],
          "data_actions": [
            "Microsoft.DevCenter/projects/users/devboxes/adminStart/action",
            "Microsoft.DevCenter/projects/users/devboxes/adminStop/action",
            "Microsoft.DevCenter/projects/users/devboxes/adminRead/action",
            "Microsoft.DevCenter/projects/users/devboxes/adminWrite/action",
            "Microsoft.DevCenter/projects/users/devboxes/adminDelete/action",
            "Microsoft.DevCenter/projects/users/devboxes/userStop/action",
            "Microsoft.DevCenter/projects/users/devboxes/userStart/action",
            "Microsoft.DevCenter/projects/users/devboxes/userGetRemoteConnection/action",
            "Microsoft.DevCenter/projects/users/devboxes/userRead/action",
            "Microsoft.DevCenter/projects/users/devboxes/userWrite/action",
            "Microsoft.DevCenter/projects/users/devboxes/userDelete/action",
            "Microsoft.DevCenter/projects/users/devboxes/userActionRead/action",
            "Microsoft.DevCenter/projects/users/devboxes/userActionManage/action",
            "Microsoft.DevCenter/projects/users/devboxes/userCustomize/action",
            "Microsoft.DevCenter/projects/users/environments/adminRead/action",
            "Microsoft.DevCenter/projects/users/environments/userWrite/action",
            "Microsoft.DevCenter/projects/users/environments/adminWrite/action",
            "Microsoft.DevCenter/projects/users/environments/userDelete/action",
            "Microsoft.DevCenter/projects/users/environments/adminDelete/action",
            "Microsoft.DevCenter/projects/users/environments/adminAction/action",
            "Microsoft.DevCenter/projects/users/environments/adminActionRead/action",
            "Microsoft.DevCenter/projects/users/environments/adminActionManage/action",
            "Microsoft.DevCenter/projects/users/environments/adminOutputsRead/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Virtual Machine Local User Login",
      "Description": "View Virtual Machines in the portal and login as a local user configured on the arc server",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridCompute/machines/*/read",
            "Microsoft.HybridConnectivity/endpoints/listCredentials/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc ScVmm Private Clouds Onboarding",
      "Description": "Azure Arc ScVmm Private Clouds Onboarding role has permissions to provision all the required resources for onboard and deboard vmm server instances to Azure.",
      "Permissions": [
        {
          "actions": [
            "microsoft.scvmm/vmmservers/Read",
            "microsoft.scvmm/vmmservers/Write",
            "microsoft.scvmm/vmmservers/Delete",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ExtendedLocation/customLocations/Read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc ScVmm VM Contributor",
      "Description": "Arc ScVmm VM Contributor has permissions to perform all VM actions.",
      "Permissions": [
        {
          "actions": [
            "microsoft.scvmm/virtualmachines/*",
            "microsoft.scvmm/virtualMachineInstances/*",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ExtendedLocation/customLocations/Read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridCompute/machines/delete",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action",
            "Microsoft.HybridCompute/machines/assessPatches/action",
            "Microsoft.HybridCompute/machines/installPatches/action",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.HybridCompute/machines/extensions/delete",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.HybridCompute/locations/operationresults/read",
            "Microsoft.HybridCompute/locations/operationstatus/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/softwarePatches/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/softwarePatches/read",
            "Microsoft.HybridCompute/locations/updateCenterOperationResults/read",
            "Microsoft.HybridCompute/machines/hybridIdentityMetadata/read",
            "Microsoft.HybridCompute/osType/agentVersions/read",
            "Microsoft.HybridCompute/osType/agentVersions/latest/read",
            "Microsoft.HybridCompute/machines/runcommands/read",
            "Microsoft.HybridCompute/machines/runcommands/write",
            "Microsoft.HybridCompute/machines/runcommands/delete",
            "Microsoft.HybridCompute/machines/licenseProfiles/read",
            "Microsoft.HybridCompute/machines/licenseProfiles/write",
            "Microsoft.HybridCompute/machines/licenseProfiles/delete",
            "Microsoft.HybridCompute/licenses/read",
            "Microsoft.HybridCompute/licenses/write",
            "Microsoft.HybridCompute/licenses/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc ScVmm Private Cloud User",
      "Description": "Azure Arc ScVmm Private Cloud User has permissions to use the ScVmm resources to deploy VMs.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "microsoft.scvmm/virtualnetworks/join/action",
            "microsoft.scvmm/virtualnetworks/Read",
            "microsoft.scvmm/virtualmachinetemplates/clone/action",
            "microsoft.scvmm/virtualmachinetemplates/Read",
            "microsoft.scvmm/clouds/deploy/action",
            "microsoft.scvmm/clouds/Read",
            "Microsoft.ExtendedLocation/customLocations/Read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.ExtendedLocation/customLocations/enabledresourcetypes/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Arc ScVmm Administrator role",
      "Description": "Arc ScVmm VM Administrator has permissions to perform all ScVmm actions.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ScVmm/*",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ExtendedLocation/customLocations/Read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridCompute/machines/delete",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action",
            "Microsoft.HybridCompute/machines/assessPatches/action",
            "Microsoft.HybridCompute/machines/installPatches/action",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.HybridCompute/machines/extensions/delete",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.HybridCompute/locations/operationresults/read",
            "Microsoft.HybridCompute/locations/operationstatus/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/softwarePatches/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/softwarePatches/read",
            "Microsoft.HybridCompute/locations/updateCenterOperationResults/read",
            "Microsoft.HybridCompute/machines/hybridIdentityMetadata/read",
            "Microsoft.HybridCompute/osType/agentVersions/read",
            "Microsoft.HybridCompute/osType/agentVersions/latest/read",
            "Microsoft.HybridCompute/machines/runcommands/read",
            "Microsoft.HybridCompute/machines/runcommands/write",
            "Microsoft.HybridCompute/machines/runcommands/delete",
            "Microsoft.HybridCompute/machines/licenseProfiles/read",
            "Microsoft.HybridCompute/machines/licenseProfiles/write",
            "Microsoft.HybridCompute/machines/licenseProfiles/delete",
            "Microsoft.HybridCompute/licenses/read",
            "Microsoft.HybridCompute/licenses/write",
            "Microsoft.HybridCompute/licenses/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "HDInsight on AKS Cluster Admin",
      "Description": "Grants a user/group the ability to create, delete and manage clusters within a given cluster pool. Cluster Admin can also run workloads, monitor, and manage all user activity on these clusters.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.HDInsight/clusterPools/clusters/read",
            "Microsoft.HDInsight/clusterPools/clusters/write",
            "Microsoft.HDInsight/clusterPools/clusters/delete",
            "Microsoft.HDInsight/clusterPools/clusters/resize/action",
            "Microsoft.HDInsight/clusterpools/clusters/instanceviews/read",
            "Microsoft.HDInsight/clusterPools/clusters/jobs/read",
            "Microsoft.HDInsight/clusterPools/clusters/runjob/action",
            "Microsoft.HDInsight/clusterpools/clusters/serviceconfigs/read",
            "Microsoft.HDInsight/clusterPools/clusters/availableupgrades/read",
            "Microsoft.HDInsight/clusterPools/clusters/upgrade/action",
            "Microsoft.HDInsight/clusterPools/clusters/rollback/action",
            "Microsoft.HDInsight/clusterPools/clusters/upgradehistories/read",
            "Microsoft.HDInsight/clusterPools/clusters/libraries/read",
            "Microsoft.HDInsight/clusterPools/clusters/managelibraries/action",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/*/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/logs/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "HDInsight on AKS Cluster Pool Admin",
      "Description": "Can read, create, modify and delete HDInsight on AKS cluster pools and create clusters",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.HDInsight/clusterPools/clusters/read",
            "Microsoft.HDInsight/clusterPools/clusters/write",
            "Microsoft.HDInsight/clusterPools/delete",
            "Microsoft.HDInsight/clusterPools/read",
            "Microsoft.HDInsight/clusterPools/write",
            "Microsoft.HDInsight/clusterpools/availableupgrades/read",
            "Microsoft.HDInsight/clusterpools/upgrade/action",
            "Microsoft.HDInsight/clusterPools/upgradehistories/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/*/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/logs/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "FHIR Data Importer",
      "Description": "Role allows user or principal to read and import FHIR Data",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/read",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/import/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "HDInsight on AKS Cluster Operator",
      "Description": "Grants a user/group the ability to read cluster configurations, resize clusters and run jobs",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HDInsight/clusterPools/read",
            "Microsoft.Hdinsight/clusterpools/clusters/read",
            "Microsoft.HDInsight/clusterPools/clusters/resize/action",
            "Microsoft.HDInsight/clusterpools/clusters/instanceviews/read",
            "Microsoft.HDInsight/clusterPools/clusters/jobs/read",
            "Microsoft.HDInsight/clusterPools/clusters/runjob/action",
            "Microsoft.HDInsight/clusterpools/clusters/serviceconfigs/read",
            "Microsoft.HDInsight/clusterPools/clusters/availableupgrades/read",
            "Microsoft.HDInsight/clusterPools/clusters/upgradehistories/read",
            "Microsoft.HDInsight/clusterPools/clusters/libraries/read",
            "Microsoft.HDInsight/clusterPools/clusters/managelibraries/action",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/logs/read",
            "Microsoft.Insights/diagnosticSettings/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Developer Portal Content Editor",
      "Description": "Can customize the developer portal, edit its content, and publish it.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/portalRevisions/read",
            "Microsoft.ApiManagement/service/portalRevisions/write",
            "Microsoft.ApiManagement/service/contentTypes/read",
            "Microsoft.ApiManagement/service/contentTypes/delete",
            "Microsoft.ApiManagement/service/contentTypes/write",
            "Microsoft.ApiManagement/service/contentTypes/contentItems/read",
            "Microsoft.ApiManagement/service/contentTypes/contentItems/write",
            "Microsoft.ApiManagement/service/contentTypes/contentItems/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "VM Scanner Operator",
      "Description": "Role that provides access to disk snapshot for security analysis.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/beginGetAccess/action",
            "Microsoft.Compute/diskEncryptionSets/read",
            "Microsoft.Compute/virtualMachines/instanceView/read",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachineScaleSets/instanceView/read",
            "Microsoft.Compute/virtualMachineScaleSets/read",
            "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read",
            "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/instanceView/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Elastic SAN Owner",
      "Description": "Allows for full access to all resources under Azure Elastic SAN including changing network security policies to unblock data path access",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ElasticSan/elasticSans/*",
            "Microsoft.ElasticSan/locations/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Elastic SAN Reader",
      "Description": "Allows for control path read access to Azure Elastic SAN",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ElasticSan/elasticSans/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Virtual Machine Contributor",
      "Description": "This role is in preview and subject to change. Provide permission to the Azure Virtual Desktop Resource Provider to create, delete, update, start, and stop virtual machines.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DesktopVirtualization/hostpools/read",
            "Microsoft.DesktopVirtualization/hostpools/write",
            "Microsoft.DesktopVirtualization/hostpools/retrieveRegistrationToken/action",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/write",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/delete",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/disconnect/action",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/sendMessage/action",
            "Microsoft.DesktopVirtualization/hostpools/sessionHostConfigurations/read",
            "Microsoft.DesktopVirtualization/hostpools/doNotUseInternalAPI/action",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/retryprovisioning/action",
            "Microsoft.Compute/availabilitySets/read",
            "Microsoft.Compute/availabilitySets/write",
            "Microsoft.Compute/availabilitySets/vmSizes/read",
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/write",
            "Microsoft.Compute/disks/delete",
            "Microsoft.Compute/galleries/read",
            "Microsoft.Compute/galleries/images/read",
            "Microsoft.Compute/galleries/images/versions/read",
            "Microsoft.Compute/images/read",
            "Microsoft.Compute/locations/usages/read",
            "Microsoft.Compute/locations/vmSizes/read",
            "Microsoft.Compute/operations/read",
            "Microsoft.Compute/skus/read",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/write",
            "Microsoft.Compute/virtualMachines/delete",
            "Microsoft.Compute/virtualMachines/start/action",
            "Microsoft.Compute/virtualMachines/powerOff/action",
            "Microsoft.Compute/virtualMachines/restart/action",
            "Microsoft.Compute/virtualMachines/deallocate/action",
            "Microsoft.Compute/virtualMachines/runCommand/action",
            "Microsoft.Compute/virtualMachines/extensions/read",
            "Microsoft.Compute/virtualMachines/extensions/write",
            "Microsoft.Compute/virtualMachines/extensions/delete",
            "Microsoft.Compute/virtualMachines/runCommands/read",
            "Microsoft.Compute/virtualMachines/runCommands/write",
            "Microsoft.Compute/virtualMachines/vmSizes/read",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/join/action",
            "Microsoft.Network/networkInterfaces/delete",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/usages/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Marketplace/offerTypes/publishers/offers/plans/agreements/read",
            "Microsoft.KeyVault/vaults/deploy/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Power On Off Contributor",
      "Description": "Provide permission to the Azure Virtual Desktop Resource Provider to start and stop virtual machines.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.AzureStackHCI/operations/read",
            "Microsoft.AzureStackHCI/virtualMachineInstances/read",
            "Microsoft.AzureStackHCI/virtualMachineInstances/restart/action",
            "Microsoft.AzureStackHCI/virtualMachineInstances/start/action",
            "Microsoft.AzureStackHCI/virtualMachineInstances/stop/action",
            "Microsoft.Compute/virtualMachines/deallocate/action",
            "Microsoft.Compute/virtualMachines/instanceView/read",
            "Microsoft.Compute/virtualMachines/powerOff/action",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/restart/action",
            "Microsoft.Compute/virtualMachines/start/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesCancelOperations/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesExecuteDeallocate/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesExecuteHibernate/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesExecuteStart/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesGetOperationErrors/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesGetOperationStatus/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesSubmitDeallocate/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesSubmitHibernate/action",
            "Microsoft.ComputeSchedule/locations/virtualMachinesSubmitStart/action",
            "Microsoft.ComputeSchedule/register/action",
            "Microsoft.DesktopVirtualization/hostpools/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/delete",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/read",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/sendMessage/action",
            "Microsoft.DesktopVirtualization/hostpools/sessionhosts/write",
            "Microsoft.DesktopVirtualization/hostpools/write",
            "Microsoft.HybridCompute/locations/operationresults/read",
            "Microsoft.HybridCompute/locations/operationstatus/read",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/eventtypes/values/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Desktop Virtualization Power On Contributor",
      "Description": "Provide permission to the Azure Virtual Desktop Resource Provider to start virtual machines.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/virtualMachines/start/action",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/instanceView/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.HybridCompute/locations/operationresults/read",
            "Microsoft.HybridCompute/locations/operationstatus/read",
            "Microsoft.AzureStackHCI/virtualMachineInstances/read",
            "Microsoft.AzureStackHCI/virtualMachineInstances/start/action",
            "Microsoft.AzureStackHCI/operations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Elastic SAN Volume Group Owner",
      "Description": "Allows for full access to a volume group in Azure Elastic SAN including changing network security policies to unblock data path access",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read",
            "Microsoft.ElasticSan/elasticSans/volumeGroups/*",
            "Microsoft.ElasticSan/locations/asyncoperations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Access Review Operator Service Role",
      "Description": "Lets you grant Access Review System app permissions to discover and revoke access as needed by the access review process.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleAssignments/delete",
            "Microsoft.Management/getEntities/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Trusted Signing Identity Verifier",
      "Description": "Manage identity or business verification requests. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CodeSigning/*/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CodeSigning/IdentityVerification/Read",
            "Microsoft.CodeSigning/IdentityVerification/Write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Video Indexer Restricted Viewer",
      "Description": "Has access to view and search through all video's insights and transcription in the Video Indexer portal. No access to model customization, embedding of widget, downloading videos, or sharing the account.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.VideoIndexer/*/read",
            "Microsoft.VideoIndexer/accounts/*/action"
          ],
          "not_actions": [
            "Microsoft.VideoIndexer/*/write",
            "Microsoft.VideoIndexer/*/delete",
            "Microsoft.VideoIndexer/accounts/generateAccessToken/action"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Monitoring Data Reader",
      "Description": "Can access the data in an Azure Monitor Workspace.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Monitor/accounts/data/metrics/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Fleet Manager RBAC Cluster Admin",
      "Description": "Grants read/write access to all Kubernetes resources in the fleet-managed hub cluster.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ContainerService/fleets/read",
            "Microsoft.ContainerService/fleets/listCredentials/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerService/fleets/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Fleet Manager RBAC Reader",
      "Description": "Grants read-only access to most Kubernetes resources within a namespace in the fleet-managed hub cluster. It does not allow viewing roles or role bindings. This role does not allow viewing Secrets, since reading the contents of Secrets enables access to ServiceAccount credentials in the namespace, which would allow API access as any ServiceAccount in the namespace (a form of privilege escalation).  Applying this role at cluster scope will give access across all namespaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ContainerService/fleets/read",
            "Microsoft.ContainerService/fleets/listCredentials/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerService/fleets/apps/controllerrevisions/read",
            "Microsoft.ContainerService/fleets/apps/daemonsets/read",
            "Microsoft.ContainerService/fleets/apps/deployments/read",
            "Microsoft.ContainerService/fleets/apps/statefulsets/read",
            "Microsoft.ContainerService/fleets/autoscaling/horizontalpodautoscalers/read",
            "Microsoft.ContainerService/fleets/batch/cronjobs/read",
            "Microsoft.ContainerService/fleets/batch/jobs/read",
            "Microsoft.ContainerService/fleets/configmaps/read",
            "Microsoft.ContainerService/fleets/endpoints/read",
            "Microsoft.ContainerService/fleets/events.k8s.io/events/read",
            "Microsoft.ContainerService/fleets/events/read",
            "Microsoft.ContainerService/fleets/extensions/daemonsets/read",
            "Microsoft.ContainerService/fleets/extensions/deployments/read",
            "Microsoft.ContainerService/fleets/extensions/ingresses/read",
            "Microsoft.ContainerService/fleets/extensions/networkpolicies/read",
            "Microsoft.ContainerService/fleets/limitranges/read",
            "Microsoft.ContainerService/fleets/namespaces/read",
            "Microsoft.ContainerService/fleets/networking.k8s.io/ingresses/read",
            "Microsoft.ContainerService/fleets/networking.k8s.io/networkpolicies/read",
            "Microsoft.ContainerService/fleets/persistentvolumeclaims/read",
            "Microsoft.ContainerService/fleets/policy/poddisruptionbudgets/read",
            "Microsoft.ContainerService/fleets/replicationcontrollers/read",
            "Microsoft.ContainerService/fleets/replicationcontrollers/read",
            "Microsoft.ContainerService/fleets/resourcequotas/read",
            "Microsoft.ContainerService/fleets/serviceaccounts/read",
            "Microsoft.ContainerService/fleets/services/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Fleet Manager RBAC Admin",
      "Description": "Grants read/write access to Kubernetes resources within a namespace in the fleet-managed hub cluster - provides write permissions on most objects within a a namespace, with the exception of ResourceQuota object and the namespace object itself. Applying this role at cluster scope will give access across all namespaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ContainerService/fleets/read",
            "Microsoft.ContainerService/fleets/listCredentials/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerService/fleets/apps/controllerrevisions/read",
            "Microsoft.ContainerService/fleets/apps/daemonsets/*",
            "Microsoft.ContainerService/fleets/apps/deployments/*",
            "Microsoft.ContainerService/fleets/apps/statefulsets/*",
            "Microsoft.ContainerService/fleets/authorization.k8s.io/localsubjectaccessreviews/write",
            "Microsoft.ContainerService/fleets/autoscaling/horizontalpodautoscalers/*",
            "Microsoft.ContainerService/fleets/batch/cronjobs/*",
            "Microsoft.ContainerService/fleets/batch/jobs/*",
            "Microsoft.ContainerService/fleets/configmaps/*",
            "Microsoft.ContainerService/fleets/endpoints/*",
            "Microsoft.ContainerService/fleets/events.k8s.io/events/read",
            "Microsoft.ContainerService/fleets/events/read",
            "Microsoft.ContainerService/fleets/extensions/daemonsets/*",
            "Microsoft.ContainerService/fleets/extensions/deployments/*",
            "Microsoft.ContainerService/fleets/extensions/ingresses/*",
            "Microsoft.ContainerService/fleets/extensions/networkpolicies/*",
            "Microsoft.ContainerService/fleets/limitranges/read",
            "Microsoft.ContainerService/fleets/namespaces/read",
            "Microsoft.ContainerService/fleets/networking.k8s.io/ingresses/*",
            "Microsoft.ContainerService/fleets/networking.k8s.io/networkpolicies/*",
            "Microsoft.ContainerService/fleets/persistentvolumeclaims/*",
            "Microsoft.ContainerService/fleets/policy/poddisruptionbudgets/*",
            "Microsoft.ContainerService/fleets/rbac.authorization.k8s.io/rolebindings/*",
            "Microsoft.ContainerService/fleets/rbac.authorization.k8s.io/roles/*",
            "Microsoft.ContainerService/fleets/replicationcontrollers/*",
            "Microsoft.ContainerService/fleets/replicationcontrollers/*",
            "Microsoft.ContainerService/fleets/resourcequotas/read",
            "Microsoft.ContainerService/fleets/secrets/*",
            "Microsoft.ContainerService/fleets/serviceaccounts/*",
            "Microsoft.ContainerService/fleets/services/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Fleet Manager RBAC Writer",
      "Description": "Grants read/write access to most Kubernetes resources within a namespace in the fleet-managed hub cluster. This role does not allow viewing or modifying roles or role bindings. However, this role allows accessing Secrets as any ServiceAccount in the namespace, so it can be used to gain the API access levels of any ServiceAccount in the namespace.\u00a0 Applying this role at cluster scope will give access across all namespaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ContainerService/fleets/read",
            "Microsoft.ContainerService/fleets/listCredentials/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerService/fleets/apps/controllerrevisions/read",
            "Microsoft.ContainerService/fleets/apps/daemonsets/*",
            "Microsoft.ContainerService/fleets/apps/deployments/*",
            "Microsoft.ContainerService/fleets/apps/statefulsets/*",
            "Microsoft.ContainerService/fleets/autoscaling/horizontalpodautoscalers/*",
            "Microsoft.ContainerService/fleets/batch/cronjobs/*",
            "Microsoft.ContainerService/fleets/batch/jobs/*",
            "Microsoft.ContainerService/fleets/configmaps/*",
            "Microsoft.ContainerService/fleets/endpoints/*",
            "Microsoft.ContainerService/fleets/events.k8s.io/events/read",
            "Microsoft.ContainerService/fleets/events/read",
            "Microsoft.ContainerService/fleets/extensions/daemonsets/*",
            "Microsoft.ContainerService/fleets/extensions/deployments/*",
            "Microsoft.ContainerService/fleets/extensions/ingresses/*",
            "Microsoft.ContainerService/fleets/extensions/networkpolicies/*",
            "Microsoft.ContainerService/fleets/limitranges/read",
            "Microsoft.ContainerService/fleets/namespaces/read",
            "Microsoft.ContainerService/fleets/networking.k8s.io/ingresses/*",
            "Microsoft.ContainerService/fleets/networking.k8s.io/networkpolicies/*",
            "Microsoft.ContainerService/fleets/persistentvolumeclaims/*",
            "Microsoft.ContainerService/fleets/policy/poddisruptionbudgets/*",
            "Microsoft.ContainerService/fleets/replicationcontrollers/*",
            "Microsoft.ContainerService/fleets/replicationcontrollers/*",
            "Microsoft.ContainerService/fleets/resourcequotas/read",
            "Microsoft.ContainerService/fleets/secrets/*",
            "Microsoft.ContainerService/fleets/serviceaccounts/*",
            "Microsoft.ContainerService/fleets/services/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Fleet Manager Contributor Role",
      "Description": "Grants read/write access to Azure resources provided by Azure Kubernetes Fleet Manager, including fleets, fleet members, fleet update strategies, fleet update runs, etc.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerService/fleets/*",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Kubernetes Namespace User",
      "Description": "Allows a user to read namespace resources and retrieve kubeconfig for the cluster",
      "Permissions": [
        {
          "actions": [
            "Microsoft.KubernetesConfiguration/namespaces/read",
            "Microsoft.KubernetesConfiguration/namespaces/listUserCredential/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Data Labeling - Labeler",
      "Description": "Can label data in Labeling.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.MachineLearningServices/workspaces/read",
            "Microsoft.MachineLearningServices/workspaces/experiments/runs/read",
            "Microsoft.MachineLearningServices/workspaces/labeling/projects/read",
            "Microsoft.MachineLearningServices/workspaces/labeling/projects/summary/read",
            "Microsoft.MachineLearningServices/workspaces/labeling/labels/read",
            "Microsoft.MachineLearningServices/workspaces/labeling/labels/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Role Based Access Control Administrator",
      "Description": "Manage access to Azure resources by assigning roles using Azure RBAC. This role does not allow you to manage access using other ways, such as Azure Policy.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete",
            "*/read",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Template Spec Contributor",
      "Description": "Allows full access to Template Spec operations at the assigned scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/templateSpecs/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Template Spec Reader",
      "Description": "Allows read access to Template Specs at the assigned scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/templateSpecs/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Microsoft Sentinel Playbook Operator",
      "Description": "Microsoft Sentinel Playbook Operator",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Logic/workflows/read",
            "Microsoft.Logic/workflows/triggers/listCallbackUrl/action",
            "Microsoft.Web/sites/hostruntime/webhooks/api/workflows/triggers/listCallbackUrl/action",
            "Microsoft.Web/sites/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Deployment Environments User",
      "Description": "Provides access to manage environment resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DevCenter/projects/read",
            "Microsoft.DevCenter/projects/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [
            "Microsoft.DevCenter/projects/pools/read",
            "Microsoft.DevCenter/projects/pools/schedules/read"
          ],
          "data_actions": [
            "Microsoft.DevCenter/projects/users/environments/userRead/action",
            "Microsoft.DevCenter/projects/users/environments/userWrite/action",
            "Microsoft.DevCenter/projects/users/environments/userDelete/action",
            "Microsoft.DevCenter/projects/users/environments/userActionManage/action",
            "Microsoft.DevCenter/projects/users/environments/userOutputsRead/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Connect Role",
      "Description": "Azure Spring Apps Connect Role",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/apps/deployments/connect/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Remote Debugging Role",
      "Description": "Azure Spring Apps Remote Debugging Role",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/apps/deployments/remotedebugging/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AzureML Compute Operator",
      "Description": "Can access and perform CRUD operations on Machine Learning Services managed compute resources (including Notebook VMs).",
      "Permissions": [
        {
          "actions": [
            "Microsoft.MachineLearningServices/workspaces/computes/*",
            "Microsoft.MachineLearningServices/workspaces/notebooks/vm/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AzureML Registry User",
      "Description": "Can perform all actions on Machine Learning Services Registry assets\u00a0as well as get Registry resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.MachineLearningServices/registries/read",
            "Microsoft.MachineLearningServices/registries/assets/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Center for SAP solutions service role",
      "Description": "Azure Center for SAP solutions service role - This role is intended to be used for providing the permissions to user assigned managed identity. Azure Center for SAP solutions will use this identity to deploy and manage SAP systems.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/resourceGroups/write",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/*",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/loadBalancers/write",
            "Microsoft.Network/loadBalancers/backendAddressPools/read",
            "Microsoft.Network/loadBalancers/backendAddressPools/write",
            "Microsoft.Network/loadBalancers/frontendIPConfigurations/read",
            "Microsoft.Network/loadBalancers/loadBalancingRules/read",
            "Microsoft.Network/loadBalancers/inboundNatRules/read",
            "Microsoft.Network/loadBalancers/providers/Microsoft.Insights/logDefinitions/read",
            "Microsoft.Network/loadBalancers/networkInterfaces/read",
            "Microsoft.Network/loadBalancers/outboundRules/read",
            "Microsoft.Network/loadBalancers/virtualMachines/read",
            "Microsoft.Network/loadBalancers/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/networkInterfaces/ipconfigurations/read",
            "Microsoft.Network/networkInterfaces/loadBalancers/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/checkIpAddressAvailability/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/virtualMachines/read",
            "Microsoft.Network/virtualNetworks/virtualMachines/read",
            "Microsoft.Network/networkInterfaces/ipconfigurations/join/action",
            "Microsoft.Network/privateEndpoints/read",
            "Microsoft.Network/privateEndpoints/write",
            "Microsoft.Network/networkInterfaces/join/action",
            "Microsoft.Network/loadBalancers/backendAddressPools/join/action",
            "Microsoft.Network/loadBalancers/frontendIPConfigurations/join/action",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/subnets/joinLoadBalancer/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/write",
            "Microsoft.Storage/storageAccounts/PrivateEndpointConnectionsApproval/action",
            "Microsoft.Storage/storageAccounts/blobServices/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/fileServices/read",
            "Microsoft.Storage/storageAccounts/fileServices/write",
            "Microsoft.Storage/storageAccounts/fileServices/shares/read",
            "Microsoft.Storage/storageAccounts/fileServices/shares/write",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/write",
            "Microsoft.Compute/virtualMachines/instanceView/read",
            "Microsoft.Compute/availabilitySets/read",
            "Microsoft.Compute/availabilitySets/write",
            "Microsoft.Compute/skus/read",
            "Microsoft.Compute/sshPublicKeys/read",
            "Microsoft.Compute/virtualMachines/extensions/read",
            "Microsoft.Compute/virtualMachines/extensions/write",
            "Microsoft.Compute/virtualMachines/extensions/delete",
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Center for SAP solutions reader",
      "Description": "This role provides read access to all capabilities of Azure Center for SAP solutions.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Advisor/configurations/read",
            "Microsoft.Advisor/recommendations/read",
            "Microsoft.Workloads/sapvirtualInstances/*/read",
            "Microsoft.Workloads/Locations/*/read",
            "Microsoft.Workloads/Operations/read",
            "Microsoft.Workloads/Locations/OperationStatuses/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/virtualMachines/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/ipconfigurations/read",
            "Microsoft.Network/networkInterfaces/loadBalancers/read",
            "Microsoft.Network/networkInterfaces/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/loadBalancers/backendAddressPools/read",
            "Microsoft.Network/loadBalancers/frontendIPConfigurations/read",
            "Microsoft.Network/loadBalancers/loadBalancingRules/read",
            "Microsoft.Network/loadBalancers/inboundNatRules/read",
            "Microsoft.Network/loadBalancers/providers/Microsoft.Insights/logDefinitions/read",
            "Microsoft.Network/loadBalancers/networkInterfaces/read",
            "Microsoft.Network/loadBalancers/outboundRules/read",
            "Microsoft.Network/loadBalancers/virtualMachines/read",
            "Microsoft.Network/loadBalancers/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/privateEndpoints/read",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/blobServices/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/fileServices/read",
            "Microsoft.Storage/storageAccounts/fileServices/shares/read",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/availabilitySets/read",
            "Microsoft.Compute/virtualMachines/extensions/read",
            "Microsoft.Compute/disks/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Center for SAP solutions administrator",
      "Description": "This role provides read and write access to all capabilities of Azure Center for SAP solutions.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Advisor/configurations/read",
            "Microsoft.Advisor/recommendations/read",
            "Microsoft.Workloads/sapvirtualInstances/*/read",
            "Microsoft.Workloads/sapVirtualInstances/*/write",
            "Microsoft.Workloads/sapVirtualInstances/*/delete",
            "Microsoft.Workloads/Locations/*/action",
            "Microsoft.Workloads/Locations/*/read",
            "Microsoft.Workloads/sapVirtualInstances/*/start/action",
            "Microsoft.Workloads/sapVirtualInstances/*/stop/action",
            "Microsoft.Workloads/connectors/*/read",
            "Microsoft.Workloads/connectors/*/write",
            "Microsoft.Workloads/connectors/*/delete",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write",
            "Microsoft.Network/virtualNetworks/subnets/virtualMachines/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/ipconfigurations/read",
            "Microsoft.Network/networkInterfaces/loadBalancers/read",
            "Microsoft.Network/networkInterfaces/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/loadBalancers/backendAddressPools/read",
            "Microsoft.Network/loadBalancers/frontendIPConfigurations/read",
            "Microsoft.Network/loadBalancers/loadBalancingRules/read",
            "Microsoft.Network/loadBalancers/inboundNatRules/read",
            "Microsoft.Network/loadBalancers/providers/Microsoft.Insights/logDefinitions/read",
            "Microsoft.Network/loadBalancers/networkInterfaces/read",
            "Microsoft.Network/loadBalancers/outboundRules/read",
            "Microsoft.Network/loadBalancers/virtualMachines/read",
            "Microsoft.Network/loadBalancers/providers/Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Network/privateEndpoints/read",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Network/routeTables/join/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/blobServices/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/fileServices/read",
            "Microsoft.Storage/storageAccounts/fileServices/shares/read",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/availabilitySets/read",
            "Microsoft.Compute/sshPublicKeys/read",
            "Microsoft.Compute/sshPublicKeys/write",
            "Microsoft.Compute/sshPublicKeys/*/generateKeyPair/action",
            "Microsoft.Compute/virtualMachines/extensions/read",
            "Microsoft.Compute/virtualMachines/extensions/delete",
            "Microsoft.Compute/disks/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AppGw for Containers Configuration Manager",
      "Description": "Allows access and configuration updates to Application Gateway for Containers resource.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ServiceNetworking/trafficControllers/read",
            "Microsoft.ServiceNetworking/trafficControllers/write",
            "Microsoft.ServiceNetworking/trafficControllers/delete",
            "Microsoft.ServiceNetworking/trafficControllers/frontends/read",
            "Microsoft.ServiceNetworking/trafficControllers/frontends/write",
            "Microsoft.ServiceNetworking/trafficControllers/frontends/delete",
            "Microsoft.ServiceNetworking/trafficControllers/associations/read",
            "Microsoft.ServiceNetworking/trafficControllers/associations/write",
            "Microsoft.ServiceNetworking/trafficControllers/associations/delete",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ServiceNetworking/trafficControllers/serviceRoutingConfigurations/read",
            "Microsoft.ServiceNetworking/trafficControllers/serviceRoutingConfigurations/write",
            "Microsoft.ServiceNetworking/trafficControllers/serviceRoutingConfigurations/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "FHIR SMART User",
      "Description": "Role allows user to access FHIR Service according to SMART on FHIR specification",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/services/fhir/resources/read",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/read",
            "Microsoft.HealthcareApis/services/fhir/resources/smart/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/smart/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services OpenAI Contributor",
      "Description": "Full access including the ability to fine-tune, deploy and generate text",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.CognitiveServices/accounts/deployments/write",
            "Microsoft.CognitiveServices/accounts/deployments/delete",
            "Microsoft.CognitiveServices/accounts/raiPolicies/read",
            "Microsoft.CognitiveServices/accounts/raiPolicies/write",
            "Microsoft.CognitiveServices/accounts/raiPolicies/delete",
            "Microsoft.CognitiveServices/accounts/commitmentplans/read",
            "Microsoft.CognitiveServices/accounts/commitmentplans/write",
            "Microsoft.CognitiveServices/accounts/commitmentplans/delete",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/OpenAI/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services OpenAI User",
      "Description": "Ability to view files, models, deployments. Readers can't make any changes They can inference and create images",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/*/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/OpenAI/*/read",
            "Microsoft.CognitiveServices/accounts/OpenAI/engines/completions/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/engines/search/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/engines/generate/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/deployments/audio/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/deployments/search/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/deployments/completions/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/deployments/chat/completions/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/deployments/extensions/chat/completions/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/deployments/embeddings/action",
            "Microsoft.CognitiveServices/accounts/OpenAI/images/generations/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Impact Reporter",
      "Description": "Allows access to create/report, read and delete impacts",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Impact/WorkloadImpacts/*",
            "Microsoft.Impact/ImpactCategories/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Impact Reader",
      "Description": "Allows read-only access to reported impacts and impact categories",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Impact/WorkloadImpacts/read",
            "Microsoft.Impact/ImpactCategories/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Cluster Monitoring User",
      "Description": "List cluster monitoring user credential action.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerService/managedClusters/listClusterMonitoringUserCredential/action",
            "Microsoft.ContainerService/managedClusters/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "ContainerApp Reader",
      "Description": "View all containerapp resources, but does not allow you to make any changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.App/containerApps/*/read",
            "Microsoft.App/containerApps/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Connected Machine Resource Manager",
      "Description": "Custom Role for AzureStackHCI RP to manage hybrid compute machines and hybrid connectivity endpoints in a resource group",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/*/read",
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/read",
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/write",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/*/read",
            "Microsoft.HybridCompute/machines/delete",
            "Microsoft.HybridCompute/machines/extensions/delete",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.HybridCompute/machines/licenseProfiles/delete",
            "Microsoft.HybridCompute/machines/licenseProfiles/read",
            "Microsoft.HybridCompute/machines/licenseProfiles/write",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridConnectivity/endpoints/read",
            "Microsoft.HybridConnectivity/endpoints/serviceConfigurations/read",
            "Microsoft.HybridConnectivity/endpoints/serviceConfigurations/write",
            "Microsoft.HybridConnectivity/endpoints/write",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.EdgeMarketplace/locations/operationStatuses/read",
            "Microsoft.EdgeMarketPlace/offers/getAccessToken/action",
            "Microsoft.EdgeMarketPlace/offers/generateAccessToken/action",
            "Microsoft.EdgeMarketplace/publishers/read",
            "Microsoft.EdgeMarketplace/offers/read",
            "Microsoft.ExtendedLocation/customLocations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SqlDb Migration Role",
      "Description": "Role for SqlDb migration",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Sql/servers/read",
            "Microsoft.Sql/servers/write",
            "Microsoft.Sql/servers/databases/read",
            "Microsoft.Sql/servers/databases/write",
            "Microsoft.Sql/servers/databases/delete",
            "Microsoft.DataMigration/locations/operationResults/read",
            "Microsoft.DataMigration/locations/operationStatuses/read",
            "Microsoft.DataMigration/locations/sqlMigrationServiceOperationResults/read",
            "Microsoft.DataMigration/databaseMigrations/write",
            "Microsoft.DataMigration/databaseMigrations/read",
            "Microsoft.DataMigration/databaseMigrations/delete",
            "Microsoft.DataMigration/databaseMigrations/cancel/action",
            "Microsoft.DataMigration/databaseMigrations/cutover/action",
            "Microsoft.DataMigration/sqlMigrationServices/write",
            "Microsoft.DataMigration/sqlMigrationServices/delete",
            "Microsoft.DataMigration/sqlMigrationServices/read",
            "Microsoft.DataMigration/sqlMigrationServices/listAuthKeys/action",
            "Microsoft.DataMigration/sqlMigrationServices/regenerateAuthKeys/action",
            "Microsoft.DataMigration/sqlMigrationServices/deleteNode/action",
            "Microsoft.DataMigration/sqlMigrationServices/listMonitoringData/action",
            "Microsoft.DataMigration/sqlMigrationServices/listMigrations/read",
            "Microsoft.DataMigration/sqlMigrationServices/MonitoringData/read",
            "Microsoft.DataMigration/register/action",
            "Microsoft.DataMigration/operations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Bayer Ag Powered Services GDU Solution",
      "Description": "Provide access to GDU Solution by Bayer Ag Powered Services",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/parties/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/boundaries/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/farms/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insights/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insightAttachments/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Bayer Ag Powered Services Imagery Solution",
      "Description": "Provide access to Imagery Solution by Bayer Ag Powered Services",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/parties/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/boundaries/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/boundaries/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/farms/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/farms/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/write",
            "Microsoft.AgFoodPlatform/farmBeats/ingestionJobs/satelliteDataIngestionJobs/*",
            "Microsoft.AgFoodPlatform/farmBeats/scenes/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insights/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insightAttachments/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Center for SAP solutions Service role for management",
      "Description": "This role has permissions that the user assigned managed identity must have to enable registration for the existing systems.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Center for SAP solutions Management role",
      "Description": "This role has permissions which allow users to register existing systems, view and manage systems.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Kubernetes Agentless Operator",
      "Description": "Grants Microsoft Defender for Cloud access to Azure Kubernetes Services",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/write",
            "Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/read",
            "Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/delete",
            "Microsoft.ContainerService/managedClusters/read",
            "Microsoft.Features/features/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Features/providers/features/register/action",
            "Microsoft.Security/pricings/securityoperators/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Usage Billing Data Sender",
      "Description": "Azure Usage Billing shared BuiltIn role to be used for all Customer Account Authentication",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.UsageBilling/accounts/inputs/send/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Container Registry secure supply chain operator service role",
      "Description": "Grants Microsoft Defender for Cloud access to Azure Container Registry for security assessment of container images",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerRegistry/registries/pull/read",
            "Microsoft.ContainerRegistry/registries/push/write",
            "Microsoft.ContainerRegistry/registries/artifacts/delete"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerRegistry/registries/repositories/metadata/read",
            "Microsoft.ContainerRegistry/registries/repositories/content/read",
            "Microsoft.ContainerRegistry/registries/repositories/metadata/write",
            "Microsoft.ContainerRegistry/registries/repositories/content/write",
            "Microsoft.ContainerRegistry/registries/repositories/metadata/delete",
            "Microsoft.ContainerRegistry/registries/repositories/content/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SqlMI Migration Role",
      "Description": "Role for SqlMI migration",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Sql/managedInstances/read",
            "Microsoft.Sql/managedInstances/write",
            "Microsoft.Sql/managedInstances/databases/read",
            "Microsoft.Sql/managedInstances/databases/write",
            "Microsoft.Sql/managedInstances/databases/delete",
            "Microsoft.Sql/managedInstances/metrics/read",
            "Microsoft.DataMigration/locations/operationResults/read",
            "Microsoft.DataMigration/locations/operationStatuses/read",
            "Microsoft.DataMigration/locations/sqlMigrationServiceOperationResults/read",
            "Microsoft.DataMigration/databaseMigrations/write",
            "Microsoft.DataMigration/databaseMigrations/read",
            "Microsoft.DataMigration/databaseMigrations/delete",
            "Microsoft.DataMigration/databaseMigrations/cancel/action",
            "Microsoft.DataMigration/databaseMigrations/cutover/action",
            "Microsoft.DataMigration/sqlMigrationServices/write",
            "Microsoft.DataMigration/sqlMigrationServices/delete",
            "Microsoft.DataMigration/sqlMigrationServices/read",
            "Microsoft.DataMigration/sqlMigrationServices/listAuthKeys/action",
            "Microsoft.DataMigration/sqlMigrationServices/regenerateAuthKeys/action",
            "Microsoft.DataMigration/sqlMigrationServices/deleteNode/action",
            "Microsoft.DataMigration/sqlMigrationServices/listMonitoringData/action",
            "Microsoft.DataMigration/sqlMigrationServices/listMigrations/read",
            "Microsoft.DataMigration/sqlMigrationServices/MonitoringData/read",
            "Microsoft.DataMigration/register/action",
            "Microsoft.DataMigration/operations/read",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/listkeys/action",
            "Microsoft.Storage/storageAccounts/blobServices/read",
            "Microsoft.Storage/storageAccounts/blobServices/write",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Bayer Ag Powered Services CWUM Solution",
      "Description": "Provide access to CWUM Solution by Bayer Ag Powered Services",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/parties/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/boundaries/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/boundaries/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/farms/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/farms/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/write",
            "Microsoft.AgFoodPlatform/farmBeats/ingestionJobs/satelliteDataIngestionJobs/*",
            "Microsoft.AgFoodPlatform/farmBeats/scenes/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insightAttachments/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insights/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SqlVM Migration Role",
      "Description": "Role for SqlVM migration",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DataMigration/locations/operationResults/read",
            "Microsoft.DataMigration/locations/operationStatuses/read",
            "Microsoft.DataMigration/locations/sqlMigrationServiceOperationResults/read",
            "Microsoft.DataMigration/databaseMigrations/write",
            "Microsoft.DataMigration/databaseMigrations/read",
            "Microsoft.DataMigration/databaseMigrations/delete",
            "Microsoft.DataMigration/databaseMigrations/cancel/action",
            "Microsoft.DataMigration/databaseMigrations/cutover/action",
            "Microsoft.DataMigration/sqlMigrationServices/write",
            "Microsoft.DataMigration/sqlMigrationServices/delete",
            "Microsoft.DataMigration/sqlMigrationServices/read",
            "Microsoft.DataMigration/sqlMigrationServices/listAuthKeys/action",
            "Microsoft.DataMigration/sqlMigrationServices/regenerateAuthKeys/action",
            "Microsoft.DataMigration/sqlMigrationServices/deleteNode/action",
            "Microsoft.DataMigration/sqlMigrationServices/listMonitoringData/action",
            "Microsoft.DataMigration/sqlMigrationServices/listMigrations/read",
            "Microsoft.DataMigration/sqlMigrationServices/MonitoringData/read",
            "Microsoft.DataMigration/register/action",
            "Microsoft.DataMigration/operations/read",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/listkeys/action",
            "Microsoft.Storage/storageAccounts/blobServices/read",
            "Microsoft.Storage/storageAccounts/blobServices/write",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.SqlVirtualMachine/sqlVirtualMachines/read",
            "Microsoft.SqlVirtualMachine/sqlVirtualMachines/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Front Door Secret Contributor",
      "Description": "For internal use within Azure. Can manage Azure Front Door secrets, but can't grant access to other users.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Cdn/operationresults/profileresults/secretresults/read",
            "Microsoft.Cdn/profiles/secrets/read",
            "Microsoft.Cdn/profiles/secrets/write",
            "Microsoft.Cdn/profiles/secrets/delete",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Front Door Domain Contributor",
      "Description": "For internal use within Azure. Can manage Azure Front Door domains, but can't grant access to other users.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Cdn/operationresults/profileresults/customdomainresults/read",
            "Microsoft.Cdn/profiles/customdomains/read",
            "Microsoft.Cdn/profiles/customdomains/write",
            "Microsoft.Cdn/profiles/customdomains/delete",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Front Door Domain Reader",
      "Description": "For internal use within Azure. Can view Azure Front Door domains, but can't make changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Cdn/operationresults/profileresults/customdomainresults/read",
            "Microsoft.Cdn/profiles/customdomains/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Front Door Secret Reader",
      "Description": "For internal use within Azure. Can view Azure Front Door secrets, but can't make changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Cdn/operationresults/profileresults/secretresults/read",
            "Microsoft.Cdn/profiles/secrets/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "LocalRulestacksAdministrator role",
      "Description": "Allows users to create, modify, describe, or delete Rulestacks.",
      "Permissions": [
        {
          "actions": [
            "PaloAltoNetworks.Cloudngfw/localRulestacks/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "MySQL Backup And Export Operator",
      "Description": "Grants full access to manage backup and export resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DBforMySQL/flexibleServers/validateBackup/action",
            "Microsoft.DBforMySQL/flexibleServers/backupAndExport/action",
            "Microsoft.DBforMySQL/locations/operationResults/read",
            "Microsoft.DBforMySQL/locations/azureAsyncOperation/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Stack HCI Administrator",
      "Description": "Grants full access to the cluster and its resources, including the ability to register Azure Stack HCI and assign others as Azure Arc HCI VM Contributor and/or Azure Arc HCI VM Reader",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureStackHCI/register/action",
            "Microsoft.AzureStackHCI/Unregister/Action",
            "Microsoft.AzureStackHCI/clusters/*",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/Read",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/SecurityRules/Read",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/Write",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/SecurityRules/Write",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/Delete",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/SecurityRules/Delete",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/join/action",
            "Microsoft.HybridCompute/register/action",
            "Microsoft.GuestConfiguration/register/action",
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/read",
            "Microsoft.Resources/subscriptions/resourceGroups/write",
            "Microsoft.Resources/subscriptions/resourceGroups/delete",
            "Microsoft.HybridConnectivity/register/action",
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Support/*",
            "Microsoft.AzureStackHCI/*",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridCompute/machines/delete",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action",
            "Microsoft.HybridCompute/machines/assessPatches/action",
            "Microsoft.HybridCompute/machines/installPatches/action",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.HybridCompute/machines/extensions/delete",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.HybridCompute/locations/operationresults/read",
            "Microsoft.HybridCompute/locations/operationstatus/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/softwarePatches/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/softwarePatches/read",
            "Microsoft.HybridCompute/locations/updateCenterOperationResults/read",
            "Microsoft.HybridCompute/machines/hybridIdentityMetadata/read",
            "Microsoft.HybridCompute/osType/agentVersions/read",
            "Microsoft.HybridCompute/osType/agentVersions/latest/read",
            "Microsoft.HybridCompute/machines/runcommands/read",
            "Microsoft.HybridCompute/machines/runcommands/write",
            "Microsoft.HybridCompute/machines/runcommands/delete",
            "Microsoft.HybridCompute/machines/licenseProfiles/read",
            "Microsoft.HybridCompute/machines/licenseProfiles/write",
            "Microsoft.HybridCompute/machines/licenseProfiles/delete",
            "Microsoft.HybridCompute/licenses/read",
            "Microsoft.HybridCompute/licenses/write",
            "Microsoft.HybridCompute/licenses/delete",
            "Microsoft.ResourceConnector/register/action",
            "Microsoft.ResourceConnector/appliances/read",
            "Microsoft.ResourceConnector/appliances/write",
            "Microsoft.ResourceConnector/appliances/delete",
            "Microsoft.ResourceConnector/locations/operationresults/read",
            "Microsoft.ResourceConnector/locations/operationsstatus/read",
            "Microsoft.ResourceConnector/appliances/listClusterUserCredential/action",
            "Microsoft.ResourceConnector/appliances/listKeys/action",
            "Microsoft.ResourceConnector/operations/read",
            "Microsoft.ExtendedLocation/register/action",
            "Microsoft.ExtendedLocation/customLocations/read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.ExtendedLocation/customLocations/write",
            "Microsoft.ExtendedLocation/customLocations/delete",
            "Microsoft.EdgeMarketplace/offers/read",
            "Microsoft.EdgeMarketplace/publishers/read",
            "Microsoft.Kubernetes/register/action",
            "Microsoft.KubernetesConfiguration/register/action",
            "Microsoft.KubernetesConfiguration/extensions/write",
            "Microsoft.KubernetesConfiguration/extensions/read",
            "Microsoft.KubernetesConfiguration/extensions/delete",
            "Microsoft.KubernetesConfiguration/extensions/operations/read",
            "Microsoft.KubernetesConfiguration/namespaces/read",
            "Microsoft.KubernetesConfiguration/operations/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.AzureStackHCI/StorageContainers/Write",
            "Microsoft.AzureStackHCI/StorageContainers/Read",
            "Microsoft.HybridContainerService/register/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "LocalNGFirewallAdministrator role",
      "Description": "Allows user to create, modify, describe, or delete NGFirewalls.",
      "Permissions": [
        {
          "actions": [
            "PaloAltoNetworks.Cloudngfw/firewalls/*",
            "PaloAltoNetworks.Cloudngfw/localRulestacks/read",
            "PaloAltoNetworks.Cloudngfw/globalRulestacks/read",
            "PaloAltoNetworks.Cloudngfw/Locations/operationStatuses/read",
            "Microsoft.OperationalInsights/workspaces/write",
            "Microsoft.OperationalInsights/workspaces/sharedKeys/read",
            "Microsoft.OperationalInsights/workspaces/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/metrics/read",
            "Microsoft.Insights/metricDefinitions/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Support/*",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/publicIPAddresses/write",
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/publicIPAddresses/join/action",
            "Microsoft.Network/networkVirtualAppliances/read",
            "Microsoft.Network/networkVirtualAppliances/write",
            "Microsoft.Network/networkVirtualAppliances/delete",
            "Microsoft.Network/virtualHubs/read",
            "Microsoft.Network/virtualWans/read",
            "Microsoft.Network/virtualWans/virtualHubs/read",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/networkSecurityGroups/join/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Extension for SQL Server Deployment",
      "Description": "Microsoft.AzureArcData service role to enable deployment of Azure Extension for SQL Server",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/deployments/write",
            "Microsoft.HybridCompute/machines/extensions/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Maps Data Read and Batch Role",
      "Description": "This role can be used to assign read and batch actions on Azure Maps.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Maps/accounts/services/*/read",
            "Microsoft.Maps/accounts/services/batch/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Workspace API Developer",
      "Description": "Has read access to entities in the workspace and read and write access to entities for editing APIs. This role should be assigned on the workspace scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/workspaces/*/read",
            "Microsoft.ApiManagement/service/workspaces/apis/*",
            "Microsoft.ApiManagement/service/workspaces/apiVersionSets/*",
            "Microsoft.ApiManagement/service/workspaces/policies/*",
            "Microsoft.ApiManagement/service/workspaces/schemas/*",
            "Microsoft.ApiManagement/service/workspaces/products/*",
            "Microsoft.ApiManagement/service/workspaces/policyFragments/*",
            "Microsoft.ApiManagement/service/workspaces/namedValues/*",
            "Microsoft.ApiManagement/service/workspaces/tags/*",
            "Microsoft.ApiManagement/service/workspaces/backends/*",
            "Microsoft.ApiManagement/service/workspaces/certificates/*",
            "Microsoft.ApiManagement/service/workspaces/diagnostics/*",
            "Microsoft.ApiManagement/service/workspaces/loggers/*",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Workspace Contributor",
      "Description": "Can manage the workspace and view, but not modify its members. This role should be assigned on the workspace scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/workspaces/*",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Workspace Reader",
      "Description": "Has read-only access to entities in the workspace. This role should be assigned on the workspace scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/workspaces/*/read",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Workspace API Product Manager",
      "Description": "Has read access to entities in the workspace and read and write access to entities for publishing APIs. This role should be assigned on the workspace scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/workspaces/*/read",
            "Microsoft.ApiManagement/service/workspaces/products/*",
            "Microsoft.ApiManagement/service/workspaces/subscriptions/*",
            "Microsoft.ApiManagement/service/workspaces/groups/*",
            "Microsoft.ApiManagement/service/workspaces/tags/*",
            "Microsoft.ApiManagement/service/workspaces/notifications/*",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Service Workspace API Developer",
      "Description": "Has read access to tags and products and write access to allow: assigning APIs to products, assigning tags to products and APIs. This role should be assigned on the service scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/tags/read",
            "Microsoft.ApiManagement/service/tags/apiLinks/*",
            "Microsoft.ApiManagement/service/tags/operationLinks/*",
            "Microsoft.ApiManagement/service/tags/productLinks/*",
            "Microsoft.ApiManagement/service/products/read",
            "Microsoft.ApiManagement/service/products/apiLinks/*",
            "Microsoft.ApiManagement/service/read",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "API Management Service Workspace API Product Manager",
      "Description": "Has the same access as API Management Service Workspace API Developer as well as read access to users and write access to allow assigning users to groups. This role should be assigned on the service scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiManagement/service/users/read",
            "Microsoft.ApiManagement/service/tags/read",
            "Microsoft.ApiManagement/service/tags/apiLinks/*",
            "Microsoft.ApiManagement/service/tags/operationLinks/*",
            "Microsoft.ApiManagement/service/tags/productLinks/*",
            "Microsoft.ApiManagement/service/products/read",
            "Microsoft.ApiManagement/service/products/apiLinks/*",
            "Microsoft.ApiManagement/service/groups/read",
            "Microsoft.ApiManagement/service/groups/users/*",
            "Microsoft.ApiManagement/service/read",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage File Data Privileged Contributor",
      "Description": "Customer has read, write, delete and modify NTFS permission access on Azure Storage file shares.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/read",
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/write",
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/delete",
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/modifypermissions/action",
            "Microsoft.Storage/storageAccounts/fileServices/readFileBackupSemantics/action",
            "Microsoft.Storage/storageAccounts/fileServices/writeFileBackupSemantics/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage File Data Privileged Reader",
      "Description": "Customer has read access on Azure Storage file shares.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/fileServices/fileshares/files/read",
            "Microsoft.Storage/storageAccounts/fileServices/readFileBackupSemantics/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Windows 365 Network User",
      "Description": "This role is used by Windows 365 to read virtual networks and join the designated virtual networks.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/usages/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Windows365SubscriptionReader",
      "Description": "Read subscriptions, images, azure firewalls. This role is used in Windows365 scenarios.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Windows 365 Network Interface Contributor",
      "Description": "This role is used by Windows 365 to provision required network resources and join Microsoft-hosted VMs to network interfaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/resourcegroups/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Network/locations/operations/read",
            "Microsoft.Network/locations/operationResults/read",
            "Microsoft.Network/locations/usages/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/delete",
            "Microsoft.Network/networkInterfaces/join/action",
            "Microsoft.Network/networkInterfaces/effectiveNetworkSecurityGroups/action",
            "Microsoft.Network/networkInterfaces/effectiveRouteTable/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "App Compliance Automation Reader",
      "Description": "Read, download the reports objects and related other resource objects.",
      "Permissions": [
        {
          "actions": [
            "*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "App Compliance Automation Administrator",
      "Description": "Create, read, download, modify and delete reports objects and related other resource objects.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AppComplianceAutomation/*",
            "Microsoft.Storage/storageAccounts/blobServices/write",
            "Microsoft.Storage/storageAccounts/fileservices/write",
            "Microsoft.Storage/storageAccounts/listKeys/action",
            "Microsoft.Storage/storageAccounts/write",
            "Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/write",
            "Microsoft.Storage/storageAccounts/blobServices/read",
            "Microsoft.PolicyInsights/policyStates/queryResults/action",
            "Microsoft.PolicyInsights/policyStates/triggerEvaluation/action",
            "Microsoft.Resources/resources/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourceGroups/resources/read",
            "Microsoft.Resources/subscriptions/resources/read",
            "Microsoft.Resources/subscriptions/resourceGroups/delete",
            "Microsoft.Resources/subscriptions/resourceGroups/write",
            "Microsoft.Resources/tags/read",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Security/automations/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Security/automations/delete",
            "Microsoft.Security/automations/write",
            "Microsoft.Security/register/action",
            "Microsoft.Security/unregister/action",
            "*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Sphere Contributor",
      "Description": "Allows user read and write access to Azure Sphere resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureSphere/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Insights/DiagnosticSettings/*",
            "Microsoft.Insights/DiagnosticSettingsCategories/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SaaS Hub Contributor",
      "Description": "SaaS Hub contributor can manage SaaS Hub resource",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.SaaSHub/cloudservices/read",
            "Microsoft.SaaSHub/cloudservices/write",
            "Microsoft.SaaSHub/cloudservices/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Sphere Publisher",
      "Description": "Allows user to read and download Azure Sphere resources and upload images.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureSphere/*/read",
            "Microsoft.AzureSphere/catalogs/countDevices/action",
            "Microsoft.AzureSphere/catalogs/listDeviceGroups/action",
            "Microsoft.AzureSphere/catalogs/listDeviceInsights/action",
            "Microsoft.AzureSphere/catalogs/listDevices/action",
            "Microsoft.AzureSphere/catalogs/products/countDevices/action",
            "Microsoft.AzureSphere/catalogs/products/deviceGroups/countDevices/action",
            "Microsoft.AzureSphere/catalogs/certificates/retrieveProofOfPossessionNonce/action",
            "Microsoft.AzureSphere/catalogs/certificates/retrieveCertChain/action",
            "Microsoft.AzureSphere/catalogs/images/write",
            "Microsoft.AzureSphere/catalogs/uploadImage/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/DiagnosticSettings/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Sphere Reader",
      "Description": "Allows user to read Azure Sphere resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureSphere/*/read",
            "Microsoft.AzureSphere/catalogs/countDevices/action",
            "Microsoft.AzureSphere/catalogs/listDeviceGroups/action",
            "Microsoft.AzureSphere/catalogs/listDeviceInsights/action",
            "Microsoft.AzureSphere/catalogs/listDevices/action",
            "Microsoft.AzureSphere/catalogs/listDeployments/action",
            "Microsoft.AzureSphere/catalogs/products/countDevices/action",
            "Microsoft.AzureSphere/catalogs/products/deviceGroups/countDevices/action",
            "Microsoft.AzureSphere/catalogs/certificates/retrieveCertChain/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/DiagnosticSettings/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Machine Learning Workspace Connection Secrets Reader",
      "Description": "Can list workspace connection secrets",
      "Permissions": [
        {
          "actions": [
            "Microsoft.MachineLearningServices/workspaces/connections/listsecrets/action",
            "Microsoft.MachineLearningServices/workspaces/metadata/secrets/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Procurement Contributor",
      "Description": "Lets you manage the procurement of products and services.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.SaaSHub/cloudservices/read",
            "Microsoft.SaaSHub/cloudservices/write",
            "Microsoft.SaaSHub/cloudservices/delete",
            "Microsoft.SaaSHub/register/action",
            "Microsoft.SaaS/resources/read",
            "Microsoft.SaaS/resources/write",
            "Microsoft.SaaS/resources/delete",
            "Microsoft.SaaS/register/action",
            "Microsoft.ProfessionalService/resources/read",
            "Microsoft.ProfessionalService/resources/write",
            "Microsoft.ProfessionalService/resources/delete",
            "Microsoft.ProfessionalService/register/action",
            "Microsoft.BillingBenefits/register/action",
            "Microsoft.BillingBenefits/maccs/read",
            "Microsoft.BillingBenefits/maccs/write",
            "Microsoft.BillingBenefits/maccs/delete",
            "Microsoft.BillingBenefits/maccs/cancel/action",
            "Microsoft.BillingBenefits/maccs/chargeShortfall/action",
            "Microsoft.BillingBenefits/maccs/contributors/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Search Serverless Data Reader (Deprecated)",
      "Description": "This role has been deprecated",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveSearch/indexes/schema/read",
            "Microsoft.CognitiveSearch/indexes/documents/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Search Serverless Data Contributor (Deprecated)",
      "Description": "This role has been deprecated",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.CognitiveSearch/indexes/schema/*",
            "Microsoft.CognitiveSearch/indexes/documents/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Community Owner Role",
      "Description": "Community Owner Role to access the resources of Microsoft.Mission stored with RPSAAS.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Mission/register/action",
            "Microsoft.Mission/unregister/action",
            "Microsoft.Mission/Locations/OperationStatuses/read",
            "Microsoft.Mission/Locations/OperationStatuses/write",
            "Microsoft.Mission/Operations/read",
            "Microsoft.Mission/catalogs/read",
            "Microsoft.Mission/catalogs/write",
            "Microsoft.Mission/catalogs/delete",
            "Microsoft.Mission/communities/read",
            "Microsoft.Mission/communities/write",
            "Microsoft.Mission/communities/delete",
            "Microsoft.Mission/internalConnections/read",
            "Microsoft.Mission/internalConnections/write",
            "Microsoft.Mission/internalConnections/delete",
            "Microsoft.Mission/virtualEnclaves/read",
            "Microsoft.Mission/virtualEnclaves/write",
            "Microsoft.Mission/virtualEnclaves/delete",
            "Microsoft.Mission/virtualEnclaves/workloads/read",
            "Microsoft.Mission/virtualEnclaves/workloads/write",
            "Microsoft.Mission/virtualEnclaves/workloads/delete",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Features/features/read",
            "Microsoft.Mission/communities/communityEndpoints/read",
            "Microsoft.Mission/communities/communityEndpoints/write",
            "Microsoft.Mission/communities/communityEndpoints/delete",
            "Microsoft.Mission/communities/transitHubs/read",
            "Microsoft.Mission/communities/transitHubs/write",
            "Microsoft.Mission/communities/transitHubs/delete",
            "Microsoft.Mission/enclaveConnections/read",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Firmware Analysis Admin",
      "Description": "Upload and analyze firmware images in Defender for IoT",
      "Permissions": [
        {
          "actions": [
            "Microsoft.IoTFirmwareDefense/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Data Access Administrator",
      "Description": "Manage access to Azure Key Vault by adding or removing role assignments for the Key Vault Administrator, Key Vault Certificates Officer, Key Vault Crypto Officer, Key Vault Crypto Service Encryption User, Key Vault Crypto User, Key Vault Reader, Key Vault Secrets Officer, or Key Vault Secrets User roles. Includes an ABAC condition to constrain role assignments.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*",
            "Microsoft.KeyVault/vaults/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Defender for Storage Data Scanner",
      "Description": "Grants access to read blobs and update index tags. This role is used by the data scanner of Defender for Storage.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/tags/write",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/tags/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Compute Diagnostics Role",
      "Description": "Grants permissions to execute diagnostics provided by Compute Diagnostic Service for Compute Resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Compute/disks/beginGetAccess/action",
            "Microsoft.Compute/virtualmachinescalesets/disks/beginGetAccess/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Elastic SAN Network Admin",
      "Description": "Allows access to create Private Endpoints on SAN resources, and to read SAN resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ElasticSan/elasticSans/*/read",
            "Microsoft.ElasticSan/elasticSans/PrivateEndpointConnectionsApproval/action",
            "Microsoft.ElasticSan/elasticSans/privateEndpointConnections/write",
            "Microsoft.ElasticSan/elasticSans/privateEndpointConnections/delete",
            "Microsoft.ElasticSan/locations/asyncoperations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Cognitive Services Usages Reader",
      "Description": "Minimal permission to view Cognitive Services usages.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.CognitiveServices/locations/usages/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "PostgreSQL Flexible Server Long Term Retention Backup Role",
      "Description": "Role to allow backup vault to access PostgreSQL Flexible Server Resource APIs for Long Term Retention Backup.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DBforPostgreSQL/flexibleServers/ltrBackupOperations/read",
            "Microsoft.DBforPostgreSQL/flexibleServers/ltrPreBackup/action",
            "Microsoft.DBforPostgreSQL/flexibleServers/startLtrBackup/action",
            "Microsoft.DBforPostgreSQL/locations/azureAsyncOperation/read",
            "Microsoft.DBforPostgreSQL/locations/operationResults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Search Parameter Manager",
      "Description": "Role allows user or principal access to $status and $reindex to update search parameters",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/reindex/action",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/read",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/write",
            "Microsoft.HealthcareApis/workspaces/fhirservices/resources/searchparameter/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Virtual Machine Data Access Administrator (preview)",
      "Description": "Manage access to Virtual Machines by adding or removing role assignments for the Virtual Machine Administrator Login and Virtual Machine User Login roles. Includes an ABAC condition to constrain role assignments.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Compute/virtualMachines/*/read",
            "Microsoft.HybridCompute/machines/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Logic Apps Standard Contributor (Preview)",
      "Description": "You can manage all aspects of a Standard logic app and workflows. You can't change access or ownership.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Web/*/read",
            "Microsoft.Web/certificates/*",
            "Microsoft.Web/connectionGateways/*",
            "Microsoft.Web/connections/*",
            "Microsoft.Web/customApis/*",
            "Microsoft.Web/serverFarms/*",
            "Microsoft.Web/sites/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Logic Apps Standard Operator (Preview)",
      "Description": "You can enable and disable the logic app, resubmit workflow runs, as well as create connections. You can't edit workflows or settings.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Web/*/read",
            "Microsoft.Web/sites/applySlotConfig/Action",
            "microsoft.web/sites/hostruntime/*",
            "Microsoft.Web/sites/restart/Action",
            "Microsoft.Web/sites/slots/restart/Action",
            "Microsoft.Web/sites/slots/slotsswap/Action",
            "Microsoft.Web/sites/slots/start/Action",
            "Microsoft.Web/sites/slots/stop/Action",
            "Microsoft.Web/sites/slotsdiffs/Action",
            "Microsoft.Web/sites/slotsswap/Action",
            "Microsoft.Web/sites/start/Action",
            "Microsoft.Web/sites/stop/Action",
            "Microsoft.Web/sites/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Logic Apps Standard Reader (Preview)",
      "Description": "You have read-only access to all resources in a Standard logic app and workflows, including the workflow runs and their history.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Web/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Logic Apps Standard Developer (Preview)",
      "Description": "You can create and edit workflows, connections, and settings for a Standard logic app. You can't make changes outside the workflow scope.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Support/*",
            "Microsoft.Web/*/read",
            "Microsoft.Web/connections/*",
            "Microsoft.Web/customApis/*",
            "Microsoft.Web/sites/config/list/Action",
            "microsoft.web/sites/config/Write",
            "microsoft.web/sites/config/web/appsettings/delete",
            "microsoft.web/sites/config/web/appsettings/write",
            "microsoft.web/sites/deployWorkflowArtifacts/action",
            "microsoft.web/sites/hostruntime/*",
            "microsoft.web/sites/listworkflowsconnections/action",
            "Microsoft.Web/sites/publish/Action",
            "microsoft.web/sites/slots/config/appsettings/write",
            "Microsoft.Web/sites/slots/config/list/Action",
            "microsoft.web/sites/slots/config/web/appsettings/delete",
            "microsoft.web/sites/slots/deployWorkflowArtifacts/action",
            "microsoft.web/sites/slots/listworkflowsconnections/action",
            "Microsoft.Web/sites/slots/publish/Action",
            "microsoft.web/sites/workflows/*",
            "microsoft.web/sites/workflowsconfiguration/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "IPAM Pool User",
      "Description": "Read IPAM Pools and child resources. Create and remove associations. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Network/networkManagers/ipamPools/*/read",
            "Microsoft.Network/networkManagers/ipamPools/*/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "SpatialMapsAccounts Account Owner",
      "Description": "Lets you manage data in your account, including deleting them",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MixedReality/spatialMapsAccounts/read",
            "Microsoft.MixedReality/spatialMapsAccounts/delete",
            "Microsoft.MixedReality/spatialMapsAccounts/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Resource Notifications System Topics Subscriber",
      "Description": "Lets you create system topics and event subscriptions on all system topics exposed currently and in the future by Azure Resource Notifications",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ResourceNotifications/systemTopics/subscribeToResources/action",
            "Microsoft.ResourceNotifications/systemTopics/subscribeToHealthResources/action",
            "Microsoft.ResourceNotifications/systemTopics/subscribeToMaintenanceResources/action",
            "Microsoft.ResourceNotifications/systemTopics/subscribeToComputeResources/action",
            "Microsoft.ResourceNotifications/systemTopics/subscribeToComputeScheduleResources/action",
            "Microsoft.EventGrid/eventSubscriptions/write",
            "Microsoft.EventGrid/systemTopics/eventSubscriptions/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Elastic SAN Volume Importer",
      "Description": "Allows for Importing Elastic San Volume",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ElasticSan/elasticSans/volumeGroups/*/read",
            "Microsoft.ElasticSan/elasticSans/volumeGroups/volumes/write",
            "Microsoft.ElasticSan/locations/*",
            "Microsoft.Compute/locations/*",
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/beginGetAccess/action",
            "Microsoft.Compute/disks/endGetAccess/action",
            "Microsoft.Compute/snapshots/read",
            "Microsoft.Compute/snapshots/beginGetAccess/action",
            "Microsoft.Compute/snapshots/endGetAccess/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Elastic SAN Snapshot Exporter",
      "Description": "Allows for creating and exporting Snapshot of Elastic San Volume",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ElasticSan/elasticSans/*/read",
            "Microsoft.ElasticSan/elasticSans/volumeGroups/snapshots/write",
            "Microsoft.ElasticSan/elasticSans/volumeGroups/snapshots/delete",
            "Microsoft.ElasticSan/elasticSans/volumeGroups/snapshots/beginGetAccess/action",
            "Microsoft.ElasticSan/locations/*",
            "Microsoft.Compute/locations/*",
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/write",
            "Microsoft.Compute/disks/delete",
            "Microsoft.Compute/snapshots/read",
            "Microsoft.Compute/snapshots/write",
            "Microsoft.Compute/snapshots/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Community Contributor Role",
      "Description": "Community Contributor Role to access the resources of Microsoft.Mission stored with RPSAAS.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Mission/register/action",
            "Microsoft.Mission/unregister/action",
            "Microsoft.Mission/Locations/OperationStatuses/read",
            "Microsoft.Mission/Locations/OperationStatuses/write",
            "Microsoft.Mission/Operations/read",
            "Microsoft.Mission/catalogs/read",
            "Microsoft.Mission/catalogs/write",
            "Microsoft.Mission/communities/read",
            "Microsoft.Mission/communities/write",
            "Microsoft.Mission/internalConnections/read",
            "Microsoft.Mission/internalConnections/write",
            "Microsoft.Mission/externalConnections/read",
            "Microsoft.Mission/externalConnections/write",
            "Microsoft.Mission/virtualEnclaves/read",
            "Microsoft.Mission/virtualEnclaves/write",
            "Microsoft.Mission/virtualEnclaves/endpoints/read",
            "Microsoft.Mission/virtualEnclaves/endpoints/write",
            "Microsoft.Mission/virtualEnclaves/workloads/read",
            "Microsoft.Mission/virtualEnclaves/workloads/write",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Features/features/read",
            "Microsoft.Mission/communities/communityEndpoints/read",
            "Microsoft.Mission/communities/communityEndpoints/write",
            "Microsoft.Mission/communities/transitHubs/read",
            "Microsoft.Mission/communities/transitHubs/write",
            "Microsoft.Mission/enclaveConnections/read",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "EventGrid TopicSpaces Publisher",
      "Description": "Lets you publish messages on topicspaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.EventGrid/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventGrid/topicSpaces/publish/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "EventGrid TopicSpaces Subscriber",
      "Description": "Lets you subscribe messages on topicspaces.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.EventGrid/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventGrid/topicSpaces/subscribe/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Data Boundary Tenant Administrator",
      "Description": "Allows tenant level administration for data boundaries.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/dataBoundaries/write",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DeID Realtime Data User",
      "Description": "Execute requests against DeID realtime endpoint. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthDataAIServices/DeidServices/Realtime/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DeID Batch Data Owner",
      "Description": "Create and manage DeID batch jobs. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthDataAIServices/DeidServices/Batch/write",
            "Microsoft.HealthDataAIServices/DeidServices/Batch/delete",
            "Microsoft.HealthDataAIServices/DeidServices/Batch/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DeID Batch Data Reader",
      "Description": "Read DeID batch jobs. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthDataAIServices/DeidServices/Batch/read"
          ],
          "not_data_actions": [
            "Microsoft.HealthDataAIServices/DeidServices/Batch/write",
            "Microsoft.HealthDataAIServices/DeidServices/Batch/delete"
          ]
        }
      ]
    },
    {
      "RoleName": "Carbon Optimization Reader",
      "Description": "Allow read access to Azure Carbon Optimization data",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Carbon/carbonEmissionReports/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Landing Zone Management Owner",
      "Description": "Microsoft.Sovereign Landing Zone Management Owner allowing to review and modify Landing Zone Configurations as well as reading and adding Landing Zone Registrations. Also enables read-access to policies and management groups for enabling the full user experience of the Sovereign Services RP in the Azure Portal (as otherwise some elements might not be accessible to end users).",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Sovereign/landingZoneConfigurations/*",
            "Microsoft.Sovereign/landingZoneRegistrations/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Landing Zone Management Reader",
      "Description": "Microsoft.Sovereign Landing Zone Management Reader allowing to review Landing Zone Configurations and corresponding Registrations without the ability to modify. Also enables read-access to policies and management groups for enabling the full user experience of the Sovereign Services RP in the Azure Portal (as otherwise some elements might not be accessible to end users).",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Sovereign/landingZoneConfigurations/read",
            "Microsoft.Sovereign/landingZoneRegistrations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Stack HCI Device Management Role",
      "Description": "Microsoft.AzureStackHCI Device Management Role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureStackHCI/Clusters/*",
            "Microsoft.AzureStackHCI/EdgeDevices/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Customer Lockbox Approver for Subscription",
      "Description": "Can approve Microsoft support requests to access specific resources contained within a subscription, or the subscription itself, when Customer Lockbox for Microsoft Azure is enabled on the tenant where the subscription resides.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.CustomerLockbox/requests/UpdateApproval/action",
            "Microsoft.CustomerLockbox/requests/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/eventtypes/values/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Resource Bridge Deployment Role",
      "Description": "Azure Resource Bridge Deployment Role",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleassignments/read",
            "Microsoft.AzureStackHCI/Register/Action",
            "Microsoft.ResourceConnector/register/action",
            "Microsoft.ResourceConnector/appliances/read",
            "Microsoft.ResourceConnector/appliances/write",
            "Microsoft.ResourceConnector/appliances/delete",
            "Microsoft.ResourceConnector/locations/operationresults/read",
            "Microsoft.ResourceConnector/locations/operationsstatus/read",
            "Microsoft.ResourceConnector/appliances/listClusterUserCredential/action",
            "Microsoft.ResourceConnector/appliances/listKeys/action",
            "Microsoft.ResourceConnector/appliances/upgradeGraphs/read",
            "Microsoft.ResourceConnector/telemetryconfig/read",
            "Microsoft.ResourceConnector/operations/read",
            "Microsoft.ExtendedLocation/register/action",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.ExtendedLocation/customLocations/read",
            "Microsoft.ExtendedLocation/customLocations/write",
            "Microsoft.ExtendedLocation/customLocations/delete",
            "Microsoft.HybridConnectivity/register/action",
            "Microsoft.Kubernetes/register/action",
            "Microsoft.KubernetesConfiguration/register/action",
            "Microsoft.KubernetesConfiguration/extensions/write",
            "Microsoft.KubernetesConfiguration/extensions/read",
            "Microsoft.KubernetesConfiguration/extensions/delete",
            "Microsoft.KubernetesConfiguration/extensions/operations/read",
            "Microsoft.KubernetesConfiguration/namespaces/read",
            "Microsoft.KubernetesConfiguration/operations/read",
            "Microsoft.GuestConfiguration/guestConfigurationAssignments/read",
            "Microsoft.HybridContainerService/register/action",
            "Microsoft.HybridContainerService/kubernetesVersions/read",
            "Microsoft.HybridContainerService/kubernetesVersions/write",
            "Microsoft.HybridContainerService/skus/read",
            "Microsoft.HybridContainerService/skus/write",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.AzureStackHCI/StorageContainers/Write",
            "Microsoft.AzureStackHCI/StorageContainers/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Stack HCI VM Contributor",
      "Description": "Grants permissions to perform all VM actions",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureStackHCI/VirtualMachines/*",
            "Microsoft.AzureStackHCI/virtualMachineInstances/*",
            "Microsoft.AzureStackHCI/NetworkInterfaces/*",
            "Microsoft.AzureStackHCI/VirtualHardDisks/*",
            "Microsoft.AzureStackHCI/VirtualNetworks/Read",
            "Microsoft.AzureStackHCI/VirtualNetworks/join/action",
            "Microsoft.AzureStackHCI/LogicalNetworks/Read",
            "Microsoft.AzureStackHCI/LogicalNetworks/join/action",
            "Microsoft.AzureStackHCI/GalleryImages/Read",
            "Microsoft.AzureStackHCI/GalleryImages/deploy/action",
            "Microsoft.AzureStackHCI/StorageContainers/Read",
            "Microsoft.AzureStackHCI/StorageContainers/deploy/action",
            "Microsoft.AzureStackHCI/MarketplaceGalleryImages/Read",
            "Microsoft.AzureStackHCI/MarketPlaceGalleryImages/deploy/action",
            "Microsoft.AzureStackHCI/Clusters/Read",
            "Microsoft.AzureStackHCI/Clusters/ArcSettings/Read",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/Read",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/SecurityRules/Read",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/write",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridCompute/machines/delete",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action",
            "Microsoft.HybridCompute/machines/assessPatches/action",
            "Microsoft.HybridCompute/machines/installPatches/action",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.HybridCompute/machines/extensions/delete",
            "Microsoft.HybridCompute/operations/read",
            "Microsoft.HybridCompute/locations/operationresults/read",
            "Microsoft.HybridCompute/locations/operationstatus/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/softwarePatches/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/softwarePatches/read",
            "Microsoft.HybridCompute/locations/updateCenterOperationResults/read",
            "Microsoft.HybridCompute/machines/hybridIdentityMetadata/read",
            "Microsoft.HybridCompute/osType/agentVersions/read",
            "Microsoft.HybridCompute/osType/agentVersions/latest/read",
            "Microsoft.HybridCompute/machines/runcommands/read",
            "Microsoft.HybridCompute/machines/runcommands/write",
            "Microsoft.HybridCompute/machines/runcommands/delete",
            "Microsoft.HybridCompute/machines/licenseProfiles/read",
            "Microsoft.HybridCompute/machines/licenseProfiles/write",
            "Microsoft.HybridCompute/machines/licenseProfiles/delete",
            "Microsoft.HybridCompute/licenses/read",
            "Microsoft.HybridCompute/licenses/write",
            "Microsoft.HybridCompute/licenses/delete",
            "Microsoft.ExtendedLocation/customLocations/Read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.KubernetesConfiguration/extensions/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure AI Developer",
      "Description": "Can perform all actions within an Azure AI resource besides managing the resource itself.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.MachineLearningServices/workspaces/*/read",
            "Microsoft.MachineLearningServices/workspaces/*/action",
            "Microsoft.MachineLearningServices/workspaces/*/delete",
            "Microsoft.MachineLearningServices/workspaces/*/write",
            "Microsoft.MachineLearningServices/locations/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [
            "Microsoft.MachineLearningServices/workspaces/delete",
            "Microsoft.MachineLearningServices/workspaces/write",
            "Microsoft.MachineLearningServices/workspaces/listKeys/action",
            "Microsoft.MachineLearningServices/workspaces/hubs/write",
            "Microsoft.MachineLearningServices/workspaces/hubs/delete",
            "Microsoft.MachineLearningServices/workspaces/featurestores/write",
            "Microsoft.MachineLearningServices/workspaces/featurestores/delete"
          ],
          "data_actions": [
            "Microsoft.CognitiveServices/accounts/OpenAI/*",
            "Microsoft.CognitiveServices/accounts/SpeechServices/*",
            "Microsoft.CognitiveServices/accounts/ContentSafety/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Stack HCI VM Reader",
      "Description": "Grants permissions to view VMs",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureStackHCI/VirtualMachines/Read",
            "Microsoft.AzureStackHCI/virtualMachineInstances/Read",
            "Microsoft.AzureStackHCI/VirtualMachines/Extensions/Read",
            "Microsoft.AzureStackHCI/VirtualNetworks/Read",
            "Microsoft.AzureStackHCI/LogicalNetworks/Read",
            "Microsoft.AzureStackHCI/NetworkInterfaces/Read",
            "Microsoft.AzureStackHCI/VirtualHardDisks/Read",
            "Microsoft.AzureStackHCI/StorageContainers/Read",
            "Microsoft.AzureStackHCI/GalleryImages/Read",
            "Microsoft.AzureStackHCI/MarketplaceGalleryImages/Read",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/Read",
            "Microsoft.AzureStackHCI/NetworkSecurityGroups/SecurityRules/Read",
            "Microsoft.HybridCompute/licenses/read",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/licenseProfiles/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/read",
            "Microsoft.HybridCompute/machines/patchAssessmentResults/softwarePatches/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/read",
            "Microsoft.HybridCompute/machines/patchInstallationResults/softwarePatches/read",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/privateLinkScopes/networkSecurityPerimeterConfigurations/read",
            "Microsoft.HybridCompute/privateLinkScopes/privateEndpointConnections/read",
            "Microsoft.HybridCompute/privateLinkScopes/read",
            "Microsoft.Insights/AlertRules/Write",
            "Microsoft.Insights/AlertRules/Delete",
            "Microsoft.Insights/AlertRules/Read",
            "Microsoft.Insights/AlertRules/Activated/Action",
            "Microsoft.Insights/AlertRules/Resolved/Action",
            "Microsoft.Insights/AlertRules/Throttled/Action",
            "Microsoft.Insights/AlertRules/Incidents/Read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operations/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/operationstatuses/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/operationresults/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Deployment Environments Reader",
      "Description": "Provides read access to environment resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DevCenter/projects/read",
            "Microsoft.DevCenter/projects/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [
            "Microsoft.DevCenter/projects/pools/read",
            "Microsoft.DevCenter/projects/pools/schedules/read"
          ],
          "data_actions": [
            "Microsoft.DevCenter/projects/users/environments/adminRead/action",
            "Microsoft.DevCenter/projects/users/environments/adminActionRead/action",
            "Microsoft.DevCenter/projects/users/environments/adminOutputsRead/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure AI Inference Deployment Operator",
      "Description": "Can perform all actions required to create a resource deployment within a resource group.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Insights/AutoscaleSettings/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "EventGrid Data Contributor",
      "Description": "Allows send and receive access to event grid events.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.EventGrid/eventSubscriptions/read",
            "Microsoft.EventGrid/topicTypes/eventSubscriptions/read",
            "Microsoft.EventGrid/locations/eventSubscriptions/read",
            "Microsoft.EventGrid/locations/topicTypes/eventSubscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.EventGrid/topics/read",
            "Microsoft.EventGrid/domains/read",
            "Microsoft.EventGrid/partnerNamespaces/read",
            "Microsoft.EventGrid/namespaces/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventGrid/events/send/action",
            "Microsoft.EventGrid/events/receive/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "EventGrid Data Receiver",
      "Description": "Allows receive access to event grid events.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.EventGrid/eventSubscriptions/read",
            "Microsoft.EventGrid/topicTypes/eventSubscriptions/read",
            "Microsoft.EventGrid/locations/eventSubscriptions/read",
            "Microsoft.EventGrid/locations/topicTypes/eventSubscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.EventGrid/namespaces/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.EventGrid/events/receive/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Connected Cluster Managed Identity CheckAccess Reader",
      "Description": "Built-in role that allows a Connected Cluster managed identity to call the checkAccess API",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Advisor Reviews Reader",
      "Description": "View reviews for a workload and recommendations linked to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Advisor/resiliencyReviews/read",
            "Microsoft.Advisor/triageRecommendations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Advisor Reviews Contributor",
      "Description": "View reviews for a workload and triage recommendations linked to them.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Advisor/resiliencyReviews/read",
            "Microsoft.Advisor/triageRecommendations/read",
            "Microsoft.Advisor/triageRecommendations/approve/action",
            "Microsoft.Advisor/triageRecommendations/reject/action",
            "Microsoft.Advisor/triageRecommendations/reset/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "AgFood Platform Dataset Admin",
      "Description": "Provides access to Dataset APIs",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/datasets/*",
            "Microsoft.AgFoodPlatform/farmBeats/datasetRecords/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Defender for Storage Scanner Operator",
      "Description": "Lets you enable and configure Microsoft Defender for Storage's malware scanning and sensitive data discovery features on your storage accounts. Includes an ABAC condition to limit role assignments.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*",
            "Microsoft.Security/defenderforstoragesettings/read",
            "Microsoft.Security/defenderforstoragesettings/write",
            "Microsoft.Security/advancedThreatProtectionSettings/read",
            "Microsoft.Security/advancedThreatProtectionSettings/write",
            "Microsoft.Security/datascanners/read",
            "Microsoft.Security/datascanners/write",
            "Microsoft.Security/dataScanners/delete",
            "Microsoft.Storage/storageAccounts/write",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.EventGrid/topics/read",
            "Microsoft.EventGrid/eventSubscriptions/read",
            "Microsoft.EventGrid/eventSubscriptions/write",
            "Microsoft.EventGrid/eventSubscriptions/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Front Door Profile Reader",
      "Description": "Can view AFD standard and premium profiles and their endpoints, but can't make changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Cdn/edgenodes/read",
            "Microsoft.Cdn/operationresults/*",
            "Microsoft.Cdn/profiles/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Cdn/operationresults/profileresults/afdendpointresults/CheckCustomDomainDNSMappingStatus/action",
            "Microsoft.Cdn/profiles/queryloganalyticsmetrics/action",
            "Microsoft.Cdn/profiles/queryloganalyticsrankings/action",
            "Microsoft.Cdn/profiles/querywafloganalyticsmetrics/action",
            "Microsoft.Cdn/profiles/querywafloganalyticsrankings/action",
            "Microsoft.Cdn/profiles/afdendpoints/CheckCustomDomainDNSMappingStatus/action",
            "Microsoft.Cdn/profiles/Usages/action",
            "Microsoft.Cdn/profiles/afdendpoints/Usages/action",
            "Microsoft.Cdn/profiles/origingroups/Usages/action",
            "Microsoft.Cdn/profiles/rulesets/Usages/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Enclave Reader Role",
      "Description": "Enclave Reader Role to access the resources of Microsoft.Mission stored with RPSAAS.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Mission/Operations/read",
            "Microsoft.Mission/catalogs/read",
            "Microsoft.Mission/catalogs/write",
            "Microsoft.Mission/catalogs/delete",
            "Microsoft.Mission/communities/read",
            "Microsoft.Mission/internalConnections/read",
            "Microsoft.Mission/virtualEnclaves/read",
            "Microsoft.Mission/virtualEnclaves/endpoints/read",
            "Microsoft.Mission/virtualEnclaves/workloads/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Features/features/read",
            "Microsoft.Mission/communities/communityEndpoints/read",
            "Microsoft.Mission/communities/transitHubs/read",
            "Microsoft.Mission/enclaveConnections/read",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Hybrid Cluster Admin Role",
      "Description": "List cluster admin credential action.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridContainerService/provisionedClusterInstances/read",
            "Microsoft.HybridContainerService/provisionedClusterInstances/listAdminKubeconfig/action",
            "Microsoft.Kubernetes/connectedClusters/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Hybrid Contributor Role",
      "Description": "Grants access to read and write Azure Kubernetes Services hybrid clusters",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridContainerService/Locations/operationStatuses/read",
            "Microsoft.HybridContainerService/Operations/read",
            "Microsoft.HybridContainerService/kubernetesVersions/read",
            "Microsoft.HybridContainerService/kubernetesVersions/write",
            "Microsoft.HybridContainerService/kubernetesVersions/delete",
            "Microsoft.HybridContainerService/provisionedClusterInstances/read",
            "Microsoft.HybridContainerService/provisionedClusterInstances/write",
            "Microsoft.HybridContainerService/provisionedClusterInstances/delete",
            "Microsoft.HybridContainerService/provisionedClusterInstances/agentPools/read",
            "Microsoft.HybridContainerService/provisionedClusterInstances/agentPools/write",
            "Microsoft.HybridContainerService/provisionedClusterInstances/agentPools/delete",
            "Microsoft.HybridContainerService/provisionedClusterInstances/upgradeProfiles/read",
            "Microsoft.HybridContainerService/skus/read",
            "Microsoft.HybridContainerService/skus/write",
            "Microsoft.HybridContainerService/skus/delete",
            "Microsoft.HybridContainerService/virtualNetworks/read",
            "Microsoft.HybridContainerService/virtualNetworks/write",
            "Microsoft.HybridContainerService/virtualNetworks/delete",
            "Microsoft.Kubernetes/connectedClusters/Read",
            "Microsoft.Kubernetes/connectedClusters/Write",
            "Microsoft.Kubernetes/connectedClusters/Delete",
            "Microsoft.Kubernetes/connectedClusters/listClusterUserCredential/action",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.ExtendedLocation/customLocations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Hybrid Cluster User Role",
      "Description": "List cluster user credential action.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridContainerService/provisionedClusterInstances/read",
            "Microsoft.HybridContainerService/provisionedClusterInstances/listUserKubeconfig/action",
            "Microsoft.Kubernetes/connectedClusters/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Enclave Owner Role",
      "Description": "Enclave Owner Role to access the resources of Microsoft.Mission stored with RPSAAS.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Mission/Locations/OperationStatuses/read",
            "Microsoft.Mission/Locations/OperationStatuses/write",
            "Microsoft.Mission/Operations/read",
            "Microsoft.Mission/catalogs/read",
            "Microsoft.Mission/catalogs/write",
            "Microsoft.Mission/catalogs/delete",
            "Microsoft.Mission/internalConnections/read",
            "Microsoft.Mission/internalConnections/write",
            "Microsoft.Mission/internalConnections/delete",
            "Microsoft.Mission/virtualEnclaves/read",
            "Microsoft.Mission/virtualEnclaves/write",
            "Microsoft.Mission/virtualEnclaves/delete",
            "Microsoft.Mission/virtualEnclaves/workloads/read",
            "Microsoft.Mission/virtualEnclaves/workloads/write",
            "Microsoft.Mission/virtualEnclaves/workloads/delete",
            "Microsoft.Mission/communities/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Features/features/read",
            "Microsoft.Mission/communities/communityEndpoints/read",
            "Microsoft.Mission/communities/transitHubs/read",
            "Microsoft.Mission/enclaveConnections/read",
            "Microsoft.Mission/enclaveConnections/write",
            "Microsoft.Mission/enclaveConnections/delete",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/read",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/write",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Community Reader Role",
      "Description": "Community Reader Role to access the resources of Microsoft.Mission stored with RPSAAS.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Mission/Locations/OperationStatuses/read",
            "Microsoft.Mission/Operations/read",
            "Microsoft.Mission/catalogs/read",
            "Microsoft.Mission/communities/read",
            "Microsoft.Mission/internalConnections/read",
            "Microsoft.Mission/externalConnections/read",
            "Microsoft.Mission/virtualEnclaves/read",
            "Microsoft.Mission/virtualEnclaves/endpoints/read",
            "Microsoft.Mission/virtualEnclaves/workloads/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Features/features/read",
            "Microsoft.Mission/communities/communityEndpoints/read",
            "Microsoft.Mission/communities/transitHubs/read",
            "Microsoft.Mission/enclaveConnections/read",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Enclave Contributor Role",
      "Description": "Enclave Contributor Role to access the resources of Microsoft.Mission stored with RPSAAS.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Mission/register/action",
            "Microsoft.Mission/unregister/action",
            "Microsoft.Mission/Locations/OperationStatuses/read",
            "Microsoft.Mission/Locations/OperationStatuses/write",
            "Microsoft.Mission/Operations/read",
            "Microsoft.Mission/catalogs/read",
            "Microsoft.Mission/catalogs/write",
            "Microsoft.Mission/communities/read",
            "Microsoft.Mission/internalConnections/read",
            "Microsoft.Mission/internalConnections/write",
            "Microsoft.Mission/virtualEnclaves/read",
            "Microsoft.Mission/virtualEnclaves/write",
            "Microsoft.Mission/virtualEnclaves/endpoints/read",
            "Microsoft.Mission/virtualEnclaves/endpoints/write",
            "Microsoft.Mission/virtualEnclaves/workloads/read",
            "Microsoft.Mission/virtualEnclaves/workloads/write",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.Features/features/read",
            "Microsoft.Mission/communities/communityEndpoints/read",
            "Microsoft.Mission/communities/transitHubs/read",
            "Microsoft.Mission/enclaveConnections/read",
            "Microsoft.Mission/enclaveConnections/write",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/read",
            "Microsoft.Mission/virtualEnclaves/enclaveEndpoints/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Operator Nexus Key Vault Writer Service Role (Preview)",
      "Description": "(Preview) Provides Azure Operator Nexus services the ability to write to a Key Vault. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.KeyVault/vaults/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/secrets/setSecret/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Storage Account Encryption Scope Contributor Role",
      "Description": "Allows management of Encryption Scopes on a Storage Account",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/encryptionScopes/read",
            "Microsoft.Storage/storageAccounts/encryptionScopes/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Crypto Service Release User",
      "Description": "Release keys. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/keys/release/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Kubernetes Runtime Storage Class Contributor Role",
      "Description": "Read, write, and delete Kubernetes Runtime storage classes in an Arc connected Kubernetes cluster",
      "Permissions": [
        {
          "actions": [
            "Microsoft.KubernetesRuntime/storageClasses/read",
            "Microsoft.KubernetesRuntime/storageClasses/write",
            "Microsoft.KubernetesRuntime/storageClasses/delete",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Programmable Connectivity Gateway User",
      "Description": "Allows access to all Gateway dataplane APIs.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Key Vault Certificate User",
      "Description": "Read certificate contents. Only works for key vaults that use the 'Azure role-based access control' permission model.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.KeyVault/vaults/certificates/read",
            "Microsoft.KeyVault/vaults/secrets/getSecret/action",
            "Microsoft.KeyVault/vaults/secrets/readMetadata/action",
            "Microsoft.KeyVault/vaults/keys/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Managed Components Log Reader Role",
      "Description": "Read real-time logs for all managed components in Azure Spring Apps",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/managedComponents/logstream/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Spring Cloud Gateway Log Reader Role",
      "Description": "Read real-time logs for Spring Cloud Gateway in Azure Spring Apps",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AppPlatform/Spring/read",
            "Microsoft.AppPlatform/Spring/gateways/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/SpringCloudGateway/logstream/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure API Center Data Reader",
      "Description": "Allows for access to Azure API Center data plane read operations.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ApiCenter/services/*/read",
            "Microsoft.ApiCenter/services/workspaces/apis/versions/definitions/exportSpecification/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Application Configuration Service Log Reader Role",
      "Description": "Read real-time logs for Application Configuration Service in Azure Spring Apps",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AppPlatform/Spring/read",
            "Microsoft.AppPlatform/Spring/configurationServices/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/ApplicationConfigurationService/logstream/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Edge On-Site Deployment Engineer",
      "Description": "Grants you access to take actions as an on-site person to assist in the provisioning of an edge device",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EdgeOrder/bootstrapConfigurations/read",
            "Microsoft.EdgeOrder/bootstrapConfigurations/uploadArtifacts/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure impact-insight reader",
      "Description": "built-in role for azure impact-insight read access",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Impact/WorkloadImpacts/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Defender Kubernetes Agent Operator",
      "Description": "Grants Microsoft Defender for Cloud permissions to provision the Kubernetes defender security agent",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/resourceGroups/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.KubernetesConfiguration/extensions/write",
            "Microsoft.KubernetesConfiguration/extensions/read",
            "Microsoft.KubernetesConfiguration/extensions/delete",
            "Microsoft.KubernetesConfiguration/extensions/operations/read",
            "Microsoft.Kubernetes/connectedClusters/Write",
            "Microsoft.Kubernetes/connectedClusters/read",
            "Microsoft.OperationalInsights/workspaces/write",
            "Microsoft.OperationalInsights/workspaces/read",
            "Microsoft.OperationalInsights/workspaces/listKeys/action",
            "Microsoft.OperationalInsights/workspaces/sharedkeys/action",
            "Microsoft.Kubernetes/register/action",
            "Microsoft.KubernetesConfiguration/register/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Image Registry Operator Role",
      "Description": "Enables permissions for the operator to manage a singleton instance of the OpenShift image registry. It manages all configuration of the registry, including creating storage.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/blobServices/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/write",
            "Microsoft.Storage/storageAccounts/blobServices/generateUserDelegationKey/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/write",
            "Microsoft.Storage/storageAccounts/delete",
            "Microsoft.Storage/storageAccounts/listKeys/action",
            "Microsoft.Resources/tags/write"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/delete",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/add/action",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/move/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Service Operator Role",
      "Description": "The ARO Operator is responsible for maintaining features, checks, and resources that are specific to an Azure Red Hat OpenShift cluster's continued functionality as a managed service. This includes, but is not limited to, machine management and health, network configuration, and monitoring.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write",
            "Microsoft.Network/natGateways/join/action",
            "Microsoft.Network/routeTables/join/action",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Storage/storageAccounts/listKeys/action",
            "Microsoft.Storage/storageAccounts/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Network Operator Role",
      "Description": "Enables permissions to install and upgrade the networking components on an OpenShift cluster.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/loadBalancers/backendAddressPools/join/action",
            "Microsoft.Compute/virtualMachines/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Storage Operator Role",
      "Description": "Enables permissions to set OpenShift cluster-wide storage defaults. It ensures a default storageclass exists for clusters. It also installs Container Storage Interface (CSI) drivers which enable your cluster to use various storage backends.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/virtualMachines/write",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/write",
            "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read",
            "Microsoft.Compute/virtualMachineScaleSets/read",
            "Microsoft.Compute/snapshots/write",
            "Microsoft.Compute/snapshots/read",
            "Microsoft.Compute/snapshots/delete",
            "Microsoft.Compute/locations/operations/read",
            "Microsoft.Compute/locations/DiskOperations/read",
            "Microsoft.Compute/disks/write",
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/delete",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Cluster Ingress Operator Role",
      "Description": "Enables permissions for the operator to configure and manage the OpenShift router.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Network/dnsZones/A/delete",
            "Microsoft.Network/dnsZones/A/write",
            "Microsoft.Network/privateDnsZones/A/delete",
            "Microsoft.Network/privateDnsZones/A/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Azure Files Storage Operator Role",
      "Description": "Enables permissions to set OpenShift cluster-wide storage defaults. It ensures a default storageclass exists for clusters. It also installs Container Storage Interface (CSI) drivers which enable your cluster to use Azure Files.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/delete",
            "Microsoft.Storage/storageAccounts/fileServices/read",
            "Microsoft.Storage/storageAccounts/fileServices/shares/delete",
            "Microsoft.Storage/storageAccounts/fileServices/shares/read",
            "Microsoft.Storage/storageAccounts/fileServices/shares/write",
            "Microsoft.Storage/storageAccounts/listKeys/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/write",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Cloud Controller Manager Role",
      "Description": "Enables permissions for the operator to manage and update the cloud controller managers deployed on top of OpenShift.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/loadBalancers/write",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/networkSecurityGroups/write",
            "Microsoft.Network/publicIPAddresses/join/action",
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/publicIPAddresses/write",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/loadBalancers/backendAddressPools/join/action",
            "Microsoft.Network/networkInterfaces/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Machine API Operator Role",
      "Description": "Enables permissions for the operator to manage the lifecycle of specific purpose custom resource definitions (CRD), controllers, and RBAC objects that extend the Kubernetes API. This declares the desired state of machines in a cluster.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/availabilitySets/delete",
            "Microsoft.Compute/availabilitySets/read",
            "Microsoft.Compute/availabilitySets/write",
            "Microsoft.Compute/diskEncryptionSets/read",
            "Microsoft.Compute/disks/delete",
            "Microsoft.Compute/galleries/images/versions/read",
            "Microsoft.Compute/skus/read",
            "Microsoft.Compute/virtualMachines/delete",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/write",
            "Microsoft.ManagedIdentity/userAssignedIdentities/assign/action",
            "Microsoft.Network/applicationSecurityGroups/read",
            "Microsoft.Network/loadBalancers/backendAddressPools/join/action",
            "Microsoft.Network/loadBalancers/read",
            "Microsoft.Network/loadBalancers/write",
            "Microsoft.Network/networkInterfaces/delete",
            "Microsoft.Network/networkInterfaces/join/action",
            "Microsoft.Network/networkInterfaces/loadBalancers/read",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/networkSecurityGroups/write",
            "Microsoft.Network/publicIPAddresses/delete",
            "Microsoft.Network/publicIPAddresses/join/action",
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/publicIPAddresses/write",
            "Microsoft.Network/routeTables/read",
            "Microsoft.Network/virtualNetworks/delete",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Sphere Owner",
      "Description": "Allows user read and write access to Azure Sphere resources and RBAC configuration, includes an ABAC condition to constrain role assignments.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureSphere/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*",
            "Microsoft.Insights/DiagnosticSettings/*",
            "Microsoft.Insights/DiagnosticSettingsCategories/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        },
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        },
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "GroupQuota Reader",
      "Description": "Read GroupQuota requests, get GroupQuota request status, and get groupQuotaLimits.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "MICROSOFT.QUOTA/QUOTAS/READ",
            "MICROSOFT.QUOTA/USAGES/READ",
            "MICROSOFT.QUOTA/QUOTAREQUESTS/READ",
            "MICROSOFT.QUOTA/REGISTER/ACTION",
            "Microsoft.Quota/GROUPQUOTAS/READ",
            "Microsoft.Quota/GROUPQUOTAS/subscriptions/READ",
            "Microsoft.Quota/GROUPQUOTAS/groupQuotaLimits/READ",
            "Microsoft.Quota/GROUPQUOTAS/quotaAllocations/READ"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "GroupQuota Request Operator",
      "Description": "Read and create GroupQuota requests, get GroupQuota request status, and get groupQuotaLimits.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/read",
            "MICROSOFT.QUOTA/QUOTAS/WRITE",
            "MICROSOFT.QUOTA/QUOTAS/READ",
            "MICROSOFT.QUOTA/USAGES/READ",
            "MICROSOFT.QUOTA/QUOTAREQUESTS/READ",
            "MICROSOFT.QUOTA/REGISTER/ACTION",
            "Microsoft.Quota/GROUPQUOTAS/*/READ",
            "Microsoft.Quota/GROUPQUOTAS/*/WRITE"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Bayer Ag Powered Services Smart Boundary Solution User Role",
      "Description": "Provide access to Smart Boundary Solution by Bayer Ag Powered Services",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/parties/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/write",
            "Microsoft.AgFoodPlatform/farmBeats/ingestionJobs/satelliteDataIngestionJobs/*",
            "Microsoft.AgFoodPlatform/farmBeats/scenes/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insights/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insightAttachments/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Defender CSPM Storage Scanner Operator",
      "Description": "Lets you enable and configure Microsoft Defender CSPM's sensitive data discovery feature on your storage accounts. Includes an ABAC condition to limit role assignments.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Storage/storageAccounts/write",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        },
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        },
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Advisor Recommendations Contributor (Assessments and Reviews)",
      "Description": "View assessment recommendations, accepted review recommendations, and manage the recommendations lifecycle (mark recommendations as completed, postponed or dismissed, in progress, or not started).",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Advisor/recommendations/read",
            "Microsoft.Advisor/recommendations/write",
            "Microsoft.Advisor/recommendations/available/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "GeoCatalog Administrator",
      "Description": "Grants full access to manage GeoCatalogs, but does not allow you to assign roles in Azure RBAC.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Orbital/operations/read",
            "Microsoft.Orbital/geoCatalogs/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "GeoCatalog Reader",
      "Description": "View GeoCatalogs, but does not allow you to make any changes.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Orbital/operations/read",
            "Microsoft.Orbital/geoCatalogs/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Health Bot Reader",
      "Description": "Users with reader access can sign in, have read-only access to the bot resources, scenarios and configuration setting except for the bot instance keys & secrets (including Authentication, Data Connection and Channels keys) and the end-user inputs (including Feedback, Unrecognized utterances and Conversation logs).",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthBot/healthBots/Reader/Action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Health Bot Admin",
      "Description": "Users with admin access can sign in, view and edit all of the bot resources, scenarios and configuration setting including the bot instance keys & secrets.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthBot/healthBots/Admin/Action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Health Bot Editor",
      "Description": "Users with editor access can sign in, view and edit all the bot resources, scenarios and configuration setting except for the bot instance keys & secrets and the end-user inputs (including Feedback, Unrecognized utterances and Conversation logs). A read-only access to the bot skills and channels.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthBot/healthBots/Editor/Action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Programmable Connectivity Gateway Dataplane User",
      "Description": "Allows access to all Gateway dataplane APIs.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ProgrammableConnectivity/Gateways/NetworkAPIAccess"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure AI Enterprise Network Connection Approver",
      "Description": "Can approve private endpoint connections to Azure AI common dependency resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerRegistry/registries/privateEndpointConnectionsApproval/action",
            "Microsoft.ContainerRegistry/registries/privateEndpointConnections/read",
            "Microsoft.ContainerRegistry/registries/privateEndpointConnections/write",
            "Microsoft.Cache/redis/read",
            "Microsoft.Cache/redis/privateEndpointConnections/read",
            "Microsoft.Cache/redis/privateEndpointConnections/write",
            "Microsoft.Cache/redis/privateLinkResources/read",
            "Microsoft.Cache/redis/privateEndpointConnectionsApproval/action",
            "Microsoft.Cache/redisEnterprise/read",
            "Microsoft.Cache/redisEnterprise/privateEndpointConnections/read",
            "Microsoft.Cache/redisEnterprise/privateEndpointConnections/write",
            "Microsoft.Cache/redisEnterprise/privateLinkResources/read",
            "Microsoft.Cache/redisEnterprise/privateEndpointConnectionsApproval/action",
            "Microsoft.CognitiveServices/accounts/read",
            "Microsoft.CognitiveServices/accounts/privateEndpointConnections/read",
            "Microsoft.CognitiveServices/accounts/privateEndpointConnections/write",
            "Microsoft.CognitiveServices/accounts/privateLinkResources/read",
            "Microsoft.DocumentDB/databaseAccounts/privateEndpointConnectionsApproval/action",
            "Microsoft.DocumentDB/databaseAccounts/privateEndpointConnections/read",
            "Microsoft.DocumentDB/databaseAccounts/privateEndpointConnections/write",
            "Microsoft.DocumentDB/databaseAccounts/privateLinkResources/read",
            "Microsoft.DocumentDB/databaseAccounts/read",
            "Microsoft.KeyVault/vaults/privateEndpointConnectionsApproval/action",
            "Microsoft.KeyVault/vaults/privateEndpointConnections/read",
            "Microsoft.KeyVault/vaults/privateEndpointConnections/write",
            "Microsoft.KeyVault/vaults/privateLinkResources/read",
            "Microsoft.KeyVault/vaults/read",
            "Microsoft.MachineLearningServices/workspaces/privateEndpointConnectionsApproval/action",
            "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/read",
            "Microsoft.MachineLearningServices/workspaces/privateEndpointConnections/write",
            "Microsoft.MachineLearningServices/workspaces/privateLinkResources/read",
            "Microsoft.MachineLearningServices/workspaces/read",
            "Microsoft.Storage/storageAccounts/privateEndpointConnections/read",
            "Microsoft.Storage/storageAccounts/privateEndpointConnections/write",
            "Microsoft.Storage/storageAccounts/privateLinkResources/read",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Sql/servers/privateEndpointConnectionsApproval/action",
            "Microsoft.Sql/servers/privateEndpointConnections/read",
            "Microsoft.Sql/servers/privateEndpointConnections/write",
            "Microsoft.Sql/servers/privateLinkResources/read",
            "Microsoft.Sql/servers/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Container Storage Operator",
      "Description": "Role required by a Managed Identity for Azure Container Storage operations",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ElasticSan/elasticSans/*",
            "Microsoft.ElasticSan/locations/asyncoperations/read",
            "Microsoft.Network/routeTables/join/action",
            "Microsoft.Network/networkSecurityGroups/join/action",
            "Microsoft.Network/virtualNetworks/write",
            "Microsoft.Network/virtualNetworks/delete",
            "Microsoft.Network/virtualNetworks/join/action",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/write",
            "Microsoft.Compute/virtualMachineScaleSets/read",
            "Microsoft.Compute/virtualMachineScaleSets/write",
            "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/write",
            "Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read",
            "Microsoft.Resources/subscriptions/providers/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Network/virtualNetworks/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Container Storage Contributor",
      "Description": "Lets you install Azure Container Storage and manage its storage resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.KubernetesConfiguration/extensions/write",
            "Microsoft.KubernetesConfiguration/extensions/read",
            "Microsoft.KubernetesConfiguration/extensions/delete",
            "Microsoft.KubernetesConfiguration/extensions/operations/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        },
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Container Storage Owner",
      "Description": "Lets you install Azure Container Storage and grants access to its storage resources",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ElasticSan/elasticSans/*",
            "Microsoft.ElasticSan/locations/*",
            "Microsoft.ElasticSan/elasticSans/volumeGroups/*",
            "Microsoft.ElasticSan/elasticSans/volumeGroups/volumes/*",
            "Microsoft.ElasticSan/locations/asyncoperations/read",
            "Microsoft.KubernetesConfiguration/extensions/write",
            "Microsoft.KubernetesConfiguration/extensions/read",
            "Microsoft.KubernetesConfiguration/extensions/delete",
            "Microsoft.KubernetesConfiguration/extensions/operations/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Management/managementGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Support/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        },
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Arc Contributor Role",
      "Description": "Grants access to read and write Azure Kubernetes Services hybrid clusters",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridContainerService/Locations/operationStatuses/read",
            "Microsoft.HybridContainerService/Operations/read",
            "Microsoft.HybridContainerService/kubernetesVersions/read",
            "Microsoft.HybridContainerService/kubernetesVersions/write",
            "Microsoft.HybridContainerService/kubernetesVersions/delete",
            "Microsoft.HybridContainerService/provisionedClusterInstances/read",
            "Microsoft.HybridContainerService/provisionedClusterInstances/write",
            "Microsoft.HybridContainerService/provisionedClusterInstances/delete",
            "Microsoft.HybridContainerService/provisionedClusterInstances/agentPools/read",
            "Microsoft.HybridContainerService/provisionedClusterInstances/agentPools/write",
            "Microsoft.HybridContainerService/provisionedClusterInstances/agentPools/delete",
            "Microsoft.HybridContainerService/provisionedClusterInstances/upgradeProfiles/read",
            "Microsoft.HybridContainerService/skus/read",
            "Microsoft.HybridContainerService/skus/write",
            "Microsoft.HybridContainerService/skus/delete",
            "Microsoft.HybridContainerService/virtualNetworks/read",
            "Microsoft.HybridContainerService/virtualNetworks/write",
            "Microsoft.HybridContainerService/virtualNetworks/delete",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.ExtendedLocation/customLocations/read",
            "Microsoft.Kubernetes/connectedClusters/Read",
            "Microsoft.Kubernetes/connectedClusters/Write",
            "Microsoft.Kubernetes/connectedClusters/Delete",
            "Microsoft.Kubernetes/connectedClusters/listClusterUserCredential/action",
            "Microsoft.AzureStackHCI/clusters/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Arc Cluster User Role",
      "Description": "List cluster user credential action.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridContainerService/provisionedClusterInstances/read",
            "Microsoft.HybridContainerService/provisionedClusterInstances/listUserKubeconfig/action",
            "Microsoft.Kubernetes/connectedClusters/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Kubernetes Service Arc Cluster Admin Role",
      "Description": "List cluster admin credential action.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridContainerService/provisionedClusterInstances/read",
            "Microsoft.HybridContainerService/provisionedClusterInstances/listAdminKubeconfig/action",
            "Microsoft.Kubernetes/connectedClusters/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Backup MUA Operator",
      "Description": "Backup MultiUser-Authorization. Allows user to perform critical operation protected by resourceguard",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DataProtection/*/action",
            "Microsoft.DataProtection/*/read",
            "Microsoft.Authorization/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Backup MUA Admin",
      "Description": "Backup MultiUser-Authorization. Can create/delete ResourceGuard ",
      "Permissions": [
        {
          "actions": [
            "Microsoft.DataProtection/*/read",
            "Microsoft.DataProtection/*/resourceGuards/write",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/write",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/delete",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/read",
            "Microsoft.DataProtection/locations/operationResults/read",
            "Microsoft.DataProtection/locations/operationStatus/read",
            "Microsoft.DataProtection/locations/getBackupStatus/action",
            "Microsoft.DataProtection/locations/checkFeatureSupport/action",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/locations/operationStatus/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Features/features/read",
            "Microsoft.Features/providers/features/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/read",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/write",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/delete",
            "Microsoft.DataProtection/backupVaults/backupResourceGuardProxies/unlockDelete/action",
            "Microsoft.DataProtection/subscriptions/providers/resourceGuards/read",
            "Microsoft.DataProtection/subscriptions/resourceGroups/providers/resourceGuards/{operationName}/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Savings plan Reader",
      "Description": "Lets you read savings plans",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.BillingBenefits/savingsPlanOrders/read",
            "Microsoft.BillingBenefits/savingsPlanOrders/savingsPlans/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Savings plan Purchaser",
      "Description": "Lets you purchase savings plans",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Capacity/register/action",
            "Microsoft.Capacity/catalogs/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.BillingBenefits/savingsPlanOrders/write",
            "Microsoft.BIllingBenefits/register/action",
            "Microsoft.Support/supporttickets/write",
            "Microsoft.Billing/billingProperty/read",
            "Microsoft.CostManagement/benefitRecommendations/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Savings plan Administrator",
      "Description": "Lets you read, manage savings plans and delegate savings plan-related roles",
      "Permissions": [
        {
          "actions": [
            "Microsoft.BillingBenefits/savingsPlanOrders/read",
            "Microsoft.BillingBenefits/savingsPlanOrders/action",
            "Microsoft.BillingBenefits/savingsPlanOrders/write",
            "Microsoft.BillingBenefits/savingsPlanOrders/savingsPlans/read",
            "Microsoft.BillingBenefits/savingsPlanOrders/savingsPlans/write",
            "Microsoft.BillingBenefits/savingsPlanOrders/*/action",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read",
            "Microsoft.Authorization/roleAssignments/write",
            "Microsoft.Authorization/roleAssignments/delete"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "CrossConnectionReader",
      "Description": "Allows for read access to ExpressRoute CrossConnections",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ClassicNetwork/expressRouteCrossConnections/*/read",
            "Microsoft.Network/expressRouteCrossConnections/*/read",
            "Microsoft.Features/providers/features/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "CrossConnectionManager",
      "Description": "Allows for read, write access to ExpressRoute CrossConnections",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ClassicNetwork/expressRouteCrossConnections/*",
            "Microsoft.Network/expressRouteCrossConnections/*",
            "Microsoft.Features/providers/features/read"
          ],
          "not_actions": [
            "Microsoft.Network/expressRouteCrossConnections/delete"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Kubernetes Agent Operator",
      "Description": "Grants Microsoft Defender for Cloud access to Azure Kubernetes Services",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerService/managedClusters/read",
            "Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/delete",
            "Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/read",
            "Microsoft.ContainerService/managedClusters/trustedAccessRoleBindings/write",
            "Microsoft.ContainerService/managedClusters/write",
            "Microsoft.Security/pricings/securityoperators/read",
            "Microsoft.OperationalInsights/workspaces/write",
            "Microsoft.OperationalInsights/workspaces/read",
            "Microsoft.OperationalInsights/workspaces/listKeys/action",
            "Microsoft.OperationalInsights/workspaces/sharedkeys/action",
            "Microsoft.OperationalInsights/workspaces/sharedkeys/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure API Center Service Contributor",
      "Description": "Allows managing Azure API Center service.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiCenter/services/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [
            "Microsoft.ApiCenter/services/workspaces/apis/versions/definitions/updateAnalysisState/action"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure API Center Compliance Manager",
      "Description": "Allows managing API compliance in Azure API Center service.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiCenter/services/*/read",
            "Microsoft.ApiCenter/services/workspaces/apis/versions/definitions/updateAnalysisState/action",
            "Microsoft.ApiCenter/services/workspaces/apis/versions/definitions/exportSpecification/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure API Center Service Reader",
      "Description": "Allows read-only access to Azure API Center service.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ApiCenter/services/*/read",
            "Microsoft.ApiCenter/services/workspaces/apis/versions/definitions/exportSpecification/action",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Oracle.Database VmCluster Administrator Built-in Role",
      "Description": "Grants full access to manage all VmCluster resources",
      "Permissions": [
        {
          "actions": [
            "Oracle.Database/cloudVmClusters/*/read",
            "Oracle.Database/cloudVmClusters/*/write",
            "Oracle.Database/cloudVmClusters/*/delete",
            "Oracle.Database/cloudExadataInfrastructures/write",
            "Oracle.Database/cloudExadataInfrastructures/*/read",
            "Oracle.Database/Locations/*/read",
            "Oracle.Database/Locations/*/write",
            "Oracle.Database/Operations/read",
            "Oracle.Database/oracleSubscriptions/*/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write",
            "Microsoft.Network/locations/operations/read",
            "Microsoft.Compute/sshPublicKeys/read",
            "Microsoft.Compute/sshPublicKeys/write",
            "Microsoft.Compute/sshPublicKeys/generateKeyPair/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Oracle.Database Exadata Infrastructure Administrator Built-in Role",
      "Description": "Grants full access to manage all Exadata Infrastructure resources",
      "Permissions": [
        {
          "actions": [
            "Oracle.Database/cloudExadataInfrastructures/*/read",
            "Oracle.Database/cloudExadataInfrastructures/*/write",
            "Oracle.Database/cloudExadataInfrastructures/*/delete",
            "Oracle.Database/cloudVmClusters/*/read",
            "Oracle.Database/cloudVmClusters/*/write",
            "Oracle.Database/cloudVmClusters/*/delete",
            "Oracle.Database/cloudVmClusters/*/action",
            "Oracle.Database/Locations/*/read",
            "Oracle.Database/Locations/*/write",
            "Oracle.Database/Operations/read",
            "Oracle.Database/oracleSubscriptions/*/read",
            "Oracle.Database/oracleSubscriptions/listCloudAccountDetails/action",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/locations/operations/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Compute/sshPublicKeys/read",
            "Microsoft.Compute/sshPublicKeys/write",
            "Microsoft.Compute/sshPublicKeys/generateKeyPair/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Oracle Subscriptions Manager Built-in Role",
      "Description": "Grants full access to manage all Oracle Subscriptions resources",
      "Permissions": [
        {
          "actions": [
            "Oracle.Database/oracleSubscriptions/*/read",
            "Oracle.Database/oracleSubscriptions/*/write",
            "Oracle.Database/oracleSubscriptions/*/delete",
            "Oracle.Database/oracleSubscriptions/*/action",
            "Oracle.Database/Locations/*/read",
            "Oracle.Database/Locations/*/write",
            "Oracle.Database/Operations/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Oracle.Database Owner Built-in Role",
      "Description": "Grants full access to manage all Oracle.Database resources",
      "Permissions": [
        {
          "actions": [
            "Oracle.Database/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/subnets/write",
            "Microsoft.Network/locations/operations/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Compute/sshPublicKeys/read",
            "Microsoft.Compute/sshPublicKeys/write",
            "Microsoft.Compute/sshPublicKeys/generateKeyPair/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Bayer Ag Powered Services Historical Weather Data Solution User Role",
      "Description": "Provide access to Historical Weather Data Solution by Bayer Ag Powered Services",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/parties/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/farms/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/farms/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insights/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insightAttachments/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Oracle.Database Reader Built-in Role",
      "Description": "Grants read access to all Oracle.Database resources",
      "Permissions": [
        {
          "actions": [
            "Oracle.Database/Locations/*/read",
            "Oracle.Database/Operations/read",
            "Oracle.Database/oracleSubscriptions/*/read",
            "Oracle.Database/cloudExadataInfrastructures/*/read",
            "Oracle.Database/cloudVmClusters/*/read",
            "Oracle.Database/cloudVmClusters/listPrivateIpAddresses/action",
            "Oracle.Database/oracleSubscriptions/listCloudAccountDetails/action",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deployments/*/read",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/locations/operations/read",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Messaging Catalog Data Owner",
      "Description": "Allows for full access to Azure Messaging Catalog resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.MessagingCatalog/*"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.MessagingCatalog/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Application Configuration Service Config File Pattern Reader Role",
      "Description": "Read content of config file pattern for Application Configuration Service in Azure Spring Apps",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AppPlatform/Spring/read",
            "Microsoft.AppPlatform/Spring/configurationServices/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/ApplicationConfigurationService/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Hybrid Database Administrator - Read Only Service Role",
      "Description": "Read only access to Azure hybrid database services resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AzureArcData/*/read",
            "Microsoft.AzureArcData/sqlServerInstances/getTelemetry/action",
            "Microsoft.AzureArcData/sqlServerInstances/availabilityGroups/getDetailView/action",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Microsoft Sentinel Business Applications Agent Operator",
      "Description": "List and update actions on a business applications system. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.SecurityInsights/businessApplicationAgents/read",
            "Microsoft.SecurityInsights/businessApplicationAgents/write",
            "Microsoft.SecurityInsights/businessApplicationAgents/systems/read",
            "Microsoft.SecurityInsights/businessApplicationAgents/systems/write",
            "Microsoft.SecurityInsights/businessApplicationAgents/systems/listActions/action",
            "Microsoft.SecurityInsights/businessApplicationAgents/systems/reportActionStatus/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure ContainerApps Session Executor",
      "Description": "Create and execute sessions in a sessionPool",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.App/sessionPools/*/read",
            "Microsoft.App/sessionPools/sessions/generatesessions/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.App/sessionPools/*/read",
            "Microsoft.App/sessionPools/interpreters/execute/action",
            "Microsoft.App/sessionPools/interpreters/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Microsoft.Edge Winfields federated subscription read access role",
      "Description": "Microsoft.Edge Winfields role for read access on federated subscriptions",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Resources/subscriptions/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Red Hat OpenShift Federated Credential Role",
      "Description": "This role grants the permissions required in order to patch cluster managed identities with the federated credential to build a trust relationship between the managed identity, OIDC, and the service account.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ManagedIdentity/userAssignedIdentities/read",
            "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials/read",
            "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Bayer Ag Powered Services Crop Id Solution User Role",
      "Description": "Provide access to Crop Id Solution by Bayer Ag Powered Services",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/read",
            "Microsoft.AgFoodPlatform/farmBeats/ingestionJobs/satelliteDataIngestionJobs/*",
            "Microsoft.AgFoodPlatform/farmBeats/scenes/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insights/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insightAttachments/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Savings plan Contributor",
      "Description": "Lets you read and manage savings plans but cannot delegate savings plan-related roles",
      "Permissions": [
        {
          "actions": [
            "Microsoft.BillingBenefits/savingsPlanOrders/read",
            "Microsoft.BillingBenefits/savingsPlanOrders/action",
            "Microsoft.BillingBenefits/savingsPlanOrders/write",
            "Microsoft.BillingBenefits/savingsPlanOrders/savingsPlans/read",
            "Microsoft.BillingBenefits/savingsPlanOrders/savingsPlans/write",
            "Microsoft.BillingBenefits/savingsPlanOrders/*/action",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Scheduled Events Contributor",
      "Description": "Provides access to scheduled event actions",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Maintenance/scheduledevents/acknowledge/action",
            "Microsoft.Compute/VirtualMachines/read",
            "Microsoft.Compute/VirtualMachineScaleSets/read",
            "Microsoft.Compute/AvailabilitySets/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Compute Recommendations Role",
      "Description": "Grants permissions to call Compute Recommendations APIs provided by Compute Diagnostic Resource Provider service.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/locations/placementScores/generate/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Job Execution Instance List Role",
      "Description": "List instances for job executions in Azure Spring Apps",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/jobs/executions/listInstances/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Job Log Reader Role",
      "Description": "Read real-time logs for jobs in Azure Spring Apps",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AppPlatform/Spring/read",
            "Microsoft.AppPlatform/Spring/jobs/read",
            "Microsoft.AppPlatform/Spring/jobs/executions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/jobs/executions/logstream/action",
            "Microsoft.AppPlatform/Spring/jobs/executions/listInstances/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Copilot for Azure User",
      "Description": "Enables users access to Copilot for Azure.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleDefinitions/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.PortalServices/copilotSettings/conversations/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Nexus Network Fabric Service Writer",
      "Description": "Read-write access to Nexus Network Fabric Service",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ManagedNetworkFabric/*/read",
            "Microsoft.ManagedNetworkFabric/*/write",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Nexus Network Fabric Service Reader",
      "Description": "Read-only access to Nexus Network Fabric Service",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ManagedNetworkFabric/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Deployment Stack Owner",
      "Description": "Allows a user to manage deployment stacks, including those with deny assignments.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deploymentStacks/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Deployment Stack Contributor",
      "Description": "Allows a user to manage deployment stacks, but cannot create or delete deny assignments within the deployment stack.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Resources/deploymentStacks/write",
            "Microsoft.Resources/deploymentStacks/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Spring Apps Spring Cloud Config Server Log Reader Role",
      "Description": "Read real-time logs for Spring Cloud Config Server in Azure Spring Apps",
      "Permissions": [
        {
          "actions": [
            "Microsoft.AppPlatform/Spring/read",
            "Microsoft.AppPlatform/Spring/configServers/read"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AppPlatform/Spring/configService/logstream/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Registry Repository Catalog Lister",
      "Description": "Allows for listing all repositories in an Azure Container Registry. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerRegistry/registries/catalog/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Registry Repository Reader",
      "Description": "Allows for read access to Azure Container Registry repositories, but excluding catalog listing. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerRegistry/registries/repositories/metadata/read",
            "Microsoft.ContainerRegistry/registries/repositories/content/read"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Registry Repository Writer",
      "Description": "Allows for read and write access to Azure Container Registry repositories, but excluding catalog listing. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerRegistry/registries/repositories/metadata/read",
            "Microsoft.ContainerRegistry/registries/repositories/content/read",
            "Microsoft.ContainerRegistry/registries/repositories/metadata/write",
            "Microsoft.ContainerRegistry/registries/repositories/content/write"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Registry Repository Contributor",
      "Description": "Allows for read, write, and delete access to Azure Container Registry repositories, but excluding catalog listing. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.ContainerRegistry/registries/repositories/metadata/read",
            "Microsoft.ContainerRegistry/registries/repositories/content/read",
            "Microsoft.ContainerRegistry/registries/repositories/metadata/write",
            "Microsoft.ContainerRegistry/registries/repositories/content/write",
            "Microsoft.ContainerRegistry/registries/repositories/metadata/delete",
            "Microsoft.ContainerRegistry/registries/repositories/content/delete"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "DeID Data Owner",
      "Description": "Full access to DeID data. This role is in preview and subject to change",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.HealthDataAIServices/DeidServices/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Standby Container Group Pool Contributor",
      "Description": "Allows users to manage standby container group pool resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.ContainerInstance/containerGroupProfiles/read",
            "Microsoft.ContainerInstance/containerGroupProfiles/revisions/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.StandbyPool/Locations/OperationStatuses/read",
            "Microsoft.StandbyPool/Operations/read",
            "Microsoft.StandbyPool/standbyContainerGroupPools/delete",
            "Microsoft.StandbyPool/standbyContainerGroupPools/read",
            "Microsoft.StandbyPool/standbyContainerGroupPools/runtimeViews/read",
            "Microsoft.StandbyPool/standbyContainerGroupPools/write"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "ToolchainOrchestrator Admin Role",
      "Description": "Grant full access to manage all Toolchain orchestrator resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ToolchainOrchestrator/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "ToolchainOrchestrator Viewer Role",
      "Description": "Grant access to view all Toolchain orchestrator resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ToolchainOrchestrator/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Compute Gallery Artifacts Publisher",
      "Description": "This is the role for publishing gallery artifacts.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/galleries/*",
            "Microsoft.Compute/locations/capsOperations/read",
            "Microsoft.Compute/locations/communityGalleries/*",
            "Microsoft.Compute/locations/sharedGalleries/*",
            "Microsoft.Compute/images/*",
            "Microsoft.Compute/virtualMachines/write",
            "Microsoft.Compute/disks/write",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [
            "Microsoft.Compute/galleries/share/action"
          ],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "ProviderHub Reader",
      "Description": "Allows you to view all Microsoft.ProviderHub resources created through the Resource Provider Platform, but does not allow you to make any changes to the resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ProviderHub/*/read",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "ProviderHub Contributor",
      "Description": "Allows you to create and manage Microsoft.ProviderHub resources through the Resource Provider Platform. Does not allow you to assign roles in Azure RBAC.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ProviderHub/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.ResourceHealth/availabilityStatuses/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Stack HCI Connected InfraVMs",
      "Description": "Role of Arc Integration for Azure Stack HCI Infrastructure Virtual Machines.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.HybridCompute/*/read",
            "Microsoft.HybridCompute/machines/write",
            "Microsoft.HybridCompute/machines/delete",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/extensions/write",
            "Microsoft.HybridCompute/machines/extensions/delete",
            "Microsoft.HybridCompute/machines/UpgradeExtensions/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "VM Restore Operator",
      "Description": "Create and Delete resources during VM Restore. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Compute/disks/read",
            "Microsoft.Compute/disks/write",
            "Microsoft.Compute/disks/delete",
            "Microsoft.Compute/disks/beginGetAccess/action",
            "Microsoft.Compute/disks/endGetAccess/action",
            "Microsoft.Compute/locations/diskOperations/read",
            "Microsoft.Compute/virtualMachines/read",
            "Microsoft.Compute/virtualMachines/write",
            "Microsoft.Compute/virtualMachines/delete",
            "Microsoft.Compute/virtualMachines/instanceView/read",
            "Microsoft.Compute/virtualMachines/extensions/read",
            "Microsoft.Compute/virtualMachines/extensions/write",
            "Microsoft.Compute/virtualMachines/extensions/delete",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Network/locations/operationResults/read",
            "Microsoft.Network/locations/operations/read",
            "Microsoft.Network/locations/usages/read",
            "Microsoft.Network/networkInterfaces/delete",
            "Microsoft.Network/networkInterfaces/ipconfigurations/read",
            "Microsoft.Network/networkInterfaces/join/action",
            "Microsoft.Network/networkInterfaces/read",
            "Microsoft.Network/networkInterfaces/write",
            "Microsoft.Network/networkSecurityGroups/read",
            "Microsoft.Network/networkSecurityGroups/securityRules/read",
            "Microsoft.Network/publicIPAddresses/delete",
            "Microsoft.Network/publicIPAddresses/join/action",
            "Microsoft.Network/publicIPAddresses/read",
            "Microsoft.Network/publicIPAddresses/write",
            "Microsoft.Network/virtualNetworks/read",
            "Microsoft.Network/virtualNetworks/subnets/join/action",
            "Microsoft.Network/virtualNetworks/subnets/read",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read",
            "Microsoft.Storage/checkNameAvailability/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/delete",
            "Microsoft.Storage/storageAccounts/blobServices/containers/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/write",
            "Microsoft.Storage/storageAccounts/listKeys/action",
            "Microsoft.Storage/storageAccounts/read",
            "Microsoft.Storage/storageAccounts/write"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/delete",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write",
            "Microsoft.Storage/storageAccounts/blobServices/containers/blobs/add/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "HDInsight Cluster Admin",
      "Description": "Can read, create, modify and delete HDInsight clusters, configuration, extensions, etc.",
      "Permissions": [
        {
          "actions": [
            "MICROSOFT.HDINSIGHT/CLUSTERS/APPLICATIONS/DELETE",
            "MICROSOFT.HDINSIGHT/CLUSTERS/APPLICATIONS/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/APPLICATIONS/WRITE",
            "MICROSOFT.HDINSIGHT/CLUSTERS/AZUREASYNCOPERATIONS/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/CONFIGURATIONS/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/CONFIGURATIONS/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/DELETE",
            "MICROSOFT.HDINSIGHT/CLUSTERS/EXECUTESCRIPTACTIONS/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/EXTENSIONS/DELETE",
            "MICROSOFT.HDINSIGHT/CLUSTERS/EXTENSIONS/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/EXTENSIONS/WRITE",
            "MICROSOFT.HDINSIGHT/CLUSTERS/GETGATEWAYSETTINGS/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/LISTHOSTS/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/OPERATIONRESULTS/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/PRIVATEENDPOINTCONNECTIONS/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/PRIVATELINKRESOURCES/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/RESOLVEPRIVATELINKSERVICEID/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/RESTARTHOSTS/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/ROLES/AUTOSCALE/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/ROLES/RESIZE/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/SCRIPTACTIONS/DELETE",
            "MICROSOFT.HDINSIGHT/CLUSTERS/SCRIPTACTIONS/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/SCRIPTEXECUTIONHISTORY/PROMOTE/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/SCRIPTEXECUTIONHISTORY/READ",
            "MICROSOFT.HDINSIGHT/CLUSTERS/UPDATEGATEWAYSETTINGS/ACTION",
            "MICROSOFT.HDINSIGHT/CLUSTERS/WRITE",
            "MICROSOFT.HDINSIGHT/LOCATIONS/AVAILABLECLUSTERVERSIONS/READ",
            "MICROSOFT.HDINSIGHT/LOCATIONS/AZUREASYNCOPERATIONS/READ",
            "MICROSOFT.HDINSIGHT/LOCATIONS/BILLINGSPECS/READ",
            "MICROSOFT.HDINSIGHT/LOCATIONS/CAPABILITIES/READ",
            "MICROSOFT.HDINSIGHT/LOCATIONS/CHECKNAMEAVAILABILITY/ACTION",
            "MICROSOFT.HDINSIGHT/LOCATIONS/OPERATIONRESULTS/READ",
            "MICROSOFT.HDINSIGHT/LOCATIONS/OPERATIONSTATUSES/READ",
            "MICROSOFT.HDINSIGHT/LOCATIONS/OPERATIONSTATUSES/WRITE",
            "MICROSOFT.HDINSIGHT/LOCATIONS/USAGES/READ",
            "MICROSOFT.HDINSIGHT/LOCATIONS/VALIDATECREATEREQUEST/ACTION",
            "MICROSOFT.HDINSIGHT/OPERATIONS/READ",
            "MICROSOFT.HDINSIGHT/REGISTER/ACTION",
            "MICROSOFT.HDINSIGHT/RESOURCETYPES/READ",
            "MICROSOFT.HDINSIGHT/UNREGISTER/ACTION",
            "Microsoft.ResourceHealth/availabilityStatuses/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/subscriptions/operationresults/read",
            "Microsoft.Resources/subscriptions/read",
            "Microsoft.Resources/subscriptions/resourcegroups/deployments/read",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Operator Nexus Compute Contributor Role (Preview)",
      "Description": "(Preview) Manage and configure Azure Operator Nexus infrastructure resources. This role is in preview and subject to change.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/classicAdministrators/operationstatuses/read",
            "Microsoft.Authorization/classicAdministrators/read",
            "Microsoft.Authorization/denyAssignments/read",
            "Microsoft.Authorization/diagnosticSettings/read",
            "Microsoft.Authorization/diagnosticSettingsCategories/read",
            "Microsoft.Authorization/locks/read",
            "Microsoft.Authorization/operations/read",
            "Microsoft.Authorization/permissions/read",
            "Microsoft.Authorization/policyAssignments/read",
            "Microsoft.Authorization/policyAssignments/privateLinkAssociations/read",
            "Microsoft.Authorization/policyAssignments/resourceManagementPrivateLinks/read",
            "Microsoft.Authorization/policyAssignments/resourceManagementPrivateLinks/privateEndpointConnectionProxies/read",
            "Microsoft.Authorization/policyAssignments/resourceManagementPrivateLinks/privateEndpointConnections/read",
            "Microsoft.Authorization/policyDefinitions/read",
            "Microsoft.Authorization/policyExemptions/read",
            "Microsoft.Authorization/policySetDefinitions/read",
            "Microsoft.Authorization/providerOperations/read",
            "Microsoft.Authorization/roleAssignments/read",
            "Microsoft.Authorization/roleAssignmentScheduleInstances/read",
            "Microsoft.Authorization/roleAssignmentScheduleRequests/read",
            "Microsoft.Authorization/roleAssignmentSchedules/read",
            "Microsoft.Authorization/roleDefinitions/read",
            "Microsoft.Authorization/roleEligibilityScheduleInstances/read",
            "Microsoft.Authorization/roleEligibilityScheduleRequests/read",
            "Microsoft.Authorization/roleEligibilitySchedules/read",
            "Microsoft.Authorization/roleManagementPolicies/read",
            "Microsoft.Authorization/roleManagementPolicyAssignments/read",
            "Microsoft.ExtendedLocation/customLocations/deploy/action",
            "Microsoft.ExtendedLocation/customLocations/read",
            "Microsoft.HybridCompute/machines/extensions/read",
            "Microsoft.HybridCompute/machines/read",
            "Microsoft.Insights/alertRules/activated/action",
            "Microsoft.Insights/alertRules/delete",
            "Microsoft.Insights/alertRules/incidents/read",
            "Microsoft.Insights/alertRules/read",
            "Microsoft.Insights/alertRules/resolved/action",
            "Microsoft.Insights/alertRules/throttled/action",
            "Microsoft.Insights/alertRules/write",
            "Microsoft.Kubernetes/connectedClusters/read",
            "Microsoft.KubernetesConfiguration/extensions/read",
            "Microsoft.ManagedNetworkFabric/networkFabricControllers/join/action",
            "Microsoft.ManagedNetworkFabric/networkFabrics/join/action",
            "Microsoft.ManagedNetworkFabric/networkRacks/join/action",
            "Microsoft.NetworkCloud/bareMetalMachines/cordon/action",
            "Microsoft.NetworkCloud/bareMetalMachines/delete",
            "Microsoft.NetworkCloud/bareMetalMachines/powerOff/action",
            "Microsoft.NetworkCloud/bareMetalMachines/read",
            "Microsoft.NetworkCloud/bareMetalMachines/reimage/action",
            "Microsoft.NetworkCloud/bareMetalMachines/replace/action",
            "Microsoft.NetworkCloud/bareMetalMachines/restart/action",
            "Microsoft.NetworkCloud/bareMetalMachines/runDataExtracts/action",
            "Microsoft.NetworkCloud/bareMetalMachines/runReadCommands/action",
            "Microsoft.NetworkCloud/bareMetalMachines/start/action",
            "Microsoft.NetworkCloud/bareMetalMachines/uncordon/action",
            "Microsoft.NetworkCloud/bareMetalMachines/write",
            "Microsoft.NetworkCloud/clusterManagers/delete",
            "Microsoft.NetworkCloud/clusterManagers/read",
            "Microsoft.NetworkCloud/clusterManagers/write",
            "Microsoft.NetworkCloud/clusters/bareMetalMachineKeySets/read",
            "Microsoft.NetworkCloud/clusters/bmcKeySets/read",
            "Microsoft.NetworkCloud/clusters/continueUpdateVersion/action",
            "Microsoft.NetworkCloud/clusters/delete",
            "Microsoft.NetworkCloud/clusters/deploy/action",
            "Microsoft.NetworkCloud/clusters/metricsConfigurations/delete",
            "Microsoft.NetworkCloud/clusters/metricsConfigurations/read",
            "Microsoft.NetworkCloud/clusters/metricsConfigurations/write",
            "Microsoft.NetworkCloud/clusters/read",
            "Microsoft.NetworkCloud/clusters/scanRuntime/action",
            "Microsoft.NetworkCloud/clusters/updateVersion/action",
            "Microsoft.NetworkCloud/clusters/write",
            "Microsoft.NetworkCloud/locations/operationStatuses/read",
            "Microsoft.NetworkCloud/operations/read",
            "Microsoft.NetworkCloud/rackSkus/read",
            "Microsoft.NetworkCloud/racks/delete",
            "Microsoft.NetworkCloud/racks/join/action",
            "Microsoft.NetworkCloud/racks/read",
            "Microsoft.NetworkCloud/racks/write",
            "Microsoft.NetworkCloud/register/action",
            "Microsoft.NetworkCloud/registeredSubscriptions/read",
            "Microsoft.NetworkCloud/storageAppliances/read",
            "Microsoft.NetworkCloud/unregister/action",
            "Microsoft.Resources/deployments/cancel/action",
            "Microsoft.Resources/deployments/delete",
            "Microsoft.Resources/deployments/exportTemplate/action",
            "Microsoft.Resources/deployments/operations/read",
            "Microsoft.Resources/deployments/operationstatuses/read",
            "Microsoft.Resources/deployments/read",
            "Microsoft.Resources/deployments/validate/action",
            "Microsoft.Resources/deployments/whatIf/action",
            "Microsoft.Resources/deployments/write",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Container Instances Contributor Role",
      "Description": "Grants read/write access to container groups provided by Azure Container Instances",
      "Permissions": [
        {
          "actions": [
            "Microsoft.ContainerInstance/containerGroups/*",
            "Microsoft.Resources/deployments/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.Resources/subscriptions/resourceGroups/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Connector Reader",
      "Description": "Read connectors and their associated resources, such as impacts and insights.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Impact/Connectors/Read",
            "Microsoft.Impact/WorkloadImpacts/Read",
            "Microsoft.Impact/WorkloadImpacts/Insights/Read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Transparency Logs Owner",
      "Description": "Grants full access to manage Transparency Log resources.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Sovereign/transparencyLogs/*",
            "Microsoft.Authorization/*/read",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Disk Encryption Set Operator for Managed Disks",
      "Description": "Provides permissions to read, write or delete disk encryption sets which are used for encrypting managed disks with customer managed keys",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/diskEncryptionSets/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Grafana Limited Viewer",
      "Description": "View home page.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.Dashboard/grafana/ActAsGrafanaLimitedViewer/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Bayer Ag Powered Services Field Imagery Solution Service Role",
      "Description": "Provide access to Field Imagery Solution by Bayer Ag Powered Services",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.AgFoodPlatform/farmBeats/parties/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/read",
            "Microsoft.AgFoodPlatform/farmBeats/parties/fields/write",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insights/*",
            "Microsoft.AgFoodPlatform/farmBeats/parties/models/resourceTypes/resources/insightAttachments/*",
            "Microsoft.AgFoodPlatform/farmBeats/scenes/*"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Azure Edge Hardware Center Administrator",
      "Description": "Grants you access to take actions as an edge order administrator",
      "Permissions": [
        {
          "actions": [
            "Microsoft.EdgeOrder/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Compute Gallery Image Version Reader",
      "Description": "This is the role for reading gallery image versions.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Compute/galleries/images/versions/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Apps SessionPools Reader",
      "Description": "Read access to ContainerApps sessionpools.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.App/sessionPools/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Apps ManagedEnvironments Contributor",
      "Description": "Full management of Container Apps ManagedEnvironments, including creation, deletion, and updates.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.App/managedEnvironments/*/read",
            "Microsoft.App/managedEnvironments/*/write",
            "Microsoft.App/managedEnvironments/*/delete",
            "Microsoft.App/managedEnvironments/*/action",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Apps ManagedEnvironments Reader",
      "Description": "Read access to ContainerApps managedenvironments.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.App/managedEnvironments/*/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Apps Contributor",
      "Description": "Full management of Container Apps, including creation, deletion, and updates.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.App/containerApps/*/read",
            "Microsoft.App/containerApps/*/write",
            "Microsoft.App/containerApps/*/delete",
            "Microsoft.App/containerApps/*/action",
            "Microsoft.App/managedEnvironments/read",
            "Microsoft.App/managedEnvironments/*/read",
            "Microsoft.App/managedEnvironments/join/action",
            "Microsoft.App/managedEnvironments/checknameavailability/action",
            "Microsoft.App/connectedEnvironments/read",
            "Microsoft.App/connectedEnvironments/*/read",
            "Microsoft.App/connectedEnvironments/join/action",
            "Microsoft.App/connectedEnvironments/checknameavailability/action"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Apps SessionPools Contributor",
      "Description": "Full management of Container Apps SessionPools, including creation, deletion, and updates.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.App/sessionPools/*/read",
            "Microsoft.App/sessionPools/*/write",
            "Microsoft.App/sessionPools/*/delete",
            "Microsoft.App/sessionPools/*/action",
            "microsoft.App/managedEnvironments/read",
            "Microsoft.App/managedEnvironments/*/read",
            "Microsoft.App/managedEnvironments/join/action",
            "Microsoft.App/managedEnvironments/checknameavailability/action",
            "microsoft.App/connectedEnvironments/read",
            "Microsoft.App/connectedEnvironments/*/read",
            "Microsoft.App/connectedEnvironments/join/action",
            "Microsoft.App/connectedEnvironments/checknameavailability/action",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Apps Jobs Reader",
      "Description": "Read access to ContainerApps jobs",
      "Permissions": [
        {
          "actions": [
            "microsoft.app/jobs/read",
            "Microsoft.App/jobs/*/read",
            "Microsoft.App/managedenvironments/read"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Apps Operator",
      "Description": "Read, logstream and exec into Container Apps.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "Microsoft.App/containerApps/*/read",
            "Microsoft.App/containerApps/*/action",
            "Microsoft.App/managedEnvironments/read",
            "Microsoft.App/managedEnvironments/*/read",
            "Microsoft.App/managedEnvironments/join/action",
            "Microsoft.App/managedEnvironments/checknameavailability/action",
            "Microsoft.App/connectedEnvironments/read",
            "Microsoft.App/connectedEnvironments/*/read",
            "Microsoft.App/connectedEnvironments/join/action",
            "Microsoft.App/connectedEnvironments/checknameavailability/action"
          ],
          "not_actions": [],
          "data_actions": [
            "Microsoft.App/containerApps/logstream/action",
            "Microsoft.App/containerApps/exec/action"
          ],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Container Apps Jobs Contributor",
      "Description": "Full management of Container Apps jobs, including creation, deletion, and updates.",
      "Permissions": [
        {
          "actions": [
            "Microsoft.Authorization/*/read",
            "Microsoft.Insights/alertRules/*",
            "microsoft.app/jobs/read",
            "Microsoft.App/jobs/*/read",
            "Microsoft.App/jobs/*/action",
            "Microsoft.App/jobs/write",
            "Microsoft.App/jobs/delete",
            "Microsoft.app/managedenvironments/read",
            "Microsoft.App/managedenvironments/*/read",
            "Microsoft.App/managedenvironments/join/action",
            "Microsoft.App/managedenvironments/checknameavailability/action",
            "Microsoft.app/connectedEnvironments/read",
            "Microsoft.App/connectedEnvironments/*/read",
            "Microsoft.App/connectedEnvironments/join/action",
            "Microsoft.App/connectedEnvironments/checknameavailability/action",
            "Microsoft.Resources/deployments/*"
          ],
          "not_actions": [],
          "data_actions": [],
          "not_data_actions": []
        }
      ]
    },
    {
      "RoleName": "Durable Task Data Contributor",
      "Description": "Durable Task role for all data access operations.",
      "Permissions": [
        {
          "actions": [],
          "not_actions": [],
          "data_actions": [
            "Microsoft.DurableTask/*"
          ],
          "not_data_actions": []
        }
      ]
    }
  ],
  "gcp": [
    {
      "RoleName": "roles/accessapproval.approver",
      "RoleTitle": "Access Approval Approver",
      "Description": "Ability to view or act on access approval requests and view configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accessapproval.configEditor",
      "RoleTitle": "Access Approval Config Editor",
      "Description": "Ability to update the Access Approval configuration",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accessapproval.invalidator",
      "RoleTitle": "Access Approval Invalidator",
      "Description": "Ability to invalidate existing approved approval requests",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accessapproval.viewer",
      "RoleTitle": "Access Approval Viewer",
      "Description": "Ability to view access approval requests and configuration",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accesscontextmanager.gcpAccessAdmin",
      "RoleTitle": "Cloud Access Binding Admin",
      "Description": "Create, edit, and change Cloud access bindings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accesscontextmanager.gcpAccessReader",
      "RoleTitle": "Cloud Access Binding Reader",
      "Description": "Read access to Cloud access bindings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accesscontextmanager.policyAdmin",
      "RoleTitle": "Access Context Manager Admin",
      "Description": "Full access to policies, access levels, access zones and authorized orgs descs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accesscontextmanager.policyEditor",
      "RoleTitle": "Access Context Manager Editor",
      "Description": "Edit access to policies.  Create, edit, and change access levels, access zones and authorized orgs descs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accesscontextmanager.policyReader",
      "RoleTitle": "Access Context Manager Reader",
      "Description": "Read access to policies, access levels, access zones and authorized orgs descs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/accesscontextmanager.vpcScTroubleshooterViewer",
      "RoleTitle": "VPC Service Controls Troubleshooter Viewer",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/actions.Admin",
      "RoleTitle": "Actions Admin",
      "Description": "Access to edit and deploy an action",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/actions.Viewer",
      "RoleTitle": "Actions Viewer",
      "Description": "Access to view an action",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/advisorynotifications.admin",
      "RoleTitle": "Advisory Notifications Admin",
      "Description": "Grants write access to settings in Advisory Notifications",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/advisorynotifications.viewer",
      "RoleTitle": "Advisory Notifications Viewer",
      "Description": "Grants view access in Advisory Notifications",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.admin",
      "RoleTitle": "Vertex AI Administrator",
      "Description": "Grants full access to all resources in Vertex AI",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.colabEnterpriseAdmin",
      "RoleTitle": "Colab Enterprise Admin",
      "Description": "Admin role of using colab enterprise.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.colabEnterpriseUser",
      "RoleTitle": "Colab Enterprise User",
      "Description": "User role of using colab enterprise.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.colabServiceAgent",
      "RoleTitle": "Vertex AI Colab Service Agent",
      "Description": "Gives Vertex AI Colab the proper permissions to function.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.customCodeServiceAgent",
      "RoleTitle": "Vertex AI Custom Code Service Agent",
      "Description": "Gives Vertex AI Custom Code the proper permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.entityTypeOwner",
      "RoleTitle": "Vertex AI Feature Store EntityType owner",
      "Description": "Provides full access to all permissions for a particular entity type resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.extensionCustomCodeServiceAgent",
      "RoleTitle": "Vertex AI Extension Custom Code Service Agent",
      "Description": "Gives Vertex AI Extension that executes custom code the permissions it needs to function.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.extensionServiceAgent",
      "RoleTitle": "Vertex AI Extension Service Agent",
      "Description": "Gives Vertex AI Extension the permissions it needs to function.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.featurestoreAdmin",
      "RoleTitle": "Vertex AI Feature Store Admin",
      "Description": "Grants full access to all resources in Vertex AI Feature Store",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.featurestoreDataViewer",
      "RoleTitle": "Vertex AI Feature Store Data Viewer",
      "Description": "This role provides permissions to read Feature data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.featurestoreDataWriter",
      "RoleTitle": "Vertex AI Feature Store Data Writer",
      "Description": "This role provides permissions to read and write Feature data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.featurestoreInstanceCreator",
      "RoleTitle": "Vertex AI Feature Store Instance Creator",
      "Description": "Administrator of Featurestore resources, but not the child resources under Featurestores.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.featurestoreResourceViewer",
      "RoleTitle": "Vertex AI Feature Store Resource Viewer",
      "Description": "Viewer of all resources in Vertex AI Feature Store but cannot make changes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.featurestoreUser",
      "RoleTitle": "Vertex AI Feature Store User",
      "Description": "Deprecated. Use featurestoreAdmin instead.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.migrator",
      "RoleTitle": "Vertex AI Migration Service User",
      "Description": "Grants access to use migration service in Vertex AI",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.modelMonitoringServiceAgent",
      "RoleTitle": "Vertex AI Model Monitoring Service Agent",
      "Description": "Gives Vertex AI Model Monitoring the permissions it needs to function.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.notebookExecutorUser",
      "RoleTitle": "Notebook Executor User",
      "Description": "Grants users full access to schedules and notebook execution jobs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.notebookRuntimeAdmin",
      "RoleTitle": "Notebook Runtime Admin",
      "Description": "Grants full access to all runtime templates and runtimes in Notebook Service.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.notebookRuntimeUser",
      "RoleTitle": "Notebook Runtime User",
      "Description": "Grants users permissions to create runtime resources using a runtime template and manage the runtime resources they created.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.notebookServiceAgent",
      "RoleTitle": "Vertex AI Notebook Service Agent",
      "Description": "Vertex AI Service Agent used to run Notebook managed resources in user project with restricted permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.ragServiceAgent",
      "RoleTitle": "Vertex AI RAG Data Service Agent",
      "Description": "Vertex AI Service Agent used by Vertex RAG to access user imported data and Vertex AI in the project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.rapidevalServiceAgent",
      "RoleTitle": "Vertex AI Rapid Eval Service Agent",
      "Description": "Vertex AI Service Agent used by GenAI Rapid Evaluation Service to access publisher model endpoints in the user project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.reasoningEngineServiceAgent",
      "RoleTitle": "Vertex AI Reasoning Engine Service Agent",
      "Description": "Gives Vertex AI Reasoning Engine the proper permissions to function.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.serviceAgent",
      "RoleTitle": "Vertex AI Service Agent",
      "Description": "Gives Vertex AI the permissions it needs to function.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.tensorboardWebAppUser",
      "RoleTitle": "Vertex AI Tensorboard Web App User",
      "Description": "Grants access to the Vertex AI Tensorboard web app. Using the web app will incur charges.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.tuningServiceAgent",
      "RoleTitle": "Vertex AI Tuning Service Agent",
      "Description": "Vertex AI Service Agent used for tuning in user project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.user",
      "RoleTitle": "Vertex AI User",
      "Description": "Grants access to use all resource in Vertex AI",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/aiplatform.viewer",
      "RoleTitle": "Vertex AI Viewer",
      "Description": "Grants access to view all resource in Vertex AI",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/alloydb.admin",
      "RoleTitle": "Cloud AlloyDB Admin",
      "Description": "Full access to Cloud AlloyDB all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/alloydb.client",
      "RoleTitle": "Cloud AlloyDB Client",
      "Description": "Connectivity access to Cloud AlloyDB instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/alloydb.databaseUser",
      "RoleTitle": "Cloud AlloyDB Database User",
      "Description": "Role allowing access to login as a database user.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/alloydb.serviceAgent",
      "RoleTitle": "AlloyDB Service Agent",
      "Description": "Gives the AlloyDB service account permission to manage customer resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/alloydb.viewer",
      "RoleTitle": "Cloud AlloyDB Viewer",
      "Description": "Read-only access to Cloud AlloyDB all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/analyticshub.admin",
      "RoleTitle": "Analytics Hub Admin",
      "Description": "Administer Data Exchanges and Listings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/analyticshub.listingAdmin",
      "RoleTitle": "Analytics Hub Listing Admin",
      "Description": "Grants full control over the Listing, including updating, deleting and setting ACLs",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/analyticshub.publisher",
      "RoleTitle": "Analytics Hub Publisher",
      "Description": "Can publish to Data Exchanges thus creating Listings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/analyticshub.subscriber",
      "RoleTitle": "Analytics Hub Subscriber",
      "Description": "Can browse Data Exchanges and subscribe to Listings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/analyticshub.subscriptionOwner",
      "RoleTitle": "Analytics Hub Subscription Owner",
      "Description": "Grants full control over the Subscription, including updating and deleting",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/analyticshub.viewer",
      "RoleTitle": "Analytics Hub Viewer",
      "Description": "Can browse Data Exchanges and Listings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/androidmanagement.user",
      "RoleTitle": "Android Management User",
      "Description": "Full access to manage devices.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/anthos.serviceAgent",
      "RoleTitle": "Anthos Service Agent",
      "Description": "Gives the Anthos service agent access to Cloud Platformresources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/anthosaudit.serviceAgent",
      "RoleTitle": "Anthos Audit Service Agent",
      "Description": "Gives the Anthos Audit service agent access toCloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/anthosconfigmanagement.serviceAgent",
      "RoleTitle": "Anthos Config Management Service Agent",
      "Description": "Gives the Anthos Config Management service agent access toCloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/anthosidentityservice.serviceAgent",
      "RoleTitle": "Anthos Identity Service Agent",
      "Description": "Gives the Anthos Identity service agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/anthospolicycontroller.serviceAgent",
      "RoleTitle": "Anthos Policy Controller Service Agent",
      "Description": "Gives the Anthos Policy Controller service agent access toCloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/anthosservicemesh.serviceAgent",
      "RoleTitle": "Anthos Service Mesh Service Agent",
      "Description": "Gives the Anthos Service Mesh service agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/anthossupport.serviceAgent",
      "RoleTitle": "Anthos Support Service Agent",
      "Description": " Gives the Anthos Support Service Agent access to Cloud Platform resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigateway.admin",
      "RoleTitle": "ApiGateway Admin",
      "Description": "Full access to ApiGateway and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigateway.serviceAgent",
      "RoleTitle": "Cloud API Gateway Service Agent",
      "Description": "Gives Cloud API Gateway service account access to Service Management check and reports as well as impersonation on user-specified service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigateway.viewer",
      "RoleTitle": "ApiGateway Viewer",
      "Description": "Read-only access to ApiGateway and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigateway_management.serviceAgent",
      "RoleTitle": "Cloud API Gateway Management Service Agent",
      "Description": "Gives Cloud API Gateway service account access to retrieve aService configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.admin",
      "RoleTitle": "Apigee Organization Admin",
      "Description": "Full access to all apigee resource features",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.analyticsAgent",
      "RoleTitle": "Apigee Analytics Agent",
      "Description": "Curated set of permissions for Apigee Universal Data Collection Agent to manage analytics for an Apigee Organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.analyticsEditor",
      "RoleTitle": "Apigee Analytics Editor",
      "Description": "Analytics editor for an Apigee Organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.analyticsViewer",
      "RoleTitle": "Apigee Analytics Viewer",
      "Description": "Analytics viewer for an Apigee Organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.apiAdminV2",
      "RoleTitle": "Apigee API Admin",
      "Description": "Full read/write access to all apigee API resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.apiReaderV2",
      "RoleTitle": "Apigee API Reader",
      "Description": "Reader of apigee resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.developerAdmin",
      "RoleTitle": "Apigee Developer Admin",
      "Description": "Developer admin of apigee resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.environmentAdmin",
      "RoleTitle": "Apigee Environment Admin",
      "Description": "Full read/write access to apigee environment resources, including deployments.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.monetizationAdmin",
      "RoleTitle": "Apigee Monetization Admin",
      "Description": "All permissions related to monetization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.portalAdmin",
      "RoleTitle": "Apigee Portal Admin",
      "Description": "Portal admin for an Apigee Organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.readOnlyAdmin",
      "RoleTitle": "Apigee Read-only Admin",
      "Description": "Viewer of all apigee resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.runtimeAgent",
      "RoleTitle": "Apigee Runtime Agent",
      "Description": "Curated set of permissions for a runtime agent to access Apigee Organization resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.securityAdmin",
      "RoleTitle": "Apigee Security Admin",
      "Description": "Security admin for an Apigee Organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.securityViewer",
      "RoleTitle": "Apigee Security Viewer",
      "Description": "Security viewer for an Apigee Organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.serviceAgent",
      "RoleTitle": "Apigee Service Agent",
      "Description": "Service agent that grants access to Apigee resources - API Products, Developers, Developer Apps, and App Keys.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigee.synchronizerManager",
      "RoleTitle": "Apigee Synchronizer Manager",
      "Description": "Curated set of permissions for a Synchronizer to manage environments in an Apigee Organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigeeconnect.Admin",
      "RoleTitle": "Apigee Connect Admin",
      "Description": "Admin of Apigee Connect",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigeeconnect.Agent",
      "RoleTitle": "Apigee Connect Agent",
      "Description": "Ability to set up Apigee Connect agent between external clusters and Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigeeregistry.admin",
      "RoleTitle": "Cloud Apigee Registry Admin",
      "Description": "Full access to Cloud Apigee Registry Registry and Runtime resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigeeregistry.editor",
      "RoleTitle": "Cloud Apigee Registry Editor",
      "Description": "Edit access to Cloud Apigee Registry Registry resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigeeregistry.viewer",
      "RoleTitle": "Cloud Apigee Registry Viewer",
      "Description": "Read-only access to Cloud Apigee Registry Registry resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apigeeregistry.worker",
      "RoleTitle": "Cloud Apigee Registry Worker",
      "Description": "The role used by Apigee Registry application workers to read and update Apigee Registry Artifacts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apihub.admin",
      "RoleTitle": "Cloud API Hub Admin",
      "Description": "Full access to all API hub resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apihub.attributeAdmin",
      "RoleTitle": "Cloud API hub Attributes Admin",
      "Description": "Full access to all Cloud API hub attribute's resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apihub.editor",
      "RoleTitle": "Cloud API Hub Editor",
      "Description": "Edit access to most of Cloud API Hub resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apihub.pluginAdmin",
      "RoleTitle": "Cloud API hub Plugins Admin",
      "Description": "Full access to all Cloud API hub plugin's resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apihub.provisioningAdmin",
      "RoleTitle": "Cloud API hub Provisioning Admin",
      "Description": "Full access to Cloud API hub provisioning related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apihub.runtimeProjectServiceAgent",
      "RoleTitle": "API-Hub Runtime Project Service Agent",
      "Description": "Gives API-Hub Service Account access to runtime project resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apihub.viewer",
      "RoleTitle": "Cloud API hub Viewer",
      "Description": "View access to all Cloud API hub resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apim.admin",
      "RoleTitle": "API Management Admin",
      "Description": "Full access to API Management resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apim.apiDiscoveryServiceAgent",
      "RoleTitle": "APIM API Discovery Service Agent",
      "Description": "Gives APIM the ability to manage resources in consumer project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apim.viewer",
      "RoleTitle": "API Management Viewer",
      "Description": "Readonly access to API Management resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appdevelopmentexperience.serviceAgent",
      "RoleTitle": "App Development Experience Service Agent",
      "Description": "Give the App Development Experience service agent access toCloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.appAdmin",
      "RoleTitle": "App Engine Admin",
      "Description": "Full management of App Engine apps (but not storage).",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.appCreator",
      "RoleTitle": "App Engine Creator",
      "Description": "Ability to create the App Engine resource for the project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.appViewer",
      "RoleTitle": "App Engine Viewer",
      "Description": "Ability to view App Engine app status.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.codeViewer",
      "RoleTitle": "App Engine Code Viewer",
      "Description": "Ability to view App Engine app status and deployed source code.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.debugger",
      "RoleTitle": "App Engine Managed VM Debug Access",
      "Description": "Ability to read or manage v2 instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.deployer",
      "RoleTitle": "App Engine Deployer",
      "Description": "Necessary permissions to deploy new code to App Engine, and remove old versions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.memcacheDataAdmin",
      "RoleTitle": "App Engine Memcache Data Admin",
      "Description": "Can get, set, delete, and flush App Engine Memcache items.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.serviceAdmin",
      "RoleTitle": "App Engine Service Admin",
      "Description": "Can view and change traffic splits, scaling settings, and delete old versions; can't create new versions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengine.serviceAgent",
      "RoleTitle": "App Engine Standard Environment Service Agent",
      "Description": "Give App Engine Standard Enviroment service account access to managed resources. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/appengineflex.serviceAgent",
      "RoleTitle": "App Engine flexible environment Service Agent",
      "Description": "Can edit and manage App Engine Flexible Environment apps. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apphub.admin",
      "RoleTitle": "App Hub Admin",
      "Description": "Full access to App Hub resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apphub.editor",
      "RoleTitle": "App Hub Editor",
      "Description": "Edit access to App Hub resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/apphub.viewer",
      "RoleTitle": "App Hub Viewer",
      "Description": "View access to App Hub resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/applianceactivation.approver",
      "RoleTitle": "Appliance troubleshooting commands approver",
      "Description": "Grants access to approve commands to run on appliances",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/applianceactivation.client",
      "RoleTitle": "On-appliance troubleshooting client",
      "Description": "Grants access to read commands for an appliance and send its result.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/applianceactivation.troubleshooter",
      "RoleTitle": "Appliance troubleshooter",
      "Description": "Grants access to send new commands to run on appliances and view the outputs",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/artifactregistry.admin",
      "RoleTitle": "Artifact Registry Administrator",
      "Description": "Administrator access to create and manage repositories.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/artifactregistry.createOnPushRepoAdmin",
      "RoleTitle": "Artifact Registry Create-on-Push Repository Administrator",
      "Description": "Access to manage artifacts in repositories, as well as create new repositories on push",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/artifactregistry.createOnPushWriter",
      "RoleTitle": "Artifact Registry Create-on-Push Writer",
      "Description": "Access to read and write repository items, as well as create new repositories on push",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/artifactregistry.reader",
      "RoleTitle": "Artifact Registry Reader",
      "Description": "Access to read repository items.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/artifactregistry.repoAdmin",
      "RoleTitle": "Artifact Registry Repository Administrator",
      "Description": "Access to manage artifacts in repositories.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/artifactregistry.serviceAgent",
      "RoleTitle": "Artifact Registry Service Agent",
      "Description": "Gives the Artifact Registry service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/artifactregistry.writer",
      "RoleTitle": "Artifact Registry Writer",
      "Description": "Access to read and write repository items.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredoss.admin",
      "RoleTitle": "Assured OSS Admin",
      "Description": "Access to use Assured OSS and manage configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredoss.projectAdmin",
      "RoleTitle": "Assured OSS Project Admin",
      "Description": "Access to use Assured OSS and manage configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredoss.reader",
      "RoleTitle": "Assured OSS Reader",
      "Description": "Access to use Assured OSS and view Assured OSS configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredoss.user",
      "RoleTitle": "Assured OSS User",
      "Description": "Access to use Assured OSS.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredworkloads.admin",
      "RoleTitle": "Assured Workloads Administrator",
      "Description": "Grants full access to Assured Workloads resources, CRM resources - project/folder and Organization Policy administration",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredworkloads.editor",
      "RoleTitle": "Assured Workloads Editor",
      "Description": "Grants read, write access to Assured Workloads resources, CRM resources - project/folder and Organization Policy administration",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredworkloads.monitoringServiceAgent",
      "RoleTitle": "Assured Workloads Monitoring Service Agent",
      "Description": "Gives the Assured Workloads service account access to create CAIS feed and monitor Assured Workloads.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredworkloads.reader",
      "RoleTitle": "Assured Workloads Reader",
      "Description": "Grants read access to all Assured Workloads resources and CRM resources - project/folder",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/assuredworkloads.serviceAgent",
      "RoleTitle": "Assured Workloads Service Agent",
      "Description": "Gives the Assured Workloads service account access to create KMS keyrings and keys, monitor Assured Workloads and read Organization Policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/auditmanager.admin",
      "RoleTitle": "Audit Manager Admin",
      "Description": "Full access to Audit Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/auditmanager.auditor",
      "RoleTitle": "Audit Manager Auditor",
      "Description": "Allows creating and viewing an audit report.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/auditmanager.serviceAgent",
      "RoleTitle": "Audit Manager Auditing Service Agent",
      "Description": "Grants Audit Manager Service Agent access to various list/get rpcs of products to perform an audit.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automl.admin",
      "RoleTitle": "AutoML Admin",
      "Description": "Full access to all AutoML resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automl.editor",
      "RoleTitle": "AutoML Editor",
      "Description": "Editor of all AutoML resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automl.predictor",
      "RoleTitle": "AutoML Predictor",
      "Description": "Predict using models",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automl.serviceAgent",
      "RoleTitle": "AutoML Service Agent",
      "Description": "AutoML service agent can act as Cloud Storage admin and export BigQuery tables, which can be backed by Cloud Storage and Cloud Bigtable.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automl.viewer",
      "RoleTitle": "AutoML Viewer",
      "Description": "Viewer of all AutoML resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automlrecommendations.admin",
      "RoleTitle": "Recommendations AI Admin",
      "Description": "Full access to all Recommendations AI resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automlrecommendations.adminViewer",
      "RoleTitle": "Recommendations AI Admin Viewer",
      "Description": "Viewer of all Recommendations AI resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automlrecommendations.editor",
      "RoleTitle": "Recommendations AI Editor",
      "Description": "Editor of all Recommendations AI resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automlrecommendations.serviceAgent",
      "RoleTitle": "Recommendations AI Service Agent",
      "Description": "Recommendations AI service uploads catalog feeds from Cloud Storage, reports results to the customer Cloud Storage bucket, writes logs to customer projects, and writes and reads Stackdriver metrics for customer projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/automlrecommendations.viewer",
      "RoleTitle": "Recommendations AI Viewer",
      "Description": "Viewer of all Recommendations AI resources except automlrecommendations.apiKeys. To have all read access use Recommendations AI Admin Viewer role instead.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/autoscaling.metricsWriter",
      "RoleTitle": "Autoscaling Metrics Writer",
      "Description": "Access to write metrics for autoscaling site",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/autoscaling.recommendationsReader",
      "RoleTitle": "Autoscaling Recommendations Reader",
      "Description": "Access to read recommendations from autoscaling site",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/autoscaling.sitesAdmin",
      "RoleTitle": "Autoscaling Site Admin",
      "Description": "Full access to all autoscaling site features",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/autoscaling.stateWriter",
      "RoleTitle": "Autoscaling State Writer",
      "Description": "Access to write state for autoscaling site",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/axt.admin",
      "RoleTitle": "Access Transparency Admin",
      "Description": "Enable Access Transparency for Organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.admin",
      "RoleTitle": "Backup and DR Admin",
      "Description": "Provides full access to all Backup and DR resources. ",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.backupUser",
      "RoleTitle": "Backup and DR Backup User",
      "Description": "Allows the user to apply existing backup plans. This role cannot create backup plans or restore from a backup.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.backupvaultAccessor",
      "RoleTitle": "Backup and DR Backup Vault Accessor",
      "Description": "Allows the Backup Appliance permissions to create and manage backups in a backup vault.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.backupvaultAdmin",
      "RoleTitle": "Backup and DR Backup Vault Admin",
      "Description": "Allows the Backup Appliance full administrative control of backup vault resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.backupvaultLister",
      "RoleTitle": "Backup and DR Backup Vault Lister",
      "Description": "Allows the Backup Appliance permission to list backup vaults in a given project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.backupvaultViewer",
      "RoleTitle": "Backup and DR Backup Vault Viewer",
      "Description": "Allows read-only permissions to access backup vault resources and backups.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.cloudStorageOperator",
      "RoleTitle": "Backup and DR Cloud Storage Operator",
      "Description": "Allows a Backup and DR service account to store and manage data (backups or metadata) in Cloud Storage.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.computeEngineOperator",
      "RoleTitle": "Backup and DR Compute Engine Operator",
      "Description": "Allows a Backup and DR service account to discover, back up, and restore Compute Engine VM instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.managementServerAccessor",
      "RoleTitle": "Backup and DR Management Server Accessor",
      "Description": "Grants the Backup and DR management server access role to Backup Appliances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.mountUser",
      "RoleTitle": "Backup and DR Mount User",
      "Description": "Allows the user to mount from a backup. This role cannot create a backup plan or restore from a backup.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.restoreUser",
      "RoleTitle": "Backup and DR Restore User",
      "Description": "Allows the user to restore or mount from a backup. This role cannot create a backup plan.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.serviceAgent",
      "RoleTitle": "Backup and DR Service Agent",
      "Description": "Grants the Backup and DR Service access to protect GCE instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.user",
      "RoleTitle": "Backup and DR User",
      "Description": "Provides access to management console. Granular Backup and DR permissions depend on ACL configuration provided by Backup and DR admin within the management console.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.userv2",
      "RoleTitle": "Backup and DR User V2",
      "Description": "Provides full access to Backup and DR resources except deploying and managing backup infrastructure, expiring backups, changing data sensitivity and configuring on-premises billing.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/backupdr.viewer",
      "RoleTitle": "Backup and DR Viewer",
      "Description": "Provides read-only access to all Backup and DR resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.admin",
      "RoleTitle": "Bare Metal Solution Admin",
      "Description": "Administrator of Bare Metal Solution resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.editor",
      "RoleTitle": "Bare Metal Solution Editor",
      "Description": "Editor of Bare Metal Solution resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.instancesadmin",
      "RoleTitle": "Bare Metal Solution Instances Admin",
      "Description": "Admin of Bare Metal Solution Instance resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.instancesviewer",
      "RoleTitle": "Bare Metal Solution Instances Viewer",
      "Description": "Viewer of Bare Metal Solution Instance resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.lunsadmin",
      "RoleTitle": "Luns Admin",
      "Description": "Administrator of Bare Metal Solution Lun resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.lunsviewer",
      "RoleTitle": "Luns Viewer",
      "Description": "Viewer of Bare Metal Solution Lun resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.maintenanceeventsadmin",
      "RoleTitle": "Maintenance Events Admin",
      "Description": "Administrator of Bare Metal Solution maintenance events resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.maintenanceeventseditor",
      "RoleTitle": "Maintenance Events Editor",
      "Description": "Editor of Bare Metal Solution maintenance events resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.maintenanceeventsviewer",
      "RoleTitle": "Maintenance Events Viewer",
      "Description": "Viewer of Bare Metal Solution maintenance events resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.networksadmin",
      "RoleTitle": "Networks Admin",
      "Description": "Admin of Bare Metal Solution networks resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.nfssharesadmin",
      "RoleTitle": "NFS Shares Admin",
      "Description": "Administrator of Bare Metal Solution NFS Share resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.nfsshareseditor",
      "RoleTitle": "NFS Shares Editor",
      "Description": "Editor of Bare Metal Solution NFS Share resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.nfssharesviewer",
      "RoleTitle": "NFS Shares Viewer",
      "Description": "Viewer of Bare Metal Solution NFS Share resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.osimagesviewer",
      "RoleTitle": "OS Images Viewer",
      "Description": "Viewer of Bare Metal Solution OS images resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.procurementsadmin",
      "RoleTitle": "Bare Metal Solution Procurements Admin",
      "Description": "Administrator of Bare Metal Solution Procurements",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.procurementseditor",
      "RoleTitle": "Bare Metal Solution Procurements Editor",
      "Description": "Editor of Bare Metal Solution Procurements",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.procurementsviewer",
      "RoleTitle": "Bare Metal Solution Procurements Viewer",
      "Description": "Viewer of Bare Metal Solution Procurements",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.serviceAgent",
      "RoleTitle": "Bare Metal Solution Service Agent",
      "Description": "Gives permission to manage network resources such as interconnect pairing keys, required for Bare Metal Solution.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.storageadmin",
      "RoleTitle": "Bare Metal Solution Storage Admin",
      "Description": "Administrator of Bare Metal Solution storage resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.viewer",
      "RoleTitle": "Bare Metal Solution Viewer",
      "Description": "Viewer of Bare Metal Solution resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.volumesadmin",
      "RoleTitle": "Volume Admin",
      "Description": "Administrator of Bare Metal Solution volume resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.volumeseditor",
      "RoleTitle": "Volumes Editor",
      "Description": "Editor of Bare Metal Solution volumes resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.volumesnapshotsadmin",
      "RoleTitle": "Snapshots Admin",
      "Description": "Administrator of Bare Metal Solution snapshots resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.volumesnapshotseditor",
      "RoleTitle": "Snapshots Editor",
      "Description": "Editor of Bare Metal Solution snapshots resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.volumesnapshotsviewer",
      "RoleTitle": "Snapshots Viewer",
      "Description": "Viewer of Bare Metal Solution snapshots resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/baremetalsolution.volumessviewer",
      "RoleTitle": "Volumes Viewer",
      "Description": "Viewer of Bare Metal Solution volumes resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/batch.admin",
      "RoleTitle": "Batch Administrator",
      "Description": "Administrator of Batch resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/batch.agentReporter",
      "RoleTitle": "Batch Agent Reporter",
      "Description": "Reporter of Batch agent states.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/batch.jobsEditor",
      "RoleTitle": "Batch Job Editor",
      "Description": "Editor of Batch Jobs",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/batch.jobsViewer",
      "RoleTitle": "Batch Job Viewer",
      "Description": "Viewer of Batch Jobs, Task Groups and Tasks",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/batch.resourceAllowancesEditor",
      "RoleTitle": "Batch ResourceAllowance Editor",
      "Description": "Editor of Batch ResourceAllowances",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/batch.resourceAllowancesViewer",
      "RoleTitle": "Batch ResourceAllowance Viewer",
      "Description": "Viewer of Batch ResourceAllowances",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/batch.serviceAgent",
      "RoleTitle": "Google Batch Service Agent",
      "Description": "Gives Google Batch account access to manage customer resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.admin",
      "RoleTitle": "Cloud BeyondCorp Admin",
      "Description": "Full access to all Cloud BeyondCorp resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.clientConnectorAdmin",
      "RoleTitle": "Cloud BeyondCorp Client Connector Admin",
      "Description": "Full access to all BeyondCorp Client Connector resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.clientConnectorServiceUser",
      "RoleTitle": "Cloud BeyondCorp Client Connector Service User",
      "Description": "Access Client Connector Service",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.clientConnectorViewer",
      "RoleTitle": "Cloud BeyondCorp Client Connector Viewer",
      "Description": "Read-only access to all BeyondCorp Client Connector resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.partnerServiceDelegateAdmin",
      "RoleTitle": "Cloud BeyondCorp Partner Service Delegate Admin",
      "Description": "Delegates access to all BeyondCorp partner service resources to a BeyondCorp Enterprise partner.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.partnerServiceDelegateViewer",
      "RoleTitle": "Cloud BeyondCorp Partner Service Delegate Viewer",
      "Description": "Delegates read-only access to all BeyondCorp partner service resources to a BeyondCorp Enterprise partner.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.subscriptionAdmin",
      "RoleTitle": "Cloud BeyondCorp Subscription Admin",
      "Description": "Full access to all BeyondCorp Subscription resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.subscriptionViewer",
      "RoleTitle": "Cloud BeyondCorp Subscription Viewer",
      "Description": "Read-only access to all BeyondCorp Subscription resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/beyondcorp.viewer",
      "RoleTitle": "Cloud BeyondCorp Viewer",
      "Description": "Read-only access to all Cloud BeyondCorp resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/biglake.admin",
      "RoleTitle": "BigLake Admin",
      "Description": "Provides full access to all BigLake resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/biglake.viewer",
      "RoleTitle": "BigLake Viewer",
      "Description": "Provides read-only access to all BigLake resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.admin",
      "RoleTitle": "BigQuery Admin",
      "Description": "Administer all BigQuery resources and data",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.connectionAdmin",
      "RoleTitle": "BigQuery Connection Admin",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.connectionUser",
      "RoleTitle": "BigQuery Connection User",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.dataEditor",
      "RoleTitle": "BigQuery Data Editor",
      "Description": "Access to edit all the contents of datasets",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.dataOwner",
      "RoleTitle": "BigQuery Data Owner",
      "Description": "Full access to datasets and all of their contents",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.dataViewer",
      "RoleTitle": "BigQuery Data Viewer",
      "Description": "Access to view datasets and all of their contents",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.filteredDataViewer",
      "RoleTitle": "BigQuery Filtered Data Viewer",
      "Description": "Access to view filtered table data defined by a row access policy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.jobUser",
      "RoleTitle": "BigQuery Job User",
      "Description": "Access to run jobs",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.metadataViewer",
      "RoleTitle": "BigQuery Metadata Viewer",
      "Description": "Access to view table and dataset metadata",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.readSessionUser",
      "RoleTitle": "BigQuery Read Session User",
      "Description": "Access to create and use read sessions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.resourceAdmin",
      "RoleTitle": "BigQuery Resource Admin",
      "Description": "Administers BigQuery workloads, including slot assignments, commitments, and reservations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.resourceEditor",
      "RoleTitle": "BigQuery Resource Editor",
      "Description": "Manages BigQuery workloads, but is unable to create or modify slot commitments.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.resourceViewer",
      "RoleTitle": "BigQuery Resource Viewer",
      "Description": "Can view BigQuery workloads, but cannot create or modify slot reservations or commitments.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.studioAdmin",
      "RoleTitle": "BigQuery Studio Admin",
      "Description": "Combination role of BigQuery Admin, Dataform Admin, and Notebook Runtime Admin.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.studioUser",
      "RoleTitle": "BigQuery Studio User",
      "Description": "Combination role of BigQuery Job User, BigQuery Read Session User, Dataform Code Creator, and Notebook Runtime User.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquery.user",
      "RoleTitle": "BigQuery User",
      "Description": "When applied to a project, access to run queries, create datasets, read dataset metadata, and list tables. When applied to a dataset, access to read dataset metadata and list tables within the dataset.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigqueryconnection.serviceAgent",
      "RoleTitle": "BigQuery Connection Service Agent",
      "Description": "Gives BigQuery Connection Service access to Cloud SQL instances in user projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquerycontinuousquery.serviceAgent",
      "RoleTitle": "BigQuery Continuous Query Service Agent",
      "Description": "Gives BigQuery Continuous Query access to the service accounts in the user project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquerydatapolicy.maskedReader",
      "RoleTitle": "Masked Reader",
      "Description": "Masked read access to sub-resources tagged by the policy tag associated with a data policy, for example, BigQuery columns",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquerydatatransfer.serviceAgent",
      "RoleTitle": "BigQuery Data Transfer Service Agent",
      "Description": "Gives BigQuery Data Transfer Service access to start bigquery jobs in consumer project. ",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquerymigration.editor",
      "RoleTitle": "MigrationWorkflow Editor",
      "Description": "Editor of EDW migration workflows.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquerymigration.orchestrator",
      "RoleTitle": "Task Orchestrator",
      "Description": "Orchestrator of EDW migration tasks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquerymigration.translationUser",
      "RoleTitle": "Migration Translation User",
      "Description": "User of EDW migration interactive SQL translation service.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquerymigration.viewer",
      "RoleTitle": "MigrationWorkflow Viewer",
      "Description": "Viewer of EDW migration MigrationWorkflow.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigquerymigration.worker",
      "RoleTitle": "Task Worker",
      "Description": "Worker that executes EDW migration subtasks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigqueryomni.serviceAgent",
      "RoleTitle": "BigQuery Omni Service Agent",
      "Description": "Gives BigQuery Omni access to tables in user projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigqueryspark.serviceAgent",
      "RoleTitle": "BigQuery Spark Service Agent",
      "Description": "Gives BigQuery Spark access to the service accounts in the user project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigtable.admin",
      "RoleTitle": "Bigtable Administrator",
      "Description": "Full access to all Bigtable resources and ability to assign Bigtable IAM roles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigtable.reader",
      "RoleTitle": "Bigtable Reader",
      "Description": "Read access to data in existing tables; read access to metadata for instances, clusters, and tables, including column families.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigtable.user",
      "RoleTitle": "Bigtable User",
      "Description": "Read and write access to data in existing tables; read access to metadata for instances, clusters, and tables, including column families.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/bigtable.viewer",
      "RoleTitle": "Bigtable Viewer",
      "Description": "Read access to metadata for instances, clusters, and tables, including column families.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/billing.admin",
      "RoleTitle": "Billing Account Administrator",
      "Description": "Authorized to see and manage all aspects of billing accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/billing.carbonViewer",
      "RoleTitle": "Carbon Footprint Viewer",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/billing.costsManager",
      "RoleTitle": "Billing Account Costs Manager",
      "Description": "Can view and export cost information of billing accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/billing.creator",
      "RoleTitle": "Billing Account Creator",
      "Description": "Creator of billing accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/billing.projectManager",
      "RoleTitle": "Project Billing Manager",
      "Description": "Can assign a project's billing account or disable its billing.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/billing.user",
      "RoleTitle": "Billing Account User",
      "Description": "Can associate projects with billing accounts",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/billing.viewer",
      "RoleTitle": "Billing Account Viewer",
      "Description": "Can view information about billing accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.attestorsAdmin",
      "RoleTitle": "Binary Authorization Attestor Admin",
      "Description": "Adminstrator of Binary Authorization Attestors",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.attestorsEditor",
      "RoleTitle": "Binary Authorization Attestor Editor",
      "Description": "Editor of Binary Authorization Attestors",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.attestorsVerifier",
      "RoleTitle": "Binary Authorization Attestor Image Verifier",
      "Description": "Caller of Binary Authorization Attestors VerifyImageAttested",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.attestorsViewer",
      "RoleTitle": "Binary Authorization Attestor Viewer",
      "Description": "Viewer of Binary Authorization Attestors",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.policyAdmin",
      "RoleTitle": "Binary Authorization Policy Administrator",
      "Description": "Administrator of Binary Authorization Policy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.policyEditor",
      "RoleTitle": "Binary Authorization Policy Editor",
      "Description": "Editor of Binary Authorization Policy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.policyEvaluator",
      "RoleTitle": "Binary Authorization Policy Evaluator",
      "Description": "Evaluator of Binary Authorization Policy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.policyViewer",
      "RoleTitle": "Binary Authorization Policy Viewer",
      "Description": "Viewer of Binary Authorization Policy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/binaryauthorization.serviceAgent",
      "RoleTitle": "Binary Authorization Service Agent",
      "Description": "Can read Notes and Occurrences from the Container Analysis Service to find and verify signatures.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/blockchainnodeengine.admin",
      "RoleTitle": "Blockchain Node Engine Admin",
      "Description": "Full access to Blockchain Node Engine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/blockchainnodeengine.serviceAgent",
      "RoleTitle": "Blockchain Node Engine Service Agent",
      "Description": "Grants Blockchain Node Engine access to metrics in user project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/blockchainnodeengine.viewer",
      "RoleTitle": "Blockchain Node Engine Viewer",
      "Description": "Readonly access to Blockchain Node Engine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/browser",
      "RoleTitle": "Browser",
      "Description": "Access to browse GCP resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/capacityplanner.viewer",
      "RoleTitle": "Capacity Planner Usage Viewer",
      "Description": "Read-only access to Capacity Planner usage resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/carestudio.viewer",
      "RoleTitle": "Care Studio Patients Viewer",
      "Description": "This role can view all properties of Patients.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/certificatemanager.editor",
      "RoleTitle": "Certificate Manager Editor",
      "Description": "Edit access to Certificate Manager all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/certificatemanager.owner",
      "RoleTitle": "Certificate Manager Owner",
      "Description": "Full access to Certificate Manager all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/certificatemanager.serviceAgent",
      "RoleTitle": "Certificate Manager Service Agent",
      "Description": "Grants Certificate Manager access to services and APIs in the user project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/certificatemanager.viewer",
      "RoleTitle": "Certificate Manager Viewer",
      "Description": "Read-only access to Certificate Manager all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chat.owner",
      "RoleTitle": "Chat Apps Owner",
      "Description": "Can view and modify app configurations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chat.reader",
      "RoleTitle": "Chat Apps Viewer",
      "Description": "Can view app configurations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.admin",
      "RoleTitle": "Chronicle API Admin",
      "Description": "Full access to the Chronicle API services, including global settings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.editor",
      "RoleTitle": "Chronicle API Editor",
      "Description": "Modify Access to Chronicle API resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.limitedViewer",
      "RoleTitle": "Chronicle API Limited Viewer",
      "Description": "Grants readonly access to Chronicle API resources, excluding Rules and Retrohunts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.restrictedDataAccess",
      "RoleTitle": "Chronicle API Restricted Data Access",
      "Description": "Grants access to data controlled by Data Access Scopes. Intended to be refined by IAM Conditions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.restrictedDataAccessViewer",
      "RoleTitle": "Chronicle API Restricted Data Access Viewer",
      "Description": "Grants readonly access to Chronicle API resources without global data access scope.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.serviceAgent",
      "RoleTitle": "Chronicle Service Agent",
      "Description": "Grants Chronicle scoped access to customer project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.soarAdmin",
      "RoleTitle": "Chronicle SOAR Admin",
      "Description": "Grants admin access to Chronicle SOAR.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.soarServiceAgent",
      "RoleTitle": "Chronicle SOAR Service Agent",
      "Description": "Gives Chronicle SOAR the ability to perform remediation on Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.soarThreatManager",
      "RoleTitle": "Chronicle SOAR Threat Manager",
      "Description": "Grants threat manager access to Chronicle SOAR.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.soarVulnerabilityManager",
      "RoleTitle": "Chronicle SOAR Vulnerability Manager",
      "Description": "Grants vulnerability manager access to Chronicle SOAR.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chronicle.viewer",
      "RoleTitle": "Chronicle API Viewer",
      "Description": "Readonly access to the Chronicle API resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chroniclesm.admin",
      "RoleTitle": "Chronicle Service Admin",
      "Description": "Admins can view and modify Chronicle service details.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/chroniclesm.viewer",
      "RoleTitle": "Chronicle Service Viewer",
      "Description": "Viewers can see Chronicle service details but not change them.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ciem.serviceAgent",
      "RoleTitle": "CIEM Service Agent",
      "Description": "Gives CIEM Service Account permission to access GCP resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloud.locationReader",
      "RoleTitle": "Location reader",
      "Description": "Read and enumerate locations available for resource creation.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudaicompanion.serviceAgent",
      "RoleTitle": "Cloud AI Companion Service Agent",
      "Description": "Gives Cloud AI Companion components the proper permissions to function.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudaicompanion.user",
      "RoleTitle": "Cloud AI Companion User",
      "Description": "A user who can receive assistance from Cloud AI Companion",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudasset.effectivePolicyServiceAgent",
      "RoleTitle": "Effective Policies Service Agent",
      "Description": "Give effective policy service account access to search all resources and IAM policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudasset.owner",
      "RoleTitle": "Cloud Asset Owner",
      "Description": "Full access to cloud assets metadata",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudasset.serviceAgent",
      "RoleTitle": "Cloud Asset Service Agent",
      "Description": "Gives Cloud Asset service agent permissions to Cloud Storage and BigQuery for exporting Assets, and permission to publish to Cloud Pub/Sub topics for Asset Real Time Feed.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudasset.viewer",
      "RoleTitle": "Cloud Asset Viewer",
      "Description": "Read only access to cloud assets metadata",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.builds.approver",
      "RoleTitle": "Cloud Build Approver",
      "Description": "Can approve or reject pending builds.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.builds.builder",
      "RoleTitle": "Cloud Build Service Account",
      "Description": "Can perform builds",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.builds.editor",
      "RoleTitle": "Cloud Build Editor",
      "Description": "Can create and cancel builds",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.builds.viewer",
      "RoleTitle": "Cloud Build Viewer",
      "Description": "Can view builds",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.connectionAdmin",
      "RoleTitle": "Cloud Build Connection Admin",
      "Description": "Can manage connections and repositories.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.connectionViewer",
      "RoleTitle": "Cloud Build Connection Viewer",
      "Description": "Can view and list connections and repositories.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.integrationsEditor",
      "RoleTitle": "Cloud Build Integrations Editor",
      "Description": "Can update Integrations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.integrationsOwner",
      "RoleTitle": "Cloud Build Integrations Owner",
      "Description": "Can create/delete Integrations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.integrationsViewer",
      "RoleTitle": "Cloud Build Integrations Viewer",
      "Description": "Can view Integrations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.loggingServiceAgent",
      "RoleTitle": "Cloud Build Logging Service Agent",
      "Description": "Gives the Cloud Build logging-specific service account access to write logs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.readTokenAccessor",
      "RoleTitle": "Cloud Build Read Only Token Accessor",
      "Description": "Can view the connection and access its read-only token.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.serviceAgent",
      "RoleTitle": "Cloud Build Service Agent",
      "Description": "Gives Cloud Build service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.tokenAccessor",
      "RoleTitle": "Cloud Build Token Accessor",
      "Description": "Can view the connection and access its read/write and read-only tokens.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.workerPoolEditor",
      "RoleTitle": "Cloud Build WorkerPool Editor",
      "Description": "Can update and view WorkerPools",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.workerPoolOwner",
      "RoleTitle": "Cloud Build WorkerPool Owner",
      "Description": "Can create, delete, update, and view WorkerPools",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.workerPoolUser",
      "RoleTitle": "Cloud Build WorkerPool User",
      "Description": "Can run builds in the WorkerPool",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudbuild.workerPoolViewer",
      "RoleTitle": "Cloud Build WorkerPool Viewer",
      "Description": "Can view WorkerPools",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudconfig.admin",
      "RoleTitle": "Firebase Remote Config Admin",
      "Description": "Full access to Firebase Remote Config resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudconfig.serviceAgent",
      "RoleTitle": "Infrastructure Manager Service Agent",
      "Description": "Gives Infrastructure Manager service agent access to managed resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudconfig.viewer",
      "RoleTitle": "Firebase Remote Config Viewer",
      "Description": "Read access to Firebase Remote Config resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudcontrolspartner.accessApprovalServiceAgent",
      "RoleTitle": "Cloud Controls Partner Access Approval Service Agent",
      "Description": "Gives the Partner Console service account access to read Access Approval Requests for workloads associated with a partner.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudcontrolspartner.admin",
      "RoleTitle": "Cloud Controls Partner Admin",
      "Description": "Full access to Cloud Controls Partner resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudcontrolspartner.editor",
      "RoleTitle": "Cloud Controls Partner Editor",
      "Description": "Editor access to Cloud Controls Partner resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudcontrolspartner.ekmServiceAgent",
      "RoleTitle": "Cloud Controls Partner EKM Service Agent",
      "Description": "Gives Cloud Controls Partner service agent permission to list EKM connections, get EKM connection status, and provide EKM diagnostic information.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudcontrolspartner.inspectabilityReader",
      "RoleTitle": "Cloud Controls Partner Inspectability Reader",
      "Description": "Readonly access to Cloud Controls Partner inspectability resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudcontrolspartner.monitoringReader",
      "RoleTitle": "Cloud Controls Partner Monitoring Reader",
      "Description": "Readonly access to Cloud Controls Partner monitoring resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudcontrolspartner.monitoringServiceAgent",
      "RoleTitle": "Cloud Controls Partner Monitoring Service Agent",
      "Description": "Gives Cloud Controls Partner monitoring service agent permission to view and list Assured Workload violations. The role is assigned to enable partner monitoring capability.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudcontrolspartner.reader",
      "RoleTitle": "Cloud Controls Partner Reader",
      "Description": "Readonly access to Cloud Controls Partner resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddebugger.agent",
      "RoleTitle": "Cloud Debugger Agent",
      "Description": "Cloud Debugger agents are allowed to register and provide debug snapshot data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddebugger.user",
      "RoleTitle": "Cloud Debugger User",
      "Description": "User Access to Cloud Debugger.  Can create, delete and view snapshots and logpoints.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.admin",
      "RoleTitle": "Cloud Deploy Admin",
      "Description": "Full control of Cloud Deploy resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.approver",
      "RoleTitle": "Cloud Deploy Approver",
      "Description": "Permission to approve or reject rollouts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.customTargetTypeAdmin",
      "RoleTitle": "Cloud Deploy Custom Target Type Admin",
      "Description": "Permission to manage CustomTargetType resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.developer",
      "RoleTitle": "Cloud Deploy Developer",
      "Description": "Permission to manage deployment configuration without permission to access operational resources, such as targets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.jobRunner",
      "RoleTitle": "Cloud Deploy Runner",
      "Description": "Permission to execute Cloud Deploy work without permission to deliver to a target.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.operator",
      "RoleTitle": "Cloud Deploy Operator",
      "Description": "Permission to manage deployment configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.policyAdmin",
      "RoleTitle": "Cloud Deploy Policy Admin",
      "Description": "Permission to manage Deploy Policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.policyOverrider",
      "RoleTitle": "Cloud Deploy Policy Overrider",
      "Description": "Permission to override Deploy Policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.releaser",
      "RoleTitle": "Cloud Deploy Releaser",
      "Description": "Permission to create Cloud Deploy releases and rollouts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.serviceAgent",
      "RoleTitle": "Cloud Deploy Service Agent",
      "Description": "Gives Cloud Deploy Service Account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploy.viewer",
      "RoleTitle": "Cloud Deploy Viewer",
      "Description": "Can view Cloud Deploy resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/clouddeploymentmanager.serviceAgent",
      "RoleTitle": "Cloud Deployment Manager Service Agent",
      "Description": "Allows Deployment Manager service to actuate resources across DM projects and folders",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudfunctions.admin",
      "RoleTitle": "Cloud Functions Admin",
      "Description": "Full access to functions, operations and locations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudfunctions.developer",
      "RoleTitle": "Cloud Functions Developer",
      "Description": "Read and write access to all functions-related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudfunctions.invoker",
      "RoleTitle": "Cloud Functions Invoker",
      "Description": "Ability to invoke 1st gen HTTP functions with restricted access. 2nd gen functions need the Cloud Run Invoker role instead.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudfunctions.serviceAgent",
      "RoleTitle": "Cloud Functions Service Agent",
      "Description": "Gives Cloud Functions service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudfunctions.viewer",
      "RoleTitle": "Cloud Functions Viewer",
      "Description": "Read-only access to functions and locations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudiot.serviceAgent",
      "RoleTitle": "Cloud IoT Core Service Agent",
      "Description": "Grants the ability to manage Cloud IoT Core resources, including publishing data to Cloud Pub/Sub and writing device activity logs to Stackdriver. Warning: If this role is removed from the Cloud IoT service account, Cloud IoT Core will be unable to publish data or write device activity logs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudjobdiscovery.admin",
      "RoleTitle": "Admin",
      "Description": "Access to Cloud Talent Solution Self-Service Tools.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudjobdiscovery.jobsEditor",
      "RoleTitle": "Job Editor",
      "Description": "Write access to all job data in Cloud Talent Solution.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudjobdiscovery.jobsViewer",
      "RoleTitle": "Job Viewer",
      "Description": "Read access to all job data in Cloud Talent Solution.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudjobdiscovery.profilesEditor",
      "RoleTitle": "Profile Editor",
      "Description": "Write access to all profile data in Cloud Talent Solution.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudjobdiscovery.profilesViewer",
      "RoleTitle": "Profile Viewer",
      "Description": "Read access to all profile data in Cloud Talent Solution.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.admin",
      "RoleTitle": "Cloud KMS Admin",
      "Description": "Enables management of crypto resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.autokeyAdmin",
      "RoleTitle": "Cloud KMS Autokey Admin",
      "Description": "Enables management of AutokeyConfig.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.autokeyUser",
      "RoleTitle": "Cloud KMS Autokey User",
      "Description": "Grants ability to use KeyHandle resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.cryptoKeyDecrypter",
      "RoleTitle": "Cloud KMS CryptoKey Decrypter",
      "Description": "Enables Decrypt operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.cryptoKeyDecrypterViaDelegation",
      "RoleTitle": "Cloud KMS CryptoKey Decrypter Via Delegation",
      "Description": "Enables Decrypt operations via other GCP services",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.cryptoKeyEncrypter",
      "RoleTitle": "Cloud KMS CryptoKey Encrypter",
      "Description": "Enables Encrypt operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.cryptoKeyEncrypterDecrypter",
      "RoleTitle": "Cloud KMS CryptoKey Encrypter/Decrypter",
      "Description": "Enables Encrypt and Decrypt operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.cryptoKeyEncrypterDecrypterViaDelegation",
      "RoleTitle": "Cloud KMS CryptoKey Encrypter/Decrypter Via Delegation",
      "Description": "Enables Encrypt and Decrypt operations via other GCP services",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.cryptoKeyEncrypterViaDelegation",
      "RoleTitle": "Cloud KMS CryptoKey Encrypter Via Delegation",
      "Description": "Enables Encrypt operations via other GCP services",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.cryptoOperator",
      "RoleTitle": "Cloud KMS Crypto Operator",
      "Description": "Enables all Crypto Operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.ekmConnectionsAdmin",
      "RoleTitle": "Cloud KMS EkmConnections Admin",
      "Description": "Enables management of EkmConnections.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.expertRawAesCbc",
      "RoleTitle": "Cloud KMS Expert Raw AES-CBC Key Manager",
      "Description": "Enables raw AES-CBC keys management.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.expertRawAesCtr",
      "RoleTitle": "Cloud KMS Expert Raw AES-CTR Key Manager",
      "Description": "Enables raw AES-CTR keys management.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.expertRawPKCS1",
      "RoleTitle": "Cloud KMS Expert Raw PKCS#1 Key Manager",
      "Description": "Enables raw PKCS#1 keys management.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.importer",
      "RoleTitle": "Cloud KMS Importer",
      "Description": "Enables ImportCryptoKeyVersion, CreateImportJob, ListImportJobs, and GetImportJob operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.orgServiceAgent",
      "RoleTitle": "Cloud KMS Organization Service Agent",
      "Description": "Gives Cloud KMS organization-level service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.protectedResourcesViewer",
      "RoleTitle": "Cloud KMS Protected Resources Viewer",
      "Description": "Enables viewing protected resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.publicKeyViewer",
      "RoleTitle": "Cloud KMS CryptoKey Public Key Viewer",
      "Description": "Enables GetPublicKey operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.serviceAgent",
      "RoleTitle": "Cloud KMS Service Agent",
      "Description": "Gives Cloud KMS service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.signer",
      "RoleTitle": "Cloud KMS CryptoKey Signer",
      "Description": "Enables Sign operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.signerVerifier",
      "RoleTitle": "Cloud KMS CryptoKey Signer/Verifier",
      "Description": "Enables Sign, Verify, and GetPublicKey operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.verifier",
      "RoleTitle": "Cloud KMS CryptoKey Verifier",
      "Description": "Enables Verify and GetPublicKey operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkms.viewer",
      "RoleTitle": "Cloud KMS Viewer",
      "Description": "Enables Get and List operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudkmskacls.serviceAgent",
      "RoleTitle": "Cloud KMS KACLS Service Agent",
      "Description": "Grants Cloud KMS KACLS Service Agent access to KMS resource permissions to perform DEK encryption/decryption.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudmigration.inframanager",
      "RoleTitle": "Velostrata Manager",
      "Description": "Ability to create and manage Compute VMs to run Velostrata Infrastructure",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudmigration.storageaccess",
      "RoleTitle": "Velostrata Storage Access",
      "Description": "Ability to access migration storage",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudmigration.velostrataconnect",
      "RoleTitle": "Velostrata Manager Connection Agent",
      "Description": "Ability to set up connection between Velostrata Manager and Google",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudoptimization.admin",
      "RoleTitle": "Cloud Optimization AI Admin",
      "Description": "Administrator of Cloud Optimization AI resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudoptimization.editor",
      "RoleTitle": "Cloud Optimization AI Editor",
      "Description": "Editor of Cloud Optimization AI resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudoptimization.serviceAgent",
      "RoleTitle": "Cloud Optimization Service Agent",
      "Description": "Grants Cloud Optimization Service Account access to read and write data in the user project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudoptimization.viewer",
      "RoleTitle": "Cloud Optimization AI Viewer",
      "Description": "Viewer of Cloud Optimization AI resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudprivatecatalog.consumer",
      "RoleTitle": "Catalog Consumer",
      "Description": "Can browse catalogs in the target resource context.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudprivatecatalogproducer.admin",
      "RoleTitle": "Catalog Admin",
      "Description": "Can manage catalog and view its associations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudprivatecatalogproducer.manager",
      "RoleTitle": "Catalog Manager",
      "Description": "Can manage associations between a catalog and a target resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudprivatecatalogproducer.orgAdmin",
      "RoleTitle": "Catalog Org Admin",
      "Description": "Can manage catalog org settings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudprofiler.agent",
      "RoleTitle": "Cloud Profiler Agent",
      "Description": "Cloud Profiler agents are allowed to register and provide the profiling data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudprofiler.user",
      "RoleTitle": "Cloud Profiler User",
      "Description": "Cloud Profiler users are allowed to query and view the profiling data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudquotas.admin",
      "RoleTitle": "Cloud Quotas Admin",
      "Description": "Full access to Cloud Quotas resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudquotas.viewer",
      "RoleTitle": "Cloud Quotas Viewer",
      "Description": "Readonly access to Cloud Quotas resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudscheduler.admin",
      "RoleTitle": "Cloud Scheduler Admin",
      "Description": "Full access to jobs and executions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudscheduler.jobRunner",
      "RoleTitle": "Cloud Scheduler Job Runner",
      "Description": "Access to run jobs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudscheduler.serviceAgent",
      "RoleTitle": "Cloud Scheduler Service Agent",
      "Description": "Grants Cloud Scheduler Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudscheduler.viewer",
      "RoleTitle": "Cloud Scheduler Viewer",
      "Description": "Get and list access to jobs, executions, and locations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsecurityscanner.editor",
      "RoleTitle": "Web Security Scanner Editor",
      "Description": "Full access to all Web Security Scanner resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsecurityscanner.runner",
      "RoleTitle": "Web Security Scanner Runner",
      "Description": "Read access to Scan and ScanRun, plus the ability to start scans",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsecurityscanner.viewer",
      "RoleTitle": "Web Security Scanner Viewer",
      "Description": "Read access to all Web Security Scanner resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsql.admin",
      "RoleTitle": "Cloud SQL Admin",
      "Description": "Full control of Cloud SQL resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsql.client",
      "RoleTitle": "Cloud SQL Client",
      "Description": "Connectivity access to Cloud SQL instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsql.editor",
      "RoleTitle": "Cloud SQL Editor",
      "Description": "Full control of existing Cloud SQL instances excluding modifying users, SSL certificates or deleting resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsql.instanceUser",
      "RoleTitle": "Cloud SQL Instance User",
      "Description": "Role allowing access to a Cloud SQL instance",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsql.schemaViewer",
      "RoleTitle": "Cloud SQL Schema Viewer",
      "Description": "Role allowing access to the Cloud SQL instance schema on Dataplex",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsql.serviceAgent",
      "RoleTitle": "Cloud SQL Service Agent",
      "Description": "Grants Cloud SQL access to services and APIs in the user project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsql.viewer",
      "RoleTitle": "Cloud SQL Viewer",
      "Description": "Read-only access to Cloud SQL resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsupport.admin",
      "RoleTitle": "Support Account Administrator",
      "Description": "Allows management of a support account without giving access to support cases.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsupport.techSupportEditor",
      "RoleTitle": "Tech Support Editor",
      "Description": "Full read-write access to technical support cases (applicable for GCP Customer Care and Maps support).",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsupport.techSupportViewer",
      "RoleTitle": "Tech Support Viewer",
      "Description": "Read-only access to technical support cases (applicable for GCP Customer Care and Maps support).",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudsupport.viewer",
      "RoleTitle": "Support Account Viewer",
      "Description": "Read-only access to details of a support account. This does not allow viewing cases.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtasks.admin",
      "RoleTitle": "Cloud Tasks Admin",
      "Description": "Full access to queues and tasks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtasks.enqueuer",
      "RoleTitle": "Cloud Tasks Enqueuer",
      "Description": "Access to create tasks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtasks.queueAdmin",
      "RoleTitle": "Cloud Tasks Queue Admin",
      "Description": "Admin access to queues.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtasks.serviceAgent",
      "RoleTitle": "Cloud Tasks Service Agent",
      "Description": "Grants Cloud Tasks Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtasks.taskDeleter",
      "RoleTitle": "Cloud Tasks Task Deleter",
      "Description": "Access to delete tasks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtasks.taskRunner",
      "RoleTitle": "Cloud Tasks Task Runner",
      "Description": "Access to run tasks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtasks.viewer",
      "RoleTitle": "Cloud Tasks Viewer",
      "Description": "Get and list access to tasks, queues, and locations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtestservice.directAccessAdmin",
      "RoleTitle": "Firebase Test Lab Direct Access Admin",
      "Description": "Administrator owning access to Direct Access",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtestservice.directAccessViewer",
      "RoleTitle": "Firebase Test Lab Direct Access Viewer",
      "Description": "Viewer, able to see what direct access sessions exist",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtestservice.testAdmin",
      "RoleTitle": "Firebase Test Lab Admin",
      "Description": "Full access to all Test Lab features",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtestservice.testViewer",
      "RoleTitle": "Firebase Test Lab Viewer",
      "Description": "Read access to Test Lab features",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtpu.serviceAgent",
      "RoleTitle": "Cloud TPU V2 API Service Agent",
      "Description": "Give Cloud TPUs service account access to managed resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtrace.admin",
      "RoleTitle": "Cloud Trace Admin",
      "Description": "Admin access to Cloud Trace.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtrace.agent",
      "RoleTitle": "Cloud Trace Agent",
      "Description": "Agent access to Cloud Trace. Can write trace data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtrace.user",
      "RoleTitle": "Cloud Trace User",
      "Description": "User access to Cloud Trace. Can view traces, insights and stats. Can create, list, view, and delete tasks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtranslate.admin",
      "RoleTitle": "Cloud Translation API Admin",
      "Description": "Full access to all Cloud Translation resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtranslate.editor",
      "RoleTitle": "Cloud Translation API Editor",
      "Description": "Editor of all Cloud Translation resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtranslate.serviceAgent",
      "RoleTitle": "Cloud Translation API Service Agent",
      "Description": "Gives Cloud Translation Service Account access to consumer resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtranslate.user",
      "RoleTitle": "Cloud Translation API User",
      "Description": "User of Cloud Translation and AutoML models",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/cloudtranslate.viewer",
      "RoleTitle": "Cloud Translation API Viewer",
      "Description": "Viewer of all Translation resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commerceagreementpublishing.admin",
      "RoleTitle": "Commerce Agreement Publishing Admin",
      "Description": "Admin of Commerce Agreement Publishing service",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commerceagreementpublishing.viewer",
      "RoleTitle": "Commerce Agreement Publishing Viewer",
      "Description": "Viewer of Commerce Agreement Publishing service",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercebusinessenablement.admin",
      "RoleTitle": "Commerce Business Enablement Configuration Admin",
      "Description": "Admin of Various Provider Configuration resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercebusinessenablement.paymentConfigAdmin",
      "RoleTitle": "Commerce Business Enablement PaymentConfig Admin",
      "Description": "Administration of Payment Configuration resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercebusinessenablement.paymentConfigViewer",
      "RoleTitle": "Commerce Business Enablement PaymentConfig Viewer",
      "Description": "Viewer of Payment Configuration resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercebusinessenablement.rebatesAdmin",
      "RoleTitle": "Commerce Business Enablement Rebates Admin",
      "Description": "Provides admin access to rebates",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercebusinessenablement.rebatesViewer",
      "RoleTitle": "Commerce Business Enablement Rebates Viewer",
      "Description": "Provides read-only access to rebates",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercebusinessenablement.resellerDiscountAdmin",
      "RoleTitle": "Commerce Business Enablement Reseller Discount Admin",
      "Description": "Provides admin access to reseller discount offers",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercebusinessenablement.resellerDiscountViewer",
      "RoleTitle": "Commerce Business Enablement Reseller Discount Viewer",
      "Description": "Provides read-only access to reseller discount offers",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercebusinessenablement.viewer",
      "RoleTitle": "Commerce Business Enablement Configuration Viewer",
      "Description": "Viewer of Various Provider Configuration resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commerceoffercatalog.offersViewer",
      "RoleTitle": "Commerce Offer Catalog Offers Viewer",
      "Description": "Allows viewing offers",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commerceorggovernance.admin",
      "RoleTitle": "Commerce Organization Governance Admin",
      "Description": "Full access to Organization Governance APIs",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commerceorggovernance.user",
      "RoleTitle": "Governed Marketplace User",
      "Description": "Full access to Governed Marketplace features.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commerceorggovernance.viewer",
      "RoleTitle": "Commerce Organization Governance Viewer",
      "Description": "Full access to Organization Governance read-only APIs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercepricemanagement.eventsViewer",
      "RoleTitle": "Commerce Price Management Events Viewer",
      "Description": "Allows viewing key events for an offer",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercepricemanagement.privateOffersAdmin",
      "RoleTitle": "Commerce Price Management Private Offers Admin",
      "Description": "Allows managing private offers",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commercepricemanagement.viewer",
      "RoleTitle": "Commerce Price Management Viewer",
      "Description": "Allows viewing offers, free trials, skus",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commerceproducer.admin",
      "RoleTitle": "Commerce Producer Admin",
      "Description": "Grants full access to all resources in Cloud Commerce Producer API.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/commerceproducer.viewer",
      "RoleTitle": "Commerce Producer Viewer",
      "Description": "Grants read access to all resources in Cloud Commerce Producer API.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compliancescanning.serviceAgent",
      "RoleTitle": "Compliance Scanning Service Agent",
      "Description": "Gives Compliance Scanning the access it needs to analyze containers and VMs for compliance and create occurrences using the Container Analysis API",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.ServiceAgentV2Ext",
      "RoleTitle": "Cloud Composer v2 API Service Agent Extension",
      "Description": "Cloud Composer v2 API Service Agent Extension is a supplementary role required to manage Composer v2 environments.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.admin",
      "RoleTitle": "Composer Administrator",
      "Description": "Full control of Composer resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.environmentAndStorageObjectAdmin",
      "RoleTitle": "Environment and Storage Object Administrator",
      "Description": "Full control of Cloud Composer environments and Cloud Storage objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.environmentAndStorageObjectUser",
      "RoleTitle": "Environment and Storage Object User",
      "Description": "Read and use access to Cloud Composer resources and read access Cloud Storage objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.environmentAndStorageObjectViewer",
      "RoleTitle": "Environment and Storage Object Viewer",
      "Description": "Read access to Cloud Composer environments and Cloud Storage objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.serviceAgent",
      "RoleTitle": "Cloud Composer API Service Agent",
      "Description": "Cloud Composer API service agent can manage environments.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.sharedVpcAgent",
      "RoleTitle": "Composer Shared VPC Agent",
      "Description": "Role that should be assigned to Composer Agent service account in Shared VPC host project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.user",
      "RoleTitle": "Composer User",
      "Description": "Read and use access to Composer resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/composer.worker",
      "RoleTitle": "Composer Worker",
      "Description": "Worker access to Composer. Intended for service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.admin",
      "RoleTitle": "Compute Admin",
      "Description": "Full control of all Compute Engine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.futureReservationAdmin",
      "RoleTitle": "Compute Future Reservation Admin",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.futureReservationUser",
      "RoleTitle": "Compute Future Reservation User",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.futureReservationViewer",
      "RoleTitle": "Compute Future Reservation Viewer",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.imageUser",
      "RoleTitle": "Compute Image User",
      "Description": "Read and use image resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.instanceAdmin",
      "RoleTitle": "Compute Instance Admin (beta)",
      "Description": "Full control of Compute Engine instance resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.instanceAdmin.v1",
      "RoleTitle": "Compute Instance Admin (v1)",
      "Description": "Full control of Compute Engine instances, instance groups, disks, snapshots, and images. Read access to all Compute Engine networking resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.instanceGroupManagerServiceAgent",
      "RoleTitle": "Instance Group Manager Service Agent",
      "Description": "Role containing all permissions required by Managed Instance Groups to create and managed instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.loadBalancerAdmin",
      "RoleTitle": "Compute Load Balancer Admin",
      "Description": "Full control of Compute Engine resources related to load balancer.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.loadBalancerServiceUser",
      "RoleTitle": "Compute Load Balancer Services User",
      "Description": "Permissions to use services from a load balancer in other projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.networkAdmin",
      "RoleTitle": "Compute Network Admin",
      "Description": "Full control of Compute Engine networking resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.networkUser",
      "RoleTitle": "Compute Network User",
      "Description": "Access to use Compute Engine networking resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.networkViewer",
      "RoleTitle": "Compute Network Viewer",
      "Description": "Read-only access to Compute Engine networking resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.orgFirewallPolicyAdmin",
      "RoleTitle": "Compute Organization Firewall Policy Admin",
      "Description": "Full control of Compute Engine Organization Firewall Policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.orgFirewallPolicyUser",
      "RoleTitle": "Compute Organization Firewall Policy User",
      "Description": "View or use Compute Engine Firewall Policies to associate with the organization or folders.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.orgSecurityPolicyAdmin",
      "RoleTitle": "Compute Organization Security Policy Admin",
      "Description": "Full control of Compute Engine Organization Security Policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.orgSecurityPolicyUser",
      "RoleTitle": "Compute Organization Security Policy User",
      "Description": "View or use Compute Engine Security Policies to associate with the organization or folders.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.orgSecurityResourceAdmin",
      "RoleTitle": "Compute Organization Resource Admin",
      "Description": "Full control of Compute Engine Firewall Policy associations to the organization or folders.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.osAdminLogin",
      "RoleTitle": "Compute OS Admin Login",
      "Description": "Access to log in to a Compute Engine instance as an administrator user.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.osLogin",
      "RoleTitle": "Compute OS Login",
      "Description": "Access to log in to a Compute Engine instance as a standard (non-administrator) user.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.osLoginExternalUser",
      "RoleTitle": "Compute OS Login External User",
      "Description": "Access for an external user to set OS Login information associated with this organization. This role does not grant access to instances. External users must be granted one of the required OS Login IAM roles (https://cloud.google.com/compute/docs/instances/managing-instance-access#configure_users) in order to allow access to instances using SSH.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.packetMirroringAdmin",
      "RoleTitle": "Compute packet mirroring admin",
      "Description": "Specify resources to be mirrored.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.packetMirroringUser",
      "RoleTitle": "Compute packet mirroring user",
      "Description": "Use Compute Engine packet mirrorings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.publicIpAdmin",
      "RoleTitle": "Compute Public IP Admin",
      "Description": "Full control of public IP address management for Compute Engine.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.securityAdmin",
      "RoleTitle": "Compute Security Admin",
      "Description": "Full control of Compute Engine security resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.serviceAgent",
      "RoleTitle": "Compute Engine Service Agent",
      "Description": "Gives Compute Engine Service Account access to assert service account authority. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.soleTenantViewer",
      "RoleTitle": "Compute Sole Tenant Viewer",
      "Description": "Permissions to view sole tenancy node groups",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.storageAdmin",
      "RoleTitle": "Compute Storage Admin",
      "Description": "Full control of Compute Engine storage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.viewer",
      "RoleTitle": "Compute Viewer",
      "Description": "Read-only access to get and list information about all Compute Engine resources, including instances, disks, and firewalls. Allows getting and listing information about disks, images, and snapshots, but does not allow reading the data stored on them.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/compute.xpnAdmin",
      "RoleTitle": "Compute Shared VPC Admin",
      "Description": "Can administer shared VPC network (XPN).",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/confidentialcomputing.workloadUser",
      "RoleTitle": "Confidential Space Workload User",
      "Description": "Grants the ability to generate an attestation token and run a workload in a VM. Intended for service accounts that run on Confidential Space VMs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/config.admin",
      "RoleTitle": "Cloud Infrastructure Manager Admin",
      "Description": "Full access to Cloud Infrastructure Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/config.agent",
      "RoleTitle": "Cloud Infrastructure Manager Agent",
      "Description": "Required permissions to make Cloud Infrastructure Manager work with the user-specified service account",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/config.viewer",
      "RoleTitle": "Cloud Infrastructure Manager Viewer",
      "Description": "Read-only access to Cloud Infrastructure Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/configdelivery.configDeliveryAdmin",
      "RoleTitle": "ConfigDelivery Admin",
      "Description": "Grants full access to all Config Delivery resources. Lets users create, remove and manage fleet packages and resource bundles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/configdelivery.configDeliveryViewer",
      "RoleTitle": "ConfigDelivery Viewer",
      "Description": "Grants read access to all Config Delivery resources. Lets users view existing fleet packages and resource bundles, but they will not be able to make any changes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/configdelivery.resourceBundlePublisher",
      "RoleTitle": "Config Delivery Resource Bundle Publisher",
      "Description": "Grants read and write permissions to Config Delivery ResourceBundles and Releases.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/configdelivery.serviceAgent",
      "RoleTitle": "Config Delivery Service Agent",
      "Description": "Gives the Config Delivery service account permission to manage resources ",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.admin",
      "RoleTitle": "Connector Admin",
      "Description": "Full access to all resources of Connectors Service.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.customConnectorAdmin",
      "RoleTitle": "Custom Connectors Admin",
      "Description": "Custom Connector  is a global resource which creates custom connector within the given target project. This role grants Admin access to Custom Connector resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.customConnectorViewer",
      "RoleTitle": "Custom Connector Viewer",
      "Description": "Custom Connector  is a global resource which creates custom connector within the given target project. This role grants Read-only access to Custom Connector & Custom Connector Version resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.endpointAttachmentAdmin",
      "RoleTitle": "Connectors Endpoint Attachment Admin",
      "Description": "Endpoint Attachment is a regional resource which creates PSC connection endpoint for the given PSC Service Attachment. This role grants Admin access to Connectors Endpoint Attachment resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.endpointAttachmentViewer",
      "RoleTitle": "Connectors Endpoint Attachment Viewer",
      "Description": "Endpoint Attachment is a regional resource which creates PSC connection endpoint for the given PSC Service Attachment. This role grants Read-only access to Connectors Endpoint Attachment resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.eventSubscriptionAdmin",
      "RoleTitle": "Connectors Event Subscriptions Admin",
      "Description": "Event Subscription is a regional resource which creates subscriptions on events for a given connection within the given target project. This role grants Admin access to Connectors Subscription resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.eventSubscriptionViewer",
      "RoleTitle": "Connectors Event Subscriptions Viewer",
      "Description": "Event Subscription is a regional resource which creates subscriptions on events for a given connection within the given target project. This role grants Read-only access to Event Subscription resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.invoker",
      "RoleTitle": "Connector Invoker",
      "Description": "Full Access to invoke all operations on Connections.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.listener",
      "RoleTitle": "Connector Event Listener",
      "Description": "Full Access to listen events by connections.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.managedZoneAdmin",
      "RoleTitle": "Connectors Managed Zone Admin",
      "Description": "Managed Zone is a global resource which creates Cloud DNS Peering Zone with the given target project. This role grants Admin access to Connectors Managed Zone resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.managedZoneViewer",
      "RoleTitle": "Connectors Managed Zone Viewer",
      "Description": "Managed Zone is a global resource which creates Cloud DNS Peering Zone with the given target project. This role grants Read-only access to Connectors Managed Zone resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.serviceAgent",
      "RoleTitle": "Connectors Platform Service Agent",
      "Description": "Grants Connectors Platform service account to manage customer resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/connectors.viewer",
      "RoleTitle": "Connectors Viewer",
      "Description": "Read-only access to Connectors all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/consumerprocurement.entitlementManager",
      "RoleTitle": "Consumer Procurement Entitlement Manager",
      "Description": "Allows managing entitlements and enabling, disabling, and inspecting service states for a consumer project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/consumerprocurement.entitlementViewer",
      "RoleTitle": "Consumer Procurement Entitlement Viewer",
      "Description": "Allows inspecting entitlements and service states for a consumer project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/consumerprocurement.eventsViewer",
      "RoleTitle": "Consumer Procurement Events Viewer",
      "Description": "Allows viewing key events for an offer",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/consumerprocurement.orderAdmin",
      "RoleTitle": "Consumer Procurement Order Administrator",
      "Description": "Allows managing purchases",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/consumerprocurement.orderViewer",
      "RoleTitle": "Consumer Procurement Order Viewer",
      "Description": "Allows inspecting purchases",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/consumerprocurement.procurementAdmin",
      "RoleTitle": "Consumer Procurement Administrator",
      "Description": "Allows managing purchases, consents at both billing account and project level.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/consumerprocurement.procurementViewer",
      "RoleTitle": "Consumer Procurement Viewer",
      "Description": "Allows inspecting purchases, consents and entitlements and service states for a consumer project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contactcenteraiplatform.admin",
      "RoleTitle": "Contact Center AI Platform Admin",
      "Description": "Full access to Contact Center AI Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contactcenteraiplatform.viewer",
      "RoleTitle": "Contact Center AI Platform Viewer",
      "Description": "Readonly access to Contact Center AI Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contactcenterinsights.editor",
      "RoleTitle": "Contact Center AI Insights editor",
      "Description": "Grants read and write access to all Contact Center AI Insights resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contactcenterinsights.serviceAgent",
      "RoleTitle": "Contact Center AI Insights Service Agent",
      "Description": "Allows Contact Center AI to read and write APIs including BigQuery, Dialogflow, and Storage.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contactcenterinsights.viewer",
      "RoleTitle": "Contact Center AI Insights viewer",
      "Description": "Grants read access to all Contact Center AI Insights resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.admin",
      "RoleTitle": "Kubernetes Engine Admin",
      "Description": "Full management of Kubernetes Clusters and their Kubernetes API objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.clusterAdmin",
      "RoleTitle": "Kubernetes Engine Cluster Admin",
      "Description": "Management of Kubernetes Clusters.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.clusterViewer",
      "RoleTitle": "Kubernetes Engine Cluster Viewer",
      "Description": "Get and list access to GKE Clusters.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.defaultNodeServiceAccount",
      "RoleTitle": "Kubernetes Engine Default Node Service Account",
      "Description": "Least privilege role to use as the default service account for GKE Nodes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.developer",
      "RoleTitle": "Kubernetes Engine Developer",
      "Description": "Full access to Kubernetes API objects inside Kubernetes Clusters.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.hostServiceAgentUser",
      "RoleTitle": "Kubernetes Engine Host Service Agent User",
      "Description": "Allows the Kubernetes Engine service account in the host project to configure shared network resources for cluster management. Also gives access to inspect the firewall rules in the host project, and configure Cloud DNS resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.nodeServiceAgent",
      "RoleTitle": "Kubernetes Engine Node Service Agent",
      "Description": "Minimal set of permission required by a GKE node to support standard capabilities such as logging and monitoring export, and image pulls.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.serviceAgent",
      "RoleTitle": "Kubernetes Engine Service Agent",
      "Description": "Gives Kubernetes Engine account access to manage cluster resources. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/container.viewer",
      "RoleTitle": "Kubernetes Engine Viewer",
      "Description": "Read-only access to Kubernetes Engine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containeranalysis.ServiceAgent",
      "RoleTitle": "Container Analysis Service Agent",
      "Description": "Gives Container Analysis API the access it needs to function",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containeranalysis.admin",
      "RoleTitle": "Container Analysis Admin",
      "Description": "Access to all Container Analysis resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containeranalysis.notes.attacher",
      "RoleTitle": "Container Analysis Notes Attacher",
      "Description": "Can attach Container Analysis Occurrences to Notes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containeranalysis.notes.editor",
      "RoleTitle": "Container Analysis Notes Editor",
      "Description": "Can edit Container Analysis Notes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containeranalysis.notes.occurrences.viewer",
      "RoleTitle": "Container Analysis Occurrences for Notes Viewer",
      "Description": "Can view all Container Analysis Occurrences attached to a Note.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containeranalysis.notes.viewer",
      "RoleTitle": "Container Analysis Notes Viewer",
      "Description": "Can view Container Analysis Notes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containeranalysis.occurrences.editor",
      "RoleTitle": "Container Analysis Occurrences Editor",
      "Description": "Can edit Container Analysis Occurrences.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containeranalysis.occurrences.viewer",
      "RoleTitle": "Container Analysis Occurrences Viewer",
      "Description": "Can view Container Analysis Occurrences.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containerregistry.ServiceAgent",
      "RoleTitle": "Container Registry Service Agent",
      "Description": "Access for Container Registry",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containerscanning.ServiceAgent",
      "RoleTitle": "Container Scanner Service Agent",
      "Description": "Gives Container Scanner the access it needs to analyzecontainers for vulnerabilities and create occurrences using the Container Analysis API",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containersecurity.viewer",
      "RoleTitle": "GKE Security Posture Viewer",
      "Description": "Readonly access to GKE Security Posture resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/containerthreatdetection.serviceAgent",
      "RoleTitle": "Container Threat Detection Service Agent",
      "Description": "Gives Container Threat Detection service account access to enable/disable Container Threat Detection and manage the Container Threat Detection Agent on Google Kubernetes Engine clusters.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contentwarehouse.admin",
      "RoleTitle": "Content Warehouse Admin",
      "Description": "Grants full access to all the resources in Content Warehouse",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contentwarehouse.documentAdmin",
      "RoleTitle": "Content Warehouse Document Admin",
      "Description": "Grants full access to the document resource in Content Warehouse",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contentwarehouse.documentCreator",
      "RoleTitle": "Content Warehouse document creator",
      "Description": "Grants access to create document in Content Warehouse",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contentwarehouse.documentEditor",
      "RoleTitle": "Content Warehouse Document Editor",
      "Description": "Grants access to update document resource in Content Warehouse",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contentwarehouse.documentSchemaViewer",
      "RoleTitle": "Content Warehouse document schema viewer",
      "Description": "Grants access to view the document schemas in Content Warehouse",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contentwarehouse.documentViewer",
      "RoleTitle": "Content Warehouse Viewer",
      "Description": "Grants access to view all the resources in Content Warehouse",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/contentwarehouse.serviceAgent",
      "RoleTitle": "Content Warehouse Service Agent",
      "Description": "Gives the Content Warehouse service account to manage customer resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/databasecenter.viewer",
      "RoleTitle": "Database center viewer",
      "Description": "Viewer role for Database Center resource data",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/databaseinsights.eventsViewer",
      "RoleTitle": "Events Service viewer",
      "Description": "Viewer role for Events Service data",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/databaseinsights.monitoringViewer",
      "RoleTitle": "Database Insights monitoring viewer",
      "Description": "Viewer role for Database Insights monitoring data",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/databaseinsights.operationsAdmin",
      "RoleTitle": "Database Insights performing operations",
      "Description": "Admin role for performing Database Insights operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/databaseinsights.recommendationViewer",
      "RoleTitle": "Database Insights recommendation viewer",
      "Description": "Viewer role for Database Insights recommendation data",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/databaseinsights.viewer",
      "RoleTitle": "Database Insights viewer",
      "Description": "Viewer role for Database Insights data",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.admin",
      "RoleTitle": "Data Catalog Admin",
      "Description": "Full access to all DataCatalog resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.categoryAdmin",
      "RoleTitle": "Policy Tag Admin",
      "Description": "Manage taxonomies",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.categoryFineGrainedReader",
      "RoleTitle": "Fine-Grained Reader",
      "Description": "Read access to sub-resources tagged by a policy tag, for example, BigQuery columns",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.dataSteward",
      "RoleTitle": "DataCatalog Data Steward",
      "Description": "Can update overview and data steward fields",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.entryGroupCreator",
      "RoleTitle": "DataCatalog EntryGroup Creator",
      "Description": "Can create new entryGroups",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.entryGroupOwner",
      "RoleTitle": "DataCatalog EntryGroup Owner",
      "Description": "Full access to entryGroups",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.entryOwner",
      "RoleTitle": "DataCatalog Entry Owner",
      "Description": "Full access to entries",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.entryViewer",
      "RoleTitle": "DataCatalog Entry Viewer",
      "Description": "Read access to entries",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.glossaryOwner",
      "RoleTitle": "DataCatalog Glossary Owner",
      "Description": "Full access to glossaries",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.glossaryUser",
      "RoleTitle": "DataCatalog Glossary User",
      "Description": "Can view glossaries and associate terms to entries",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.migrationConfigAdmin",
      "RoleTitle": "DataCatalog Migration Config Admin",
      "Description": "Full access to Migration Config",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.searchAdmin",
      "RoleTitle": "DataCatalog Search Admin",
      "Description": "Can search all metadata for a project/org in DataCatalog",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.tagEditor",
      "RoleTitle": "Data Catalog Tag Editor",
      "Description": "Gives permission to modify tags on a GCP assets (BigQuery, Pub/Sub etc).",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.tagTemplateCreator",
      "RoleTitle": "Data Catalog TagTemplate Creator",
      "Description": "Access to create new tag templates",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.tagTemplateOwner",
      "RoleTitle": "Data Catalog TagTemplate Owner",
      "Description": "Full acess to tag templates",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.tagTemplateUser",
      "RoleTitle": "Data Catalog TagTemplate User",
      "Description": "Access to use templates to tag resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.tagTemplateViewer",
      "RoleTitle": "Data Catalog TagTemplate Viewer",
      "Description": "Read access to templates and tags created using the templates",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datacatalog.viewer",
      "RoleTitle": "Data Catalog Viewer",
      "Description": "Grants metadata read permissions to cataloged GCP assets (BigQuery, Pub/Sub etc)",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataconnectors.connectorAdmin",
      "RoleTitle": "Connector Admin",
      "Description": "Full access to Data Connectors.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataconnectors.connectorUser",
      "RoleTitle": "Connector User",
      "Description": "Access to use Data Connectors.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataconnectors.serviceAgent",
      "RoleTitle": "Data Connectors Service Agent",
      "Description": "Gives Data Connectors service agent permission to access the virtual private cloud",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataflow.admin",
      "RoleTitle": "Dataflow Admin",
      "Description": "Minimal role for creating and managing dataflow jobs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataflow.developer",
      "RoleTitle": "Dataflow Developer",
      "Description": "Full operational access to Dataflow jobs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataflow.serviceAgent",
      "RoleTitle": "Cloud Dataflow Service Agent",
      "Description": "Gives Cloud Dataflow service account access to managed resources. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataflow.viewer",
      "RoleTitle": "Dataflow Viewer",
      "Description": "Read only access to Dataflow jobs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataflow.worker",
      "RoleTitle": "Dataflow Worker",
      "Description": "Worker access to Dataflow.  Intended for service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataform.admin",
      "RoleTitle": "Dataform Admin",
      "Description": "Full access to all Dataform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataform.codeCreator",
      "RoleTitle": "Code Creator",
      "Description": "Access only to private and shared code resources. The permissions in the Code Creator let you create and list code in Dataform, and access only the code that you created and code that was explicitly shared with you.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataform.codeEditor",
      "RoleTitle": "Code Editor",
      "Description": "Edit access code resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataform.codeOwner",
      "RoleTitle": "Code Owner",
      "Description": "Full access to code resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataform.codeViewer",
      "RoleTitle": "Code Viewer",
      "Description": "Read-only access to all code resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataform.editor",
      "RoleTitle": "Dataform Editor",
      "Description": "Edit access to Workspaces and Read-only access to Repositories.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataform.serviceAgent",
      "RoleTitle": "Dataform Service Agent",
      "Description": "Gives permission for the Dataform API to access a secret from Secret Manager",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataform.viewer",
      "RoleTitle": "Dataform Viewer",
      "Description": "Read-only access to all Dataform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datafusion.accessor",
      "RoleTitle": "Cloud Data Fusion Accessor",
      "Description": "Read-only access to Cloud Data Fusion Instances. Use it on instance level along with the namespace grants to provide access to the specific namespace.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datafusion.admin",
      "RoleTitle": "Cloud Data Fusion Admin",
      "Description": "Full access to Cloud Data Fusion Instances, Namespaces and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datafusion.developer",
      "RoleTitle": "Cloud Data Fusion Developer",
      "Description": "Access Cloud Data Fusion Instances, develop and run pipelines.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datafusion.operator",
      "RoleTitle": "Cloud Data Fusion Operator",
      "Description": "Access Cloud Data Fusion Instances, operate namespaces and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datafusion.runner",
      "RoleTitle": "Cloud Data Fusion Runner",
      "Description": "Access to Cloud Data Fusion runtime resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datafusion.serviceAgent",
      "RoleTitle": "Cloud Data Fusion API Service Agent",
      "Description": "Gives Cloud Data Fusion service account access to Service Networking, Cloud Dataproc, Cloud Storage, BigQuery, Cloud Spanner, and Cloud Bigtable resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datafusion.viewer",
      "RoleTitle": "Cloud Data Fusion Viewer",
      "Description": "Read-only access to Cloud Data Fusion Instances, Namespaces and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datalabeling.admin",
      "RoleTitle": "Data Labeling Service Admin",
      "Description": "Full access to all Data Labeling resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datalabeling.editor",
      "RoleTitle": "Data Labeling Service Editor",
      "Description": "Editor of all Data Labeling resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datalabeling.serviceAgent",
      "RoleTitle": "Data Labeling Service Agent",
      "Description": "Gives Data Labeling service account read/write access to Cloud Storage, read/write BigQuery, update CMLE model versions, editor access to Annotation service and AutoML service.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datalabeling.viewer",
      "RoleTitle": "Data Labeling Service Viewer",
      "Description": "Viewer of all Data Labeling resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datalineage.admin",
      "RoleTitle": "Data Lineage Administrator",
      "Description": "Grants full access to all resources in Data Lineage API",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datalineage.editor",
      "RoleTitle": "Data Lineage Editor",
      "Description": "Grants edit access to all resources in Data Lineage API",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datalineage.producer",
      "RoleTitle": "Data Lineage Events Producer",
      "Description": "Grants access to creating all resources in Data Lineage API",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datalineage.viewer",
      "RoleTitle": "Data Lineage Viewer",
      "Description": "Grants read access to all resources in Data Lineage API",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datamigration.admin",
      "RoleTitle": "Database Migration Admin",
      "Description": "Full access to all resources of Database Migration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datamigration.serviceAgent",
      "RoleTitle": "Database Migration Service Agent",
      "Description": "Gives Cloud Database Migration service account access to Cloud SQL resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datapipelines.admin",
      "RoleTitle": "Data pipelines Admin",
      "Description": "Administrator of Data pipelines resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datapipelines.invoker",
      "RoleTitle": "Data pipelines Invoker",
      "Description": "Invoker of Data pipelines jobs",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datapipelines.serviceAgent",
      "RoleTitle": "Datapipelines Service Agent",
      "Description": "Gives Datapipelines service permissions to create Dataflow & Cloud Scheduler jobs in the user project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datapipelines.viewer",
      "RoleTitle": "Data pipelines Viewer",
      "Description": "Viewer of Data pipelines resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.admin",
      "RoleTitle": "Dataplex Administrator",
      "Description": "Full access to Dataplex resources, except Dataplex Catalog.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.aspectTypeOwner",
      "RoleTitle": "Dataplex Aspect Type Owner",
      "Description": "Grants access to creating and managing Aspect Types. Does not give the right to create/modify Entries.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.aspectTypeUser",
      "RoleTitle": "Dataplex Aspect Type User",
      "Description": "Grants access to use Aspect Types to create/modify Entries with the corresponding aspects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.bindingAdmin",
      "RoleTitle": "Dataplex Binding Administrator",
      "Description": "Full access on DataAttribute Bindig resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.catalogAdmin",
      "RoleTitle": "Dataplex Catalog Admin",
      "Description": "Has full access to Catalog resources: Entry Groups, Entry Types, Aspect Types and Entries.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.catalogEditor",
      "RoleTitle": "Dataplex Catalog Editor",
      "Description": "Has write access to Catalog resources: Entry Groups, Entry Types, Aspect Types and Entries. Cannot set IAM policies on resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.catalogViewer",
      "RoleTitle": "Dataplex Catalog Viewer",
      "Description": "Has read access to Catalog resources: Entry Groups, Entry Types, Aspect Types and Entries. Can view IAM policies on Catalog resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.dataOwner",
      "RoleTitle": "Dataplex Data Owner",
      "Description": "Owner access to data. To be granted to Dataplex resources Lake, Zone or Asset only.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.dataReader",
      "RoleTitle": "Dataplex Data Reader",
      "Description": "Read only access to data. To be granted to Dataplex resources Lake, Zone or Asset only.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.dataScanAdmin",
      "RoleTitle": "Dataplex DataScan Administrator",
      "Description": "Full access to DataScan resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.dataScanCreator",
      "RoleTitle": "Dataplex DataScan Creator",
      "Description": "Access to create new DataScan resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.dataScanDataViewer",
      "RoleTitle": "Dataplex DataScan DataViewer",
      "Description": "Read access to DataScan resources and additional contents.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.dataScanEditor",
      "RoleTitle": "Dataplex DataScan Editor",
      "Description": "Write access to DataScan resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.dataScanViewer",
      "RoleTitle": "Dataplex DataScan Viewer",
      "Description": "Read access to DataScan resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.dataWriter",
      "RoleTitle": "Dataplex Data Writer",
      "Description": "Write access to data. To be granted to Dataplex resources Lake, Zone or Asset only.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.developer",
      "RoleTitle": "Dataplex Developer",
      "Description": "Allows running data analytics workloads in a lake.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.editor",
      "RoleTitle": "Dataplex Editor",
      "Description": "Write access to Dataplex resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.entryGroupImporter",
      "RoleTitle": "Dataplex Entry Group Importer",
      "Description": "Grants access to import this entry group for Metadata Job processing.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.entryGroupOwner",
      "RoleTitle": "Dataplex Entry Group Owner",
      "Description": "Owns Entry Groups and Entries inside of them.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.entryOwner",
      "RoleTitle": "Dataplex Entry Owner",
      "Description": "Owns Metadata Entries.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.entryTypeOwner",
      "RoleTitle": "Dataplex Entry Type Owner",
      "Description": "Grants access to creating and managing Entry Types. Does not give the right to create/modify Entries.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.entryTypeUser",
      "RoleTitle": "Dataplex Entry Type User",
      "Description": "Grants access to use Entry Types to create/modify Entries of those types.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.metadataJobOwner",
      "RoleTitle": "Dataplex Metadata Job Owner",
      "Description": "Grants access to creating and managing Metadata Jobs. Does not give the right to create/modify Entry Groups.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.metadataJobViewer",
      "RoleTitle": "Dataplex Metadata Job Viewer",
      "Description": "Read access to Metadata Job resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.metadataReader",
      "RoleTitle": "Dataplex Metadata Reader",
      "Description": "Read only access to metadata.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.metadataWriter",
      "RoleTitle": "Dataplex Metadata Writer",
      "Description": "Write and Read access to metadata.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.securityAdmin",
      "RoleTitle": "Dataplex Security Administrator",
      "Description": "Permissions configure ResourceAccess and DataAccess Specs on Data Attributes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.serviceAgent",
      "RoleTitle": "Cloud Dataplex Service Agent",
      "Description": "Gives the Dataplex service account access to project resources. This access will be used in data discovery, data management and data workload management.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.storageDataOwner",
      "RoleTitle": "Dataplex Storage Data Owner",
      "Description": "Owner access to data.  Should not be used directly. This role is granted by Dataplex to managed resources like GCS buckets, BigQuery datasets etc.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.storageDataReader",
      "RoleTitle": "Dataplex Storage Data Reader",
      "Description": "Read only access to data. Should not be used directly. This role is granted by Dataplex to managed resources like GCS buckets, BigQuery datasets etc.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.storageDataWriter",
      "RoleTitle": "Dataplex Storage Data Writer",
      "Description": "Write access to data. Should not be used directly. This role is granted by Dataplex to managed resources like GCS buckets, BigQuery datasets etc.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.taxonomyAdmin",
      "RoleTitle": "Dataplex Taxonomy Administrator",
      "Description": "Full access to DataTaxonomy, DataAttribute resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.taxonomyViewer",
      "RoleTitle": "Dataplex Taxonomy Viewer",
      "Description": "Read access on DataTaxonomy, DataAttribute resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataplex.viewer",
      "RoleTitle": "Dataplex Viewer",
      "Description": "Read access to Dataplex resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataprep.projects.user",
      "RoleTitle": "Dataprep User",
      "Description": "Use of Dataprep.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataprep.serviceAgent",
      "RoleTitle": "Dataprep Service Agent",
      "Description": "Dataprep service identity. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataproc.admin",
      "RoleTitle": "Dataproc Administrator",
      "Description": "Full control of Dataproc resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataproc.editor",
      "RoleTitle": "Dataproc Editor",
      "Description": "Full control of Dataproc resources. Allows viewing all networks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataproc.hubAgent",
      "RoleTitle": "Dataproc Hub Agent",
      "Description": "Allows management of Dataproc resources. Intended for service accounts running Dataproc Hub instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataproc.serviceAgent",
      "RoleTitle": "Dataproc Service Agent",
      "Description": "Gives Dataproc Service Account access to service accounts, compute resources, storage resources, and kubernetes resources. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataproc.viewer",
      "RoleTitle": "Dataproc Viewer",
      "Description": "Read-only access to Dataproc resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataproc.worker",
      "RoleTitle": "Dataproc Worker",
      "Description": "Worker access to Dataproc. Intended for service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataprocessing.admin",
      "RoleTitle": "Data Processing Controls Resource Admin",
      "Description": "Data processing controls admin who can fully manage data processing controls settings and view all datasource data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataprocessing.dataSourceManager",
      "RoleTitle": "Data Processing Controls Data Source Manager",
      "Description": "Data processing controls data source manager who can get, list, and update the underlying data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataprocrm.admin",
      "RoleTitle": "Dataproc Resource Manager Admin",
      "Description": "Grants full access to all Dataproc Resource Manager resources. Intended for users that need to create and delete any Dataproc Resource Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dataprocrm.viewer",
      "RoleTitle": "Dataproc Resource Manager Viewer",
      "Description": "Grants read access to all Dataproc Resource Manager resources. Intended for users that need read-only access to Dataproc Resource Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.backupSchedulesAdmin",
      "RoleTitle": "Cloud Datastore Backup Schedules Admin",
      "Description": "Manage backup schedules in Cloud Datastore.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.backupSchedulesViewer",
      "RoleTitle": "Cloud Datastore Backup Schedules Viewer",
      "Description": "Read access to backup schedules in Cloud Datastore.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.backupsAdmin",
      "RoleTitle": "Cloud Datastore Backups Admin",
      "Description": "Read/Write access to metadata about backups in Cloud Datastore but restore is not allowed.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.backupsViewer",
      "RoleTitle": "Cloud Datastore Backups Viewer",
      "Description": "Read access to metadata about backups in Cloud Datastore.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.bulkAdmin",
      "RoleTitle": "Cloud Datastore Bulk Admin",
      "Description": "Full access to manage bulk operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.importExportAdmin",
      "RoleTitle": "Cloud Datastore Import Export Admin",
      "Description": "Full access to manage imports and exports.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.indexAdmin",
      "RoleTitle": "Cloud Datastore Index Admin",
      "Description": "Full access to manage index definitions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.keyVisualizerViewer",
      "RoleTitle": "Cloud Datastore Key Visualizer Viewer",
      "Description": "Full access to Key Visualizer scans.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.owner",
      "RoleTitle": "Cloud Datastore Owner",
      "Description": "Full access to Cloud Datastore.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.restoreAdmin",
      "RoleTitle": "Cloud Datastore Restore Admin",
      "Description": "Restore into Cloud Datastore Databases from Cloud Datastore Backups.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.user",
      "RoleTitle": "Cloud Datastore User",
      "Description": "Provides read/write access to data in a Cloud Datastore database. Intended for application developers and service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastore.viewer",
      "RoleTitle": "Cloud Datastore Viewer",
      "Description": "Read access to all Cloud Datastore resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastream.admin",
      "RoleTitle": "Datastream Admin",
      "Description": "Full access to all Datastream resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastream.serviceAgent",
      "RoleTitle": "Datastream Service Agent",
      "Description": "Grants Cloud Datastream permissions to write data in the user project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastream.viewer",
      "RoleTitle": "Datastream Viewer",
      "Description": "Read-only access to all Datastream resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastudio.admin",
      "RoleTitle": "Data Studio Admin",
      "Description": "Data Studio Admin",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastudio.contentManager",
      "RoleTitle": "Data Studio Workspace Content Manager",
      "Description": "Content Manager of a Data Studio resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastudio.contributor",
      "RoleTitle": "Data Studio Workspace Contributor",
      "Description": "Contributor of a Data Studio resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastudio.editor",
      "RoleTitle": "Data Studio Asset Editor",
      "Description": "Editor of a Data Studio resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastudio.manager",
      "RoleTitle": "Data Studio Workspace Manager",
      "Description": "Manager of a Data Studio resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastudio.serviceAgent",
      "RoleTitle": "Data Studio Service Agent",
      "Description": "Grants Data Studio Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastudio.viewer",
      "RoleTitle": "Data Studio Asset Viewer",
      "Description": "Viewer of a Data Studio resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/datastudio.workspaceViewer",
      "RoleTitle": "Data Studio Workspace Viewer",
      "Description": "Viewer of a Data Studio Workspace",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dellemccloudonefs.admin",
      "RoleTitle": "Dell EMC Cloud OneFS Admin",
      "Description": "This role is managed by Dell EMC, not Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dellemccloudonefs.user",
      "RoleTitle": "Dell EMC Cloud OneFS User",
      "Description": "This role is managed by Dell EMC, not Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dellemccloudonefs.viewer",
      "RoleTitle": "Dell EMC Cloud OneFS Viewer",
      "Description": "This role is managed by Dell EMC, not Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/deploymentmanager.editor",
      "RoleTitle": "Deployment Manager Editor",
      "Description": "Read and Write access to all Deployment Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/deploymentmanager.typeEditor",
      "RoleTitle": "Deployment Manager Type Editor",
      "Description": "Read and Write access to all Type Registry resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/deploymentmanager.typeViewer",
      "RoleTitle": "Deployment Manager Type Viewer",
      "Description": "Read-only access to all Type Registry resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/deploymentmanager.viewer",
      "RoleTitle": "Deployment Manager Viewer",
      "Description": "Read-only access to all Deployment Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/developerconnect.admin",
      "RoleTitle": "Developer Connect Admin",
      "Description": "Full access to Developer Connect resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/developerconnect.readTokenAccessor",
      "RoleTitle": "Developer Connect Read Token Accessor",
      "Description": "Grants access to Read-Only tokens (both PAT and short-lived). Also grants access to view the git repository link.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/developerconnect.tokenAccessor",
      "RoleTitle": "Developer Connect Token Accessor",
      "Description": "Grants access to Read/Write and Read-Only tokens (both PAT and short-lived). Also grants access to view the git repository link.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/developerconnect.user",
      "RoleTitle": "Developer Connect User",
      "Description": "Grants access to view the connection and to the features that interact with the actual repository such as reading content from the repository",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/developerconnect.viewer",
      "RoleTitle": "Developer Connect Viewer",
      "Description": "Readonly access to Developer Connect resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.aamAdmin",
      "RoleTitle": "CX Premium Admin",
      "Description": "An admin has access to all resources and can perform all administrative actions in an AAM project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.aamConversationalArchitect",
      "RoleTitle": "CX Premium Conversational Architect",
      "Description": "A Conversational Architect can label conversational data, approve taxonomy changes and design virtual agents for a customer's use cases.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.aamDialogDesigner",
      "RoleTitle": "CX Premium Dialog Designer",
      "Description": "A Dialog Designer can label conversational data and propose taxonomy changes for virtual agent modeling.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.aamLeadDialogDesigner",
      "RoleTitle": "CX Premium Lead Dialog Designer",
      "Description": "A Dialog Designer Lead can label conversational data and approve taxonomy changes for virtual agent modeling.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.aamViewer",
      "RoleTitle": "CX Premium Viewer",
      "Description": "A user can view the taxonomy and data reports in an AAM project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.admin",
      "RoleTitle": "Dialogflow API Admin",
      "Description": "Can query for intent; read & write session properties; read & write agent properties.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.agentAssistClient",
      "RoleTitle": "Dialogflow Agent Assist Client",
      "Description": "Can create and handle live conversations using Agent Assist features.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.client",
      "RoleTitle": "Dialogflow API Client",
      "Description": "Can call all methods on sessions and conversations resources as well as their descendants.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.consoleAgentEditor",
      "RoleTitle": "Dialogflow Console Agent Editor",
      "Description": "Can edit agent in Dialogflow Console",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.consoleSimulatorUser",
      "RoleTitle": "Dialogflow Console Simulator User",
      "Description": "Can perform query of dialogflow suggestions in the simulator in web console.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.consoleSmartMessagingAllowlistEditor",
      "RoleTitle": "Dialogflow Console Smart Messaging Allowlist Editor",
      "Description": "Can edit allowlist for smart messaging associated with conversation model in the agent assist console",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.conversationManager",
      "RoleTitle": "Dialogflow Conversation Manager",
      "Description": "Can manage all the resources related to Dialogflow Conversations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.entityTypeAdmin",
      "RoleTitle": "Dialogflow Entity Type Admin",
      "Description": "Can read & write entity types.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.environmentEditor",
      "RoleTitle": "Dialogflow Environment editor",
      "Description": "Can read & update environment and its sub-resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.flowEditor",
      "RoleTitle": "Dialogflow Flow editor",
      "Description": "Can read & update flow and its sub-resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.integrationManager",
      "RoleTitle": "Dialogflow Integration Manager",
      "Description": "Can add, remove, enable and disable Dialogflow integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.intentAdmin",
      "RoleTitle": "Dialogflow Intent Admin",
      "Description": "Can read & write intents.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.reader",
      "RoleTitle": "Dialogflow API Reader",
      "Description": "Can read agent and session properties; cannot query for intent.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.serviceAgent",
      "RoleTitle": "Dialogflow Service Agent",
      "Description": "Gives Dialogflow Service Account access to resources on behalf of user project for Integrations (Facebook Messenger, Slack, Telephony, etc.), BigQuery, Discovery Engine, and Vertex.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.testCaseAdmin",
      "RoleTitle": "Dialogflow Test Case Admin",
      "Description": "Can read & write test cases.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dialogflow.webhookAdmin",
      "RoleTitle": "Dialogflow Webhook Admin",
      "Description": "Can read & write webhooks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/discoveryengine.admin",
      "RoleTitle": "Discovery Engine Admin",
      "Description": "Grants full access to all discoveryengine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/discoveryengine.editor",
      "RoleTitle": "Discovery Engine Editor",
      "Description": "Grants read and write access to all discovery engine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/discoveryengine.serviceAgent",
      "RoleTitle": "Discovery Engine Service Agent",
      "Description": "Discovery Engine service uploads documents and user events from Cloud Storage and BigQuery, reports results to the customer Cloud Storage bucket, writes logs to customer projects using Cloud Logging, and writes and reads metrics for customer using Cloud Monitoring.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/discoveryengine.viewer",
      "RoleTitle": "Discovery Engine Viewer",
      "Description": "Grants read access to all discovery engine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.admin",
      "RoleTitle": "DLP Administrator",
      "Description": "Administer DLP including jobs and templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.analyzeRiskTemplatesEditor",
      "RoleTitle": "DLP Analyze Risk Templates Editor",
      "Description": "Edit DLP analyze risk templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.analyzeRiskTemplatesReader",
      "RoleTitle": "DLP Analyze Risk Templates Reader",
      "Description": "Read DLP analyze risk templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.columnDataProfilesReader",
      "RoleTitle": "DLP Column Data Profiles Reader",
      "Description": "Read DLP column profiles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.connectionsAdmin",
      "RoleTitle": "DLP Connections Admin",
      "Description": "Manage DLP Connections.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.connectionsReader",
      "RoleTitle": "DLP Connections Viewer",
      "Description": "View DLP Connections.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.dataProfilesAdmin",
      "RoleTitle": "DLP Data Profiles Admin",
      "Description": "Manage DLP profiles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.dataProfilesReader",
      "RoleTitle": "DLP Data Profiles Reader",
      "Description": "Read DLP profiles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.deidentifyTemplatesEditor",
      "RoleTitle": "DLP De-identify Templates Editor",
      "Description": "Edit DLP de-identify templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.deidentifyTemplatesReader",
      "RoleTitle": "DLP De-identify Templates Reader",
      "Description": "Read DLP de-identify templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.estimatesAdmin",
      "RoleTitle": "DLP Cost Estimation",
      "Description": "Manage DLP Cost Estimates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.fileStoreProfilesAdmin",
      "RoleTitle": "DLP File Store Data Profiles Admin",
      "Description": "Manage DLP file store profiles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.fileStoreProfilesReader",
      "RoleTitle": "DLP File Store Data Profiles Reader",
      "Description": "Read DLP file store profiles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.inspectFindingsReader",
      "RoleTitle": "DLP Inspect Findings Reader",
      "Description": "Read DLP stored findings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.inspectTemplatesEditor",
      "RoleTitle": "DLP Inspect Templates Editor",
      "Description": "Edit DLP inspect templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.inspectTemplatesReader",
      "RoleTitle": "DLP Inspect Templates Reader",
      "Description": "Read DLP inspect templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.jobTriggersEditor",
      "RoleTitle": "DLP Job Triggers Editor",
      "Description": "Edit job triggers configurations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.jobTriggersReader",
      "RoleTitle": "DLP Job Triggers Reader",
      "Description": "Read job triggers.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.jobsEditor",
      "RoleTitle": "DLP Jobs Editor",
      "Description": "Edit and create jobs",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.jobsReader",
      "RoleTitle": "DLP Jobs Reader",
      "Description": "Read jobs",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.orgdriver",
      "RoleTitle": "DLP Organization Data Profiles Driver",
      "Description": "Permissions needed by the DLP service account to generate data profiles within an organization or folder.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.projectDataProfilesReader",
      "RoleTitle": "DLP Project Data Profiles Reader",
      "Description": "Read DLP project profiles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.projectdriver",
      "RoleTitle": "DLP Project Data Profiles Driver",
      "Description": "Permissions needed by the DLP service account to generate data profiles within a project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.reader",
      "RoleTitle": "DLP Reader",
      "Description": "Read DLP entities, such as jobs and templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.serviceAgent",
      "RoleTitle": "DLP API Service Agent",
      "Description": "Gives Cloud DLP service agent permissions for BigQuery, Cloud Storage, Datastore, Pub/Sub and Cloud KMS.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.storedInfoTypesEditor",
      "RoleTitle": "DLP Stored InfoTypes Editor",
      "Description": "Edit DLP stored info types.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.storedInfoTypesReader",
      "RoleTitle": "DLP Stored InfoTypes Reader",
      "Description": "Read DLP stored info types.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.subscriptionsAdmin",
      "RoleTitle": "DLP Subscription Admin",
      "Description": "Manage DLP subscriptions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.subscriptionsReader",
      "RoleTitle": "DLP Subscription Viewer",
      "Description": "View DLP subscriptions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.tableDataProfilesAdmin",
      "RoleTitle": "DLP Table Data Profiles Admin",
      "Description": "Manage DLP table profiles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.tableDataProfilesReader",
      "RoleTitle": "DLP Table Data Profiles Reader",
      "Description": "Read DLP table profiles.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dlp.user",
      "RoleTitle": "DLP User",
      "Description": "Inspect, Redact, and De-identify Content",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dns.admin",
      "RoleTitle": "DNS Administrator",
      "Description": "Full read-write access to DNS resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dns.peer",
      "RoleTitle": "DNS Peer",
      "Description": "Access to target networks with DNS peering zones",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dns.reader",
      "RoleTitle": "DNS Reader",
      "Description": "Read-only access to DNS resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dns.serviceAgent",
      "RoleTitle": "Cloud DNS Service Agent",
      "Description": "Gives Cloud DNS Service Agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/documentai.admin",
      "RoleTitle": "Document AI Administrator",
      "Description": "Grants full access to all resources in Document AI",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/documentai.apiUser",
      "RoleTitle": "Document AI API User",
      "Description": "Grants access to process documents in Document AI",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/documentai.editor",
      "RoleTitle": "Document AI Editor",
      "Description": "Grants access to use all resources in Document AI",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/documentai.viewer",
      "RoleTitle": "Document AI Viewer",
      "Description": "Grants access to view all resources and process documents in Document AI",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/documentaicore.serviceAgent",
      "RoleTitle": "DocumentAI Core Service Agent",
      "Description": "Gives DocumentAI Core Service Account access to consumer resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/domains.admin",
      "RoleTitle": "Cloud Domains Admin",
      "Description": "Full access to Cloud Domains Registrations and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/domains.viewer",
      "RoleTitle": "Cloud Domains Viewer",
      "Description": "Read-only access to Cloud Domains Registrations and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/dspm.serviceAgent",
      "RoleTitle": "DSPM Service Agent",
      "Description": "Gives DSPM Service Account access to consumer resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/earthengine.admin",
      "RoleTitle": "Earth Engine Resource Admin",
      "Description": "Full access to all Earth Engine resource features",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/earthengine.appsPublisher",
      "RoleTitle": "Earth Engine Apps Publisher",
      "Description": "Publisher of Earth Engine Apps",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/earthengine.viewer",
      "RoleTitle": "Earth Engine Resource Viewer",
      "Description": "Viewer of all Earth Engine resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/earthengine.writer",
      "RoleTitle": "Earth Engine Resource Writer",
      "Description": "Writer of all Earth Engine resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/edgecontainer.admin",
      "RoleTitle": "Edge Container Admin",
      "Description": "Full access to Edge Container all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/edgecontainer.clusterServiceAgent",
      "RoleTitle": "Edge Container Cluster Service Agent",
      "Description": "Grants the Edge Container Cluster Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/edgecontainer.machineUser",
      "RoleTitle": "Edge Container Machine User",
      "Description": "Access to use Edge Container Machine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/edgecontainer.offlineCredentialUser",
      "RoleTitle": "Edge Container Cluster offline Credential User",
      "Description": "Access to get Edge Container cluster offline credentials",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/edgecontainer.serviceAgent",
      "RoleTitle": "Edge Container Service Agent",
      "Description": "Grants the Edge Container Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/edgecontainer.viewer",
      "RoleTitle": "Edge Container Viewer",
      "Description": "Read-only access to Edge Container all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/edgenetwork.admin",
      "RoleTitle": "Edge Network Admin",
      "Description": "Full access to Edge Network all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/edgenetwork.viewer",
      "RoleTitle": "Edge Network Viewer",
      "Description": "Read-only access to Edge Network all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/editor",
      "RoleTitle": "Editor",
      "Description": "View, create, update, and delete most Google Cloud resources. See the list of included permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/endpoints.serviceAgent",
      "RoleTitle": "Cloud Endpoints Service Agent",
      "Description": "Gives the Cloud Endpoints service account access to Endpoints services and the ability to act as a service controller.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/endpointsportal.serviceAgent",
      "RoleTitle": "Endpoints Portal Service Agent",
      "Description": "Can access information about Endpoints services for consumer portal management, and can read Source Repositories for consumer portal custom content.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/enterpriseknowledgegraph.admin",
      "RoleTitle": "Enterprise Knowledge Graph Admin",
      "Description": "Administrator of Enterprise Knowledge Graph resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/enterpriseknowledgegraph.editor",
      "RoleTitle": "Enterprise Knowledge Graph Editor",
      "Description": "Editor of Enterprise Knowledge Graph resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/enterpriseknowledgegraph.serviceAgent",
      "RoleTitle": "Enterprise Knowledge Graph Service Agent",
      "Description": "Gives Enterprise Knowledge Graph Service Account access to consumer resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/enterpriseknowledgegraph.viewer",
      "RoleTitle": "Enterprise Knowledge Graph Viewer",
      "Description": "Viewer of Enterprise Knowledge Graph resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/enterprisepurchasing.admin",
      "RoleTitle": "Enterprise Purchasing Admin",
      "Description": "Full access to Enterprise Purchasing resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/enterprisepurchasing.editor",
      "RoleTitle": "Enterprise Purchasing Editor",
      "Description": "Edit access to Enterprise Purchasing resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/enterprisepurchasing.viewer",
      "RoleTitle": "Enterprise Purchasing Viewer",
      "Description": "Readonly access to Enterprise Purchasing resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/errorreporting.admin",
      "RoleTitle": "Error Reporting Admin",
      "Description": "Administrative access to Error Reporting.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/errorreporting.user",
      "RoleTitle": "Error Reporting User",
      "Description": "User access to Error Reporting. Can list all errors and update their metadata. Can delete error events.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/errorreporting.viewer",
      "RoleTitle": "Error Reporting Viewer",
      "Description": "Read-only access to all Error Reporting data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/errorreporting.writer",
      "RoleTitle": "Error Reporting Writer",
      "Description": "Can send error events to Error Reporting. Intended for service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/essentialcontacts.admin",
      "RoleTitle": "Essential Contacts Admin",
      "Description": "Full access to all essential contacts",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/essentialcontacts.viewer",
      "RoleTitle": "Essential Contacts Viewer",
      "Description": "Viewer for all essential contacts",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/eventarc.admin",
      "RoleTitle": "Eventarc Admin",
      "Description": "Full control over all Eventarc resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/eventarc.connectionPublisher",
      "RoleTitle": "Eventarc Connection Publisher",
      "Description": "Can publish events to Eventarc Channel Connections.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/eventarc.developer",
      "RoleTitle": "Eventarc Developer",
      "Description": "Access to read and write Eventarc resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/eventarc.eventReceiver",
      "RoleTitle": "Eventarc Event Receiver",
      "Description": "Can receive events from all event providers.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/eventarc.publisher",
      "RoleTitle": "Eventarc Publisher",
      "Description": "Can publish events to Eventarc channels.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/eventarc.serviceAgent",
      "RoleTitle": "Eventarc Service Agent",
      "Description": "Gives Eventarc service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/eventarc.viewer",
      "RoleTitle": "Eventarc Viewer",
      "Description": "Can view the state of all Eventarc resources, including IAM policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/file.editor",
      "RoleTitle": "Cloud Filestore Editor",
      "Description": "Read-write access to Filestore instances and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/file.serviceAgent",
      "RoleTitle": "Cloud Filestore Service Agent",
      "Description": "Gives Cloud Filestore service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/file.viewer",
      "RoleTitle": "Cloud Filestore Viewer",
      "Description": "Read-only access to Filestore instances and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/financialservices.admin",
      "RoleTitle": "Financial Services Admin",
      "Description": "Full access to all Financial Services API resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/financialservices.viewer",
      "RoleTitle": "Financial Services Viewer",
      "Description": "View access to all Financial Services API resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.admin",
      "RoleTitle": "Firebase Admin",
      "Description": "Full access to Firebase products.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.analyticsAdmin",
      "RoleTitle": "Firebase Analytics Admin",
      "Description": "Full access to Google Analytics for Firebase.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.analyticsViewer",
      "RoleTitle": "Firebase Analytics Viewer",
      "Description": "Read access to Google Analytics for Firebase.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.appDistributionSdkServiceAgent",
      "RoleTitle": "Firebase App Distribution Admin SDK Service Agent",
      "Description": "Read and write access to Firebase App Distribution with the Admin SDK",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.developAdmin",
      "RoleTitle": "Firebase Develop Admin",
      "Description": "Full access to Firebase Develop products and Analytics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.developViewer",
      "RoleTitle": "Firebase Develop Viewer",
      "Description": "Read access to Firebase Develop products and Analytics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.growthAdmin",
      "RoleTitle": "Firebase Grow Admin",
      "Description": "Full access to Firebase Grow products and Analytics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.growthViewer",
      "RoleTitle": "Firebase Grow Viewer",
      "Description": "Read access to Firebase Grow products and Analytics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.managementServiceAgent",
      "RoleTitle": "Firebase Service Management Service Agent",
      "Description": "Access to create new service agents for Firebase projects; assign roles to service agents; provision GCP resources as required by Firebase services.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.qualityAdmin",
      "RoleTitle": "Firebase Quality Admin",
      "Description": "Full access to Firebase Quality products and Analytics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.qualityViewer",
      "RoleTitle": "Firebase Quality Viewer",
      "Description": "Read access to Firebase Quality products and Analytics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.sdkAdminServiceAgent",
      "RoleTitle": "Firebase Admin SDK Administrator Service Agent",
      "Description": "Read and write access to Firebase products available in the Admin SDK",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.sdkProvisioningServiceAgent",
      "RoleTitle": "Firebase SDK Provisioning Service Agent",
      "Description": "Access to provision apps with the Admin SDK.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebase.viewer",
      "RoleTitle": "Firebase Viewer",
      "Description": "Read-only access to Firebase products.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseabt.admin",
      "RoleTitle": "Firebase A/B Testing Admin",
      "Description": "Full read/write access to Firebase A/B Testing resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseabt.viewer",
      "RoleTitle": "Firebase A/B Testing Viewer",
      "Description": "Read-only access to Firebase A/B Testing resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseappcheck.admin",
      "RoleTitle": "Firebase App Check Admin",
      "Description": "Full management of Firebase App Check.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseappcheck.serviceAgent",
      "RoleTitle": "Firebase App Check Service Agent",
      "Description": "Grants Firebase App Check Service Account access to consumer app attestation resources, such as reCAPTCHA Enterprise and Play Integrity API.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseappcheck.tokenVerifier",
      "RoleTitle": "Firebase App Check Token Verifier",
      "Description": "Access to token verification capabilities for Firebase App Check.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseappcheck.viewer",
      "RoleTitle": "Firebase App Check Viewer",
      "Description": "Read-only access for Firebase App Check.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseappdistro.admin",
      "RoleTitle": "Firebase App Distribution Admin",
      "Description": "Full read/write access to Firebase App Distribution resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseappdistro.viewer",
      "RoleTitle": "Firebase App Distribution Viewer",
      "Description": "Read-only access to Firebase App Distribution resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseapphosting.serviceAgent",
      "RoleTitle": "Firebase App Hosting Service Agent",
      "Description": "Gives Firebase App Hosting access to resource for Building & Deploying Backends.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseauth.admin",
      "RoleTitle": "Firebase Authentication Admin",
      "Description": "Full read/write access to Firebase Authentication resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseauth.viewer",
      "RoleTitle": "Firebase Authentication Viewer",
      "Description": "Read-only access to Firebase Authentication resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasecloudmessaging.admin",
      "RoleTitle": "Firebase Cloud Messaging API Admin",
      "Description": "Full read/write access to Firebase Cloud Messaging API resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasecrash.symbolMappingsAdmin",
      "RoleTitle": "Firebase Crash Symbol Uploader",
      "Description": "Full read/write access to symbol mapping file resources for Firebase Crash Reporting.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasecrashlytics.admin",
      "RoleTitle": "Firebase Crashlytics Admin",
      "Description": "Full read/write access to Firebase Crashlytics resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasecrashlytics.viewer",
      "RoleTitle": "Firebase Crashlytics Viewer",
      "Description": "Read-only access to Firebase Crashlytics resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedatabase.admin",
      "RoleTitle": "Firebase Realtime Database Admin",
      "Description": "Full read/write access to Firebase Realtime Database resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedatabase.serviceAgent",
      "RoleTitle": "Firebase Realtime Database Service Agent",
      "Description": "Access to publish triggers",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedatabase.viewer",
      "RoleTitle": "Firebase Realtime Database Viewer",
      "Description": "Read-only access to Firebase Realtime Database resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedataconnect.admin",
      "RoleTitle": "Firebase Data Connect API Admin",
      "Description": "Full access to Firebase Data Connect API resources, including data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedataconnect.dataAdmin",
      "RoleTitle": "Firebase Data Connect API Data Admin",
      "Description": "Full access to data sources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedataconnect.dataViewer",
      "RoleTitle": "Firebase Data Connect API Data Viewer",
      "Description": "Readonly access to data sources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedataconnect.serviceAgent",
      "RoleTitle": "Firebase Data Connect Service Agent",
      "Description": "Gives Firebase Data Connect access to administer Cloud SQL instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedataconnect.viewer",
      "RoleTitle": "Firebase Data Connect API Viewer",
      "Description": "Readonly access to Firebase Data Connect API resources. Role does not grant access to data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedynamiclinks.admin",
      "RoleTitle": "Firebase Dynamic Links Admin",
      "Description": "Full read/write access to Firebase Dynamic Links resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasedynamiclinks.viewer",
      "RoleTitle": "Firebase Dynamic Links Viewer",
      "Description": "Read-only access to Firebase Dynamic Links resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseextensions.developer",
      "RoleTitle": "Firebase Extensions Developer",
      "Description": "View, create, and delete Firebase Extensions Instances and Extensions Versions, and update Extensions Instances",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseextensions.viewer",
      "RoleTitle": "Firebase Extensions Viewer",
      "Description": "Viewer of Firebase Extensions Instances",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseextensionspublisher.extensionsAdmin",
      "RoleTitle": "Firebase Extensions Publisher - Extensions Admin",
      "Description": "Fully manage Firebase Extensions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseextensionspublisher.extensionsViewer",
      "RoleTitle": "Firebase Extensions Publisher - Extensions Viewer",
      "Description": "View Firebase Extensions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasehosting.admin",
      "RoleTitle": "Firebase Hosting Admin",
      "Description": "Full read/write access to Firebase Hosting resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasehosting.viewer",
      "RoleTitle": "Firebase Hosting Viewer",
      "Description": "Read-only access to Firebase Hosting resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseinappmessaging.admin",
      "RoleTitle": "Firebase In-App Messaging Admin",
      "Description": "Full read/write access to Firebase In-App Messaging resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseinappmessaging.viewer",
      "RoleTitle": "Firebase In-App Messaging Viewer",
      "Description": "Read-only access to Firebase In-App Messaging resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasemessagingcampaigns.admin",
      "RoleTitle": "Firebase Messaging Campaigns Admin",
      "Description": "Full management of Firebase Messaging Campaigns.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasemessagingcampaigns.viewer",
      "RoleTitle": "Firebase Messaging Campaigns Viewer",
      "Description": "Read-only access for Firebase Messaging Campaigns.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseml.admin",
      "RoleTitle": "Firebase ML Kit Admin",
      "Description": "Full read/write access to Firebase ML Kit resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseml.serviceAgent",
      "RoleTitle": "Firebase Machine Learning Service Agent",
      "Description": "Access to Cloud ML and AI resources used by Firebase ML",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseml.viewer",
      "RoleTitle": "Firebase ML Kit Viewer",
      "Description": "Read-only access to Firebase ML Kit resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasemods.serviceAgent",
      "RoleTitle": "Firebase Extensions API Service Agent",
      "Description": "Grants Firebase Extensions API Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasenotifications.admin",
      "RoleTitle": "Firebase Cloud Messaging Admin",
      "Description": "Full read/write access to Firebase Cloud Messaging resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasenotifications.viewer",
      "RoleTitle": "Firebase Cloud Messaging Viewer",
      "Description": "Read-only access to Firebase Cloud Messaging resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseperformance.admin",
      "RoleTitle": "Firebase Performance Reporting Admin",
      "Description": "Full access to firebaseperformance resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaseperformance.viewer",
      "RoleTitle": "Firebase Performance Reporting Viewer",
      "Description": "Read-only access to firebaseperformance resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaserules.admin",
      "RoleTitle": "Firebase Rules Admin",
      "Description": "Full management of Firebase Rules.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaserules.firestoreServiceAgent",
      "RoleTitle": "Firebase Rules Firestore Service Agent",
      "Description": "Grants Firebase Security Rules access to Firestore for providing cross-service Rules.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaserules.system",
      "RoleTitle": "Firebase Rules System",
      "Description": "Read/write/list access for Datastore entities and Cloud Storage objects, as well as get/list/publish access for PubSub topics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebaserules.viewer",
      "RoleTitle": "Firebase Rules Viewer",
      "Description": "Read-only access on all resources with the ability to test Rulesets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasestorage.admin",
      "RoleTitle": "Cloud Storage for Firebase Admin",
      "Description": "Full management of Cloud Storage for Firebase.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasestorage.serviceAgent",
      "RoleTitle": "Cloud Storage for Firebase Service Agent",
      "Description": "Access to Cloud Storage for Firebase through API and SDK.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firebasestorage.viewer",
      "RoleTitle": "Cloud Storage for Firebase Viewer",
      "Description": "Read-only access for Cloud Storage for Firebase.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firestore.serviceAgent",
      "RoleTitle": "Firestore Service Agent",
      "Description": "Gives Firestore service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/firewallinsights.serviceAgent",
      "RoleTitle": "Cloud Firewall Insights Service Agent",
      "Description": "Gives Cloud Firewall Insights service agent permissions to retrieve Firewall, VM and route resources on user behalf.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.consumerSdkUser",
      "RoleTitle": "Fleet Engine Consumer SDK User",
      "Description": "Limited read access to Fleet Engine resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.deliveryAdmin",
      "RoleTitle": "Fleet Engine Delivery Admin",
      "Description": "Full access to Fleet Engine Delivery resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.deliveryConsumer",
      "RoleTitle": "Fleet Engine Delivery Consumer User",
      "Description": "Limited read access to Fleet Engine Delivery resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.deliveryFleetReader",
      "RoleTitle": "Fleet Engine Delivery Fleet Reader User",
      "Description": "Grants read access to all Fleet Engine Delivery resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.deliverySuperUser",
      "RoleTitle": "Fleet Engine Delivery Super User",
      "Description": "Full access to Fleet Engine DeliveryVehicles and Tasks resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.deliveryTrustedDriver",
      "RoleTitle": "Fleet Engine Delivery Trusted Driver User",
      "Description": "Read and write access to Fleet Engine Delivery resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.deliveryUntrustedDriver",
      "RoleTitle": "Fleet Engine Delivery Untrusted Driver User",
      "Description": "Limited write access to Fleet Engine Delivery Vehicle resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.driverSdkUser",
      "RoleTitle": "Fleet Engine Driver SDK User",
      "Description": "Read and limited update access to Fleet Engine resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.ondemandAdmin",
      "RoleTitle": "Fleet Engine On-Demand Admin",
      "Description": "Full access to Vehicle and Trip resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.serviceAgent",
      "RoleTitle": "FleetEngine Service Agent",
      "Description": "Grants the FleetEngine Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/fleetengine.serviceSuperUser",
      "RoleTitle": "Fleet Engine Service Super User",
      "Description": "Full access to all Fleet Engine resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gameservices.serviceAgent",
      "RoleTitle": "Game Services Service Agent",
      "Description": "Gives Game Services Service Account access to GCP resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gdchardwaremanagement.admin",
      "RoleTitle": "GDC Hardware Management Admin",
      "Description": "Full access to GDC Hardware Management resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gdchardwaremanagement.operator",
      "RoleTitle": "GDC Hardware Management Operator",
      "Description": "Create, read, and update access to GDC Hardware Management resources that support those operations. Also grants delete access to HardwareGroup resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gdchardwaremanagement.reader",
      "RoleTitle": "GDC Hardware Management Reader",
      "Description": "Readonly access to GDC Hardware Management resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/genomics.admin",
      "RoleTitle": "Genomics Admin",
      "Description": "Full access to genomics datasets and operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/genomics.editor",
      "RoleTitle": "Genomics Editor",
      "Description": "Access to read and edit genomics datasets and operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/genomics.pipelinesRunner",
      "RoleTitle": "Genomics Pipelines Runner",
      "Description": "Full access to operate on genomics pipelines.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/genomics.serviceAgent",
      "RoleTitle": "Genomics Service Agent",
      "Description": "Gives Genomics Service Account access to compute resources. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/genomics.viewer",
      "RoleTitle": "Genomics Viewer",
      "Description": "Access to view genomics datasets and operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkebackup.admin",
      "RoleTitle": "Backup for GKE Admin",
      "Description": "Full access to all Backup for GKE resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkebackup.backupAdmin",
      "RoleTitle": "Backup for GKE Backup Admin",
      "Description": "Allows administrators to manage all BackupPlan and Backup resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkebackup.delegatedBackupAdmin",
      "RoleTitle": "Backup for GKE Delegated Backup Admin",
      "Description": "Allows administrators to manage Backup resources for specific BackupPlans",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkebackup.delegatedRestoreAdmin",
      "RoleTitle": "Backup for GKE Delegated Restore Admin",
      "Description": "Allows administrators to manage Restore resources for specific RestorePlans",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkebackup.restoreAdmin",
      "RoleTitle": "Backup for GKE Restore Admin",
      "Description": "Allows administrators to manage all RestorePlan and Restore resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkebackup.serviceAgent",
      "RoleTitle": "Backup for GKE Service Agent",
      "Description": "Grants the Backup for GKE Service Account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkebackup.viewer",
      "RoleTitle": "Backup for GKE Viewer",
      "Description": "Read-only access to all Backup for GKE resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkedataplanemanagement.warpRunServiceAgent",
      "RoleTitle": "Warp Run Service Agent",
      "Description": "Gives the Warp Run service agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.admin",
      "RoleTitle": "Fleet Admin (formerly GKE Hub Admin)",
      "Description": "Full access to Fleet resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.connect",
      "RoleTitle": "GKE Connect Agent",
      "Description": "Ability to set up GKE Connect between external clusters and Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.crossProjectServiceAgent",
      "RoleTitle": "GKE Hub Cross Project Service Agent",
      "Description": "Gives the GKE Hub service agent permission to manage the project for cross-project fleet registration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.editor",
      "RoleTitle": "Fleet Editor (formerly GKE Hub Editor)",
      "Description": "Edit access to Fleet resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.gatewayAdmin",
      "RoleTitle": "Connect Gateway Admin",
      "Description": "Full access to Connect Gateway.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.gatewayEditor",
      "RoleTitle": "Connect Gateway Editor",
      "Description": "Edit access to Connect Gateway.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.gatewayReader",
      "RoleTitle": "Connect Gateway Reader",
      "Description": "Read-only access to Connect Gateway.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.scopeAdmin",
      "RoleTitle": "Fleet Scope Admin",
      "Description": "Admin access to Fleet Scopes to set IAM Bindings and RBACRoleBindings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.scopeEditor",
      "RoleTitle": "Fleet Scope Editor",
      "Description": "Edit access to Namespaces under Fleet Scopes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.scopeEditorProjectLevel",
      "RoleTitle": "Fleet Project-level Scope Editor",
      "Description": "Role for project-level permissions for editor of Fleet Scopes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.scopeViewer",
      "RoleTitle": "Fleet Scope Viewer",
      "Description": "Viewer of Fleet Scopes and associated resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.scopeViewerProjectLevel",
      "RoleTitle": "Fleet Project-level Scope Viewer",
      "Description": "Role for project-level permissions for viewer of Fleet Scopes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.serviceAgent",
      "RoleTitle": "GKE Hub Service Agent",
      "Description": "Gives the GKE Hub service agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkehub.viewer",
      "RoleTitle": "Fleet Viewer (formerly GKE Hub Viewer)",
      "Description": "Read-only access to Fleets and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkemulticloud.admin",
      "RoleTitle": "Anthos Multi-cloud Admin",
      "Description": "Admin access to Anthos Multi-cloud resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkemulticloud.containerServiceAgent",
      "RoleTitle": "Anthos Multi-Cloud Container Service Agent",
      "Description": "Grants the Anthos Multi-Cloud Container Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkemulticloud.controlPlaneMachineServiceAgent",
      "RoleTitle": "Anthos Multi-Cloud Control Plane Machine Service Agent",
      "Description": "Grants the Anthos Multi-Cloud Control Plane Machine Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkemulticloud.nodePoolMachineServiceAgent",
      "RoleTitle": "Anthos Multi-Cloud Node Pool Machine Service Agent",
      "Description": "Grants the Anthos Multi-Cloud Node Pool Machine Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkemulticloud.serviceAgent",
      "RoleTitle": "Anthos Multi-Cloud Service Agent",
      "Description": "Grants the Anthos Multi-Cloud Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkemulticloud.telemetryWriter",
      "RoleTitle": "Anthos Multi-cloud Telemetry Writer",
      "Description": "Grant access to write cluster telemetry data such as logs, metrics, and resource metadata.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkemulticloud.viewer",
      "RoleTitle": "Anthos Multi-cloud Viewer",
      "Description": "Viewer access to Anthos Multi-cloud resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkeonprem.admin",
      "RoleTitle": "GKE on-prem Admin",
      "Description": "Full access to GKE on-prem all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkeonprem.serviceAgent",
      "RoleTitle": "GKE On-Prem Service Agent",
      "Description": "Gives the GKE On-Prem service agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gkeonprem.viewer",
      "RoleTitle": "GKE on-prem Viewer",
      "Description": "Read-only access to GKE on-prem all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gsuiteaddons.developer",
      "RoleTitle": "Google Workspace Add-ons Developer",
      "Description": "Full access to Google Workspace Add-ons resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gsuiteaddons.reader",
      "RoleTitle": "Google Workspace Add-ons Reader",
      "Description": "Read-only access to Google Workspace Add-ons resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/gsuiteaddons.tester",
      "RoleTitle": "Google Workspace Add-ons Tester",
      "Description": "Testing execution access to Google Workspace Add-ons resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.annotationEditor",
      "RoleTitle": "Healthcare Annotation Editor",
      "Description": "Create, delete, update, read and list annotations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.annotationReader",
      "RoleTitle": "Healthcare Annotation Reader",
      "Description": "Read and list annotations in an Annotation store.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.annotationStoreAdmin",
      "RoleTitle": "Healthcare Annotation Administrator",
      "Description": "Administer Annotation stores.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.annotationStoreViewer",
      "RoleTitle": "Healthcare Annotation Store Viewer",
      "Description": "List Annotation Stores in a dataset.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.attributeDefinitionEditor",
      "RoleTitle": "Healthcare Attribute Definition Editor",
      "Description": "Edit AttributeDefinition objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.attributeDefinitionReader",
      "RoleTitle": "Healthcare Attribute Definition Reader",
      "Description": "Read AttributeDefinition objects in a consent store.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.consentArtifactAdmin",
      "RoleTitle": "Healthcare Consent Artifact Administrator",
      "Description": "Administer ConsentArtifact objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.consentArtifactEditor",
      "RoleTitle": "Healthcare Consent Artifact Editor",
      "Description": "Edit ConsentArtifact objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.consentArtifactReader",
      "RoleTitle": "Healthcare Consent Artifact Reader",
      "Description": "Read ConsentArtifact objects in a consent store.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.consentEditor",
      "RoleTitle": "Healthcare Consent Editor",
      "Description": "Edit Consent objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.consentReader",
      "RoleTitle": "Healthcare Consent Reader",
      "Description": "Read Consent objects in a consent store.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.consentStoreAdmin",
      "RoleTitle": "Healthcare Consent Store Administrator",
      "Description": "Administer Consent stores.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.consentStoreViewer",
      "RoleTitle": "Healthcare Consent Store Viewer",
      "Description": "List Consent Stores in a dataset.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.datasetAdmin",
      "RoleTitle": "Healthcare Dataset Administrator",
      "Description": "Administer Healthcare Datasets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.datasetViewer",
      "RoleTitle": "Healthcare Dataset Viewer",
      "Description": "List the Healthcare Datasets in a project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.dicomEditor",
      "RoleTitle": "Healthcare DICOM Editor",
      "Description": "Edit DICOM images individually and in bulk.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.dicomStoreAdmin",
      "RoleTitle": "Healthcare DICOM Store Administrator",
      "Description": "Administer DICOM stores.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.dicomStoreViewer",
      "RoleTitle": "Healthcare DICOM Store Viewer",
      "Description": "List DICOM Stores in a dataset.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.dicomViewer",
      "RoleTitle": "Healthcare DICOM Viewer",
      "Description": "Retrieve DICOM images from a DICOM store.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.fhirResourceEditor",
      "RoleTitle": "Healthcare FHIR Resource Editor",
      "Description": "Create, delete, update, read and search FHIR resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.fhirResourceReader",
      "RoleTitle": "Healthcare FHIR Resource Reader",
      "Description": "Read and search FHIR resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.fhirStoreAdmin",
      "RoleTitle": "Healthcare FHIR Store Administrator",
      "Description": "Administer FHIR resource stores.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.fhirStoreViewer",
      "RoleTitle": "Healthcare FHIR Store Viewer",
      "Description": "List FHIR Stores in a dataset.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.hl7V2Consumer",
      "RoleTitle": "Healthcare HL7v2 Message Consumer",
      "Description": "List and read HL7v2 messages, update message labels, and publish new messages.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.hl7V2Editor",
      "RoleTitle": "Healthcare HL7v2 Message Editor",
      "Description": "Read, write, and delete access to HL7v2 messages.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.hl7V2Ingest",
      "RoleTitle": "Healthcare HL7v2 Message Ingest",
      "Description": "Ingest HL7v2 messages received from a source network.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.hl7V2StoreAdmin",
      "RoleTitle": "Healthcare HL7v2 Store Administrator",
      "Description": "Administer HL7v2 Stores.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.hl7V2StoreViewer",
      "RoleTitle": "Healthcare HL7v2 Store Viewer",
      "Description": "View HL7v2 Stores in a dataset.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.nlpServiceViewer",
      "RoleTitle": "Healthcare NLP Service Viewer",
      "Description": "Extract and analyze medical entities from a given text.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.serviceAgent",
      "RoleTitle": "Healthcare Service Agent",
      "Description": "Gives the Healthcare Service Account access to networks, Kubernetes engine, and Pub/Sub resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.userDataMappingEditor",
      "RoleTitle": "Healthcare User Data Mapping Editor",
      "Description": "Edit UserDataMapping objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/healthcare.userDataMappingReader",
      "RoleTitle": "Healthcare User Data Mapping Reader",
      "Description": "Read UserDataMapping objects in a consent store.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.denyAdmin",
      "RoleTitle": "Deny Admin",
      "Description": "Deny admin role, with permissions to read and modify deny policies",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.denyReviewer",
      "RoleTitle": "Deny Reviewer",
      "Description": "Deny Reviewer role, with permissions to read deny policies",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.oauthClientAdmin",
      "RoleTitle": "IAM OAuth Client Admin",
      "Description": "Full rights to create and manage OAuth clients.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.oauthClientViewer",
      "RoleTitle": "IAM OAuth Client Viewer",
      "Description": "Read access to a particular instance of an OAuth client.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.operationViewer",
      "RoleTitle": "IAM Operation Viewer",
      "Description": "Operation user role, with permissions to view and list operations in IAM v3",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.organizationRoleAdmin",
      "RoleTitle": "Organization Role Administrator",
      "Description": "Access to administer all custom roles in the organization and the projects below it.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.organizationRoleViewer",
      "RoleTitle": "Organization Role Viewer",
      "Description": "Read access to all custom roles in the organization and the projects below it.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.principalAccessBoundaryAdmin",
      "RoleTitle": "Principal Access Boundary Policy Admin",
      "Description": "Principal Access Boundary admin role, with permissions to read and modify principal access boundary policies, and to bind and unbind principal access boundary policies to targets",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.principalAccessBoundaryUser",
      "RoleTitle": "Principal Access Boundary Policy User",
      "Description": "Principal Access Boundary Policies user role, with permissions to view principal access boundary policies, and to bind and unbind principal access boundary policies to targets",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.principalAccessBoundaryViewer",
      "RoleTitle": "Principal Access Boundary Policy Viewer",
      "Description": "Principal Access Boundary Reviewer role, with permissions to read principal access boundary policies and view associated policy bindings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.roleAdmin",
      "RoleTitle": "Role Administrator",
      "Description": "Access to administer all custom roles in the project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.roleViewer",
      "RoleTitle": "Role Viewer",
      "Description": "Read access to all custom roles in the project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.securityAdmin",
      "RoleTitle": "Security Admin",
      "Description": "Security admin role, with permissions to get and set any IAM policy.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.securityReviewer",
      "RoleTitle": "Security Reviewer",
      "Description": "Security reviewer role, with permissions to get any IAM policy.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.serviceAccountAdmin",
      "RoleTitle": "Service Account Admin",
      "Description": "Create and manage service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.serviceAccountCreator",
      "RoleTitle": "Create Service Accounts",
      "Description": "Access to create service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.serviceAccountDeleter",
      "RoleTitle": "Delete Service Accounts",
      "Description": "Access to delete service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.serviceAccountKeyAdmin",
      "RoleTitle": "Service Account Key Admin",
      "Description": "Create and manage (and rotate) service account keys.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.serviceAccountOpenIdTokenCreator",
      "RoleTitle": "Service Account OpenID Connect Identity Token Creator",
      "Description": "Create OpenID Connect (OIDC) identity tokens",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.serviceAccountTokenCreator",
      "RoleTitle": "Service Account Token Creator",
      "Description": "Impersonate service accounts (create OAuth2 access tokens, sign blobs or JWTs, etc).",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.serviceAccountUser",
      "RoleTitle": "Service Account User",
      "Description": "Run operations as the service account.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.serviceAccountViewer",
      "RoleTitle": "View Service Accounts",
      "Description": "Read access to service accounts, metadata, and keys.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.workforcePoolAdmin",
      "RoleTitle": "IAM Workforce Pool Admin",
      "Description": "Full rights to create and manage all workforce pools in the org, along with the ability to delegate permissions to other admins.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.workforcePoolEditor",
      "RoleTitle": "IAM Workforce Pool Editor",
      "Description": "Rights to edit a particular instance of a workforce pool.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.workforcePoolViewer",
      "RoleTitle": "IAM Workforce Pool Viewer",
      "Description": "Rights to read workforce pool.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.workloadIdentityPoolAdmin",
      "RoleTitle": "IAM Workload Identity Pool Admin",
      "Description": "Full rights to create and manage workload identity pools.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.workloadIdentityPoolViewer",
      "RoleTitle": "IAM Workload Identity Pool Viewer",
      "Description": "Read access to workload identity pools.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.workloadIdentityUser",
      "RoleTitle": "Workload Identity User",
      "Description": "Impersonate service accounts from federated workloads.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iam.workspacePoolAdmin",
      "RoleTitle": "Workspace Pool IAM Admin",
      "Description": "IAM workspace pool admin able to bind IAM policies to Dasher accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iap.admin",
      "RoleTitle": "IAP Policy Admin",
      "Description": "Administrator of IAP Permissions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iap.httpsResourceAccessor",
      "RoleTitle": "IAP-secured Web App User",
      "Description": "Access HTTPS resources which use Identity-Aware Proxy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iap.remediatorUser",
      "RoleTitle": "IAP-secured Resource Remediator User",
      "Description": "Remediate IAP resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iap.settingsAdmin",
      "RoleTitle": "IAP Settings Admin",
      "Description": "Administrator of IAP Settings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iap.tunnelDestGroupEditor",
      "RoleTitle": "IAP-secured Tunnel Destination Group Editor",
      "Description": "Edit Tunnel Destination Group resources which use Identity-Aware Proxy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iap.tunnelDestGroupViewer",
      "RoleTitle": "IAP-secured Tunnel Destination Group Viewer",
      "Description": "View Tunnel Destination Group resources which use Identity-Aware Proxy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/iap.tunnelResourceAccessor",
      "RoleTitle": "IAP-secured Tunnel User",
      "Description": "Access Tunnel resources which use Identity-Aware Proxy",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/identityplatform.admin",
      "RoleTitle": "Identity Platform Admin",
      "Description": "Full access to Identity Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/identityplatform.viewer",
      "RoleTitle": "Identity Platform Viewer",
      "Description": "Read access to Identity Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/identitytoolkit.admin",
      "RoleTitle": "Identity Toolkit Admin",
      "Description": "Full access to Identity Toolkit resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/identitytoolkit.serviceAgent",
      "RoleTitle": "Identity Platform Service Agent",
      "Description": "Gives Identity Platform service account access to customer project resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/identitytoolkit.viewer",
      "RoleTitle": "Identity Toolkit Viewer",
      "Description": "Read access to Identity Toolkit resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ids.admin",
      "RoleTitle": "Cloud IDS Admin",
      "Description": "Full access to Cloud IDS all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ids.viewer",
      "RoleTitle": "Cloud IDS Viewer",
      "Description": "Read-only access to Cloud IDS all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.apigeeIntegrationAdminRole",
      "RoleTitle": "Apigee Integration Admin",
      "Description": "A user that has full access to all Apigee integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.apigeeIntegrationDeployerRole",
      "RoleTitle": "Apigee Integration Deployer",
      "Description": "A developer that can deploy/undeploy Apigee integrations to the integration runtime.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.apigeeIntegrationEditorRole",
      "RoleTitle": "Apigee Integration Editor",
      "Description": "A developer that can list, create and update Apigee integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.apigeeIntegrationInvokerRole",
      "RoleTitle": "Apigee Integration Invoker",
      "Description": "A role that can invoke Apigee integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.apigeeIntegrationsViewer",
      "RoleTitle": "Apigee Integration Viewer",
      "Description": "A developer that can list and view Apigee integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.apigeeSuspensionResolver",
      "RoleTitle": "Apigee Integration Approver",
      "Description": "A role that can approve / reject Apigee integrations that contain a suspension/wait task.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.certificateViewer",
      "RoleTitle": "Certificate Viewer",
      "Description": "A developer that can list and view Certificates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.integrationAdmin",
      "RoleTitle": "Application Integration Admin",
      "Description": "A user that has full access (CRUD) to all integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.integrationDeployer",
      "RoleTitle": "Application Integration Deployer",
      "Description": "A developer that can deploy/undeploy integrations to the integration runtime.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.integrationEditor",
      "RoleTitle": "Application Integration Editor",
      "Description": "A developer that can list, create and update integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.integrationInvoker",
      "RoleTitle": "Application Integration Invoker",
      "Description": "A role that can invoke integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.integrationViewer",
      "RoleTitle": "Application Integration Viewer",
      "Description": "A developer that can list and view integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.securityIntegrationAdmin",
      "RoleTitle": "Security Integration Admin",
      "Description": "A user that has full access to all Security integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.serviceAgent",
      "RoleTitle": "Application Integration Service Agent",
      "Description": "Service agent that grants access to execute an integration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.sfdcInstanceAdmin",
      "RoleTitle": "Application Integration SFDC Instance Admin",
      "Description": "A user that has full access (CRUD) to all SFDC instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.sfdcInstanceEditor",
      "RoleTitle": "Application Integration SFDC Instance Editor",
      "Description": "A developer that can list, create and update integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.sfdcInstanceViewer",
      "RoleTitle": "Application Integration SFDC Instance Viewer",
      "Description": "A developer that can list and view SFDC instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/integrations.suspensionResolver",
      "RoleTitle": "Application Integration Approver",
      "Description": "A role that can resolve suspended integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.accountManagerAdmin",
      "RoleTitle": "Issuerswitch Account Manager Admin",
      "Description": "This role can perform all account manager related operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.accountManagerTransactionsAdmin",
      "RoleTitle": "Issuerswitch Account Manager Transactions Admin",
      "Description": "This role can perform all account manager transactions related operations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.accountManagerTransactionsViewer",
      "RoleTitle": "Issuerswitch Account Manager Transactions Viewer",
      "Description": "This role can view all account manager transactions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.admin",
      "RoleTitle": "Issuerswitch Admin",
      "Description": "Access to all issuer switch roles",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.issuerParticipantsAdmin",
      "RoleTitle": "Issuerswitch Participants Admin",
      "Description": "Full access to issuer switch participants",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.resolutionsAdmin",
      "RoleTitle": "Issuerswitch Resolutions Admin",
      "Description": "Full access to issuer switch resolutions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.rulesAdmin",
      "RoleTitle": "Issuerswitch Rules Admin",
      "Description": "Full access to issuer switch rules",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.rulesViewer",
      "RoleTitle": "Issuerswitch Rules Viewer",
      "Description": "This role can view rules and related metadata.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/issuerswitch.transactionsViewer",
      "RoleTitle": "Issuerswitch Transactions Viewer",
      "Description": "This role can view all transactions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/krmapihosting.admin",
      "RoleTitle": "Config Controller Admin",
      "Description": "Full access to all Config Controller resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/krmapihosting.anthosApiEndpointServiceAgent",
      "RoleTitle": "KRM API Hosting AnthosApiEndpoint Service Agent",
      "Description": "Grants permissions to resources managed by AnthosApiEndpoint.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/krmapihosting.serviceAgent",
      "RoleTitle": "KRM API Hosting Service Agent",
      "Description": "Gives KRM API Hosting service account access to managed resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/krmapihosting.viewer",
      "RoleTitle": "Config Controller Viewer",
      "Description": "Read-only access to all Config Controller resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/kubernetesmetadata.publisher",
      "RoleTitle": "Metadata Publisher",
      "Description": "Publisher of Kubernetes clusters metadata",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/kuberun.eventsControlPlaneServiceAgent",
      "RoleTitle": "KubeRun Events Control Plane Service Agent",
      "Description": "Service account role used to setup authentication for the control plane used by KubeRun Events.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/kuberun.eventsDataPlaneServiceAgent",
      "RoleTitle": "KubeRun Events Data Plane Service Agent",
      "Description": "Service account role used to setup authentication for the data plane used by KubeRun Events.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/lifesciences.admin",
      "RoleTitle": "Cloud Life Sciences Admin",
      "Description": "Full control of Cloud Life Sciences resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/lifesciences.editor",
      "RoleTitle": "Cloud Life Sciences Editor",
      "Description": "Access to read and edit Cloud Life Sciences resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/lifesciences.serviceAgent",
      "RoleTitle": "Cloud Life Sciences Service Agent",
      "Description": "Gives Cloud Life Sciences Service Account access to compute resources. Includes access to service accounts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/lifesciences.viewer",
      "RoleTitle": "Cloud Life Sciences Viewer",
      "Description": "Access to read Cloud Life Sciences resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/lifesciences.workflowsRunner",
      "RoleTitle": "Cloud Life Sciences Workflows Runner",
      "Description": "Full access to operate on Cloud Life Sciences workflows.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/livestream.editor",
      "RoleTitle": "Live Stream Editor",
      "Description": "Full access to Live Stream resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/livestream.serviceAgent",
      "RoleTitle": "Live Stream Service Agent",
      "Description": "Uploads media files to customer GCS buckets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/livestream.viewer",
      "RoleTitle": "Live Stream Viewer",
      "Description": "Read access to Live Stream resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.admin",
      "RoleTitle": "Logging Admin",
      "Description": "Access to all logging permissions, and dependent permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.bucketWriter",
      "RoleTitle": "Logs Bucket Writer",
      "Description": "Ability to write logs to a log bucket.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.configWriter",
      "RoleTitle": "Logs Configuration Writer",
      "Description": "Access to configure log exporting and metrics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.fieldAccessor",
      "RoleTitle": "Log Field Accessor",
      "Description": "Ability to read restricted fields in a log bucket.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.linkViewer",
      "RoleTitle": "Log Link Accessor",
      "Description": "Ability to see links for a bucket.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.logWriter",
      "RoleTitle": "Logs Writer",
      "Description": "Access to write logs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.privateLogViewer",
      "RoleTitle": "Private Logs Viewer",
      "Description": "Access to view all logs, including logs with private contents.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.serviceAgent",
      "RoleTitle": "Cloud Logging Service Agent",
      "Description": "Grants a Cloud Logging Service Account the ability to create and link datasets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.viewAccessor",
      "RoleTitle": "Logs View Accessor",
      "Description": "Ability to read logs in a view.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/logging.viewer",
      "RoleTitle": "Logs Viewer",
      "Description": "Access to view logs, except for logs with private contents.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/looker.admin",
      "RoleTitle": "Looker Admin",
      "Description": "Full access to all Looker resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/looker.instanceUser",
      "RoleTitle": "Looker Instance User",
      "Description": "Access to log in to a Looker instance.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/looker.serviceAgent",
      "RoleTitle": "Looker Service Agent",
      "Description": "Gives the Looker service account permission to manage customer resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/looker.viewer",
      "RoleTitle": "Looker Viewer",
      "Description": "Read-only access to all Looker resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/lookerstudio.proManager",
      "RoleTitle": "Looker Studio Pro Manager",
      "Description": "Looker Studio Pro Manager",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedflink.admin",
      "RoleTitle": "Managed Flink Admin",
      "Description": "Full access to Managed Flink resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedflink.developer",
      "RoleTitle": "Managed Flink Developer",
      "Description": "Full access to Managed Flink Jobs and Sessions and read access to Deployments.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedflink.viewer",
      "RoleTitle": "Managed Flink Viewer",
      "Description": "Readonly access to Managed Flink resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.admin",
      "RoleTitle": "Google Cloud Managed Identities Admin",
      "Description": "Full access to Google Cloud Managed Identities Domains and related resources. Intended to be granted on a project-level.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.backupAdmin",
      "RoleTitle": "Google Cloud Managed Identities Backup Admin",
      "Description": "Full access to Google Cloud Managed Identities Backup and related resources. Intended to be granted on a project-level",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.backupViewer",
      "RoleTitle": "Google Cloud Managed Identities Backup Viewer",
      "Description": "Read-only access to Google Cloud Managed Identities Backup and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.domainAdmin",
      "RoleTitle": "Google Cloud Managed Identities Domain Admin",
      "Description": "Read-Update-Delete to Google Cloud Managed Identities Domains and related resources. Intended to be granted on a resource (domain) level.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.domainJoin",
      "RoleTitle": "Google Cloud Managed Identities Domain Join",
      "Description": "Access to domain join VMs with Cloud AD",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.peeringAdmin",
      "RoleTitle": "Google Cloud Managed Identities Peering Admin",
      "Description": "Full access to Google Cloud Managed Identities Domains and related resources. Intended to be granted on a project-level",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.peeringViewer",
      "RoleTitle": "Google Cloud Managed Identities Peering Viewer",
      "Description": "Read-only access to Google Cloud Managed Identities Peering and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.serviceAgent",
      "RoleTitle": "Cloud Managed Identities Service Agent",
      "Description": "Gives Managed Identities service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedidentities.viewer",
      "RoleTitle": "Google Cloud Managed Identities Viewer",
      "Description": "Read-only access to Google Cloud Managed Identities Domains and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedkafka.admin",
      "RoleTitle": "Managed Kafka Admin",
      "Description": "Full access to Managed Kafka resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedkafka.client",
      "RoleTitle": "Managed Kafka Client",
      "Description": "Provides access to connect to the Kafka servers in a cluster, i.e. provides Kafka data plane access. Intended for, e.g., producers and consumers.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedkafka.clusterEditor",
      "RoleTitle": "Managed Kafka Cluster Editor",
      "Description": "Provides read and write access to Kafka clusters. Intended for, e.g., IT Departments that provision Kafka clusters, but need not be able to read or modify topics or consumer groups.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedkafka.consumerGroupEditor",
      "RoleTitle": "Managed Kafka Consumer Group Editor",
      "Description": "Provides read and write access to consumer group metadata. Intended for, e.g., developers who configure consumer groups.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedkafka.serviceAgent",
      "RoleTitle": "Managed Kafka Service Agent",
      "Description": "Gives Managed Kafka Service Agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedkafka.topicEditor",
      "RoleTitle": "Managed Kafka Topic Editor",
      "Description": "Provides read and write access to topic metadata. Intended for, e.g., developers who configure topics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/managedkafka.viewer",
      "RoleTitle": "Managed Kafka Viewer",
      "Description": "Readonly access to Managed Kafka resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.attackSurfaceManagementEditor",
      "RoleTitle": "Mandiant Attack Surface Management Editor",
      "Description": "Access to write Attack Surface Management",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.attackSurfaceManagementViewer",
      "RoleTitle": "Mandiant Attack Surface Management Viewer",
      "Description": "Access to read Attack Surface Management",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.digitalThreatMonitoringEditor",
      "RoleTitle": "Mandiant Digital Threat Monitoring Editor",
      "Description": "Access to write Digital Threat Monitoring",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.digitalThreatMonitoringViewer",
      "RoleTitle": "Mandiant Digital Threat Monitoring Viewer",
      "Description": "Access to read Digital Threat Monitoring",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.expertiseOnDemandEditor",
      "RoleTitle": "Mandiant Expertise On Demand Editor",
      "Description": "Access to write Expertise On Demand",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.expertiseOnDemandViewer",
      "RoleTitle": "Mandiant Expertise On Demand Viewer",
      "Description": "Access to read Expertise On Demand",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.threatIntelEditor",
      "RoleTitle": "Mandiant Threat Intel Editor",
      "Description": "Access to write Threat Intel",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.threatIntelViewer",
      "RoleTitle": "Mandiant Threat Intel Viewer",
      "Description": "Access to read Threat Intel",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.validationEditor",
      "RoleTitle": "Mandiant Validation Editor",
      "Description": "Access to write Validation",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mandiant.validationViewer",
      "RoleTitle": "Mandiant Validation Viewer",
      "Description": "Access to read Validation",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mapsadmin.admin",
      "RoleTitle": "Maps API Admin",
      "Description": "Grants permission to read and write everything",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mapsadmin.viewer",
      "RoleTitle": "Maps API Viewer",
      "Description": "Grants permission to read everything",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mapsanalytics.mobilitySolutionsOverageViewer",
      "RoleTitle": "Mobility Solutions Overages Viewer",
      "Description": "Grants read-only access to Mobility Solutions Overages metric data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mapsanalytics.viewer",
      "RoleTitle": "Maps Analytics Viewer",
      "Description": "Grants read-only access to all of the Maps Analytics resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mapsplatformdatasets.admin",
      "RoleTitle": "Maps Platform Datasets Admin",
      "Description": "Grants read and write access to all the Maps Platform Datasets API resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mapsplatformdatasets.viewer",
      "RoleTitle": "Maps Platform Datasets Viewer",
      "Description": "Grants readonly access to all the Maps Platform Datasets API resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/marketplacesolutions.admin",
      "RoleTitle": "Marketplace Solutions Admin",
      "Description": "Full access to Marketplace Solutions resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/marketplacesolutions.editor",
      "RoleTitle": "Marketplace Solutions Editor",
      "Description": "Edit access to Marketplace Solutions resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/marketplacesolutions.viewer",
      "RoleTitle": "Marketplace Solutions Viewer",
      "Description": "Readonly access to Marketplace Solutions resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/mediaasset.serviceAgent",
      "RoleTitle": "Media Asset Service Agent",
      "Description": "Downloads and uploads media files from and to customer GCS buckets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/memcache.admin",
      "RoleTitle": "Cloud Memorystore Memcached Admin",
      "Description": "Full access to Memcached instances and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/memcache.editor",
      "RoleTitle": "Cloud Memorystore Memcached Editor",
      "Description": "Read-Write access to Memcached instances and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/memcache.serviceAgent",
      "RoleTitle": "Cloud Memorystore Memcached Service Agent",
      "Description": "Gives Cloud Memorystore Memcached service account access to managed resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/memcache.viewer",
      "RoleTitle": "Cloud Memorystore Memcached Viewer",
      "Description": "Read-only access to Memcached instances and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/memorystore.admin",
      "RoleTitle": "Memorystore Admin",
      "Description": "Full access to Memorystore resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/memorystore.dbConnectionUser",
      "RoleTitle": "Memorystore DB Connector User",
      "Description": "Access to connecting to Memorystore Server db.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/memorystore.serviceAgent",
      "RoleTitle": "Cloud Memorystore Service Agent",
      "Description": "Gives Cloud Memorystore service account access to managed resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/memorystore.viewer",
      "RoleTitle": "Memorystore Viewer",
      "Description": "Readonly access to Memorystore resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/meshconfig.admin",
      "RoleTitle": "Mesh Config Admin",
      "Description": "Full access to all mesh configuration resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/meshconfig.serviceAgent",
      "RoleTitle": "Mesh Config Service Agent",
      "Description": "Apply mesh configuration",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/meshconfig.viewer",
      "RoleTitle": "Mesh Config Viewer",
      "Description": "Read access to mesh configuration",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/meshcontrolplane.serviceAgent",
      "RoleTitle": "Mesh Managed Control Plane Service Agent",
      "Description": "Anthos Service Mesh Managed Control Plane Agent",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/meshdataplane.serviceAgent",
      "RoleTitle": "Mesh Data Plane Service Agent",
      "Description": "Run user-space Istio components",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.admin",
      "RoleTitle": "Dataproc Metastore Admin",
      "Description": "Full access to all Dataproc Metastore resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.editor",
      "RoleTitle": "Dataproc Metastore Editor",
      "Description": "Read and write access to all Dataproc Metastore resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.federationAccessor",
      "RoleTitle": "Metastore Federation Accessor",
      "Description": "Access to the Metastore Federation resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.metadataEditor",
      "RoleTitle": "Dataproc Metastore Metadata Editor",
      "Description": "Access to read and modify the metadata of databases and tables under those databases.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.metadataMutateAdmin",
      "RoleTitle": "Dataproc Metastore Metadata Mutate Admin",
      "Description": "Access to mutate metadata from a Dataproc Metastore service's underlying metadata store.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.metadataOperator",
      "RoleTitle": "Dataproc Metastore Metadata Operator",
      "Description": "Read-only access to Dataproc Metastore resources with additional metadata operations permission.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.metadataOwner",
      "RoleTitle": "Dataproc Metastore Data Owner",
      "Description": "Full access to the metadata of databases and tables under those databases.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.metadataQueryAdmin",
      "RoleTitle": "Dataproc Metastore Metadata Query Admin",
      "Description": "Access to query metadata from a Dataproc Metastore service's underlying metadata store. ",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.metadataUser",
      "RoleTitle": "Dataproc Metastore Metadata User",
      "Description": "Access to the Dataproc Metastore gRPC endpoint",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.metadataViewer",
      "RoleTitle": "Dataproc Metastore Metadata Viewer",
      "Description": "Access to read the metadata of databases and tables under those databases",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.migrationAdmin",
      "RoleTitle": "Dataproc Metastore Managed Migration Admin",
      "Description": "Access to Dataproc Metastore Managed Migration resources and workflow.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.serviceAgent",
      "RoleTitle": "Dataproc Metastore Service Agent",
      "Description": "Gives the Dataproc Metastore service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/metastore.user",
      "RoleTitle": "Dataproc Metastore Viewer",
      "Description": "Read-only access to all Dataproc Metastore resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/migrationcenter.admin",
      "RoleTitle": "Migration Center Admin",
      "Description": "Full access to Migration Center all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/migrationcenter.discoveryClient",
      "RoleTitle": "Migration Center Discovery Client",
      "Description": "Migration Center Discover Client role",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/migrationcenter.discoveryClientRegistrator",
      "RoleTitle": "Migration Center Discovery Client Registrator",
      "Description": "Registrator of Migration Center Discover Clients",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/migrationcenter.serviceAgent",
      "RoleTitle": "Migration Center Service Agent",
      "Description": "Gives Migration Center Service Account access to objects storedin object store and Cloud Migration products.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/migrationcenter.viewer",
      "RoleTitle": "Migration Center Viewer",
      "Description": "Read-only access to Migration Center all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ml.admin",
      "RoleTitle": "AI Platform Admin",
      "Description": "Full access to AI Platform.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ml.developer",
      "RoleTitle": "AI Platform Developer",
      "Description": "Access to create training and prediction jobs, models and versions, send online prediction requests.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ml.jobOwner",
      "RoleTitle": "AI Platform Job Owner",
      "Description": "Full access to the job.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ml.modelOwner",
      "RoleTitle": "AI Platform Model Owner",
      "Description": "Full access to the model and its versions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ml.modelUser",
      "RoleTitle": "AI Platform Model User",
      "Description": "Permissions to read the model and its versions, and use them for prediction.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ml.operationOwner",
      "RoleTitle": "AI Platform Operation Owner",
      "Description": "Full access to the operation.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ml.serviceAgent",
      "RoleTitle": "AI Platform Service Agent",
      "Description": "AI Platform service agent can act as log writer, Cloud Storage admin, Artifact Registry Reader, BigQuery writer, and service account access token creator.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ml.viewer",
      "RoleTitle": "AI Platform Viewer",
      "Description": "Read-only access to AI Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.admin",
      "RoleTitle": "Monitoring Admin",
      "Description": "All current and future monitoring permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.alertPolicyEditor",
      "RoleTitle": "Monitoring AlertPolicy Editor",
      "Description": "Read/write access to alerting policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.alertPolicyViewer",
      "RoleTitle": "Monitoring AlertPolicy Viewer",
      "Description": "Read-only access to alerting policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.cloudConsoleIncidentEditor",
      "RoleTitle": "Monitoring Cloud Console Incident Editor",
      "Description": "Read/write access to incidents from Cloud Console.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.cloudConsoleIncidentViewer",
      "RoleTitle": "Monitoring Cloud Console Incident Viewer",
      "Description": "Read access to incidents from Cloud Console.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.dashboardEditor",
      "RoleTitle": "Monitoring Dashboard Configuration Editor",
      "Description": "Read/write access to dashboard configurations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.dashboardViewer",
      "RoleTitle": "Monitoring Dashboard Configuration Viewer",
      "Description": "Read-only access to dashboard configurations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.editor",
      "RoleTitle": "Monitoring Editor",
      "Description": "Read/write access to all monitoring data and configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.metricWriter",
      "RoleTitle": "Monitoring Metric Writer",
      "Description": "Write-only access to metrics.  This provides exactly the permissions needed by the Stackdriver agent and other systems that send metrics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.metricsScopesAdmin",
      "RoleTitle": "Monitoring Metrics Scopes Admin",
      "Description": "Access to add and remove monitored projects from metrics scopes.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.metricsScopesViewer",
      "RoleTitle": "Monitoring Metrics Scopes Viewer",
      "Description": "Read-only access to metrics scopes and their monitored projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.notificationChannelEditor",
      "RoleTitle": "Monitoring NotificationChannel Editor",
      "Description": "Read/write access to notification channels.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.notificationChannelViewer",
      "RoleTitle": "Monitoring NotificationChannel Viewer",
      "Description": "Read-only access to notification channels.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.notificationServiceAgent",
      "RoleTitle": "Monitoring Service Agent",
      "Description": "Grants Cloud Monitoring and Cloud Alerting permission to access consumer resources and track usage.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.servicesEditor",
      "RoleTitle": "Monitoring Services Editor",
      "Description": "Read/write access to services.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.servicesViewer",
      "RoleTitle": "Monitoring Services Viewer",
      "Description": "Read-only access to services.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.snoozeEditor",
      "RoleTitle": "Monitoring Snooze Editor",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.snoozeViewer",
      "RoleTitle": "Monitoring Snooze Viewer",
      "Description": "",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.uptimeCheckConfigEditor",
      "RoleTitle": "Monitoring Uptime Check Configuration Editor",
      "Description": "Read/write access to uptime check configurations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.uptimeCheckConfigViewer",
      "RoleTitle": "Monitoring Uptime Check Configuration Viewer",
      "Description": "Read-only access to uptime check configurations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/monitoring.viewer",
      "RoleTitle": "Monitoring Viewer",
      "Description": "Read-only access to get and list information about all monitoring data and configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/multiclusteringress.serviceAgent",
      "RoleTitle": "Multi Cluster Ingress Service Agent",
      "Description": "Gives the Multi Cluster Ingress service agent access to CloudPlatform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/multiclustermetering.serviceAgent",
      "RoleTitle": "Multi-cluster metering Service Agent",
      "Description": "Gives the Multi-cluster metering service agent access to CloudPlatform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/multiclusterservicediscovery.serviceAgent",
      "RoleTitle": "Multi-Cluster Service Discovery Service Agent",
      "Description": "Gives the Multi-Cluster Service Discovery service access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/nestconsole.homeDeveloperAdmin",
      "RoleTitle": "Google Home Developer Console Admin",
      "Description": "Admin access to Google Home Developer Console resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/nestconsole.homeDeveloperEditor",
      "RoleTitle": "Google Home Developer Console Editor",
      "Description": "Read-Write access to Google Home Developer Console resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/nestconsole.homeDeveloperViewer",
      "RoleTitle": "Google Home Developer Console Reader",
      "Description": "Read-only access to Google Home Developer Console resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/netapp.admin",
      "RoleTitle": "Google Cloud NetApp Volumes Admin",
      "Description": "Full access to Google Cloud NetApp Volumes resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/netapp.viewer",
      "RoleTitle": "Google Cloud NetApp Volumes Viewer",
      "Description": "Readonly access to Google Cloud NetApp Volumes resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/netappcloudvolumes.admin",
      "RoleTitle": "NetApp Cloud Volumes Admin",
      "Description": "This role is managed by NetApp, not Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/netappcloudvolumes.viewer",
      "RoleTitle": "NetApp Cloud Volumes Viewer",
      "Description": "This role is managed by NetApp, not Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkactions.serviceAgent",
      "RoleTitle": "Network Actions Service Agent",
      "Description": "Gives Network Actions service account access to read required resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.consumerNetworkAdmin",
      "RoleTitle": "Service Automation Consumer Network Admin",
      "Description": "Service Automation Consumer Network Admin is responsible for setting up ServiceConnectionPolicies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.groupUser",
      "RoleTitle": "Group User",
      "Description": "Enables use access on group resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.hubAdmin",
      "RoleTitle": "Hub & Spoke Admin",
      "Description": "Enables full access to hub and spoke resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.hubViewer",
      "RoleTitle": "Hub & Spoke Viewer",
      "Description": "Enables read-only access to hub and spoke resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.regionalEndpointAdmin",
      "RoleTitle": "Regional Endpoint Admin",
      "Description": "Full access to all Regional Endpoint resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.regionalEndpointViewer",
      "RoleTitle": "Regional Endpoint Viewer",
      "Description": "Read-only access to all Regional Endpoint resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.serviceAgent",
      "RoleTitle": "Network Connectivity Service Agent",
      "Description": "Grants the Network Connectivity API authority to read some networking resources. It does not mutate these resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.serviceClassUser",
      "RoleTitle": "Service Class User",
      "Description": "Service Class User uses a ServiceClass",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.serviceProducerAdmin",
      "RoleTitle": "Service Automation Service Producer Admin",
      "Description": "Service Automation Producer Admin uses information from a consumer request to manage ServiceClasses and ServiceConnectionMaps",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkconnectivity.spokeAdmin",
      "RoleTitle": "Spoke Admin",
      "Description": "Enables full access to spoke resources and read-only access to hub resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkmanagement.admin",
      "RoleTitle": "Network Management Admin",
      "Description": "Full access to Network Management resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkmanagement.serviceAgent",
      "RoleTitle": "GCP Network Management Service Agent",
      "Description": "Grants the GCP Network Management API the authority to complete analysis based on network configurations from Compute Engine and Container Engine.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/networkmanagement.viewer",
      "RoleTitle": "Network Management Viewer",
      "Description": "Read-only access to Network Management resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/notebooks.admin",
      "RoleTitle": "Notebooks Admin",
      "Description": "Full access to Notebooks all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/notebooks.legacyAdmin",
      "RoleTitle": "Notebooks Legacy Admin",
      "Description": "Full access to Notebooks all resources through compute API.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/notebooks.legacyViewer",
      "RoleTitle": "Notebooks Legacy Viewer",
      "Description": "Read-only access to Notebooks all resources through compute API.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/notebooks.runner",
      "RoleTitle": "Notebooks Runner",
      "Description": "Restricted access for running scheduled Notebooks.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/notebooks.serviceAgent",
      "RoleTitle": "AI Platform Notebooks Service Agent",
      "Description": "Provide access for notebooks service agent to manage notebook instances in user projects",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/notebooks.viewer",
      "RoleTitle": "Notebooks Viewer",
      "Description": "Read-only access to Notebooks all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/oauthconfig.editor",
      "RoleTitle": "OAuth Config Editor",
      "Description": "Read/write access to OAuth config resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/oauthconfig.viewer",
      "RoleTitle": "OAuth Config Viewer",
      "Description": "Read-only access to OAuth config resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/observability.admin",
      "RoleTitle": "Observability Admin",
      "Description": "Full access to Observability resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/observability.editor",
      "RoleTitle": "Observability Editor",
      "Description": "Edit access to Observability resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/observability.viewer",
      "RoleTitle": "Observability Viewer",
      "Description": "Read only access to Observability resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ondemandscanning.admin",
      "RoleTitle": "On-Demand Scanning Admin",
      "Description": "All permissions for On-Demand Scanning",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/ondemandscanning.serviceAgent",
      "RoleTitle": "On-Demand Scanning Service Agent",
      "Description": "Gives the On-Demand Scanning API the access it needs to function.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/opsconfigmonitoring.resourceMetadata.viewer",
      "RoleTitle": "Ops Config Monitoring Resource Metadata Viewer",
      "Description": "Read-only access to resource metadata.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/opsconfigmonitoring.resourceMetadata.writer",
      "RoleTitle": "Ops Config Monitoring Resource Metadata Writer",
      "Description": "Write-only access to resource metadata. This provides exactly the permissions needed by the Ops Config Monitoring metadata agent and other systems that send metadata.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/orgpolicy.policyAdmin",
      "RoleTitle": "Organization Policy Administrator",
      "Description": "The permission to set Organization Policies on resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/orgpolicy.policyViewer",
      "RoleTitle": "Organization Policy Viewer",
      "Description": "Access to view Organization Policies on resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.guestPolicyAdmin",
      "RoleTitle": "GuestPolicy Admin",
      "Description": "Full admin access to GuestPolicies",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.guestPolicyEditor",
      "RoleTitle": "GuestPolicy Editor",
      "Description": "Editor of GuestPolicy resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.guestPolicyViewer",
      "RoleTitle": "GuestPolicy Viewer",
      "Description": "Viewer of GuestPolicy resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.instanceOSPoliciesComplianceViewer",
      "RoleTitle": "InstanceOSPoliciesCompliance Viewer",
      "Description": "Viewer of OS Policies Compliance of VM instances",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.inventoryViewer",
      "RoleTitle": "OS Inventory Viewer",
      "Description": "Viewer of OS Inventories",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.osPolicyAssignmentAdmin",
      "RoleTitle": "OSPolicyAssignment Admin",
      "Description": "Full admin access to OS Policy Assignments",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.osPolicyAssignmentEditor",
      "RoleTitle": "OSPolicyAssignment Editor",
      "Description": "Editor of OS Policy Assignments",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.osPolicyAssignmentReportViewer",
      "RoleTitle": "OSPolicyAssignmentReport Viewer",
      "Description": "Viewer of OS policy assignment reports for VM instances",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.osPolicyAssignmentViewer",
      "RoleTitle": "OSPolicyAssignment Viewer",
      "Description": "Viewer of OS Policy Assignments",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.patchDeploymentAdmin",
      "RoleTitle": "PatchDeployment Admin",
      "Description": "Full admin access to PatchDeployments",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.patchDeploymentViewer",
      "RoleTitle": "PatchDeployment Viewer",
      "Description": "Viewer of PatchDeployment resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.patchJobExecutor",
      "RoleTitle": "Patch Job Executor",
      "Description": "Access to execute Patch Jobs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.patchJobViewer",
      "RoleTitle": "Patch Job Viewer",
      "Description": "Get and list Patch Jobs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.projectFeatureSettingsEditor",
      "RoleTitle": "Project Feature Settings Editor",
      "Description": "Read/write access to project feature settings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.projectFeatureSettingsViewer",
      "RoleTitle": "Project Feature Settings Viewer",
      "Description": "Read access to project feature settings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.serviceAgent",
      "RoleTitle": "Cloud OS Config Service Agent",
      "Description": "Grants OS Config Service Account access to Google Compute Engine instances.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.upgradeReportViewer",
      "RoleTitle": "Upgrade Report Viewer",
      "Description": "Provides read-only access to VM Manager Upgrade Reports",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/osconfig.vulnerabilityReportViewer",
      "RoleTitle": "OS VulnerabilityReport Viewer",
      "Description": "Viewer of OS VulnerabilityReports",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/owner",
      "RoleTitle": "Owner",
      "Description": "Full access to most Google Cloud resources. See the list of included permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/parallelstore.serviceAgent",
      "RoleTitle": "Parallelstore Service Agent",
      "Description": "Gives the Parallelstore service agent ability to access customer resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/paymentsresellersubscription.partnerAdmin",
      "RoleTitle": "Payments Reseller Admin",
      "Description": "Full access to all Payments Reseller resources, including subscriptions, products and promotions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/paymentsresellersubscription.partnerViewer",
      "RoleTitle": "Payments Reseller Viewer",
      "Description": "Read access to all Payments Reseller resources, including subscriptions, products and promotions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/paymentsresellersubscription.productViewer",
      "RoleTitle": "Payments Reseller Products Viewer",
      "Description": "Read access to Payments Reseller Product resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/paymentsresellersubscription.promotionViewer",
      "RoleTitle": "Payments Reseller Promotions Viewer",
      "Description": "Read access to Payments Reseller Promotion resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/paymentsresellersubscription.subscriptionEditor",
      "RoleTitle": "Payments Reseller Subscriptions Editor",
      "Description": "Write access to Payments Reseller Subscription resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/paymentsresellersubscription.subscriptionViewer",
      "RoleTitle": "Payments Reseller Subscriptions Viewer",
      "Description": "Read access to Payments Reseller Subscription resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/policyanalyzer.activityAnalysisViewer",
      "RoleTitle": "Activity Analysis Viewer",
      "Description": "Viewer user that can read all activity analysis.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/policyremediatormanager.policyRemediatorAdmin",
      "RoleTitle": "Policy Remediator Admin",
      "Description": "Grants the ability to enable and disable the usage of the policy remediator for the organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/policyremediatormanager.policyRemediatorReader",
      "RoleTitle": "Policy Remediator Reader",
      "Description": "Grants the ability to read/view the state of the policy remediator for the organization",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/policysimulator.admin",
      "RoleTitle": "Simulator Admin",
      "Description": "Admin user that can run and access replays.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/policysimulator.orgPolicyAdmin",
      "RoleTitle": "OrgPolicy Simulator Admin",
      "Description": "OrgPolicy Admin that can run and access simulations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privateca.admin",
      "RoleTitle": "CA Service Admin",
      "Description": "Full access to all CA Service resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privateca.auditor",
      "RoleTitle": "CA Service Auditor",
      "Description": "Read-only access to all CA Service resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privateca.caManager",
      "RoleTitle": "CA Service Operation Manager",
      "Description": "Create and manage CAs, revoke certificates, create certificates templates, and read-only access for CA Service resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privateca.certificateManager",
      "RoleTitle": "CA Service Certificate Manager",
      "Description": "Create certificates and read-only access for CA Service resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privateca.certificateRequester",
      "RoleTitle": "CA Service Certificate Requester",
      "Description": "Request certificates from CA Service.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privateca.poolReader",
      "RoleTitle": "CA Service Pool Reader",
      "Description": "Read CA Pools in CA Service.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privateca.templateUser",
      "RoleTitle": "CA Service Certificate Template User",
      "Description": "Read, list and use certificate templates.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privateca.workloadCertificateRequester",
      "RoleTitle": "CA Service Workload Certificate Requester",
      "Description": "Request certificates from CA Service with caller's identity.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privilegedaccessmanager.admin",
      "RoleTitle": "Privileged Access Manager Admin",
      "Description": "Full access to Privileged Access Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privilegedaccessmanager.folderServiceAgent",
      "RoleTitle": "Privileged Access Manager Folder Service Agent",
      "Description": "Gives privileged access manager service account access to modify IAM policies on GCP folders",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privilegedaccessmanager.organizationServiceAgent",
      "RoleTitle": "Privileged Access Manager Organization Service Agent",
      "Description": "Gives privileged access manager service account access to modify IAM policies on GCP organizations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privilegedaccessmanager.projectServiceAgent",
      "RoleTitle": "Privileged Access Manager Project Service Agent",
      "Description": "Gives privileged access manager service account access to modify IAM policies on GCP projects",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privilegedaccessmanager.serviceAgent",
      "RoleTitle": "Privileged Access Manager Service Agent",
      "Description": "Gives privileged access manager service account access to modify IAM policies on GCP resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/privilegedaccessmanager.viewer",
      "RoleTitle": "Privileged Access Manager Viewer",
      "Description": "Readonly access to Privileged Access Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/progressiverollout.serviceAgent",
      "RoleTitle": "Progressive Rollout Service Agent",
      "Description": "Gives Progressive Rollout the ability to roll out a customer change.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/proximitybeacon.attachmentEditor",
      "RoleTitle": "Beacon Attachment Editor",
      "Description": "Can create and delete attachments; can list and get a project's beacons; can list a project's namespaces.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/proximitybeacon.attachmentPublisher",
      "RoleTitle": "Beacon Attachment Publisher",
      "Description": "Grants necessary permissions to use beacons to create attachments in namespaces not owned by this project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/proximitybeacon.attachmentViewer",
      "RoleTitle": "Beacon Attachment Viewer",
      "Description": "Can view all attachments under a namespace; no beacon or namespace permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/proximitybeacon.beaconEditor",
      "RoleTitle": "Beacon Editor",
      "Description": "Necessary access to register, modify, and view beacons; no attachment or namespace permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/publicca.externalAccountKeyCreator",
      "RoleTitle": "External Account Key Creator",
      "Description": "This role can create a new externalAccountKey resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsub.admin",
      "RoleTitle": "Pub/Sub Admin",
      "Description": "Full access to topics, subscriptions, and snapshots.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsub.editor",
      "RoleTitle": "Pub/Sub Editor",
      "Description": "Modify topics and subscriptions, publish and consume messages.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsub.publisher",
      "RoleTitle": "Pub/Sub Publisher",
      "Description": "Publish messages to a topic.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsub.serviceAgent",
      "RoleTitle": "Cloud Pub/Sub Service Agent",
      "Description": "Grants Cloud Pub/Sub Service Account access to manage resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsub.subscriber",
      "RoleTitle": "Pub/Sub Subscriber",
      "Description": "Consume messages from a subscription, attach subscriptions to a topic, and seek to a snapshot.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsub.viewer",
      "RoleTitle": "Pub/Sub Viewer",
      "Description": "View topics, subscriptions, and snapshots.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsublite.admin",
      "RoleTitle": "Pub/Sub Lite Admin",
      "Description": "Full access to topics, subscriptions and reservations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsublite.editor",
      "RoleTitle": "Pub/Sub Lite Editor",
      "Description": "Modify topics, subscriptions and reservations, publish and consume messages.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsublite.publisher",
      "RoleTitle": "Pub/Sub Lite Publisher",
      "Description": "Publish messages to a topic.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsublite.serviceAgent",
      "RoleTitle": "Pub/Sub Lite Service Agent",
      "Description": "Grants Pub/Sub Lite Service Agent access to project resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsublite.subscriber",
      "RoleTitle": "Pub/Sub Lite Subscriber",
      "Description": "Subscribe to and read messages from a topic.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/pubsublite.viewer",
      "RoleTitle": "Pub/Sub Lite Viewer",
      "Description": "View topics, subscriptions and reservations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/rapidmigrationassessment.serviceAgent",
      "RoleTitle": "RMA Service Agent",
      "Description": "Gives RMA service account access to MC resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/readerrevenuesubscriptionlinking.admin",
      "RoleTitle": "Subscription Linking Admin",
      "Description": "Full access to publication reader resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/readerrevenuesubscriptionlinking.entitlementsViewer",
      "RoleTitle": "Subscription Linking Entitlements Viewer",
      "Description": "This role can view all publication reader entitlements",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/readerrevenuesubscriptionlinking.viewer",
      "RoleTitle": "Subscription Linking Viewer",
      "Description": "This role can view all publication reader resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recaptchaenterprise.admin",
      "RoleTitle": "reCAPTCHA Enterprise Admin",
      "Description": "Access to view and modify reCAPTCHA Enterprise keys",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recaptchaenterprise.agent",
      "RoleTitle": "reCAPTCHA Enterprise Agent",
      "Description": "Access to create and annotate reCAPTCHA Enterprise assessments",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recaptchaenterprise.viewer",
      "RoleTitle": "reCAPTCHA Enterprise Viewer",
      "Description": "Access to view reCAPTCHA Enterprise keys and metrics",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.alloydbAdmin",
      "RoleTitle": "AlloyDB Recommender Admin",
      "Description": "Admin of AlloyDB insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.alloydbViewer",
      "RoleTitle": "AlloyDB Recommender Viewer",
      "Description": "Viewer of AlloyDB insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigQueryCapacityCommitmentsAdmin",
      "RoleTitle": "BigQuery Slot Recommender Admin",
      "Description": "Admin of BigQuery Capacity Commitments insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigQueryCapacityCommitmentsBillingAccountAdmin",
      "RoleTitle": "BigQuery Recommender Billing Account Admin",
      "Description": "Billing Account Admin of BigQuery Capacity Commitments insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigQueryCapacityCommitmentsBillingAccountViewer",
      "RoleTitle": "BigQuery Recommender Billing Account Viewer",
      "Description": "Billing Account Viewer of BigQuery Capacity Commitments insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigQueryCapacityCommitmentsProjectAdmin",
      "RoleTitle": "BigQuery Recommender Project Admin",
      "Description": "Project Admin of BigQuery Capacity Commitments insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigQueryCapacityCommitmentsProjectViewer",
      "RoleTitle": "BigQuery Recommender Project Viewer",
      "Description": "Project Viewer of BigQuery Capacity Commitments insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigQueryCapacityCommitmentsViewer",
      "RoleTitle": "BigQuery Slot Recommender Viewer",
      "Description": "Viewer of BigQuery Capacity Commitments insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigqueryMaterializedViewAdmin",
      "RoleTitle": "BigQuery Materialized View Recommender Admin",
      "Description": "Admin of BigQuery Materialized View Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigqueryMaterializedViewViewer",
      "RoleTitle": "BigQuery Materialized View Recommender Viewer",
      "Description": "Viewer of BigQuery Materialized View Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigqueryPartitionClusterAdmin",
      "RoleTitle": "BigQuery Partitioning Clustering Recommender Admin",
      "Description": "Admin of BigQuery Partitioning Clustering recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.bigqueryPartitionClusterViewer",
      "RoleTitle": "BigQuery Partitioning Clustering Recommender Viewer",
      "Description": "Viewer of BigQuery Partitioning Clustering recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.billingAccountCudAdmin",
      "RoleTitle": "Billing Account Usage Commitment Recommender Admin",
      "Description": "Admin of Billing Account Usage Commitment Recommender.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.billingAccountCudViewer",
      "RoleTitle": "Billing Account Usage Commitment Recommender Viewer",
      "Description": "Viewer of Billing Account Usage Commitment Recommender.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudAssetInsightsAdmin",
      "RoleTitle": "Cloud Asset Insights Admin",
      "Description": "Admin of all Cloud Asset insights.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudAssetInsightsViewer",
      "RoleTitle": "Cloud Asset Insights Viewer",
      "Description": "Viewer of all Cloud Asset insights.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudCostRecommendationAdmin",
      "RoleTitle": "Cloud Cost General Recommendations Recommender Admin",
      "Description": "Admin of Cloud Cost General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudCostRecommendationViewer",
      "RoleTitle": "Cloud Cost General Recommendations Recommender Viewer",
      "Description": "Viewer of Cloud Cost General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudDeprecationRecommendationAdmin",
      "RoleTitle": "Cloud Deprecation General Recommender Admin",
      "Description": "Admin of Cloud Deprecation General Recommender Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudDeprecationRecommendationViewer",
      "RoleTitle": "Cloud Deprecation General Recommender Viewer",
      "Description": "Viewer of Cloud Deprecation General Recommender Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudManageabilityRecommendationAdmin",
      "RoleTitle": "Cloud Manageability General Recommendations Recommender Admin",
      "Description": "Admin of Cloud Manageability General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudManageabilityRecommendationViewer",
      "RoleTitle": "Cloud Manageability General Recommendations Recommender Viewer",
      "Description": "Viewer of Cloud Manageability General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudPerformanceRecommendationAdmin",
      "RoleTitle": "Cloud Performance General Recommendations Recommender Admin",
      "Description": "Admin of Cloud Performance General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudPerformanceRecommendationViewer",
      "RoleTitle": "Cloud Performance General Recommendations Recommender Viewer",
      "Description": "Viewer of Cloud Performance General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudReliabilityRecommendationAdmin",
      "RoleTitle": "Cloud Reliability General Recommendations Recommender Admin",
      "Description": "Admin of Cloud Reliability General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudReliabilityRecommendationViewer",
      "RoleTitle": "Cloud Reliability General Recommendations Recommender Viewer",
      "Description": "Viewer of Cloud Reliability General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudSecurityRecommendationAdmin",
      "RoleTitle": "Cloud Security General Recommendations Recommender Admin",
      "Description": "Admin of Cloud Security General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudSecurityRecommendationViewer",
      "RoleTitle": "Cloud Security General Recommendations Recommender Viewer",
      "Description": "Viewer of Cloud Security General Recommendations Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudsqlAdmin",
      "RoleTitle": "Cloud SQL Recommender Admin",
      "Description": "Admin of Cloud SQL insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.cloudsqlViewer",
      "RoleTitle": "Cloud SQL Recommender Viewer",
      "Description": "Viewer of Cloud SQL insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.computeAdmin",
      "RoleTitle": "Compute Recommender Admin",
      "Description": "Admin of compute recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.computeViewer",
      "RoleTitle": "Compute Recommender Viewer",
      "Description": "Viewer of compute recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.containerDiagnosisAdmin",
      "RoleTitle": "GKE Diagnosis Recommender Admin",
      "Description": "Admin of GKE Diagnosis Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.containerDiagnosisViewer",
      "RoleTitle": "GKE Diagnosis Recommender Viewer",
      "Description": "Viewer of GKE Diagnosis Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.dataflowDiagnosticsAdmin",
      "RoleTitle": "Dataflow Diagnostics Admin",
      "Description": "Admin of Diagnostics recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.dataflowDiagnosticsViewer",
      "RoleTitle": "Dataflow Diagnostics Viewer",
      "Description": "Viewer of Diagnostics recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.errorReportingAdmin",
      "RoleTitle": "Error Reporting Recommender Admin",
      "Description": "Admin of Error Reporting Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.errorReportingViewer",
      "RoleTitle": "Error Reporting Recommender Viewer",
      "Description": "Viewer of Error Reporting Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.exporter",
      "RoleTitle": "Recommendations Exporter",
      "Description": "Exporter of Recommendations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.firestoredatabasereliabilityAdmin",
      "RoleTitle": "Firestore Database Reliability Recommender Admin",
      "Description": "Admin of Firestore Database Reliability Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.firestoredatabasereliabilityViewer",
      "RoleTitle": "Firestore Database Reliability Recommender Viewer",
      "Description": "Viewer of Firestore Database Reliability Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.firewallAdmin",
      "RoleTitle": "Firewall Recommender Admin",
      "Description": "Admin of Firewall insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.firewallViewer",
      "RoleTitle": "Firewall Recommender Viewer",
      "Description": "Viewer of Firewall insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.gmpAdmin",
      "RoleTitle": "Google Maps Platform Insights/Recommendations Admin",
      "Description": "Admin of all Google Maps Platform insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.gmpViewer",
      "RoleTitle": "Google Maps Platform Insights/Recommendations Viewer",
      "Description": "Viewer of all Google Maps Platform insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.iamAdmin",
      "RoleTitle": "IAM Recommender Admin",
      "Description": "Admin of IAM recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.iamViewer",
      "RoleTitle": "IAM Recommender Viewer",
      "Description": "Viewer of IAM recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.iampolicychangeriskAdmin",
      "RoleTitle": "IAM Policy Change Risk Recommender Admin",
      "Description": "Admin of IAM Policy Change Risk Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.iampolicychangeriskViewer",
      "RoleTitle": "IAM Policy Change Risk Recommender Viewer",
      "Description": "Viewer of IAM Policy Change Risk Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerAdmin",
      "RoleTitle": "Network Analyzer Recommender Admin",
      "Description": "Admin of Network Analyzer Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerCloudSqlAdmin",
      "RoleTitle": "Network Analyzer Cloud SQL Recommender Admin",
      "Description": "Admin of Network Analyzer Cloud SQL Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerCloudSqlViewer",
      "RoleTitle": "Network Analyzer Cloud SQL Recommender Viewer",
      "Description": "Viewer of Network Analyzer Cloud SQL Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerDynamicRouteAdmin",
      "RoleTitle": "Network Analyzer Dynamic Route Recommender Admin",
      "Description": "Admin of Network Analyzer Dynamic Route Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerDynamicRouteViewer",
      "RoleTitle": "Network Analyzer Dynamic Route Recommender Viewer",
      "Description": "Viewer of Network Analyzer Dynamic Route Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerGkeConnectivityAdmin",
      "RoleTitle": "Network Analyzer GKE Connectivity Recommender Admin",
      "Description": "Admin of Network Analyzer GKE Connectivity Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerGkeConnectivityViewer",
      "RoleTitle": "Network Analyzer GKE Connectivity Recommender Viewer",
      "Description": "Viewer of Network Analyzer GKE Connectivity Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerGkeIpAddressAdmin",
      "RoleTitle": "Network Analyzer GKE IP Address Recommender Admin",
      "Description": "Admin of Network Analyzer GKE IP Address Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerGkeIpAddressViewer",
      "RoleTitle": "Network Analyzer GKE IP Address Recommender Viewer",
      "Description": "Viewer of Network Analyzer GKE IP Address Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerGkeServiceAccountAdmin",
      "RoleTitle": "Network Analyzer GKE Service Account Insights Recommender Admin",
      "Description": "Admin of Network Analyzer GKE Service Account Insights Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerGkeServiceAccountViewer",
      "RoleTitle": "Network Analyzer GKE Service Account Insights Recommender Viewer",
      "Description": "Viewer of Network Analyzer GKE Service Account Insights Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerIpAddressAdmin",
      "RoleTitle": "Network Analyzer IP Address Recommender Admin",
      "Description": "Admin of Network Analyzer IP Address Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerIpAddressViewer",
      "RoleTitle": "Network Analyzer IP Address Recommender Viewer",
      "Description": "Viewer of Network Analyzer IP Address Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerLoadBalancerAdmin",
      "RoleTitle": "Network Analyzer Load Balancer Recommender Admin",
      "Description": "Admin of Network Analyzer Load Balancer Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerLoadBalancerViewer",
      "RoleTitle": "Network Analyzer Load Balancer Recommender Viewer",
      "Description": "Viewer of Network Analyzer Load Balancer Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerViewer",
      "RoleTitle": "Network Analyzer Recommender Viewer",
      "Description": "Viewer of Network Analyzer Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerVpcConnectivityAdmin",
      "RoleTitle": "Network Analyzer VPC Connectivity Recommender Admin",
      "Description": "Admin of Network Analyzer VPC Connectivity Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.networkAnalyzerVpcConnectivityViewer",
      "RoleTitle": "Network Analyzer VPC Connectivity Recommender Viewer",
      "Description": "Viewer of Network Analyzer VPC Connectivity Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.productSuggestionAdmin",
      "RoleTitle": "Product Suggestion Recommenders Admin",
      "Description": "Admin of all Product Suggestion insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.productSuggestionViewer",
      "RoleTitle": "Product Suggestion Recommenders Viewer",
      "Description": "Viewer of all Product Suggestion insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.projectCudAdmin",
      "RoleTitle": "Project Usage Commitment Recommender Admin",
      "Description": "Admin of Project Usage Commitment Recommender.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.projectCudViewer",
      "RoleTitle": "Project Usage Commitment Recommender Viewer",
      "Description": "Viewer of Project Usage Commitment Recommender.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.projectUtilAdmin",
      "RoleTitle": "Project Utilization Recommender Admin",
      "Description": "Admin of Project Utilization insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.projectUtilViewer",
      "RoleTitle": "Project Utilization Recommender Viewer",
      "Description": "Viewer of Project Utilization insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.recentChangeConfigAdmin",
      "RoleTitle": "RecentChange RecommenderConfig Admin",
      "Description": "Admin of RecentChange RecommenderConfigs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.recentchangeriskAdmin",
      "RoleTitle": "Recent Change Risk Recommender Admin",
      "Description": "Admin of Recent Change Risk Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.recentchangeriskViewer",
      "RoleTitle": "Recent Change Risk Recommender Viewer",
      "Description": "Viewer of Recent Change Risk Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.serviceLimitAdmin",
      "RoleTitle": "Service Limit Recommender Admin",
      "Description": "Admin of Service Limit insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.serviceLimitViewer",
      "RoleTitle": "Service Limit Recommender Viewer",
      "Description": "Viewer of Service Limit insights and recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.serviceaccntchangeriskAdmin",
      "RoleTitle": "Service Account Change Risk Recommender Admin",
      "Description": "Admin of Service Account Change Risk Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.serviceaccntchangeriskViewer",
      "RoleTitle": "Service Account Change Risk Recommender Viewer",
      "Description": "Viewer of Service Account Change Risk Insights and Recommendations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.ucsAdmin",
      "RoleTitle": "Spend Based Commitment Recommender Admin",
      "Description": "Admin of Spend Based Commitment Recommender.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.ucsViewer",
      "RoleTitle": "Spend Based Commitment Recommender Viewer",
      "Description": "Viewer of Spend Based Commitment Recommender.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/recommender.viewer",
      "RoleTitle": "Recommender Viewer",
      "Description": "Enables Get and List operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/redis.admin",
      "RoleTitle": "Cloud Memorystore Redis Admin",
      "Description": "Full access to Redis instances and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/redis.dbConnectionUser",
      "RoleTitle": "Cloud Memorystore Redis Db Connection User",
      "Description": "Access to connecting to Redis Server db.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/redis.editor",
      "RoleTitle": "Cloud Memorystore Redis Editor",
      "Description": "Read-Write access to Redis instances and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/redis.serviceAgent",
      "RoleTitle": "Cloud Memorystore Redis Service Agent",
      "Description": "Gives Cloud Memorystore Redis service account access to managed resource",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/redis.viewer",
      "RoleTitle": "Cloud Memorystore Redis Viewer",
      "Description": "Read-only access to Redis instances and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/redisenterprisecloud.admin",
      "RoleTitle": "Redis Enterprise Cloud Admin",
      "Description": "This role is managed by Redis Labs, not Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/redisenterprisecloud.viewer",
      "RoleTitle": "Redis Enterprise Cloud Viewer",
      "Description": "This role is managed by Redis Labs, not Google.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.actionCacheWriter",
      "RoleTitle": "Remote Build Execution Action Cache Writer",
      "Description": "Remote Build Execution Action Cache Writer",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.artifactAdmin",
      "RoleTitle": "Remote Build Execution Artifact Admin",
      "Description": "Remote Build Execution Artifact Admin",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.artifactCreator",
      "RoleTitle": "Remote Build Execution Artifact Creator",
      "Description": "Remote Build Execution Artifact Creator",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.artifactViewer",
      "RoleTitle": "Remote Build Execution Artifact Viewer",
      "Description": "Remote Build Execution Artifact Viewer",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.configurationAdmin",
      "RoleTitle": "Remote Build Execution Configuration Admin",
      "Description": "Remote Build Execution Configuration Admin",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.configurationViewer",
      "RoleTitle": "Remote Build Execution Configuration Viewer",
      "Description": "Remote Build Execution Configuration Viewer",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.logstreamWriter",
      "RoleTitle": "Remote Build Execution Logstream Writer",
      "Description": "Remote Build Execution Logstream Writer",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.reservationAdmin",
      "RoleTitle": "Remote Build Execution Reservation Admin",
      "Description": "Remote Build Execution Reservation Admin",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.serviceAgent",
      "RoleTitle": "Remote Build Execution Service Agent",
      "Description": "Gives Remote Build Execution service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/remotebuildexecution.worker",
      "RoleTitle": "Remote Build Execution Worker",
      "Description": "Remote Build Execution Worker",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.folderAdmin",
      "RoleTitle": "Folder Admin",
      "Description": "Access and administer a folder and all of its sub-resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.folderCreator",
      "RoleTitle": "Folder Creator",
      "Description": "Create folder and view all of its sub-resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.folderEditor",
      "RoleTitle": "Folder Editor",
      "Description": "Edit, delete, and undelete a folder and all of its child resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.folderIamAdmin",
      "RoleTitle": "Folder IAM Admin",
      "Description": "Access and administer a folder IAM policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.folderMover",
      "RoleTitle": "Folder Mover",
      "Description": "Move a folder and all of its child resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.folderViewer",
      "RoleTitle": "Folder Viewer",
      "Description": "Access to view a folder and all of its child resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.lienModifier",
      "RoleTitle": "Project Lien Modifier",
      "Description": "Access to modify Liens on projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.organizationAdmin",
      "RoleTitle": "Organization Administrator",
      "Description": "Access to manage IAM policies and view organization policies for organizations, folders, and projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.organizationViewer",
      "RoleTitle": "Organization Viewer",
      "Description": "Access only to view an Organization.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.projectCreator",
      "RoleTitle": "Project Creator",
      "Description": "Access to create new GCP projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.projectDeleter",
      "RoleTitle": "Project Deleter",
      "Description": "Access to delete GCP projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.projectIamAdmin",
      "RoleTitle": "Project IAM Admin",
      "Description": "Access and administer a project IAM policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.projectMover",
      "RoleTitle": "Project Mover",
      "Description": "Access to update and move a project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.tagAdmin",
      "RoleTitle": "Tag Administrator",
      "Description": "Access to create, delete, update, and manage access to Tags",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.tagHoldAdmin",
      "RoleTitle": "Tag Hold Administrator",
      "Description": "Access to create, delete and list TagHolds under a TagValue",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.tagUser",
      "RoleTitle": "Tag User",
      "Description": "Access to list Tags and manage their associations with resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcemanager.tagViewer",
      "RoleTitle": "Tag Viewer",
      "Description": "Access to list Tags and their associations with resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcesettings.admin",
      "RoleTitle": "Resource Settings Administrator",
      "Description": "Provides admin capabilities to set Resource Setting Values on resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/resourcesettings.viewer",
      "RoleTitle": "Resource Settings Viewer",
      "Description": "Provides capabilities to view Resource Settings and Resource Setting Values on resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/retail.admin",
      "RoleTitle": "Retail Admin",
      "Description": "Full access to Retail api resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/retail.editor",
      "RoleTitle": "Retail Editor",
      "Description": "Full access to Retail api resources except purge, rejoin, and setSponsorship.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/retail.serviceAgent",
      "RoleTitle": "Retail Service Agent",
      "Description": "Retail service uploads product feeds and user events from Cloud Storage and BigQuery, reports results to the customer Cloud Storage bucket, writes logs to customer projects, and writes and reads Stackdriver metrics for customer projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/retail.viewer",
      "RoleTitle": "Retail Viewer",
      "Description": "Grants access to read all resources in Retail.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/riscconfigs.admin",
      "RoleTitle": "RISC Configuration Admin",
      "Description": "Read/write access to RISC config resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/riscconfigs.viewer",
      "RoleTitle": "RISC Configuration Viewer",
      "Description": "Read-only access to RISC config resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/riskmanager.admin",
      "RoleTitle": "Risk Manager Admin",
      "Description": "Grants all Risk Manager permissions",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/riskmanager.editor",
      "RoleTitle": "Risk Manager Editor",
      "Description": "Access to edit Risk Manager resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/riskmanager.reviewer",
      "RoleTitle": "Risk Manager Report Reviewer",
      "Description": "Access to review Risk Manager reports",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/riskmanager.serviceAgent",
      "RoleTitle": "Risk Manager Service Agent",
      "Description": "Service agent that grants Risk Manager service access to fetch findings for generating Reports",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/riskmanager.viewer",
      "RoleTitle": "Risk Manager Viewer",
      "Description": "Access to view Risk Manager resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/rma.admin",
      "RoleTitle": "Rapid Migration Assessment Admin",
      "Description": "Full access to Rapid Migration Assessment all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/rma.runner",
      "RoleTitle": "Rapid Migration Assessment Runner",
      "Description": "Update and Read access to Rapid Migration Assessment all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/rma.viewer",
      "RoleTitle": "Rapid Migration Assessment Viewer",
      "Description": "Read-only access to Rapid Migration Assessment all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/routeoptimization.editor",
      "RoleTitle": "Route Optimization Editor",
      "Description": "This role can create long-running operations via BatchOptimizeTours.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/routeoptimization.serviceAgent",
      "RoleTitle": "Route Optimization Service Agent",
      "Description": "Grants Route Optimization Service Account access to read and write GCS objects in the host project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/routeoptimization.viewer",
      "RoleTitle": "Route Optimization Viewer",
      "Description": "This role can view any long-running Operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/run.admin",
      "RoleTitle": "Cloud Run Admin",
      "Description": "Full control over all Cloud Run resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/run.developer",
      "RoleTitle": "Cloud Run Developer",
      "Description": "Read and write access to all Cloud Run resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/run.invoker",
      "RoleTitle": "Cloud Run Invoker",
      "Description": "Can invoke a Cloud Run service.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/run.serviceAgent",
      "RoleTitle": "Cloud Run Service Agent",
      "Description": "Gives Cloud Run service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/run.sourceDeveloper",
      "RoleTitle": "Cloud Run Source Developer",
      "Description": "Deploy and manage Cloud Run source deployed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/run.sourceViewer",
      "RoleTitle": "Cloud Run Source Viewer",
      "Description": "View Cloud Run source deployed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/run.viewer",
      "RoleTitle": "Cloud Run Viewer",
      "Description": "Can view the state of all Cloud Run resources, including IAM policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/runapps.developer",
      "RoleTitle": "Serverless Integrations Developer",
      "Description": "Access to create and change Serverless Integrations and their configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/runapps.operator",
      "RoleTitle": "Serverless Integrations Operator",
      "Description": "Access to deploy Serverless Integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/runapps.serviceAgent",
      "RoleTitle": "Serverless Integrations Service Agent",
      "Description": "Gives Serverless Integrations Service Account access to customer project resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/runapps.viewer",
      "RoleTitle": "Serverless Integrations Viewer",
      "Description": "Readonly access to Serverless Integrations resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/runtimeconfig.admin",
      "RoleTitle": "Cloud RuntimeConfig Admin",
      "Description": "Full access to RuntimeConfig resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/seclm.serviceAgent",
      "RoleTitle": "SecLM Service Agent",
      "Description": "Service agent used by SecLM to access resources used by SecLM Workbenches.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/secretmanager.admin",
      "RoleTitle": "Secret Manager Admin",
      "Description": "Full access to administer Secret Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/secretmanager.secretAccessor",
      "RoleTitle": "Secret Manager Secret Accessor",
      "Description": "Allows accessing the payload of secrets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/secretmanager.secretVersionAdder",
      "RoleTitle": "Secret Manager Secret Version Adder",
      "Description": "Allows adding versions to existing secrets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/secretmanager.secretVersionManager",
      "RoleTitle": "Secret Manager Secret Version Manager",
      "Description": "Allows creating and managing versions of existing secrets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/secretmanager.viewer",
      "RoleTitle": "Secret Manager Viewer",
      "Description": "Allows viewing metadata of all Secret Manager resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securedlandingzone.bqdwOrgRemediator",
      "RoleTitle": "SLZ BQDW Blueprint Organization Level Remediator",
      "Description": "Access to modify (remediate) resources in SLZ BQDW Blueprint at Organization.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securedlandingzone.bqdwProjectRemediator",
      "RoleTitle": "SLZ BQDW Blueprint Project Level Remediator",
      "Description": "Access to modify (remediate) resources in SLZ BQDW Blueprint at Project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securedlandingzone.overwatchActivator",
      "RoleTitle": "Overwatch Activator",
      "Description": "This role can activate or suspend Overwatches",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securedlandingzone.overwatchAdmin",
      "RoleTitle": "Overwatch Admin",
      "Description": "Full access to Overwatches",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securedlandingzone.overwatchViewer",
      "RoleTitle": "Overwatch Viewer",
      "Description": "This role can view all properties of Overwatches",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securedlandingzone.serviceAgent",
      "RoleTitle": "Secured Landing Zone Service Agent",
      "Description": "Grants Secured Landing Zone service account permissions to manage resources in the customer project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.admin",
      "RoleTitle": "Secure Source Manager Admin",
      "Description": "Full access to all Secure Source Manager resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.instanceAccessor",
      "RoleTitle": "Secure Source Manager Instance Accessor",
      "Description": "An instance accessor can access an instance, but not necessarily create resources in the instance.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.instanceManager",
      "RoleTitle": "Secure Source Manager Instance Manager",
      "Description": "Read-write access to all Secure Source Manager resources (full control except for the ability to modify permissions).",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.instanceOwner",
      "RoleTitle": "Secure Source Manager Instance Owner",
      "Description": "Full control over Secure Source Manager instances, including listing, creating, and deleting them. Also enables instance user management.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.instanceRepositoryCreator",
      "RoleTitle": "Secure Source Manager Instance Repository Creator",
      "Description": "An instance repository creator can connect to a Cloud Git instance via IAP (HTTPS) and create repositories in the instance.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.repoAdmin",
      "RoleTitle": "Secure Source Manager Repository Admin",
      "Description": "A repoAdmin has the ability to CRUD a repository and its children as well as assign users to a repository. They can also set, get, or check IAM policies on the repository.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.repoCreator",
      "RoleTitle": "Secure Source Manager Repository Creator",
      "Description": "A repoCreator has access to create repostiory in a project, the creator will then become the repoAdmin on this repository.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.repoReader",
      "RoleTitle": "Secure Source Manager Repository Reader",
      "Description": "A repoReader has read access to a particular repository, including its child components. They cannot create repositories, and do not manage IAM policies on the repository.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.repoWriter",
      "RoleTitle": "Secure Source Manager Repository Writer",
      "Description": "A repoWriter has read/write access to a particular repository, including its child components. They cannot create repositories, and do not manage IAM policies on the repository.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.serviceAgent",
      "RoleTitle": "Secure Source Manager Service Agent",
      "Description": "Gives Secure Source Manager service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securesourcemanager.sshKeyUser",
      "RoleTitle": "Secure Source Manager SSH Key User",
      "Description": "An sshKeyUser can create SSH keys for themselves and list/delete SSH keys they own.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.admin",
      "RoleTitle": "Security Center Admin",
      "Description": "Admin(super user) access to security center",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.adminEditor",
      "RoleTitle": "Security Center Admin Editor",
      "Description": "Admin Read-write access to security center",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.adminViewer",
      "RoleTitle": "Security Center Admin Viewer",
      "Description": "Admin Read access to security center",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.assetSecurityMarksWriter",
      "RoleTitle": "Security Center Asset Security Marks Writer",
      "Description": "Write access to asset security marks",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.assetsDiscoveryRunner",
      "RoleTitle": "Security Center Assets Discovery Runner",
      "Description": "Run asset discovery access to assets",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.assetsViewer",
      "RoleTitle": "Security Center Assets Viewer",
      "Description": "Read access to assets",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.attackPathsViewer",
      "RoleTitle": "Security Center Attack Paths Reader",
      "Description": "Read access to security center attack paths",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.attackSurfaceManagementScannerServiceAgent",
      "RoleTitle": "Attack Surface Management Scanner Service Agent",
      "Description": "Gives Mandiant Attack Surface Management the ability to scan Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.automationServiceAgent",
      "RoleTitle": "Security Center Automation Service Agent",
      "Description": "Security Center automation service agent can configure GCP resources to enable security scanning.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.bigQueryExportsEditor",
      "RoleTitle": "Security Center BigQuery Exports Editor",
      "Description": "Read-Write access to security center BigQuery Exports",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.bigQueryExportsViewer",
      "RoleTitle": "Security Center BigQuery Exports Viewer",
      "Description": "Read access to security center BigQuery Exports",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.complianceReportsViewer",
      "RoleTitle": "Security Center Compliance Reports Viewer",
      "Description": "Read access to security center compliance reports",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.complianceSnapshotsViewer",
      "RoleTitle": "Security Center Compliance Snapshots Viewer",
      "Description": "Read access to security center compliance snapshots",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.controlServiceAgent",
      "RoleTitle": "Security Center Control Service Agent",
      "Description": "Security Center Control service agent can monitor and configure GCP resources and import security findings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.externalSystemsEditor",
      "RoleTitle": "Security Center External Systems Editor",
      "Description": "Write access to security center external systems",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.findingSecurityMarksWriter",
      "RoleTitle": "Security Center Finding Security Marks Writer",
      "Description": "Write access to finding security marks",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.findingsBulkMuteEditor",
      "RoleTitle": "Security Center Findings Bulk Mute Editor",
      "Description": "Ability to mute findings in bulk",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.findingsEditor",
      "RoleTitle": "Security Center Findings Editor",
      "Description": "Read-write access to findings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.findingsMuteSetter",
      "RoleTitle": "Security Center Findings Mute Setter",
      "Description": "Set mute access to findings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.findingsStateSetter",
      "RoleTitle": "Security Center Findings State Setter",
      "Description": "Set state access to findings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.findingsViewer",
      "RoleTitle": "Security Center Findings Viewer",
      "Description": "Read access to findings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.findingsWorkflowStateSetter",
      "RoleTitle": "Security Center Findings Workflow State Setter",
      "Description": "Set workflow state access to findings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.integrationExecutorServiceAgent",
      "RoleTitle": "Security Center Integration Executor Service Agent",
      "Description": "Gives Security Center access to execute Integrations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.muteConfigsEditor",
      "RoleTitle": "Security Center Mute Configurations Editor",
      "Description": "Read-Write access to security center mute configurations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.muteConfigsViewer",
      "RoleTitle": "Security Center Mute Configurations Viewer",
      "Description": "Read access to security center mute configurations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.notificationConfigEditor",
      "RoleTitle": "Security Center Notification Configurations Editor",
      "Description": "Write access to notification configurations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.notificationConfigViewer",
      "RoleTitle": "Security Center Notification Configurations Viewer",
      "Description": "Read access to notification configurations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.notificationServiceAgent",
      "RoleTitle": "Security Center Notification Service Agent",
      "Description": "Security Center service agent can publish notifications to Pub/Sub topics.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.resourceValueConfigsEditor",
      "RoleTitle": "Security Center Resource Value Configurations Editor",
      "Description": "Read-Write access to security center resource value configurations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.resourceValueConfigsViewer",
      "RoleTitle": "Security Center Resource Value Configurations Viewer",
      "Description": "Read access to security center resource value configurations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.securityHealthAnalyticsCustomModulesTester",
      "RoleTitle": "Security Health Analytics Custom Modules Tester",
      "Description": "Test access to Security Health Analytics Custom Modules",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.securityHealthAnalyticsServiceAgent",
      "RoleTitle": "Security Health Analytics Service Agent",
      "Description": "Security Health Analytics service agent can scan GCP resource metadata to find security vulnerabilities.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.securityResponseServiceAgent",
      "RoleTitle": "Google Cloud Security Response Service Agent",
      "Description": "Gives Playbook Runner permissions to execute all Google authored Playbooks. This role will keep evolving as we add more playbooks",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.serviceAgent",
      "RoleTitle": "Security Center Service Agent",
      "Description": "Security Center service agent can scan GCP resources and import security scans.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.settingsAdmin",
      "RoleTitle": "Security Center Settings Admin",
      "Description": "Admin(super user) access to security center settings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.settingsEditor",
      "RoleTitle": "Security Center Settings Editor",
      "Description": "Read-Write access to security center settings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.settingsViewer",
      "RoleTitle": "Security Center Settings Viewer",
      "Description": "Read access to security center settings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.simulationsViewer",
      "RoleTitle": "Security Center Simulations Reader",
      "Description": "Read access to security center simulations",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.sourcesAdmin",
      "RoleTitle": "Security Center Sources Admin",
      "Description": "Admin access to sources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.sourcesEditor",
      "RoleTitle": "Security Center Sources Editor",
      "Description": "Read-write access to sources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.sourcesViewer",
      "RoleTitle": "Security Center Sources Viewer",
      "Description": "Read access to sources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycenter.valuedResourcesViewer",
      "RoleTitle": "Security Center Valued Resources Reader",
      "Description": "Read access to security center valued resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.admin",
      "RoleTitle": "Security Center Management Admin",
      "Description": "Full access to manage Cloud Security Command Center services and custom modules configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.customModulesEditor",
      "RoleTitle": "Security Center Management Custom Modules Editor",
      "Description": "Full access to manage Cloud Security Command Center custom modules.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.customModulesViewer",
      "RoleTitle": "Security Center Management Custom Modules Viewer",
      "Description": "Readonly access to Cloud Security Command Center custom modules.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.etdCustomModulesEditor",
      "RoleTitle": "Security Center Management Custom ETD Modules Editor",
      "Description": "Full access to manage Cloud Security Command Center ETD custom modules.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.etdCustomModulesViewer",
      "RoleTitle": "Security Center Management ETD Custom Modules Viewer",
      "Description": "Readonly access to Cloud Security Command Center ETD custom modules.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.securityCenterServicesEditor",
      "RoleTitle": "Security Center Management Services Editor",
      "Description": "Full access to manage Cloud Security Command Center services configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.securityCenterServicesViewer",
      "RoleTitle": "Security Center Management Services Viewer",
      "Description": "Readonly access to Cloud Security Command Center services configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.settingsEditor",
      "RoleTitle": "Security Center Management Settings Editor",
      "Description": "Full access to manage Cloud Security Command Center settings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.settingsViewer",
      "RoleTitle": "Security Center Management Settings Viewer",
      "Description": "Readonly access to Cloud Security Command Center settings",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.shaCustomModulesEditor",
      "RoleTitle": "Security Center Management SHA Custom Modules Editor",
      "Description": "Full access to manage Cloud Security Command Center SHA custom modules.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.shaCustomModulesViewer",
      "RoleTitle": "Security Center Management SHA Custom Modules Viewer",
      "Description": "Readonly access to Cloud Security Command Center SHA custom modules.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securitycentermanagement.viewer",
      "RoleTitle": "Security Center Management Viewer",
      "Description": "Readonly access to Cloud Security Command Center services and custom modules configuration.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securityposture.admin",
      "RoleTitle": "Security Posture Admin",
      "Description": "Full access to Security Posture service APIs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securityposture.postureDeployer",
      "RoleTitle": "Security Posture Deployer",
      "Description": "Mutate and read permissions to the Posture Deployment resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securityposture.postureDeploymentsViewer",
      "RoleTitle": "Security Posture Deployments Viewer",
      "Description": "Read only access to the Posture Deployment resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securityposture.postureEditor",
      "RoleTitle": "Security Posture Resource Editor",
      "Description": "Mutate and read permissions to the Posture resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securityposture.postureViewer",
      "RoleTitle": "Security Posture Resource Viewer",
      "Description": "Read only access to the Posture resource.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securityposture.reportCreator",
      "RoleTitle": "Security Posture Shift-Left Validator",
      "Description": "Create access for Reports, e.g. IaC Validation Report.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/securityposture.viewer",
      "RoleTitle": "Security Posture Viewer",
      "Description": "Read only access to all the SecurityPosture Service resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/serverless.serviceAgent",
      "RoleTitle": "Cloud Run Service Agent",
      "Description": "Gives Cloud Run service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicebroker.admin",
      "RoleTitle": "Service Broker Admin",
      "Description": "Full access to ServiceBroker resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicebroker.operator",
      "RoleTitle": "Service Broker Operator",
      "Description": "Operational access to the ServiceBroker resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/serviceconsumermanagement.tenancyUnitsAdmin",
      "RoleTitle": "Admin of Tenancy Units",
      "Description": "Administrate tenancy units",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/serviceconsumermanagement.tenancyUnitsViewer",
      "RoleTitle": "Viewer of Tenancy Units",
      "Description": "View tenancy units",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicedirectory.admin",
      "RoleTitle": "Service Directory Admin",
      "Description": "Full control of all Service Directory resources and permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicedirectory.editor",
      "RoleTitle": "Service Directory Editor",
      "Description": "Edit Service Directory resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicedirectory.networkAttacher",
      "RoleTitle": "Service Directory Network Attacher",
      "Description": "Gives access to attach VPC Networks to Service Directory Endpoints",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicedirectory.pscAuthorizedService",
      "RoleTitle": "Private Service Connect Authorized Service",
      "Description": "Gives access to VPC Networks via Service Directory",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicedirectory.serviceAgent",
      "RoleTitle": "Service Directory Service Agent",
      "Description": "Give the Service Directory service agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicedirectory.viewer",
      "RoleTitle": "Service Directory Viewer",
      "Description": "View Service Directory resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicehealth.viewer",
      "RoleTitle": "Personalized Service Health Viewer",
      "Description": "Readonly access to Personalized Service Health resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicemanagement.admin",
      "RoleTitle": "Service Management Administrator",
      "Description": "Full control of Google Service Management resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicemanagement.configEditor",
      "RoleTitle": "Service Config Editor",
      "Description": "Access to update the service config and create rollouts.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicemanagement.quotaAdmin",
      "RoleTitle": "Quota Administrator",
      "Description": "Access to administer service quotas.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicemanagement.quotaViewer",
      "RoleTitle": "Quota Viewer",
      "Description": "Access to view service quotas.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicemanagement.reporter",
      "RoleTitle": "Service Reporter",
      "Description": "Can report usage of a service during runtime.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicemanagement.serviceConsumer",
      "RoleTitle": "Service Consumer",
      "Description": "Can enable the service.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicemanagement.serviceController",
      "RoleTitle": "Service Controller",
      "Description": "Can check preconditions and report usage of a service during runtime.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicenetworking.networksAdmin",
      "RoleTitle": "Service Networking Admin",
      "Description": "Full control of service networking with projects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicenetworking.serviceAgent",
      "RoleTitle": "Service Networking Service Agent",
      "Description": "Gives permission to manage network configuration, such as establishing network peering, necessary for service producers",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/servicesecurityinsights.securityInsightsViewer",
      "RoleTitle": "Security Insights Viewer",
      "Description": "Read-only access to Security Insights resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/serviceusage.apiKeysAdmin",
      "RoleTitle": "API Keys Admin",
      "Description": "Ability to create, delete, update, get and list API keys for a project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/serviceusage.apiKeysViewer",
      "RoleTitle": "API Keys Viewer",
      "Description": "Ability to get and list API keys for a project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/serviceusage.serviceUsageAdmin",
      "RoleTitle": "Service Usage Admin",
      "Description": "Ability to enable, disable, and inspect service states, inspect operations, and consume quota and billing for a consumer project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/serviceusage.serviceUsageConsumer",
      "RoleTitle": "Service Usage Consumer",
      "Description": "Ability to inspect service states and operations, and consume quota and billing for a consumer project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/serviceusage.serviceUsageViewer",
      "RoleTitle": "Service Usage Viewer",
      "Description": "Ability to inspect service states and operations for a consumer project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/source.admin",
      "RoleTitle": "Source Repository Administrator",
      "Description": "Admin access to repositories",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/source.reader",
      "RoleTitle": "Source Repository Reader",
      "Description": "Read access to repositories",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/source.writer",
      "RoleTitle": "Source Repository Writer",
      "Description": "Read / Write access to repositories",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/sourcerepo.serviceAgent",
      "RoleTitle": "Cloud Source Repositories Service Agent",
      "Description": "Allow Cloud Source Repositories to integrate with other Cloud services.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.admin",
      "RoleTitle": "Cloud Spanner Admin",
      "Description": "Full control of Cloud Spanner resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.backupAdmin",
      "RoleTitle": "Cloud Spanner Backup Admin",
      "Description": "Administrator role to manage Cloud Spanner backups. Does not include permissions to restore from Cloud Spanner backups.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.backupWriter",
      "RoleTitle": "Cloud Spanner Backup Writer",
      "Description": "Role with limited permissions to create and manage Cloud Spanner backups. Does not have permission to modify backups.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.databaseAdmin",
      "RoleTitle": "Cloud Spanner Database Admin",
      "Description": "Full control of Cloud Spanner databases.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.databaseReader",
      "RoleTitle": "Cloud Spanner Database Reader",
      "Description": "Access to read and/or query a Cloud Spanner database.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.databaseRoleUser",
      "RoleTitle": "Cloud Spanner Database Role User",
      "Description": "In conjunction with the IAM role Cloud Spanner Fine-grained Access User, grants permissions to individual Spanner database roles. Add a condition for each desired Spanner database role that includes the resource type of `spanner.googleapis.com/DatabaseRole` and the resource name ending with `/<your Spanner database role>`.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.databaseUser",
      "RoleTitle": "Cloud Spanner Database User",
      "Description": "Access to read, query, write and view and change the schema of Cloud Spanner databases",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.fineGrainedAccessUser",
      "RoleTitle": "Cloud Spanner Fine-grained Access User",
      "Description": "Grants permissions to use Spanner's fine-grained access control framework. To grant access to specific database roles, also add the Cloud Spanner Database Role User IAM role and its necessary conditions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.restoreAdmin",
      "RoleTitle": "Cloud Spanner Restore Admin",
      "Description": "Administrator role to restore Cloud Spanner databases from Cloud Spanner backups.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.serviceAgent",
      "RoleTitle": "Cloud Spanner API Service Agent",
      "Description": "Cloud Spanner API Service Agent",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spanner.viewer",
      "RoleTitle": "Cloud Spanner Viewer",
      "Description": "Viewer access to Cloud Spanner resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/speakerid.admin",
      "RoleTitle": "Speaker ID Admin",
      "Description": "Grants full access to all Speaker ID resources, including project settings.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/speakerid.editor",
      "RoleTitle": "Speaker ID Editor",
      "Description": "Grants access to read and write all Speaker ID resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/speakerid.verifier",
      "RoleTitle": "Speaker ID Verifier",
      "Description": "Grants read access to all Speaker ID resources, and allows verification.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/speakerid.viewer",
      "RoleTitle": "Speaker ID Viewer",
      "Description": "Grants read access to all Speaker ID resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/spectrumsas.serviceAgent",
      "RoleTitle": "Spectrum SAS Service Agent",
      "Description": "Gives Spectrum SAS Service Account access to enable analytics on behalf of users.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/speech.admin",
      "RoleTitle": "Cloud Speech Administrator",
      "Description": "Grants full access to all resources in Speech-to-text",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/speech.client",
      "RoleTitle": "Cloud Speech Client",
      "Description": "Grants access to the recognition APIs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/speech.editor",
      "RoleTitle": "Cloud Speech Editor",
      "Description": "Grants access to edit resources in Speech-to-text",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/speech.serviceAgent",
      "RoleTitle": "Cloud Speech-to-Text Service Agent",
      "Description": "Gives Speech-to-Text service account access to GCS resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stackdriver.accounts.editor",
      "RoleTitle": "Stackdriver Accounts Editor",
      "Description": "Read/write access to manage Stackdriver account structure.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stackdriver.accounts.viewer",
      "RoleTitle": "Stackdriver Accounts Viewer",
      "Description": "Read-only access to get and list information about Stackdriver account structure.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stackdriver.resourceMetadata.writer",
      "RoleTitle": "Stackdriver Resource Metadata Writer",
      "Description": "Write-only access to resource metadata.  This provides exactly the permissions needed by the Stackdriver metadata agent and other systems that send metadata.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.admin",
      "RoleTitle": "Storage Admin",
      "Description": "Grants full control of buckets and objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.folderAdmin",
      "RoleTitle": "Storage Folder Admin",
      "Description": "Grants full control over folders and objects, including listing, creating, viewing, and deleting objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.hmacKeyAdmin",
      "RoleTitle": "Storage HMAC Key Admin",
      "Description": "Grants full control over HMAC keys in a project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.insightsCollectorService",
      "RoleTitle": "Storage Insights Collector Service",
      "Description": "Grants read access to object metadata in inventory reports.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.legacyBucketOwner",
      "RoleTitle": "Storage Legacy Bucket Owner",
      "Description": "Grants permission to create, replace, and delete objects; list objects in a bucket; create, delete, and list tag bindings; read object metadata when listing (excluding IAM policies); and read and edit bucket metadata, including IAM policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.legacyBucketReader",
      "RoleTitle": "Storage Legacy Bucket Reader",
      "Description": "Grants permission to list a bucket's contents and read bucket metadata, excluding IAM policies. Also grants permission to read object metadata when listing objects (excluding IAM policies).",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.legacyBucketWriter",
      "RoleTitle": "Storage Legacy Bucket Writer",
      "Description": "Grants permission to create, replace, and delete objects; list objects in a bucket; read object metadata when listing (excluding IAM policies); and read bucket metadata, excluding IAM policies.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.legacyObjectOwner",
      "RoleTitle": "Storage Legacy Object Owner",
      "Description": "Grants permission to view and edit objects and their metadata, including ACLs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.legacyObjectReader",
      "RoleTitle": "Storage Legacy Object Reader",
      "Description": "Grants permission to view objects and their metadata, excluding ACLs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.objectAdmin",
      "RoleTitle": "Storage Object Admin",
      "Description": "Grants full control over objects, including listing, creating, viewing, and deleting objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.objectCreator",
      "RoleTitle": "Storage Object Creator",
      "Description": "Allows users to create objects. Does not give permission to view, delete, or replace objects.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.objectUser",
      "RoleTitle": "Storage Object User",
      "Description": "Access to create, read, update and delete objects and multipart uploads in GCS.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storage.objectViewer",
      "RoleTitle": "Storage Object Viewer",
      "Description": "Grants access to view objects and their metadata, excluding ACLs. Can also list the objects in a bucket.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storageinsights.admin",
      "RoleTitle": "Storage Insights Admin",
      "Description": "Full access to Storage Insights resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storageinsights.analyst",
      "RoleTitle": "Storage Insights Analyst",
      "Description": "Data access to Storage Insights.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storageinsights.serviceAgent",
      "RoleTitle": "StorageInsights Service Agent",
      "Description": "Permissions for Insights to write reports into customer project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storageinsights.viewer",
      "RoleTitle": "Storage Insights Viewer",
      "Description": "Readonly access to Storage Insights resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storagetransfer.admin",
      "RoleTitle": "Storage Transfer Admin",
      "Description": "Create, update and manage transfer jobs and operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storagetransfer.serviceAgent",
      "RoleTitle": "Storage Transfer Service Agent",
      "Description": "Grants Storage Transfer Service Agent permissions required to run transfers",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storagetransfer.transferAgent",
      "RoleTitle": "Storage Transfer Agent",
      "Description": "Perform transfers from an agent.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storagetransfer.user",
      "RoleTitle": "Storage Transfer User",
      "Description": "Create and update storage transfer jobs and operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/storagetransfer.viewer",
      "RoleTitle": "Storage Transfer Viewer",
      "Description": "Read access to storage transfer jobs and operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stream.admin",
      "RoleTitle": "Stream Admin",
      "Description": "Full access to Stream all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stream.contentAdmin",
      "RoleTitle": "Stream Content Admin",
      "Description": "Full access to all StreamContent resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stream.contentBuilder",
      "RoleTitle": "Stream Content Builder",
      "Description": "Read and build access to StreamContent resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stream.instanceAdmin",
      "RoleTitle": "Stream Instance Admin",
      "Description": "Full access to all StreamInstance resources and Read access to all StreamContent resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stream.serviceAgent",
      "RoleTitle": "Stream Service Agent",
      "Description": "Gives Immersive Stream for XR access to the required resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/stream.viewer",
      "RoleTitle": "Stream Viewer",
      "Description": "Read-only access to Stream all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/subscribewithgoogledeveloper.developer",
      "RoleTitle": "Subscribe with Google Developer",
      "Description": "Access DevTools for Subscribe with Google",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/telcoautomation.admin",
      "RoleTitle": "Telco Automation Admin",
      "Description": "Full access to Telco Automation resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/telcoautomation.blueprintDesigner",
      "RoleTitle": "Telco Automation Blueprint Designer",
      "Description": "Ability to manage blueprints",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/telcoautomation.deploymentAdmin",
      "RoleTitle": "Telco Automation Deployment Admin",
      "Description": "Ability to manage deployments",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/telcoautomation.opsAdminTier1",
      "RoleTitle": "Telco Automation Tier 1 Operations Admin",
      "Description": "Ability to get status of deployments",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/telcoautomation.opsAdminTier4",
      "RoleTitle": "Telco Automation Tier 4 Operations Admin",
      "Description": "Ability to manage deployments and their status",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/telcoautomation.serviceOrchestrator",
      "RoleTitle": "Telco Automation Service Orchestrator",
      "Description": "Ability to manage deployments",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/timeseriesinsights.datasetsEditor",
      "RoleTitle": "Timeseries Insights DataSet Editor",
      "Description": "Edit access to DataSets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/timeseriesinsights.datasetsOwner",
      "RoleTitle": "Timeseries Insights DataSet Owner",
      "Description": "Full access to DataSets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/timeseriesinsights.datasetsViewer",
      "RoleTitle": "Timeseries Insights DataSet Viewer",
      "Description": "Read-only access (List and Query) to DataSets.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/tpu.admin",
      "RoleTitle": "TPU Admin",
      "Description": "Full access to TPU nodes and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/tpu.serviceAgent",
      "RoleTitle": "Cloud TPU API Service Agent",
      "Description": "Give Cloud TPUs service account access to managed resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/tpu.viewer",
      "RoleTitle": "TPU Viewer",
      "Description": "Read-only access to TPU nodes and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/tpu.xpnAgent",
      "RoleTitle": "TPU Shared VPC Agent",
      "Description": "Can use shared VPC network (XPN) for the TPU VMs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/trafficdirector.client",
      "RoleTitle": "Traffic Director Client",
      "Description": "Traffic Director Client to fetch service configurations and report metrics",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/transcoder.admin",
      "RoleTitle": "Transcoder Admin",
      "Description": "Full access to all transcoder resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/transcoder.serviceAgent",
      "RoleTitle": "Transcoder Service Agent",
      "Description": "Downloads and uploads media files from and to customer GCS buckets. Publishes status updates to customer Pub/Sub.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/transcoder.viewer",
      "RoleTitle": "Transcoder Viewer",
      "Description": "Viewer of all transcoder resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/transferappliance.admin",
      "RoleTitle": "Transfer Appliance Admin",
      "Description": "Full access to Transfer Appliance all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/transferappliance.viewer",
      "RoleTitle": "Transfer Appliance Viewer",
      "Description": "Read-only access to Transfer Appliance all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/translationhub.admin",
      "RoleTitle": "Translation Hub Admin",
      "Description": "Admin of Translation Hub",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/translationhub.portalUser",
      "RoleTitle": "Translation Hub Portal User",
      "Description": "Portal user of Translation Hub",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/videostitcher.admin",
      "RoleTitle": "Video Stitcher Admin",
      "Description": "Full access to all video stitcher resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/videostitcher.user",
      "RoleTitle": "Video Stitcher User",
      "Description": "Full access to video stitcher sessions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/videostitcher.viewer",
      "RoleTitle": "Video Stitcher Viewer",
      "Description": "Read-only access to video stitcher resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/viewer",
      "RoleTitle": "Viewer",
      "Description": "View most Google Cloud resources. See the list of included permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.admin",
      "RoleTitle": "VisionAI Admin",
      "Description": "Full access to Vision AI all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.analysisEditor",
      "RoleTitle": "Vision AI Analysis Editor",
      "Description": "Access to read and write Vision AI Analyses.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.analysisViewer",
      "RoleTitle": "Vision AI Analysis Viewer",
      "Description": "Access to read Vision AI Analyses.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.annotationEditor",
      "RoleTitle": "VisionAI Warehouse Annotation Editor",
      "Description": "Grants access to edit media asset annotations into the Warehouse.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.annotationViewer",
      "RoleTitle": "VisionAI Warehouse Annotation Viewer",
      "Description": "Grants access to view media asset annotations into the Warehouse.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.applicationEditor",
      "RoleTitle": "Vision AI Application Editor",
      "Description": "Access to read and write Vision AI Applications.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.applicationViewer",
      "RoleTitle": "Vision AI Application Viewer",
      "Description": "Access to read Vision AI Applications.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.assetCreator",
      "RoleTitle": "VisionAI Warehouse Asset Creator",
      "Description": "Grants access to ingest media assets into the Warehouse.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.assetEditor",
      "RoleTitle": "VisionAI Warehouse Asset Editor",
      "Description": "Grants access to edit media assets into the Warehouse.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.assetViewer",
      "RoleTitle": "VisionAI Warehouse Asset Viewer",
      "Description": "Grants access to view media assets into the Warehouse.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.clusterEditor",
      "RoleTitle": "Vision AI Cluster Editor",
      "Description": "Access to read and write Vision AI Cluster.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.clusterViewer",
      "RoleTitle": "Vision AI Cluster Viewer",
      "Description": "Access to read Vision AI Clusters.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.corpusAdmin",
      "RoleTitle": "VisionAI Warehouse Corpus Administrator",
      "Description": "Full control to everything in a corpus including corpus access control.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.corpusEditor",
      "RoleTitle": "VisionAI Warehouse Corpus Editor",
      "Description": "Read-write access to everything in a corpus.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.corpusViewer",
      "RoleTitle": "VisionAI Warehouse Corpus Viewer",
      "Description": "Grants access to view everything in a corpus.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.corpusWriter",
      "RoleTitle": "VisionAI Warehouse Corpus Writer",
      "Description": "Grants access to create/update/delete everything in a corpus.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.editor",
      "RoleTitle": "VisionAI Editor",
      "Description": "Edit access to Vision AI all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.eventEditor",
      "RoleTitle": "Vision AI Event Editor",
      "Description": "Access to read and write Vision AI Events.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.eventViewer",
      "RoleTitle": "Vision AI Event Viewer",
      "Description": "Access to read Vision AI Events.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.indexEndpointAdmin",
      "RoleTitle": "VisionAI Warehouse IndexEndpoint Administrator",
      "Description": "Full control of all Media Warehouse resources and permissions.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.indexEndpointEditor",
      "RoleTitle": "VisionAI Warehouse IndexEndpoint Editor",
      "Description": "Read, write and create access to all index endpoints level resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.indexEndpointViewer",
      "RoleTitle": "VisionAI Warehouse IndexEndpoint Viewer",
      "Description": "Grants access to view all index endpoint resources and be able to search on them. (ReadOnly)\n",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.indexEndpointWriter",
      "RoleTitle": "VisionAI Warehouse IndexEndpoint Writer",
      "Description": "Grants access to perform update, delete, deploy and undeploy operations on the index endpoint.\n",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.operatorEditor",
      "RoleTitle": "Vision AI Operator Editor",
      "Description": "Access to read and write Vision AI Operators.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.operatorViewer",
      "RoleTitle": "Vision AI Operator Viewer",
      "Description": "Access to read Vision AI Operators.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.packetReceiver",
      "RoleTitle": "Vision AI Packet Receiver",
      "Description": "Access to read Vision AI Series.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.packetSender",
      "RoleTitle": "Vision AI Packet Sender",
      "Description": "Packet sender to the series.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.processorEditor",
      "RoleTitle": "Vision AI Processor Editor",
      "Description": "Access to read and write Vision AI Processors.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.processorViewer",
      "RoleTitle": "Vision AI Processor Viewer",
      "Description": "Access to read Vision AI Processors.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.retailcatalogEditor",
      "RoleTitle": "Vision AI RetailCatalog Editor",
      "Description": "Access to read and write Vision AI RetailCatalogs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.retailcatalogViewer",
      "RoleTitle": "Vision AI RetailCatalog Viewer",
      "Description": "Access to read Vision AI RetailCatalogs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.retailendpointEditor",
      "RoleTitle": "Vision AI RetailEndpoint Editor",
      "Description": "Access to read and write Vision AI RetailEndpoints.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.retailendpointViewer",
      "RoleTitle": "Vision AI RetailEndpoint Viewer",
      "Description": "Access to read Vision AI RetailEndpoints.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.seriesEditor",
      "RoleTitle": "Vision AI Series Editor",
      "Description": "Access to read and write Vision AI Series.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.seriesViewer",
      "RoleTitle": "Vision AI Series Viewer",
      "Description": "Access to read Vision AI Series.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.serviceAgent",
      "RoleTitle": "Cloud Vision AI Service Agent",
      "Description": "Grants Cloud Vision AI service account permissions to manage resources in consumer project",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.streamEditor",
      "RoleTitle": "Vision AI Stream Editor",
      "Description": "Access to read and write Vision AI Streams.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.streamViewer",
      "RoleTitle": "Vision AI Stream Viewer",
      "Description": "Access to read Vision AI Streams.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.uiStreamEditor",
      "RoleTitle": "Vision AI UI Stream Editor",
      "Description": "Access to read & write Vision AI UI Streams.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.uiStreamViewer",
      "RoleTitle": "Vision AI UI Stream Viewer",
      "Description": "Access to read Vision AI UI Streams.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visionai.viewer",
      "RoleTitle": "VisionAI Viewer",
      "Description": "View access to Vision AI all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visualinspection.editor",
      "RoleTitle": "Visual Inspection AI Solution Editor",
      "Description": "Read and write access to all Visual Inspection AI resources except visualinspection.locations.reportUsageMetrics",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visualinspection.serviceAgent",
      "RoleTitle": "Visual Inspection AI Service Agent",
      "Description": "Grants Visual Inspection AI Service Agent admin roles for accessing/exporting training data, pushing containers artifacts to GCR and ArtifactsRegistry, and Vertex AI for storing data and running training jobs.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visualinspection.usageMetricsReporter",
      "RoleTitle": "Visual Inspection AI Usage Metrics Reporter",
      "Description": "ReportUsageMetric access to Visual Inspection AI Service",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/visualinspection.viewer",
      "RoleTitle": "Visual Inspection AI Viewer",
      "Description": "Read access to Visual Inspection AI resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vmmigration.admin",
      "RoleTitle": "VM Migration Administrator",
      "Description": "Ability to view and edit all VM Migration objects",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vmmigration.serviceAgent",
      "RoleTitle": "VM Migration Service Agent",
      "Description": "Grants VM Migration Service Account access to create migrated VMs, disks and images in the user project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vmmigration.viewer",
      "RoleTitle": "VM Migration Viewer",
      "Description": "Ability to view all VM Migration objects",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vmwareengine.serviceAgent",
      "RoleTitle": "VMware Engine Service Agent",
      "Description": "Gives permission to manage network configuration, such as establishing network peering, necessary for GCVE",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vmwareengine.vmwareengineAdmin",
      "RoleTitle": "VMware Engine Service Admin",
      "Description": "Admin has full access to VMware Engine Service",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vmwareengine.vmwareengineViewer",
      "RoleTitle": "VMware Engine Service Viewer",
      "Description": "Viewer has read-only access to VMware Engine Service",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vpcaccess.admin",
      "RoleTitle": "Serverless VPC Access Admin",
      "Description": "Full access to all Serverless VPC Access resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vpcaccess.serviceAgent",
      "RoleTitle": "Serverless VPC Access Service Agent",
      "Description": "Can create and manage resources to support serverless application to connect to virtual private cloud.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vpcaccess.user",
      "RoleTitle": "Serverless VPC Access User",
      "Description": "User of Serverless VPC Access connectors",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/vpcaccess.viewer",
      "RoleTitle": "Serverless VPC Access Viewer",
      "Description": "Viewer of all Serverless VPC Access resources",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/websecurityscanner.serviceAgent",
      "RoleTitle": "Cloud Web Security Scanner Service Agent",
      "Description": "Gives the Cloud Web Security Scanner service account access to compute engine details and app engine details.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workflows.admin",
      "RoleTitle": "Workflows Admin",
      "Description": "Full access to workflows and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workflows.editor",
      "RoleTitle": "Workflows Editor",
      "Description": "Read and write access to workflows and related resources, including development and debugging of workflows.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workflows.invoker",
      "RoleTitle": "Workflows Invoker",
      "Description": "Access to execute workflows and manage the executions using the API. Does not provide access to develop and debug workflows.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workflows.serviceAgent",
      "RoleTitle": "Cloud Workflows Service Agent",
      "Description": "Gives Cloud Workflows service account access to managed resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workflows.viewer",
      "RoleTitle": "Workflows Viewer",
      "Description": "Read-only access to workflows and related resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadcertificate.admin",
      "RoleTitle": "Workload Certificate Admin",
      "Description": "Full access to all Workload Certificate API resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadcertificate.registrationAdmin",
      "RoleTitle": "Workload Certificate Registration Admin",
      "Description": "Full access to WorkloadRegistration resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadcertificate.registrationViewer",
      "RoleTitle": "Workload Certificate Registration Viewer",
      "Description": "Read-only access to WorkloadRegistration resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadcertificate.serviceAgent",
      "RoleTitle": "Workload Certificate Service Agent",
      "Description": "Gives the Workload Certificate service agent access to Cloud Platform resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadcertificate.viewer",
      "RoleTitle": "Workload Certificate Viewer",
      "Description": "Read-only access to Workload Certificate all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.admin",
      "RoleTitle": "Workload Manager Admin",
      "Description": "Full access to Workload Manager all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.deploymentAdmin",
      "RoleTitle": "Workload Manager Deployment Admin",
      "Description": "Full access to Workload Manager deployment resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.deploymentViewer",
      "RoleTitle": "Workload Manager Deployment Viewer",
      "Description": "Read-only access to Workload Manager deployment resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.evaluationAdmin",
      "RoleTitle": "Workload Manager Evaluation Admin",
      "Description": "Full access to Workload Manager evaluation resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.evaluationViewer",
      "RoleTitle": "Workload Manager Evaluation Viewer",
      "Description": "Read-only access to Workload Manager evaluation resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.evaluationWorker",
      "RoleTitle": "Workload Manager Evaluation Worker",
      "Description": "The role used by Workload Manager application runners to read and update workloads.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.insightWriter",
      "RoleTitle": "Workload Manager Insights Writer",
      "Description": "The role used to write data to WLM data warehouse.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.serviceAgent",
      "RoleTitle": "Workload Manager Service Agent",
      "Description": "Gives Workload Manager Service Agent access to CAI export functions and Cloud Monitoring.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.viewer",
      "RoleTitle": "Workload Manager Viewer",
      "Description": "Read-only access to Workload Manager all resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.worker",
      "RoleTitle": "Workload Manager Worker",
      "Description": "The role used by Workload Manager application runners to read and update workloads.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workloadmanager.workloadViewer",
      "RoleTitle": "Workload Manager Workload Viewer",
      "Description": "The role used to view the workload related data.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workstations.admin",
      "RoleTitle": "Cloud Workstations Admin",
      "Description": "Grants CRUD access to all Workstation resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workstations.networkAdmin",
      "RoleTitle": "Cloud Workstations Network Admin",
      "Description": "Grants ability to connect a Workstation Cluster to a shared VPC network.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workstations.operationViewer",
      "RoleTitle": "Cloud Workstations Operation Viewer",
      "Description": "Grants ability to view Cloud Workstations API operations.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workstations.serviceAgent",
      "RoleTitle": "Workstations Service Agent",
      "Description": "Grants the Workstations Service Account access to manage resources in consumer project.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workstations.user",
      "RoleTitle": "Cloud Workstations User",
      "Description": "Grants runtime access to Workstation resources.",
      "IncludedPermissions": []
    },
    {
      "RoleName": "roles/workstations.workstationCreator",
      "RoleTitle": "Cloud Workstations Creator",
      "Description": "Grants ability to create Workstation resources.",
      "IncludedPermissions": []
    }
  ]
}